from typing import Any, Callable, ClassVar, List, Tuple, Union

from typing import overload
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtNetwork
import PySide2.QtPrintSupport
import PySide2.QtWebChannel
import PySide2.QtWebEngineCore
import PySide2.QtWidgets
import shiboken2
import typing
T = typing.TypeVar('T')

class QWebEngineCertificateError(shiboken2.Object):
    class Error:
        CertificateAuthorityInvalid: ClassVar[QWebEngineCertificateError.Error] = ...
        CertificateCommonNameInvalid: ClassVar[QWebEngineCertificateError.Error] = ...
        CertificateContainsErrors: ClassVar[QWebEngineCertificateError.Error] = ...
        CertificateDateInvalid: ClassVar[QWebEngineCertificateError.Error] = ...
        CertificateInvalid: ClassVar[QWebEngineCertificateError.Error] = ...
        CertificateKnownInterceptionBlocked: ClassVar[QWebEngineCertificateError.Error] = ...
        CertificateNameConstraintViolation: ClassVar[QWebEngineCertificateError.Error] = ...
        CertificateNoRevocationMechanism: ClassVar[QWebEngineCertificateError.Error] = ...
        CertificateNonUniqueName: ClassVar[QWebEngineCertificateError.Error] = ...
        CertificateRevoked: ClassVar[QWebEngineCertificateError.Error] = ...
        CertificateTransparencyRequired: ClassVar[QWebEngineCertificateError.Error] = ...
        CertificateUnableToCheckRevocation: ClassVar[QWebEngineCertificateError.Error] = ...
        CertificateValidityTooLong: ClassVar[QWebEngineCertificateError.Error] = ...
        CertificateWeakKey: ClassVar[QWebEngineCertificateError.Error] = ...
        CertificateWeakSignatureAlgorithm: ClassVar[QWebEngineCertificateError.Error] = ...
        SslPinnedKeyNotInCertificateChain: ClassVar[QWebEngineCertificateError.Error] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineCertificateError.Error: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineCertificateError.Error: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineCertificateError.Error: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineCertificateError.Error: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineCertificateError.Error: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineCertificateError.Error: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineCertificateError.Error: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineCertificateError.Error: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineCertificateError.Error: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineCertificateError.Error: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineCertificateError.Error: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineCertificateError.Error: ...
    CertificateAuthorityInvalid: ClassVar[QWebEngineCertificateError.Error] = ...
    CertificateCommonNameInvalid: ClassVar[QWebEngineCertificateError.Error] = ...
    CertificateContainsErrors: ClassVar[QWebEngineCertificateError.Error] = ...
    CertificateDateInvalid: ClassVar[QWebEngineCertificateError.Error] = ...
    CertificateInvalid: ClassVar[QWebEngineCertificateError.Error] = ...
    CertificateKnownInterceptionBlocked: ClassVar[QWebEngineCertificateError.Error] = ...
    CertificateNameConstraintViolation: ClassVar[QWebEngineCertificateError.Error] = ...
    CertificateNoRevocationMechanism: ClassVar[QWebEngineCertificateError.Error] = ...
    CertificateNonUniqueName: ClassVar[QWebEngineCertificateError.Error] = ...
    CertificateRevoked: ClassVar[QWebEngineCertificateError.Error] = ...
    CertificateTransparencyRequired: ClassVar[QWebEngineCertificateError.Error] = ...
    CertificateUnableToCheckRevocation: ClassVar[QWebEngineCertificateError.Error] = ...
    CertificateValidityTooLong: ClassVar[QWebEngineCertificateError.Error] = ...
    CertificateWeakKey: ClassVar[QWebEngineCertificateError.Error] = ...
    CertificateWeakSignatureAlgorithm: ClassVar[QWebEngineCertificateError.Error] = ...
    SslPinnedKeyNotInCertificateChain: ClassVar[QWebEngineCertificateError.Error] = ...
    @overload
    def __init__(self, error: int, url: PySide2.QtCore.QUrl, overridable: bool, errorDescription: str) -> None: ...
    @overload
    def __init__(self, other: QWebEngineCertificateError) -> None: ...
    def answered(self) -> bool: ...
    def certificateChain(self) -> typing.List[PySide2.QtNetwork.QSslCertificate]: ...
    def defer(self) -> None: ...
    def deferred(self) -> bool: ...
    def error(self) -> QWebEngineCertificateError.Error: ...
    def errorDescription(self) -> str: ...
    def ignoreCertificateError(self) -> None: ...
    def isOverridable(self) -> bool: ...
    def rejectCertificate(self) -> None: ...
    def url(self) -> PySide2.QtCore.QUrl: ...

class QWebEngineContextMenuData(shiboken2.Object):
    class EditFlag:
        CanCopy: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
        CanCut: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
        CanDelete: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
        CanEditRichly: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
        CanPaste: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
        CanRedo: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
        CanSelectAll: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
        CanTranslate: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
        CanUndo: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.EditFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QWebEngineContextMenuData.EditFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.EditFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.EditFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.EditFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.EditFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.EditFlags: ...

    class EditFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.EditFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QWebEngineContextMenuData.EditFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.EditFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.EditFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.EditFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.EditFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.EditFlags: ...

    class MediaFlag:
        MediaCanPrint: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
        MediaCanRotate: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
        MediaCanSave: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
        MediaCanToggleControls: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
        MediaControls: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
        MediaHasAudio: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
        MediaInError: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
        MediaLoop: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
        MediaMuted: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
        MediaPaused: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QWebEngineContextMenuData.MediaFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaFlags: ...

    class MediaFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QWebEngineContextMenuData.MediaFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaFlags: ...

    class MediaType:
        MediaTypeAudio: ClassVar[QWebEngineContextMenuData.MediaType] = ...
        MediaTypeCanvas: ClassVar[QWebEngineContextMenuData.MediaType] = ...
        MediaTypeFile: ClassVar[QWebEngineContextMenuData.MediaType] = ...
        MediaTypeImage: ClassVar[QWebEngineContextMenuData.MediaType] = ...
        MediaTypeNone: ClassVar[QWebEngineContextMenuData.MediaType] = ...
        MediaTypePlugin: ClassVar[QWebEngineContextMenuData.MediaType] = ...
        MediaTypeVideo: ClassVar[QWebEngineContextMenuData.MediaType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaType: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaType: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaType: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaType: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaType: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineContextMenuData.MediaType: ...
    CanCopy: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
    CanCut: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
    CanDelete: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
    CanEditRichly: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
    CanPaste: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
    CanRedo: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
    CanSelectAll: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
    CanTranslate: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
    CanUndo: ClassVar[QWebEngineContextMenuData.EditFlag] = ...
    MediaCanPrint: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
    MediaCanRotate: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
    MediaCanSave: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
    MediaCanToggleControls: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
    MediaControls: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
    MediaHasAudio: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
    MediaInError: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
    MediaLoop: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
    MediaMuted: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
    MediaPaused: ClassVar[QWebEngineContextMenuData.MediaFlag] = ...
    MediaTypeAudio: ClassVar[QWebEngineContextMenuData.MediaType] = ...
    MediaTypeCanvas: ClassVar[QWebEngineContextMenuData.MediaType] = ...
    MediaTypeFile: ClassVar[QWebEngineContextMenuData.MediaType] = ...
    MediaTypeImage: ClassVar[QWebEngineContextMenuData.MediaType] = ...
    MediaTypeNone: ClassVar[QWebEngineContextMenuData.MediaType] = ...
    MediaTypePlugin: ClassVar[QWebEngineContextMenuData.MediaType] = ...
    MediaTypeVideo: ClassVar[QWebEngineContextMenuData.MediaType] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QWebEngineContextMenuData) -> None: ...
    def editFlags(self) -> typing.Union[QWebEngineContextMenuData.EditFlags,QWebEngineContextMenuData.EditFlag]: ...
    def isContentEditable(self) -> bool: ...
    def isValid(self) -> bool: ...
    def linkText(self) -> str: ...
    def linkUrl(self) -> PySide2.QtCore.QUrl: ...
    def mediaFlags(self) -> typing.Union[QWebEngineContextMenuData.MediaFlags,QWebEngineContextMenuData.MediaFlag]: ...
    def mediaType(self) -> QWebEngineContextMenuData.MediaType: ...
    def mediaUrl(self) -> PySide2.QtCore.QUrl: ...
    def misspelledWord(self) -> str: ...
    def position(self) -> PySide2.QtCore.QPoint: ...
    def selectedText(self) -> str: ...
    def spellCheckerSuggestions(self) -> typing.List[str]: ...
    def __copy__(self) -> None: ...

class QWebEngineDownloadItem(PySide2.QtCore.QObject):
    class DownloadInterruptReason:
        FileAccessDenied: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        FileBlocked: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        FileFailed: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        FileHashMismatch: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        FileNameTooLong: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        FileNoSpace: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        FileSecurityCheckFailed: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        FileTooLarge: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        FileTooShort: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        FileTransientError: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        FileVirusInfected: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        NetworkDisconnected: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        NetworkFailed: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        NetworkInvalidRequest: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        NetworkServerDown: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        NetworkTimeout: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        NoReason: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        ServerBadContent: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        ServerCertProblem: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        ServerFailed: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        ServerForbidden: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        ServerUnauthorized: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        ServerUnreachable: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        UserCanceled: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadInterruptReason: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadInterruptReason: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadInterruptReason: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadInterruptReason: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadInterruptReason: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadInterruptReason: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadInterruptReason: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadInterruptReason: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadInterruptReason: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadInterruptReason: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadInterruptReason: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadInterruptReason: ...

    class DownloadState:
        DownloadCancelled: ClassVar[QWebEngineDownloadItem.DownloadState] = ...
        DownloadCompleted: ClassVar[QWebEngineDownloadItem.DownloadState] = ...
        DownloadInProgress: ClassVar[QWebEngineDownloadItem.DownloadState] = ...
        DownloadInterrupted: ClassVar[QWebEngineDownloadItem.DownloadState] = ...
        DownloadRequested: ClassVar[QWebEngineDownloadItem.DownloadState] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadState: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadState: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadState: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadState: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadState: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadState: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadState: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadState: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadState: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadState: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadState: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadState: ...

    class DownloadType:
        Attachment: ClassVar[QWebEngineDownloadItem.DownloadType] = ...
        DownloadAttribute: ClassVar[QWebEngineDownloadItem.DownloadType] = ...
        SavePage: ClassVar[QWebEngineDownloadItem.DownloadType] = ...
        UserRequested: ClassVar[QWebEngineDownloadItem.DownloadType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadType: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadType: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadType: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadType: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadType: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.DownloadType: ...

    class SavePageFormat:
        CompleteHtmlSaveFormat: ClassVar[QWebEngineDownloadItem.SavePageFormat] = ...
        MimeHtmlSaveFormat: ClassVar[QWebEngineDownloadItem.SavePageFormat] = ...
        SingleHtmlSaveFormat: ClassVar[QWebEngineDownloadItem.SavePageFormat] = ...
        UnknownSaveFormat: ClassVar[QWebEngineDownloadItem.SavePageFormat] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.SavePageFormat: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.SavePageFormat: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.SavePageFormat: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.SavePageFormat: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.SavePageFormat: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.SavePageFormat: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.SavePageFormat: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.SavePageFormat: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.SavePageFormat: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.SavePageFormat: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.SavePageFormat: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineDownloadItem.SavePageFormat: ...
    Attachment: ClassVar[QWebEngineDownloadItem.DownloadType] = ...
    CompleteHtmlSaveFormat: ClassVar[QWebEngineDownloadItem.SavePageFormat] = ...
    DownloadAttribute: ClassVar[QWebEngineDownloadItem.DownloadType] = ...
    DownloadCancelled: ClassVar[QWebEngineDownloadItem.DownloadState] = ...
    DownloadCompleted: ClassVar[QWebEngineDownloadItem.DownloadState] = ...
    DownloadInProgress: ClassVar[QWebEngineDownloadItem.DownloadState] = ...
    DownloadInterrupted: ClassVar[QWebEngineDownloadItem.DownloadState] = ...
    DownloadRequested: ClassVar[QWebEngineDownloadItem.DownloadState] = ...
    FileAccessDenied: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    FileBlocked: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    FileFailed: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    FileHashMismatch: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    FileNameTooLong: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    FileNoSpace: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    FileSecurityCheckFailed: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    FileTooLarge: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    FileTooShort: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    FileTransientError: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    FileVirusInfected: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    MimeHtmlSaveFormat: ClassVar[QWebEngineDownloadItem.SavePageFormat] = ...
    NetworkDisconnected: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    NetworkFailed: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    NetworkInvalidRequest: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    NetworkServerDown: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    NetworkTimeout: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    NoReason: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    SavePage: ClassVar[QWebEngineDownloadItem.DownloadType] = ...
    ServerBadContent: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    ServerCertProblem: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    ServerFailed: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    ServerForbidden: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    ServerUnauthorized: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    ServerUnreachable: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    SingleHtmlSaveFormat: ClassVar[QWebEngineDownloadItem.SavePageFormat] = ...
    UnknownSaveFormat: ClassVar[QWebEngineDownloadItem.SavePageFormat] = ...
    UserCanceled: ClassVar[QWebEngineDownloadItem.DownloadInterruptReason] = ...
    UserRequested: ClassVar[QWebEngineDownloadItem.DownloadType] = ...
    downloadProgress: ClassVar[PySide2.QtCore.Signal] = ...
    finished: ClassVar[PySide2.QtCore.Signal] = ...
    isPausedChanged: ClassVar[PySide2.QtCore.Signal] = ...
    stateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def accept(self) -> None: ...
    def cancel(self) -> None: ...
    def downloadDirectory(self) -> str: ...
    def downloadFileName(self) -> str: ...
    def id(self) -> int: ...
    def interruptReason(self) -> QWebEngineDownloadItem.DownloadInterruptReason: ...
    def interruptReasonString(self) -> str: ...
    def isFinished(self) -> bool: ...
    def isPaused(self) -> bool: ...
    def isSavePageDownload(self) -> bool: ...
    def mimeType(self) -> str: ...
    def page(self) -> QWebEnginePage: ...
    def path(self) -> str: ...
    def pause(self) -> None: ...
    def receivedBytes(self) -> int: ...
    def resume(self) -> None: ...
    def savePageFormat(self) -> QWebEngineDownloadItem.SavePageFormat: ...
    def setDownloadDirectory(self, directory: str) -> None: ...
    def setDownloadFileName(self, fileName: str) -> None: ...
    def setPath(self, path: str) -> None: ...
    def setSavePageFormat(self, format: QWebEngineDownloadItem.SavePageFormat) -> None: ...
    def state(self) -> QWebEngineDownloadItem.DownloadState: ...
    def suggestedFileName(self) -> str: ...
    def totalBytes(self) -> int: ...
    def type(self) -> QWebEngineDownloadItem.DownloadType: ...
    def url(self) -> PySide2.QtCore.QUrl: ...

class QWebEngineFullScreenRequest(shiboken2.Object):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def accept(self) -> None: ...
    def origin(self) -> PySide2.QtCore.QUrl: ...
    def reject(self) -> None: ...
    def toggleOn(self) -> bool: ...

class QWebEngineHistory(shiboken2.Object):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def back(self) -> None: ...
    def backItem(self) -> QWebEngineHistoryItem: ...
    def backItems(self, maxItems: int) -> typing.List[QWebEngineHistoryItem]: ...
    def canGoBack(self) -> bool: ...
    def canGoForward(self) -> bool: ...
    def clear(self) -> None: ...
    def count(self) -> int: ...
    def currentItem(self) -> QWebEngineHistoryItem: ...
    def currentItemIndex(self) -> int: ...
    def forward(self) -> None: ...
    def forwardItem(self) -> QWebEngineHistoryItem: ...
    def forwardItems(self, maxItems: int) -> typing.List[QWebEngineHistoryItem]: ...
    def goToItem(self, item: QWebEngineHistoryItem) -> None: ...
    def itemAt(self, i: int) -> QWebEngineHistoryItem: ...
    def items(self) -> typing.List[QWebEngineHistoryItem]: ...
    def __lshift__(self, stream: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, stream: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QWebEngineHistoryItem(shiboken2.Object):
    def __init__(self, other: QWebEngineHistoryItem) -> None: ...
    def iconUrl(self) -> PySide2.QtCore.QUrl: ...
    def isValid(self) -> bool: ...
    def lastVisited(self) -> PySide2.QtCore.QDateTime: ...
    def originalUrl(self) -> PySide2.QtCore.QUrl: ...
    def swap(self, other: QWebEngineHistoryItem) -> None: ...
    def title(self) -> str: ...
    def url(self) -> PySide2.QtCore.QUrl: ...
    def __copy__(self) -> None: ...

class QWebEnginePage(PySide2.QtCore.QObject):
    class Feature:
        DesktopAudioVideoCapture: ClassVar[QWebEnginePage.Feature] = ...
        DesktopVideoCapture: ClassVar[QWebEnginePage.Feature] = ...
        Geolocation: ClassVar[QWebEnginePage.Feature] = ...
        MediaAudioCapture: ClassVar[QWebEnginePage.Feature] = ...
        MediaAudioVideoCapture: ClassVar[QWebEnginePage.Feature] = ...
        MediaVideoCapture: ClassVar[QWebEnginePage.Feature] = ...
        MouseLock: ClassVar[QWebEnginePage.Feature] = ...
        Notifications: ClassVar[QWebEnginePage.Feature] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEnginePage.Feature: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEnginePage.Feature: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEnginePage.Feature: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEnginePage.Feature: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEnginePage.Feature: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEnginePage.Feature: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEnginePage.Feature: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEnginePage.Feature: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEnginePage.Feature: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEnginePage.Feature: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEnginePage.Feature: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEnginePage.Feature: ...

    class FileSelectionMode:
        FileSelectOpen: ClassVar[QWebEnginePage.FileSelectionMode] = ...
        FileSelectOpenMultiple: ClassVar[QWebEnginePage.FileSelectionMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEnginePage.FileSelectionMode: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEnginePage.FileSelectionMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEnginePage.FileSelectionMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEnginePage.FileSelectionMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEnginePage.FileSelectionMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEnginePage.FileSelectionMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEnginePage.FileSelectionMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEnginePage.FileSelectionMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEnginePage.FileSelectionMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEnginePage.FileSelectionMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEnginePage.FileSelectionMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEnginePage.FileSelectionMode: ...

    class FindFlag:
        FindBackward: ClassVar[QWebEnginePage.FindFlag] = ...
        FindCaseSensitively: ClassVar[QWebEnginePage.FindFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEnginePage.FindFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QWebEnginePage.FindFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEnginePage.FindFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEnginePage.FindFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEnginePage.FindFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEnginePage.FindFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEnginePage.FindFlags: ...

    class FindFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEnginePage.FindFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QWebEnginePage.FindFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEnginePage.FindFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEnginePage.FindFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEnginePage.FindFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEnginePage.FindFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEnginePage.FindFlags: ...

    class JavaScriptConsoleMessageLevel:
        ErrorMessageLevel: ClassVar[QWebEnginePage.JavaScriptConsoleMessageLevel] = ...
        InfoMessageLevel: ClassVar[QWebEnginePage.JavaScriptConsoleMessageLevel] = ...
        WarningMessageLevel: ClassVar[QWebEnginePage.JavaScriptConsoleMessageLevel] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEnginePage.JavaScriptConsoleMessageLevel: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEnginePage.JavaScriptConsoleMessageLevel: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEnginePage.JavaScriptConsoleMessageLevel: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEnginePage.JavaScriptConsoleMessageLevel: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEnginePage.JavaScriptConsoleMessageLevel: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEnginePage.JavaScriptConsoleMessageLevel: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEnginePage.JavaScriptConsoleMessageLevel: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEnginePage.JavaScriptConsoleMessageLevel: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEnginePage.JavaScriptConsoleMessageLevel: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEnginePage.JavaScriptConsoleMessageLevel: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEnginePage.JavaScriptConsoleMessageLevel: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEnginePage.JavaScriptConsoleMessageLevel: ...

    class LifecycleState:
        Active: ClassVar[QWebEnginePage.LifecycleState] = ...
        Discarded: ClassVar[QWebEnginePage.LifecycleState] = ...
        Frozen: ClassVar[QWebEnginePage.LifecycleState] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEnginePage.LifecycleState: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEnginePage.LifecycleState: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEnginePage.LifecycleState: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEnginePage.LifecycleState: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEnginePage.LifecycleState: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEnginePage.LifecycleState: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEnginePage.LifecycleState: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEnginePage.LifecycleState: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEnginePage.LifecycleState: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEnginePage.LifecycleState: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEnginePage.LifecycleState: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEnginePage.LifecycleState: ...

    class NavigationType:
        NavigationTypeBackForward: ClassVar[QWebEnginePage.NavigationType] = ...
        NavigationTypeFormSubmitted: ClassVar[QWebEnginePage.NavigationType] = ...
        NavigationTypeLinkClicked: ClassVar[QWebEnginePage.NavigationType] = ...
        NavigationTypeOther: ClassVar[QWebEnginePage.NavigationType] = ...
        NavigationTypeRedirect: ClassVar[QWebEnginePage.NavigationType] = ...
        NavigationTypeReload: ClassVar[QWebEnginePage.NavigationType] = ...
        NavigationTypeTyped: ClassVar[QWebEnginePage.NavigationType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEnginePage.NavigationType: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEnginePage.NavigationType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEnginePage.NavigationType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEnginePage.NavigationType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEnginePage.NavigationType: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEnginePage.NavigationType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEnginePage.NavigationType: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEnginePage.NavigationType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEnginePage.NavigationType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEnginePage.NavigationType: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEnginePage.NavigationType: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEnginePage.NavigationType: ...

    class PermissionPolicy:
        PermissionDeniedByUser: ClassVar[QWebEnginePage.PermissionPolicy] = ...
        PermissionGrantedByUser: ClassVar[QWebEnginePage.PermissionPolicy] = ...
        PermissionUnknown: ClassVar[QWebEnginePage.PermissionPolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEnginePage.PermissionPolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEnginePage.PermissionPolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEnginePage.PermissionPolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEnginePage.PermissionPolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEnginePage.PermissionPolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEnginePage.PermissionPolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEnginePage.PermissionPolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEnginePage.PermissionPolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEnginePage.PermissionPolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEnginePage.PermissionPolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEnginePage.PermissionPolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEnginePage.PermissionPolicy: ...

    class RenderProcessTerminationStatus:
        AbnormalTerminationStatus: ClassVar[QWebEnginePage.RenderProcessTerminationStatus] = ...
        CrashedTerminationStatus: ClassVar[QWebEnginePage.RenderProcessTerminationStatus] = ...
        KilledTerminationStatus: ClassVar[QWebEnginePage.RenderProcessTerminationStatus] = ...
        NormalTerminationStatus: ClassVar[QWebEnginePage.RenderProcessTerminationStatus] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEnginePage.RenderProcessTerminationStatus: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEnginePage.RenderProcessTerminationStatus: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEnginePage.RenderProcessTerminationStatus: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEnginePage.RenderProcessTerminationStatus: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEnginePage.RenderProcessTerminationStatus: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEnginePage.RenderProcessTerminationStatus: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEnginePage.RenderProcessTerminationStatus: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEnginePage.RenderProcessTerminationStatus: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEnginePage.RenderProcessTerminationStatus: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEnginePage.RenderProcessTerminationStatus: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEnginePage.RenderProcessTerminationStatus: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEnginePage.RenderProcessTerminationStatus: ...

    class WebAction:
        AlignCenter: ClassVar[QWebEnginePage.WebAction] = ...
        AlignJustified: ClassVar[QWebEnginePage.WebAction] = ...
        AlignLeft: ClassVar[QWebEnginePage.WebAction] = ...
        AlignRight: ClassVar[QWebEnginePage.WebAction] = ...
        Back: ClassVar[QWebEnginePage.WebAction] = ...
        Copy: ClassVar[QWebEnginePage.WebAction] = ...
        CopyImageToClipboard: ClassVar[QWebEnginePage.WebAction] = ...
        CopyImageUrlToClipboard: ClassVar[QWebEnginePage.WebAction] = ...
        CopyLinkToClipboard: ClassVar[QWebEnginePage.WebAction] = ...
        CopyMediaUrlToClipboard: ClassVar[QWebEnginePage.WebAction] = ...
        Cut: ClassVar[QWebEnginePage.WebAction] = ...
        DownloadImageToDisk: ClassVar[QWebEnginePage.WebAction] = ...
        DownloadLinkToDisk: ClassVar[QWebEnginePage.WebAction] = ...
        DownloadMediaToDisk: ClassVar[QWebEnginePage.WebAction] = ...
        ExitFullScreen: ClassVar[QWebEnginePage.WebAction] = ...
        Forward: ClassVar[QWebEnginePage.WebAction] = ...
        Indent: ClassVar[QWebEnginePage.WebAction] = ...
        InsertOrderedList: ClassVar[QWebEnginePage.WebAction] = ...
        InsertUnorderedList: ClassVar[QWebEnginePage.WebAction] = ...
        InspectElement: ClassVar[QWebEnginePage.WebAction] = ...
        NoWebAction: ClassVar[QWebEnginePage.WebAction] = ...
        OpenLinkInNewBackgroundTab: ClassVar[QWebEnginePage.WebAction] = ...
        OpenLinkInNewTab: ClassVar[QWebEnginePage.WebAction] = ...
        OpenLinkInNewWindow: ClassVar[QWebEnginePage.WebAction] = ...
        OpenLinkInThisWindow: ClassVar[QWebEnginePage.WebAction] = ...
        Outdent: ClassVar[QWebEnginePage.WebAction] = ...
        Paste: ClassVar[QWebEnginePage.WebAction] = ...
        PasteAndMatchStyle: ClassVar[QWebEnginePage.WebAction] = ...
        Redo: ClassVar[QWebEnginePage.WebAction] = ...
        Reload: ClassVar[QWebEnginePage.WebAction] = ...
        ReloadAndBypassCache: ClassVar[QWebEnginePage.WebAction] = ...
        RequestClose: ClassVar[QWebEnginePage.WebAction] = ...
        SavePage: ClassVar[QWebEnginePage.WebAction] = ...
        SelectAll: ClassVar[QWebEnginePage.WebAction] = ...
        Stop: ClassVar[QWebEnginePage.WebAction] = ...
        ToggleBold: ClassVar[QWebEnginePage.WebAction] = ...
        ToggleItalic: ClassVar[QWebEnginePage.WebAction] = ...
        ToggleMediaControls: ClassVar[QWebEnginePage.WebAction] = ...
        ToggleMediaLoop: ClassVar[QWebEnginePage.WebAction] = ...
        ToggleMediaMute: ClassVar[QWebEnginePage.WebAction] = ...
        ToggleMediaPlayPause: ClassVar[QWebEnginePage.WebAction] = ...
        ToggleStrikethrough: ClassVar[QWebEnginePage.WebAction] = ...
        ToggleUnderline: ClassVar[QWebEnginePage.WebAction] = ...
        Undo: ClassVar[QWebEnginePage.WebAction] = ...
        Unselect: ClassVar[QWebEnginePage.WebAction] = ...
        ViewSource: ClassVar[QWebEnginePage.WebAction] = ...
        WebActionCount: ClassVar[QWebEnginePage.WebAction] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEnginePage.WebAction: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEnginePage.WebAction: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEnginePage.WebAction: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEnginePage.WebAction: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEnginePage.WebAction: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEnginePage.WebAction: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEnginePage.WebAction: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEnginePage.WebAction: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEnginePage.WebAction: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEnginePage.WebAction: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEnginePage.WebAction: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEnginePage.WebAction: ...

    class WebWindowType:
        WebBrowserBackgroundTab: ClassVar[QWebEnginePage.WebWindowType] = ...
        WebBrowserTab: ClassVar[QWebEnginePage.WebWindowType] = ...
        WebBrowserWindow: ClassVar[QWebEnginePage.WebWindowType] = ...
        WebDialog: ClassVar[QWebEnginePage.WebWindowType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEnginePage.WebWindowType: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEnginePage.WebWindowType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEnginePage.WebWindowType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEnginePage.WebWindowType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEnginePage.WebWindowType: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEnginePage.WebWindowType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEnginePage.WebWindowType: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEnginePage.WebWindowType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEnginePage.WebWindowType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEnginePage.WebWindowType: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEnginePage.WebWindowType: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEnginePage.WebWindowType: ...
    AbnormalTerminationStatus: ClassVar[QWebEnginePage.RenderProcessTerminationStatus] = ...
    AlignCenter: ClassVar[QWebEnginePage.WebAction] = ...
    AlignJustified: ClassVar[QWebEnginePage.WebAction] = ...
    AlignLeft: ClassVar[QWebEnginePage.WebAction] = ...
    AlignRight: ClassVar[QWebEnginePage.WebAction] = ...
    Back: ClassVar[QWebEnginePage.WebAction] = ...
    Copy: ClassVar[QWebEnginePage.WebAction] = ...
    CopyImageToClipboard: ClassVar[QWebEnginePage.WebAction] = ...
    CopyImageUrlToClipboard: ClassVar[QWebEnginePage.WebAction] = ...
    CopyLinkToClipboard: ClassVar[QWebEnginePage.WebAction] = ...
    CopyMediaUrlToClipboard: ClassVar[QWebEnginePage.WebAction] = ...
    CrashedTerminationStatus: ClassVar[QWebEnginePage.RenderProcessTerminationStatus] = ...
    Cut: ClassVar[QWebEnginePage.WebAction] = ...
    DesktopAudioVideoCapture: ClassVar[QWebEnginePage.Feature] = ...
    DesktopVideoCapture: ClassVar[QWebEnginePage.Feature] = ...
    DownloadImageToDisk: ClassVar[QWebEnginePage.WebAction] = ...
    DownloadLinkToDisk: ClassVar[QWebEnginePage.WebAction] = ...
    DownloadMediaToDisk: ClassVar[QWebEnginePage.WebAction] = ...
    ErrorMessageLevel: ClassVar[QWebEnginePage.JavaScriptConsoleMessageLevel] = ...
    ExitFullScreen: ClassVar[QWebEnginePage.WebAction] = ...
    FileSelectOpen: ClassVar[QWebEnginePage.FileSelectionMode] = ...
    FileSelectOpenMultiple: ClassVar[QWebEnginePage.FileSelectionMode] = ...
    FindBackward: ClassVar[QWebEnginePage.FindFlag] = ...
    FindCaseSensitively: ClassVar[QWebEnginePage.FindFlag] = ...
    Forward: ClassVar[QWebEnginePage.WebAction] = ...
    Geolocation: ClassVar[QWebEnginePage.Feature] = ...
    Indent: ClassVar[QWebEnginePage.WebAction] = ...
    InfoMessageLevel: ClassVar[QWebEnginePage.JavaScriptConsoleMessageLevel] = ...
    InsertOrderedList: ClassVar[QWebEnginePage.WebAction] = ...
    InsertUnorderedList: ClassVar[QWebEnginePage.WebAction] = ...
    InspectElement: ClassVar[QWebEnginePage.WebAction] = ...
    KilledTerminationStatus: ClassVar[QWebEnginePage.RenderProcessTerminationStatus] = ...
    MediaAudioCapture: ClassVar[QWebEnginePage.Feature] = ...
    MediaAudioVideoCapture: ClassVar[QWebEnginePage.Feature] = ...
    MediaVideoCapture: ClassVar[QWebEnginePage.Feature] = ...
    MouseLock: ClassVar[QWebEnginePage.Feature] = ...
    NavigationTypeBackForward: ClassVar[QWebEnginePage.NavigationType] = ...
    NavigationTypeFormSubmitted: ClassVar[QWebEnginePage.NavigationType] = ...
    NavigationTypeLinkClicked: ClassVar[QWebEnginePage.NavigationType] = ...
    NavigationTypeOther: ClassVar[QWebEnginePage.NavigationType] = ...
    NavigationTypeRedirect: ClassVar[QWebEnginePage.NavigationType] = ...
    NavigationTypeReload: ClassVar[QWebEnginePage.NavigationType] = ...
    NavigationTypeTyped: ClassVar[QWebEnginePage.NavigationType] = ...
    NoWebAction: ClassVar[QWebEnginePage.WebAction] = ...
    NormalTerminationStatus: ClassVar[QWebEnginePage.RenderProcessTerminationStatus] = ...
    Notifications: ClassVar[QWebEnginePage.Feature] = ...
    OpenLinkInNewBackgroundTab: ClassVar[QWebEnginePage.WebAction] = ...
    OpenLinkInNewTab: ClassVar[QWebEnginePage.WebAction] = ...
    OpenLinkInNewWindow: ClassVar[QWebEnginePage.WebAction] = ...
    OpenLinkInThisWindow: ClassVar[QWebEnginePage.WebAction] = ...
    Outdent: ClassVar[QWebEnginePage.WebAction] = ...
    Paste: ClassVar[QWebEnginePage.WebAction] = ...
    PasteAndMatchStyle: ClassVar[QWebEnginePage.WebAction] = ...
    PermissionDeniedByUser: ClassVar[QWebEnginePage.PermissionPolicy] = ...
    PermissionGrantedByUser: ClassVar[QWebEnginePage.PermissionPolicy] = ...
    PermissionUnknown: ClassVar[QWebEnginePage.PermissionPolicy] = ...
    Redo: ClassVar[QWebEnginePage.WebAction] = ...
    Reload: ClassVar[QWebEnginePage.WebAction] = ...
    ReloadAndBypassCache: ClassVar[QWebEnginePage.WebAction] = ...
    RequestClose: ClassVar[QWebEnginePage.WebAction] = ...
    SavePage: ClassVar[QWebEnginePage.WebAction] = ...
    SelectAll: ClassVar[QWebEnginePage.WebAction] = ...
    Stop: ClassVar[QWebEnginePage.WebAction] = ...
    ToggleBold: ClassVar[QWebEnginePage.WebAction] = ...
    ToggleItalic: ClassVar[QWebEnginePage.WebAction] = ...
    ToggleMediaControls: ClassVar[QWebEnginePage.WebAction] = ...
    ToggleMediaLoop: ClassVar[QWebEnginePage.WebAction] = ...
    ToggleMediaMute: ClassVar[QWebEnginePage.WebAction] = ...
    ToggleMediaPlayPause: ClassVar[QWebEnginePage.WebAction] = ...
    ToggleStrikethrough: ClassVar[QWebEnginePage.WebAction] = ...
    ToggleUnderline: ClassVar[QWebEnginePage.WebAction] = ...
    Undo: ClassVar[QWebEnginePage.WebAction] = ...
    Unselect: ClassVar[QWebEnginePage.WebAction] = ...
    ViewSource: ClassVar[QWebEnginePage.WebAction] = ...
    WarningMessageLevel: ClassVar[QWebEnginePage.JavaScriptConsoleMessageLevel] = ...
    WebActionCount: ClassVar[QWebEnginePage.WebAction] = ...
    WebBrowserBackgroundTab: ClassVar[QWebEnginePage.WebWindowType] = ...
    WebBrowserTab: ClassVar[QWebEnginePage.WebWindowType] = ...
    WebBrowserWindow: ClassVar[QWebEnginePage.WebWindowType] = ...
    WebDialog: ClassVar[QWebEnginePage.WebWindowType] = ...
    audioMutedChanged: ClassVar[PySide2.QtCore.Signal] = ...
    authenticationRequired: ClassVar[PySide2.QtCore.Signal] = ...
    contentsSizeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    featurePermissionRequestCanceled: ClassVar[PySide2.QtCore.Signal] = ...
    featurePermissionRequested: ClassVar[PySide2.QtCore.Signal] = ...
    findTextFinished: ClassVar[PySide2.QtCore.Signal] = ...
    fullScreenRequested: ClassVar[PySide2.QtCore.Signal] = ...
    geometryChangeRequested: ClassVar[PySide2.QtCore.Signal] = ...
    iconChanged: ClassVar[PySide2.QtCore.Signal] = ...
    iconUrlChanged: ClassVar[PySide2.QtCore.Signal] = ...
    lifecycleStateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    linkHovered: ClassVar[PySide2.QtCore.Signal] = ...
    loadFinished: ClassVar[PySide2.QtCore.Signal] = ...
    loadProgress: ClassVar[PySide2.QtCore.Signal] = ...
    loadStarted: ClassVar[PySide2.QtCore.Signal] = ...
    pdfPrintingFinished: ClassVar[PySide2.QtCore.Signal] = ...
    printRequested: ClassVar[PySide2.QtCore.Signal] = ...
    proxyAuthenticationRequired: ClassVar[PySide2.QtCore.Signal] = ...
    quotaRequested: ClassVar[PySide2.QtCore.Signal] = ...
    recentlyAudibleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    recommendedStateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    registerProtocolHandlerRequested: ClassVar[PySide2.QtCore.Signal] = ...
    renderProcessPidChanged: ClassVar[PySide2.QtCore.Signal] = ...
    renderProcessTerminated: ClassVar[PySide2.QtCore.Signal] = ...
    scrollPositionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    selectClientCertificate: ClassVar[PySide2.QtCore.Signal] = ...
    selectionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    titleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    urlChanged: ClassVar[PySide2.QtCore.Signal] = ...
    visibleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    windowCloseRequested: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., audioMuted: bool = ..., audioMutedChanged: typing.Callable = ..., authenticationRequired: typing.Callable = ..., backgroundColor: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor] = ..., contentsSize: PySide2.QtCore.QSizeF = ..., contentsSizeChanged: typing.Callable = ..., destroyed: typing.Callable = ..., featurePermissionRequestCanceled: typing.Callable = ..., featurePermissionRequested: typing.Callable = ..., findTextFinished: typing.Callable = ..., fullScreenRequested: typing.Callable = ..., geometryChangeRequested: typing.Callable = ..., hasSelection: bool = ..., icon: PySide2.QtGui.QIcon = ..., iconChanged: typing.Callable = ..., iconUrl: PySide2.QtCore.QUrl = ..., iconUrlChanged: typing.Callable = ..., lifecycleState: QWebEnginePage.LifecycleState = ..., lifecycleStateChanged: typing.Callable = ..., linkHovered: typing.Callable = ..., loadFinished: typing.Callable = ..., loadProgress: typing.Callable = ..., loadStarted: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., pdfPrintingFinished: typing.Callable = ..., printRequested: typing.Callable = ..., proxyAuthenticationRequired: typing.Callable = ..., quotaRequested: typing.Callable = ..., recentlyAudible: bool = ..., recentlyAudibleChanged: typing.Callable = ..., recommendedState: QWebEnginePage.LifecycleState = ..., recommendedStateChanged: typing.Callable = ..., registerProtocolHandlerRequested: typing.Callable = ..., renderProcessPid: int = ..., renderProcessPidChanged: typing.Callable = ..., renderProcessTerminated: typing.Callable = ..., requestedUrl: PySide2.QtCore.QUrl = ..., scrollPosition: PySide2.QtCore.QPointF = ..., scrollPositionChanged: typing.Callable = ..., selectClientCertificate: typing.Callable = ..., selectedText: str = ..., selectionChanged: typing.Callable = ..., title: str = ..., titleChanged: typing.Callable = ..., url: PySide2.QtCore.QUrl = ..., urlChanged: typing.Callable = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., windowCloseRequested: typing.Callable = ..., zoomFactor: float = ...) -> None: ...
    @overload
    def __init__(self, profile: QWebEngineProfile, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., audioMuted: bool = ..., audioMutedChanged: typing.Callable = ..., authenticationRequired: typing.Callable = ..., backgroundColor: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor] = ..., contentsSize: PySide2.QtCore.QSizeF = ..., contentsSizeChanged: typing.Callable = ..., destroyed: typing.Callable = ..., featurePermissionRequestCanceled: typing.Callable = ..., featurePermissionRequested: typing.Callable = ..., findTextFinished: typing.Callable = ..., fullScreenRequested: typing.Callable = ..., geometryChangeRequested: typing.Callable = ..., hasSelection: bool = ..., icon: PySide2.QtGui.QIcon = ..., iconChanged: typing.Callable = ..., iconUrl: PySide2.QtCore.QUrl = ..., iconUrlChanged: typing.Callable = ..., lifecycleState: QWebEnginePage.LifecycleState = ..., lifecycleStateChanged: typing.Callable = ..., linkHovered: typing.Callable = ..., loadFinished: typing.Callable = ..., loadProgress: typing.Callable = ..., loadStarted: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., pdfPrintingFinished: typing.Callable = ..., printRequested: typing.Callable = ..., proxyAuthenticationRequired: typing.Callable = ..., quotaRequested: typing.Callable = ..., recentlyAudible: bool = ..., recentlyAudibleChanged: typing.Callable = ..., recommendedState: QWebEnginePage.LifecycleState = ..., recommendedStateChanged: typing.Callable = ..., registerProtocolHandlerRequested: typing.Callable = ..., renderProcessPid: int = ..., renderProcessPidChanged: typing.Callable = ..., renderProcessTerminated: typing.Callable = ..., requestedUrl: PySide2.QtCore.QUrl = ..., scrollPosition: PySide2.QtCore.QPointF = ..., scrollPositionChanged: typing.Callable = ..., selectClientCertificate: typing.Callable = ..., selectedText: str = ..., selectionChanged: typing.Callable = ..., title: str = ..., titleChanged: typing.Callable = ..., url: PySide2.QtCore.QUrl = ..., urlChanged: typing.Callable = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., windowCloseRequested: typing.Callable = ..., zoomFactor: float = ...) -> None: ...
    def acceptNavigationRequest(self, url: PySide2.QtCore.QUrl, type: QWebEnginePage.NavigationType, isMainFrame: bool) -> bool: ...
    def action(self, action: QWebEnginePage.WebAction) -> PySide2.QtWidgets.QAction: ...
    def backgroundColor(self) -> PySide2.QtGui.QColor: ...
    def certificateError(self, certificateError: QWebEngineCertificateError) -> bool: ...
    def chooseFiles(self, mode: QWebEnginePage.FileSelectionMode, oldFiles: typing.Sequence[str], acceptedMimeTypes: typing.Sequence[str]) -> typing.List[str]: ...
    def contentsSize(self) -> PySide2.QtCore.QSizeF: ...
    def contextMenuData(self) -> QWebEngineContextMenuData: ...
    def createStandardContextMenu(self) -> PySide2.QtWidgets.QMenu: ...
    def createWindow(self, type: QWebEnginePage.WebWindowType) -> QWebEnginePage: ...
    def devToolsPage(self) -> QWebEnginePage: ...
    def download(self, url: PySide2.QtCore.QUrl, filename: str = ...) -> None: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    @overload
    def findText(self, arg__1: str, arg__2: typing.Union[QWebEnginePage.FindFlags,QWebEnginePage.FindFlag], arg__3: object) -> None: ...
    @overload
    def findText(self, subString: str, options: typing.Union[QWebEnginePage.FindFlags,QWebEnginePage.FindFlag] = ...) -> None: ...
    def hasSelection(self) -> bool: ...
    def history(self) -> QWebEngineHistory: ...
    def icon(self) -> PySide2.QtGui.QIcon: ...
    def iconUrl(self) -> PySide2.QtCore.QUrl: ...
    def inspectedPage(self) -> QWebEnginePage: ...
    def isAudioMuted(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def javaScriptAlert(self, securityOrigin: PySide2.QtCore.QUrl, msg: str) -> None: ...
    def javaScriptConfirm(self, securityOrigin: PySide2.QtCore.QUrl, msg: str) -> bool: ...
    def javaScriptConsoleMessage(self, level: QWebEnginePage.JavaScriptConsoleMessageLevel, message: str, lineNumber: int, sourceID: str) -> None: ...
    def javaScriptPrompt(self, securityOrigin: PySide2.QtCore.QUrl, msg: str, defaultValue: str) -> typing.Tuple[bool,str]: ...
    def lifecycleState(self) -> QWebEnginePage.LifecycleState: ...
    @overload
    def load(self, request: PySide2.QtWebEngineCore.QWebEngineHttpRequest) -> None: ...
    @overload
    def load(self, url: PySide2.QtCore.QUrl) -> None: ...
    def print(self, arg__1: PySide2.QtPrintSupport.QPrinter, arg__2: object) -> None: ...
    @overload
    def printToPdf(self, arg__1: object, arg__2: PySide2.QtGui.QPageLayout) -> None: ...
    @overload
    def printToPdf(self, filePath: str, layout: PySide2.QtGui.QPageLayout = ...) -> None: ...
    def profile(self) -> QWebEngineProfile: ...
    def recentlyAudible(self) -> bool: ...
    def recommendedState(self) -> QWebEnginePage.LifecycleState: ...
    def renderProcessPid(self) -> int: ...
    def replaceMisspelledWord(self, replacement: str) -> None: ...
    def requestedUrl(self) -> PySide2.QtCore.QUrl: ...
    @overload
    def runJavaScript(self, arg__1: str, arg__2: int, arg__3: object) -> None: ...
    @overload
    def runJavaScript(self, scriptSource: str) -> None: ...
    @overload
    def runJavaScript(self, scriptSource: str, worldId: int) -> None: ...
    def save(self, filePath: str, format: QWebEngineDownloadItem.SavePageFormat = ...) -> None: ...
    def scripts(self) -> QWebEngineScriptCollection: ...
    def scrollPosition(self) -> PySide2.QtCore.QPointF: ...
    def selectedText(self) -> str: ...
    def setAudioMuted(self, muted: bool) -> None: ...
    def setBackgroundColor(self, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setContent(self, data: typing.Union[PySide2.QtCore.QByteArray,bytes], mimeType: str = ..., baseUrl: PySide2.QtCore.QUrl = ...) -> None: ...
    def setDevToolsPage(self, page: QWebEnginePage) -> None: ...
    def setFeaturePermission(self, securityOrigin: PySide2.QtCore.QUrl, feature: QWebEnginePage.Feature, policy: QWebEnginePage.PermissionPolicy) -> None: ...
    def setHtml(self, html: str, baseUrl: PySide2.QtCore.QUrl = ...) -> None: ...
    def setInspectedPage(self, page: QWebEnginePage) -> None: ...
    def setLifecycleState(self, state: QWebEnginePage.LifecycleState) -> None: ...
    def setUrl(self, url: PySide2.QtCore.QUrl) -> None: ...
    def setUrlRequestInterceptor(self, interceptor: PySide2.QtWebEngineCore.QWebEngineUrlRequestInterceptor) -> None: ...
    def setView(self, view: PySide2.QtWidgets.QWidget) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    @overload
    def setWebChannel(self, arg__1: PySide2.QtWebChannel.QWebChannel) -> None: ...
    @overload
    def setWebChannel(self, arg__1: PySide2.QtWebChannel.QWebChannel, worldId: int) -> None: ...
    def setZoomFactor(self, factor: float) -> None: ...
    def settings(self) -> QWebEngineSettings: ...
    def title(self) -> str: ...
    def toHtml(self, arg__1: object) -> None: ...
    def toPlainText(self, arg__1: object) -> None: ...
    def triggerAction(self, action: QWebEnginePage.WebAction, checked: bool = ...) -> None: ...
    def url(self) -> PySide2.QtCore.QUrl: ...
    def view(self) -> PySide2.QtWidgets.QWidget: ...
    def webChannel(self) -> PySide2.QtWebChannel.QWebChannel: ...
    def zoomFactor(self) -> float: ...

class QWebEngineProfile(PySide2.QtCore.QObject):
    class HttpCacheType:
        DiskHttpCache: ClassVar[QWebEngineProfile.HttpCacheType] = ...
        MemoryHttpCache: ClassVar[QWebEngineProfile.HttpCacheType] = ...
        NoCache: ClassVar[QWebEngineProfile.HttpCacheType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineProfile.HttpCacheType: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineProfile.HttpCacheType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineProfile.HttpCacheType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineProfile.HttpCacheType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineProfile.HttpCacheType: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineProfile.HttpCacheType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineProfile.HttpCacheType: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineProfile.HttpCacheType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineProfile.HttpCacheType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineProfile.HttpCacheType: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineProfile.HttpCacheType: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineProfile.HttpCacheType: ...

    class PersistentCookiesPolicy:
        AllowPersistentCookies: ClassVar[QWebEngineProfile.PersistentCookiesPolicy] = ...
        ForcePersistentCookies: ClassVar[QWebEngineProfile.PersistentCookiesPolicy] = ...
        NoPersistentCookies: ClassVar[QWebEngineProfile.PersistentCookiesPolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineProfile.PersistentCookiesPolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineProfile.PersistentCookiesPolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineProfile.PersistentCookiesPolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineProfile.PersistentCookiesPolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineProfile.PersistentCookiesPolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineProfile.PersistentCookiesPolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineProfile.PersistentCookiesPolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineProfile.PersistentCookiesPolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineProfile.PersistentCookiesPolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineProfile.PersistentCookiesPolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineProfile.PersistentCookiesPolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineProfile.PersistentCookiesPolicy: ...
    AllowPersistentCookies: ClassVar[QWebEngineProfile.PersistentCookiesPolicy] = ...
    DiskHttpCache: ClassVar[QWebEngineProfile.HttpCacheType] = ...
    ForcePersistentCookies: ClassVar[QWebEngineProfile.PersistentCookiesPolicy] = ...
    MemoryHttpCache: ClassVar[QWebEngineProfile.HttpCacheType] = ...
    NoCache: ClassVar[QWebEngineProfile.HttpCacheType] = ...
    NoPersistentCookies: ClassVar[QWebEngineProfile.PersistentCookiesPolicy] = ...
    downloadRequested: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, name: str, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., downloadRequested: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., downloadRequested: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def cachePath(self) -> str: ...
    def clearAllVisitedLinks(self) -> None: ...
    def clearHttpCache(self) -> None: ...
    def clearVisitedLinks(self, urls: typing.Sequence[PySide2.QtCore.QUrl]) -> None: ...
    def cookieStore(self) -> PySide2.QtWebEngineCore.QWebEngineCookieStore: ...
    @classmethod
    def defaultProfile(cls) -> QWebEngineProfile: ...
    def downloadPath(self) -> str: ...
    def httpAcceptLanguage(self) -> str: ...
    def httpCacheMaximumSize(self) -> int: ...
    def httpCacheType(self) -> QWebEngineProfile.HttpCacheType: ...
    def httpUserAgent(self) -> str: ...
    def installUrlSchemeHandler(self, scheme: typing.Union[PySide2.QtCore.QByteArray,bytes], arg__2: PySide2.QtWebEngineCore.QWebEngineUrlSchemeHandler) -> None: ...
    def isOffTheRecord(self) -> bool: ...
    def isSpellCheckEnabled(self) -> bool: ...
    def isUsedForGlobalCertificateVerification(self) -> bool: ...
    def persistentCookiesPolicy(self) -> QWebEngineProfile.PersistentCookiesPolicy: ...
    def persistentStoragePath(self) -> str: ...
    def removeAllUrlSchemeHandlers(self) -> None: ...
    def removeUrlScheme(self, scheme: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def removeUrlSchemeHandler(self, arg__1: PySide2.QtWebEngineCore.QWebEngineUrlSchemeHandler) -> None: ...
    def scripts(self) -> QWebEngineScriptCollection: ...
    def setCachePath(self, path: str) -> None: ...
    def setDownloadPath(self, path: str) -> None: ...
    def setHttpAcceptLanguage(self, httpAcceptLanguage: str) -> None: ...
    def setHttpCacheMaximumSize(self, maxSize: int) -> None: ...
    def setHttpCacheType(self, arg__1: QWebEngineProfile.HttpCacheType) -> None: ...
    def setHttpUserAgent(self, userAgent: str) -> None: ...
    def setPersistentCookiesPolicy(self, arg__1: QWebEngineProfile.PersistentCookiesPolicy) -> None: ...
    def setPersistentStoragePath(self, path: str) -> None: ...
    def setRequestInterceptor(self, interceptor: PySide2.QtWebEngineCore.QWebEngineUrlRequestInterceptor) -> None: ...
    def setSpellCheckEnabled(self, enabled: bool) -> None: ...
    def setSpellCheckLanguages(self, languages: typing.Sequence[str]) -> None: ...
    def setUrlRequestInterceptor(self, interceptor: PySide2.QtWebEngineCore.QWebEngineUrlRequestInterceptor) -> None: ...
    def setUseForGlobalCertificateVerification(self, enabled: bool = ...) -> None: ...
    def settings(self) -> QWebEngineSettings: ...
    def spellCheckLanguages(self) -> typing.List[str]: ...
    def storageName(self) -> str: ...
    def urlSchemeHandler(self, arg__1: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> PySide2.QtWebEngineCore.QWebEngineUrlSchemeHandler: ...
    def visitedLinksContainsUrl(self, url: PySide2.QtCore.QUrl) -> bool: ...

class QWebEngineScript(shiboken2.Object):
    class InjectionPoint:
        Deferred: ClassVar[QWebEngineScript.InjectionPoint] = ...
        DocumentCreation: ClassVar[QWebEngineScript.InjectionPoint] = ...
        DocumentReady: ClassVar[QWebEngineScript.InjectionPoint] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineScript.InjectionPoint: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineScript.InjectionPoint: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineScript.InjectionPoint: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineScript.InjectionPoint: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineScript.InjectionPoint: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineScript.InjectionPoint: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineScript.InjectionPoint: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineScript.InjectionPoint: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineScript.InjectionPoint: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineScript.InjectionPoint: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineScript.InjectionPoint: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineScript.InjectionPoint: ...

    class ScriptWorldId:
        ApplicationWorld: ClassVar[QWebEngineScript.ScriptWorldId] = ...
        MainWorld: ClassVar[QWebEngineScript.ScriptWorldId] = ...
        UserWorld: ClassVar[QWebEngineScript.ScriptWorldId] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineScript.ScriptWorldId: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineScript.ScriptWorldId: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineScript.ScriptWorldId: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineScript.ScriptWorldId: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineScript.ScriptWorldId: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineScript.ScriptWorldId: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineScript.ScriptWorldId: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineScript.ScriptWorldId: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineScript.ScriptWorldId: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineScript.ScriptWorldId: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineScript.ScriptWorldId: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineScript.ScriptWorldId: ...
    ApplicationWorld: ClassVar[QWebEngineScript.ScriptWorldId] = ...
    Deferred: ClassVar[QWebEngineScript.InjectionPoint] = ...
    DocumentCreation: ClassVar[QWebEngineScript.InjectionPoint] = ...
    DocumentReady: ClassVar[QWebEngineScript.InjectionPoint] = ...
    MainWorld: ClassVar[QWebEngineScript.ScriptWorldId] = ...
    UserWorld: ClassVar[QWebEngineScript.ScriptWorldId] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QWebEngineScript) -> None: ...
    def injectionPoint(self) -> QWebEngineScript.InjectionPoint: ...
    def isNull(self) -> bool: ...
    def name(self) -> str: ...
    def runsOnSubFrames(self) -> bool: ...
    def setInjectionPoint(self, arg__1: QWebEngineScript.InjectionPoint) -> None: ...
    def setName(self, arg__1: str) -> None: ...
    def setRunsOnSubFrames(self, on: bool) -> None: ...
    def setSourceCode(self, arg__1: str) -> None: ...
    def setWorldId(self, arg__1: int) -> None: ...
    def sourceCode(self) -> str: ...
    def swap(self, other: QWebEngineScript) -> None: ...
    def worldId(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QWebEngineScriptCollection(shiboken2.Object):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def clear(self) -> None: ...
    def contains(self, value: QWebEngineScript) -> bool: ...
    def count(self) -> int: ...
    def findScript(self, name: str) -> QWebEngineScript: ...
    def findScripts(self, name: str) -> typing.List[QWebEngineScript]: ...
    @overload
    def insert(self, arg__1: QWebEngineScript) -> None: ...
    @overload
    def insert(self, list: typing.Sequence[QWebEngineScript]) -> None: ...
    def isEmpty(self) -> bool: ...
    def remove(self, arg__1: QWebEngineScript) -> bool: ...
    def size(self) -> int: ...
    def toList(self) -> typing.List[QWebEngineScript]: ...

class QWebEngineSettings(shiboken2.Object):
    class FontFamily:
        CursiveFont: ClassVar[QWebEngineSettings.FontFamily] = ...
        FantasyFont: ClassVar[QWebEngineSettings.FontFamily] = ...
        FixedFont: ClassVar[QWebEngineSettings.FontFamily] = ...
        PictographFont: ClassVar[QWebEngineSettings.FontFamily] = ...
        SansSerifFont: ClassVar[QWebEngineSettings.FontFamily] = ...
        SerifFont: ClassVar[QWebEngineSettings.FontFamily] = ...
        StandardFont: ClassVar[QWebEngineSettings.FontFamily] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontFamily: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontFamily: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontFamily: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontFamily: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontFamily: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontFamily: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontFamily: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontFamily: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontFamily: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontFamily: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontFamily: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontFamily: ...

    class FontSize:
        DefaultFixedFontSize: ClassVar[QWebEngineSettings.FontSize] = ...
        DefaultFontSize: ClassVar[QWebEngineSettings.FontSize] = ...
        MinimumFontSize: ClassVar[QWebEngineSettings.FontSize] = ...
        MinimumLogicalFontSize: ClassVar[QWebEngineSettings.FontSize] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontSize: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontSize: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontSize: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontSize: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontSize: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontSize: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontSize: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontSize: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontSize: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontSize: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontSize: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineSettings.FontSize: ...

    class UnknownUrlSchemePolicy:
        AllowAllUnknownUrlSchemes: ClassVar[QWebEngineSettings.UnknownUrlSchemePolicy] = ...
        AllowUnknownUrlSchemesFromUserInteraction: ClassVar[QWebEngineSettings.UnknownUrlSchemePolicy] = ...
        DisallowUnknownUrlSchemes: ClassVar[QWebEngineSettings.UnknownUrlSchemePolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineSettings.UnknownUrlSchemePolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineSettings.UnknownUrlSchemePolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineSettings.UnknownUrlSchemePolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineSettings.UnknownUrlSchemePolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineSettings.UnknownUrlSchemePolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineSettings.UnknownUrlSchemePolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineSettings.UnknownUrlSchemePolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineSettings.UnknownUrlSchemePolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineSettings.UnknownUrlSchemePolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineSettings.UnknownUrlSchemePolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineSettings.UnknownUrlSchemePolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineSettings.UnknownUrlSchemePolicy: ...

    class WebAttribute:
        Accelerated2dCanvasEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        AllowGeolocationOnInsecureOrigins: ClassVar[QWebEngineSettings.WebAttribute] = ...
        AllowRunningInsecureContent: ClassVar[QWebEngineSettings.WebAttribute] = ...
        AllowWindowActivationFromJavaScript: ClassVar[QWebEngineSettings.WebAttribute] = ...
        AutoLoadIconsForPage: ClassVar[QWebEngineSettings.WebAttribute] = ...
        AutoLoadImages: ClassVar[QWebEngineSettings.WebAttribute] = ...
        DnsPrefetchEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        ErrorPageEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        FocusOnNavigationEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        FullScreenSupportEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        HyperlinkAuditingEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        JavascriptCanAccessClipboard: ClassVar[QWebEngineSettings.WebAttribute] = ...
        JavascriptCanOpenWindows: ClassVar[QWebEngineSettings.WebAttribute] = ...
        JavascriptCanPaste: ClassVar[QWebEngineSettings.WebAttribute] = ...
        JavascriptEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        LinksIncludedInFocusChain: ClassVar[QWebEngineSettings.WebAttribute] = ...
        LocalContentCanAccessFileUrls: ClassVar[QWebEngineSettings.WebAttribute] = ...
        LocalContentCanAccessRemoteUrls: ClassVar[QWebEngineSettings.WebAttribute] = ...
        LocalStorageEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        PdfViewerEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        PlaybackRequiresUserGesture: ClassVar[QWebEngineSettings.WebAttribute] = ...
        PluginsEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        PrintElementBackgrounds: ClassVar[QWebEngineSettings.WebAttribute] = ...
        ScreenCaptureEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        ScrollAnimatorEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        ShowScrollBars: ClassVar[QWebEngineSettings.WebAttribute] = ...
        SpatialNavigationEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        TouchIconsEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        WebGLEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        WebRTCPublicInterfacesOnly: ClassVar[QWebEngineSettings.WebAttribute] = ...
        XSSAuditingEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineSettings.WebAttribute: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineSettings.WebAttribute: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineSettings.WebAttribute: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineSettings.WebAttribute: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineSettings.WebAttribute: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineSettings.WebAttribute: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineSettings.WebAttribute: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineSettings.WebAttribute: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineSettings.WebAttribute: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineSettings.WebAttribute: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineSettings.WebAttribute: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineSettings.WebAttribute: ...
    Accelerated2dCanvasEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    AllowAllUnknownUrlSchemes: ClassVar[QWebEngineSettings.UnknownUrlSchemePolicy] = ...
    AllowGeolocationOnInsecureOrigins: ClassVar[QWebEngineSettings.WebAttribute] = ...
    AllowRunningInsecureContent: ClassVar[QWebEngineSettings.WebAttribute] = ...
    AllowUnknownUrlSchemesFromUserInteraction: ClassVar[QWebEngineSettings.UnknownUrlSchemePolicy] = ...
    AllowWindowActivationFromJavaScript: ClassVar[QWebEngineSettings.WebAttribute] = ...
    AutoLoadIconsForPage: ClassVar[QWebEngineSettings.WebAttribute] = ...
    AutoLoadImages: ClassVar[QWebEngineSettings.WebAttribute] = ...
    CursiveFont: ClassVar[QWebEngineSettings.FontFamily] = ...
    DefaultFixedFontSize: ClassVar[QWebEngineSettings.FontSize] = ...
    DefaultFontSize: ClassVar[QWebEngineSettings.FontSize] = ...
    DisallowUnknownUrlSchemes: ClassVar[QWebEngineSettings.UnknownUrlSchemePolicy] = ...
    DnsPrefetchEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    ErrorPageEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    FantasyFont: ClassVar[QWebEngineSettings.FontFamily] = ...
    FixedFont: ClassVar[QWebEngineSettings.FontFamily] = ...
    FocusOnNavigationEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    FullScreenSupportEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    HyperlinkAuditingEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    JavascriptCanAccessClipboard: ClassVar[QWebEngineSettings.WebAttribute] = ...
    JavascriptCanOpenWindows: ClassVar[QWebEngineSettings.WebAttribute] = ...
    JavascriptCanPaste: ClassVar[QWebEngineSettings.WebAttribute] = ...
    JavascriptEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    LinksIncludedInFocusChain: ClassVar[QWebEngineSettings.WebAttribute] = ...
    LocalContentCanAccessFileUrls: ClassVar[QWebEngineSettings.WebAttribute] = ...
    LocalContentCanAccessRemoteUrls: ClassVar[QWebEngineSettings.WebAttribute] = ...
    LocalStorageEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    MinimumFontSize: ClassVar[QWebEngineSettings.FontSize] = ...
    MinimumLogicalFontSize: ClassVar[QWebEngineSettings.FontSize] = ...
    PdfViewerEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    PictographFont: ClassVar[QWebEngineSettings.FontFamily] = ...
    PlaybackRequiresUserGesture: ClassVar[QWebEngineSettings.WebAttribute] = ...
    PluginsEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    PrintElementBackgrounds: ClassVar[QWebEngineSettings.WebAttribute] = ...
    SansSerifFont: ClassVar[QWebEngineSettings.FontFamily] = ...
    ScreenCaptureEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    ScrollAnimatorEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    SerifFont: ClassVar[QWebEngineSettings.FontFamily] = ...
    ShowScrollBars: ClassVar[QWebEngineSettings.WebAttribute] = ...
    SpatialNavigationEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    StandardFont: ClassVar[QWebEngineSettings.FontFamily] = ...
    TouchIconsEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    WebGLEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    WebRTCPublicInterfacesOnly: ClassVar[QWebEngineSettings.WebAttribute] = ...
    XSSAuditingEnabled: ClassVar[QWebEngineSettings.WebAttribute] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def defaultSettings(cls) -> QWebEngineSettings: ...
    def defaultTextEncoding(self) -> str: ...
    def fontFamily(self, which: QWebEngineSettings.FontFamily) -> str: ...
    def fontSize(self, type: QWebEngineSettings.FontSize) -> int: ...
    @classmethod
    def globalSettings(cls) -> QWebEngineSettings: ...
    def resetAttribute(self, attr: QWebEngineSettings.WebAttribute) -> None: ...
    def resetFontFamily(self, which: QWebEngineSettings.FontFamily) -> None: ...
    def resetFontSize(self, type: QWebEngineSettings.FontSize) -> None: ...
    def resetUnknownUrlSchemePolicy(self) -> None: ...
    def setAttribute(self, attr: QWebEngineSettings.WebAttribute, on: bool) -> None: ...
    def setDefaultTextEncoding(self, encoding: str) -> None: ...
    def setFontFamily(self, which: QWebEngineSettings.FontFamily, family: str) -> None: ...
    def setFontSize(self, type: QWebEngineSettings.FontSize, size: int) -> None: ...
    def setUnknownUrlSchemePolicy(self, policy: QWebEngineSettings.UnknownUrlSchemePolicy) -> None: ...
    def testAttribute(self, attr: QWebEngineSettings.WebAttribute) -> bool: ...
    def unknownUrlSchemePolicy(self) -> QWebEngineSettings.UnknownUrlSchemePolicy: ...

class QWebEngineView(PySide2.QtWidgets.QWidget):
    iconChanged: ClassVar[PySide2.QtCore.Signal] = ...
    iconUrlChanged: ClassVar[PySide2.QtCore.Signal] = ...
    loadFinished: ClassVar[PySide2.QtCore.Signal] = ...
    loadProgress: ClassVar[PySide2.QtCore.Signal] = ...
    loadStarted: ClassVar[PySide2.QtCore.Signal] = ...
    renderProcessTerminated: ClassVar[PySide2.QtCore.Signal] = ...
    selectionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    titleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    urlChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[PySide2.QtWidgets.QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., hasSelection: bool = ..., height: int = ..., icon: PySide2.QtGui.QIcon = ..., iconChanged: typing.Callable = ..., iconUrl: PySide2.QtCore.QUrl = ..., iconUrlChanged: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., loadFinished: typing.Callable = ..., loadProgress: typing.Callable = ..., loadStarted: typing.Callable = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., renderProcessTerminated: typing.Callable = ..., selectedText: str = ..., selectionChanged: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: PySide2.QtWidgets.QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., title: str = ..., titleChanged: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., url: PySide2.QtCore.QUrl = ..., urlChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ..., zoomFactor: float = ...) -> None: ...
    def back(self) -> None: ...
    def closeEvent(self, arg__1: PySide2.QtGui.QCloseEvent) -> None: ...
    def contextMenuEvent(self, arg__1: PySide2.QtGui.QContextMenuEvent) -> None: ...
    def createWindow(self, type: QWebEnginePage.WebWindowType) -> QWebEngineView: ...
    def dragEnterEvent(self, e: PySide2.QtGui.QDragEnterEvent) -> None: ...
    def dragLeaveEvent(self, e: PySide2.QtGui.QDragLeaveEvent) -> None: ...
    def dragMoveEvent(self, e: PySide2.QtGui.QDragMoveEvent) -> None: ...
    def dropEvent(self, e: PySide2.QtGui.QDropEvent) -> None: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    @overload
    def findText(self, arg__1: str, arg__2: typing.Union[QWebEnginePage.FindFlags,QWebEnginePage.FindFlag], arg__3: object) -> None: ...
    @overload
    def findText(self, subString: str, options: typing.Union[QWebEnginePage.FindFlags,QWebEnginePage.FindFlag] = ...) -> None: ...
    def forward(self) -> None: ...
    def hasSelection(self) -> bool: ...
    def hideEvent(self, arg__1: PySide2.QtGui.QHideEvent) -> None: ...
    def history(self) -> QWebEngineHistory: ...
    def icon(self) -> PySide2.QtGui.QIcon: ...
    def iconUrl(self) -> PySide2.QtCore.QUrl: ...
    @overload
    def load(self, request: PySide2.QtWebEngineCore.QWebEngineHttpRequest) -> None: ...
    @overload
    def load(self, url: PySide2.QtCore.QUrl) -> None: ...
    def page(self) -> QWebEnginePage: ...
    def pageAction(self, action: QWebEnginePage.WebAction) -> PySide2.QtWidgets.QAction: ...
    def reload(self) -> None: ...
    def selectedText(self) -> str: ...
    def setContent(self, data: typing.Union[PySide2.QtCore.QByteArray,bytes], mimeType: str = ..., baseUrl: PySide2.QtCore.QUrl = ...) -> None: ...
    def setHtml(self, html: str, baseUrl: PySide2.QtCore.QUrl = ...) -> None: ...
    def setPage(self, page: QWebEnginePage) -> None: ...
    def setUrl(self, url: PySide2.QtCore.QUrl) -> None: ...
    def setZoomFactor(self, factor: float) -> None: ...
    def settings(self) -> QWebEngineSettings: ...
    def showEvent(self, arg__1: PySide2.QtGui.QShowEvent) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def stop(self) -> None: ...
    def title(self) -> str: ...
    def triggerPageAction(self, action: QWebEnginePage.WebAction, checked: bool = ...) -> None: ...
    def url(self) -> PySide2.QtCore.QUrl: ...
    def zoomFactor(self) -> float: ...
