from typing import Any, Callable, ClassVar, Dict, List, Optional, Tuple, Union

from typing import overload
import PySide2.QtCore
import shiboken2
import typing
T = typing.TypeVar('T')

class QAbstractNetworkCache(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def cacheSize(self) -> int: ...
    def clear(self) -> None: ...
    def data(self, url: PySide2.QtCore.QUrl) -> PySide2.QtCore.QIODevice: ...
    def insert(self, device: PySide2.QtCore.QIODevice) -> None: ...
    def metaData(self, url: PySide2.QtCore.QUrl) -> QNetworkCacheMetaData: ...
    def prepare(self, metaData: QNetworkCacheMetaData) -> PySide2.QtCore.QIODevice: ...
    def remove(self, url: PySide2.QtCore.QUrl) -> bool: ...
    def updateMetaData(self, metaData: QNetworkCacheMetaData) -> None: ...

class QAbstractSocket(PySide2.QtCore.QIODevice):
    class BindFlag:
        DefaultForPlatform: ClassVar[QAbstractSocket.BindFlag] = ...
        DontShareAddress: ClassVar[QAbstractSocket.BindFlag] = ...
        ReuseAddressHint: ClassVar[QAbstractSocket.BindFlag] = ...
        ShareAddress: ClassVar[QAbstractSocket.BindFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSocket.BindMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QAbstractSocket.BindFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSocket.BindMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSocket.BindMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSocket.BindMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSocket.BindMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSocket.BindMode: ...

    class BindMode:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSocket.BindMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QAbstractSocket.BindMode: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSocket.BindMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSocket.BindMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSocket.BindMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSocket.BindMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSocket.BindMode: ...

    class NetworkLayerProtocol:
        AnyIPProtocol: ClassVar[QAbstractSocket.NetworkLayerProtocol] = ...
        IPv4Protocol: ClassVar[QAbstractSocket.NetworkLayerProtocol] = ...
        IPv6Protocol: ClassVar[QAbstractSocket.NetworkLayerProtocol] = ...
        UnknownNetworkLayerProtocol: ClassVar[QAbstractSocket.NetworkLayerProtocol] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractSocket.NetworkLayerProtocol: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSocket.NetworkLayerProtocol: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractSocket.NetworkLayerProtocol: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSocket.NetworkLayerProtocol: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractSocket.NetworkLayerProtocol: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSocket.NetworkLayerProtocol: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractSocket.NetworkLayerProtocol: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSocket.NetworkLayerProtocol: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractSocket.NetworkLayerProtocol: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSocket.NetworkLayerProtocol: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractSocket.NetworkLayerProtocol: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSocket.NetworkLayerProtocol: ...

    class PauseMode:
        PauseNever: ClassVar[QAbstractSocket.PauseMode] = ...
        PauseOnSslErrors: ClassVar[QAbstractSocket.PauseMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSocket.PauseModes: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QAbstractSocket.PauseMode: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSocket.PauseModes: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSocket.PauseModes: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSocket.PauseModes: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSocket.PauseModes: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSocket.PauseModes: ...

    class PauseModes:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSocket.PauseModes: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QAbstractSocket.PauseModes: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSocket.PauseModes: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSocket.PauseModes: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSocket.PauseModes: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSocket.PauseModes: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSocket.PauseModes: ...

    class SocketError:
        AddressInUseError: ClassVar[QAbstractSocket.SocketError] = ...
        ConnectionRefusedError: ClassVar[QAbstractSocket.SocketError] = ...
        DatagramTooLargeError: ClassVar[QAbstractSocket.SocketError] = ...
        HostNotFoundError: ClassVar[QAbstractSocket.SocketError] = ...
        NetworkError: ClassVar[QAbstractSocket.SocketError] = ...
        OperationError: ClassVar[QAbstractSocket.SocketError] = ...
        ProxyAuthenticationRequiredError: ClassVar[QAbstractSocket.SocketError] = ...
        ProxyConnectionClosedError: ClassVar[QAbstractSocket.SocketError] = ...
        ProxyConnectionRefusedError: ClassVar[QAbstractSocket.SocketError] = ...
        ProxyConnectionTimeoutError: ClassVar[QAbstractSocket.SocketError] = ...
        ProxyNotFoundError: ClassVar[QAbstractSocket.SocketError] = ...
        ProxyProtocolError: ClassVar[QAbstractSocket.SocketError] = ...
        RemoteHostClosedError: ClassVar[QAbstractSocket.SocketError] = ...
        SocketAccessError: ClassVar[QAbstractSocket.SocketError] = ...
        SocketAddressNotAvailableError: ClassVar[QAbstractSocket.SocketError] = ...
        SocketResourceError: ClassVar[QAbstractSocket.SocketError] = ...
        SocketTimeoutError: ClassVar[QAbstractSocket.SocketError] = ...
        SslHandshakeFailedError: ClassVar[QAbstractSocket.SocketError] = ...
        SslInternalError: ClassVar[QAbstractSocket.SocketError] = ...
        SslInvalidUserDataError: ClassVar[QAbstractSocket.SocketError] = ...
        TemporaryError: ClassVar[QAbstractSocket.SocketError] = ...
        UnfinishedSocketOperationError: ClassVar[QAbstractSocket.SocketError] = ...
        UnknownSocketError: ClassVar[QAbstractSocket.SocketError] = ...
        UnsupportedSocketOperationError: ClassVar[QAbstractSocket.SocketError] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketError: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketError: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketError: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketError: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketError: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketError: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketError: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketError: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketError: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketError: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketError: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketError: ...

    class SocketOption:
        KeepAliveOption: ClassVar[QAbstractSocket.SocketOption] = ...
        LowDelayOption: ClassVar[QAbstractSocket.SocketOption] = ...
        MulticastLoopbackOption: ClassVar[QAbstractSocket.SocketOption] = ...
        MulticastTtlOption: ClassVar[QAbstractSocket.SocketOption] = ...
        PathMtuSocketOption: ClassVar[QAbstractSocket.SocketOption] = ...
        ReceiveBufferSizeSocketOption: ClassVar[QAbstractSocket.SocketOption] = ...
        SendBufferSizeSocketOption: ClassVar[QAbstractSocket.SocketOption] = ...
        TypeOfServiceOption: ClassVar[QAbstractSocket.SocketOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketOption: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketOption: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketOption: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketOption: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketOption: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketOption: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketOption: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketOption: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketOption: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketOption: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketOption: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketOption: ...

    class SocketState:
        BoundState: ClassVar[QAbstractSocket.SocketState] = ...
        ClosingState: ClassVar[QAbstractSocket.SocketState] = ...
        ConnectedState: ClassVar[QAbstractSocket.SocketState] = ...
        ConnectingState: ClassVar[QAbstractSocket.SocketState] = ...
        HostLookupState: ClassVar[QAbstractSocket.SocketState] = ...
        ListeningState: ClassVar[QAbstractSocket.SocketState] = ...
        UnconnectedState: ClassVar[QAbstractSocket.SocketState] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketState: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketState: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketState: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketState: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketState: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketState: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketState: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketState: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketState: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketState: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketState: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketState: ...

    class SocketType:
        SctpSocket: ClassVar[QAbstractSocket.SocketType] = ...
        TcpSocket: ClassVar[QAbstractSocket.SocketType] = ...
        UdpSocket: ClassVar[QAbstractSocket.SocketType] = ...
        UnknownSocketType: ClassVar[QAbstractSocket.SocketType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketType: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketType: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketType: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketType: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketType: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSocket.SocketType: ...
    AddressInUseError: ClassVar[QAbstractSocket.SocketError] = ...
    AnyIPProtocol: ClassVar[QAbstractSocket.NetworkLayerProtocol] = ...
    BoundState: ClassVar[QAbstractSocket.SocketState] = ...
    ClosingState: ClassVar[QAbstractSocket.SocketState] = ...
    ConnectedState: ClassVar[QAbstractSocket.SocketState] = ...
    ConnectingState: ClassVar[QAbstractSocket.SocketState] = ...
    ConnectionRefusedError: ClassVar[QAbstractSocket.SocketError] = ...
    DatagramTooLargeError: ClassVar[QAbstractSocket.SocketError] = ...
    DefaultForPlatform: ClassVar[QAbstractSocket.BindFlag] = ...
    DontShareAddress: ClassVar[QAbstractSocket.BindFlag] = ...
    HostLookupState: ClassVar[QAbstractSocket.SocketState] = ...
    HostNotFoundError: ClassVar[QAbstractSocket.SocketError] = ...
    IPv4Protocol: ClassVar[QAbstractSocket.NetworkLayerProtocol] = ...
    IPv6Protocol: ClassVar[QAbstractSocket.NetworkLayerProtocol] = ...
    KeepAliveOption: ClassVar[QAbstractSocket.SocketOption] = ...
    ListeningState: ClassVar[QAbstractSocket.SocketState] = ...
    LowDelayOption: ClassVar[QAbstractSocket.SocketOption] = ...
    MulticastLoopbackOption: ClassVar[QAbstractSocket.SocketOption] = ...
    MulticastTtlOption: ClassVar[QAbstractSocket.SocketOption] = ...
    NetworkError: ClassVar[QAbstractSocket.SocketError] = ...
    OperationError: ClassVar[QAbstractSocket.SocketError] = ...
    PathMtuSocketOption: ClassVar[QAbstractSocket.SocketOption] = ...
    PauseNever: ClassVar[QAbstractSocket.PauseMode] = ...
    PauseOnSslErrors: ClassVar[QAbstractSocket.PauseMode] = ...
    ProxyAuthenticationRequiredError: ClassVar[QAbstractSocket.SocketError] = ...
    ProxyConnectionClosedError: ClassVar[QAbstractSocket.SocketError] = ...
    ProxyConnectionRefusedError: ClassVar[QAbstractSocket.SocketError] = ...
    ProxyConnectionTimeoutError: ClassVar[QAbstractSocket.SocketError] = ...
    ProxyNotFoundError: ClassVar[QAbstractSocket.SocketError] = ...
    ProxyProtocolError: ClassVar[QAbstractSocket.SocketError] = ...
    ReceiveBufferSizeSocketOption: ClassVar[QAbstractSocket.SocketOption] = ...
    RemoteHostClosedError: ClassVar[QAbstractSocket.SocketError] = ...
    ReuseAddressHint: ClassVar[QAbstractSocket.BindFlag] = ...
    SctpSocket: ClassVar[QAbstractSocket.SocketType] = ...
    SendBufferSizeSocketOption: ClassVar[QAbstractSocket.SocketOption] = ...
    ShareAddress: ClassVar[QAbstractSocket.BindFlag] = ...
    SocketAccessError: ClassVar[QAbstractSocket.SocketError] = ...
    SocketAddressNotAvailableError: ClassVar[QAbstractSocket.SocketError] = ...
    SocketResourceError: ClassVar[QAbstractSocket.SocketError] = ...
    SocketTimeoutError: ClassVar[QAbstractSocket.SocketError] = ...
    SslHandshakeFailedError: ClassVar[QAbstractSocket.SocketError] = ...
    SslInternalError: ClassVar[QAbstractSocket.SocketError] = ...
    SslInvalidUserDataError: ClassVar[QAbstractSocket.SocketError] = ...
    TcpSocket: ClassVar[QAbstractSocket.SocketType] = ...
    TemporaryError: ClassVar[QAbstractSocket.SocketError] = ...
    TypeOfServiceOption: ClassVar[QAbstractSocket.SocketOption] = ...
    UdpSocket: ClassVar[QAbstractSocket.SocketType] = ...
    UnconnectedState: ClassVar[QAbstractSocket.SocketState] = ...
    UnfinishedSocketOperationError: ClassVar[QAbstractSocket.SocketError] = ...
    UnknownNetworkLayerProtocol: ClassVar[QAbstractSocket.NetworkLayerProtocol] = ...
    UnknownSocketError: ClassVar[QAbstractSocket.SocketError] = ...
    UnknownSocketType: ClassVar[QAbstractSocket.SocketType] = ...
    UnsupportedSocketOperationError: ClassVar[QAbstractSocket.SocketError] = ...
    connected: ClassVar[PySide2.QtCore.Signal] = ...
    disconnected: ClassVar[PySide2.QtCore.Signal] = ...
    error: ClassVar[PySide2.QtCore.Signal] = ...
    errorOccurred: ClassVar[PySide2.QtCore.Signal] = ...
    hostFound: ClassVar[PySide2.QtCore.Signal] = ...
    proxyAuthenticationRequired: ClassVar[PySide2.QtCore.Signal] = ...
    stateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, socketType: QAbstractSocket.SocketType, parent: typing.Optional[PySide2.QtCore.QObject], destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def abort(self) -> None: ...
    def atEnd(self) -> bool: ...
    @overload
    def bind(self, address: QHostAddress, port: int = ..., mode: typing.Union[QAbstractSocket.BindMode,QAbstractSocket.BindFlag] = ...) -> bool: ...
    @overload
    def bind(self, port: int = ..., mode: typing.Union[QAbstractSocket.BindMode,QAbstractSocket.BindFlag] = ...) -> bool: ...
    def bytesAvailable(self) -> int: ...
    def bytesToWrite(self) -> int: ...
    def canReadLine(self) -> bool: ...
    def close(self) -> None: ...
    @overload
    def connectToHost(self, address: QHostAddress, port: int, mode: typing.Union[PySide2.QtCore.QIODevice.OpenMode,PySide2.QtCore.QIODevice.OpenModeFlag] = ...) -> None: ...
    @overload
    def connectToHost(self, hostName: str, port: int, mode: typing.Union[PySide2.QtCore.QIODevice.OpenMode,PySide2.QtCore.QIODevice.OpenModeFlag] = ..., protocol: QAbstractSocket.NetworkLayerProtocol = ...) -> None: ...
    def disconnectFromHost(self) -> None: ...
    def flush(self) -> bool: ...
    def isSequential(self) -> bool: ...
    def isValid(self) -> bool: ...
    def localAddress(self) -> QHostAddress: ...
    def localPort(self) -> int: ...
    def pauseMode(self) -> typing.Union[QAbstractSocket.PauseModes,QAbstractSocket.PauseMode]: ...
    def peerAddress(self) -> QHostAddress: ...
    def peerName(self) -> str: ...
    def peerPort(self) -> int: ...
    def protocolTag(self) -> str: ...
    def proxy(self) -> QNetworkProxy: ...
    def readBufferSize(self) -> int: ...
    def readData(self, data: bytes, maxlen: int) -> int: ...
    def readLineData(self, data: bytes, maxlen: int) -> int: ...
    def resume(self) -> None: ...
    def setLocalAddress(self, address: QHostAddress) -> None: ...
    def setLocalPort(self, port: int) -> None: ...
    def setPauseMode(self, pauseMode: typing.Union[QAbstractSocket.PauseModes,QAbstractSocket.PauseMode]) -> None: ...
    def setPeerAddress(self, address: QHostAddress) -> None: ...
    def setPeerName(self, name: str) -> None: ...
    def setPeerPort(self, port: int) -> None: ...
    def setProtocolTag(self, tag: str) -> None: ...
    def setProxy(self, networkProxy: QNetworkProxy) -> None: ...
    def setReadBufferSize(self, size: int) -> None: ...
    def setSocketDescriptor(self, socketDescriptor: int, state: QAbstractSocket.SocketState = ..., openMode: typing.Union[PySide2.QtCore.QIODevice.OpenMode,PySide2.QtCore.QIODevice.OpenModeFlag] = ...) -> bool: ...
    def setSocketError(self, socketError: QAbstractSocket.SocketError) -> None: ...
    def setSocketOption(self, option: QAbstractSocket.SocketOption, value: typing.Any) -> None: ...
    def setSocketState(self, state: QAbstractSocket.SocketState) -> None: ...
    def socketDescriptor(self) -> int: ...
    def socketOption(self, option: QAbstractSocket.SocketOption) -> typing.Any: ...
    def socketType(self) -> QAbstractSocket.SocketType: ...
    def state(self) -> QAbstractSocket.SocketState: ...
    def waitForBytesWritten(self, msecs: int = ...) -> bool: ...
    def waitForConnected(self, msecs: int = ...) -> bool: ...
    def waitForDisconnected(self, msecs: int = ...) -> bool: ...
    def waitForReadyRead(self, msecs: int = ...) -> bool: ...
    def writeData(self, data: bytes, len: int) -> int: ...

class QAuthenticator(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QAuthenticator) -> None: ...
    def isNull(self) -> bool: ...
    def option(self, opt: str) -> typing.Any: ...
    def options(self) -> typing.Dict[str,typing.Any]: ...
    def password(self) -> str: ...
    def realm(self) -> str: ...
    def setOption(self, opt: str, value: typing.Any) -> None: ...
    def setPassword(self, password: str) -> None: ...
    def setRealm(self, realm: str) -> None: ...
    def setUser(self, user: str) -> None: ...
    def user(self) -> str: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QDnsDomainNameRecord(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QDnsDomainNameRecord) -> None: ...
    def name(self) -> str: ...
    def swap(self, other: QDnsDomainNameRecord) -> None: ...
    def timeToLive(self) -> int: ...
    def value(self) -> str: ...
    def __copy__(self) -> None: ...

class QDnsHostAddressRecord(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QDnsHostAddressRecord) -> None: ...
    def name(self) -> str: ...
    def swap(self, other: QDnsHostAddressRecord) -> None: ...
    def timeToLive(self) -> int: ...
    def value(self) -> QHostAddress: ...
    def __copy__(self) -> None: ...

class QDnsLookup(PySide2.QtCore.QObject):
    class Error:
        InvalidReplyError: ClassVar[QDnsLookup.Error] = ...
        InvalidRequestError: ClassVar[QDnsLookup.Error] = ...
        NoError: ClassVar[QDnsLookup.Error] = ...
        NotFoundError: ClassVar[QDnsLookup.Error] = ...
        OperationCancelledError: ClassVar[QDnsLookup.Error] = ...
        ResolverError: ClassVar[QDnsLookup.Error] = ...
        ServerFailureError: ClassVar[QDnsLookup.Error] = ...
        ServerRefusedError: ClassVar[QDnsLookup.Error] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QDnsLookup.Error: ...
        def __and__(self, other: typing.SupportsInt) -> QDnsLookup.Error: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QDnsLookup.Error: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QDnsLookup.Error: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QDnsLookup.Error: ...
        def __rand__(self, other: typing.SupportsInt) -> QDnsLookup.Error: ...
        def __rmul__(self, other: typing.SupportsInt) -> QDnsLookup.Error: ...
        def __ror__(self, other: typing.SupportsInt) -> QDnsLookup.Error: ...
        def __rsub__(self, other: typing.SupportsInt) -> QDnsLookup.Error: ...
        def __rxor__(self, other: typing.SupportsInt) -> QDnsLookup.Error: ...
        def __sub__(self, other: typing.SupportsInt) -> QDnsLookup.Error: ...
        def __xor__(self, other: typing.SupportsInt) -> QDnsLookup.Error: ...

    class Type:
        A: ClassVar[QDnsLookup.Type] = ...
        AAAA: ClassVar[QDnsLookup.Type] = ...
        ANY: ClassVar[QDnsLookup.Type] = ...
        CNAME: ClassVar[QDnsLookup.Type] = ...
        MX: ClassVar[QDnsLookup.Type] = ...
        NS: ClassVar[QDnsLookup.Type] = ...
        PTR: ClassVar[QDnsLookup.Type] = ...
        SRV: ClassVar[QDnsLookup.Type] = ...
        TXT: ClassVar[QDnsLookup.Type] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QDnsLookup.Type: ...
        def __and__(self, other: typing.SupportsInt) -> QDnsLookup.Type: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QDnsLookup.Type: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QDnsLookup.Type: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QDnsLookup.Type: ...
        def __rand__(self, other: typing.SupportsInt) -> QDnsLookup.Type: ...
        def __rmul__(self, other: typing.SupportsInt) -> QDnsLookup.Type: ...
        def __ror__(self, other: typing.SupportsInt) -> QDnsLookup.Type: ...
        def __rsub__(self, other: typing.SupportsInt) -> QDnsLookup.Type: ...
        def __rxor__(self, other: typing.SupportsInt) -> QDnsLookup.Type: ...
        def __sub__(self, other: typing.SupportsInt) -> QDnsLookup.Type: ...
        def __xor__(self, other: typing.SupportsInt) -> QDnsLookup.Type: ...
    A: ClassVar[QDnsLookup.Type] = ...
    AAAA: ClassVar[QDnsLookup.Type] = ...
    ANY: ClassVar[QDnsLookup.Type] = ...
    CNAME: ClassVar[QDnsLookup.Type] = ...
    InvalidReplyError: ClassVar[QDnsLookup.Error] = ...
    InvalidRequestError: ClassVar[QDnsLookup.Error] = ...
    MX: ClassVar[QDnsLookup.Type] = ...
    NS: ClassVar[QDnsLookup.Type] = ...
    NoError: ClassVar[QDnsLookup.Error] = ...
    NotFoundError: ClassVar[QDnsLookup.Error] = ...
    OperationCancelledError: ClassVar[QDnsLookup.Error] = ...
    PTR: ClassVar[QDnsLookup.Type] = ...
    ResolverError: ClassVar[QDnsLookup.Error] = ...
    SRV: ClassVar[QDnsLookup.Type] = ...
    ServerFailureError: ClassVar[QDnsLookup.Error] = ...
    ServerRefusedError: ClassVar[QDnsLookup.Error] = ...
    TXT: ClassVar[QDnsLookup.Type] = ...
    finished: ClassVar[PySide2.QtCore.Signal] = ...
    nameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    nameserverChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    typeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., error: QDnsLookup.Error = ..., errorString: str = ..., finished: typing.Callable = ..., name: str = ..., nameChanged: typing.Callable = ..., nameserver: QHostAddress = ..., nameserverChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., type: QDnsLookup.Type = ..., typeChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, type: QDnsLookup.Type, name: str, nameserver: QHostAddress, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., error: QDnsLookup.Error = ..., errorString: str = ..., finished: typing.Callable = ..., nameChanged: typing.Callable = ..., nameserverChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., typeChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, type: QDnsLookup.Type, name: str, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., error: QDnsLookup.Error = ..., errorString: str = ..., finished: typing.Callable = ..., nameChanged: typing.Callable = ..., nameserver: QHostAddress = ..., nameserverChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., typeChanged: typing.Callable = ...) -> None: ...
    def abort(self) -> None: ...
    def canonicalNameRecords(self) -> typing.List[QDnsDomainNameRecord]: ...
    def error(self) -> QDnsLookup.Error: ...
    def errorString(self) -> str: ...
    def hostAddressRecords(self) -> typing.List[QDnsHostAddressRecord]: ...
    def isFinished(self) -> bool: ...
    def lookup(self) -> None: ...
    def mailExchangeRecords(self) -> typing.List[QDnsMailExchangeRecord]: ...
    def name(self) -> str: ...
    def nameServerRecords(self) -> typing.List[QDnsDomainNameRecord]: ...
    def nameserver(self) -> QHostAddress: ...
    def pointerRecords(self) -> typing.List[QDnsDomainNameRecord]: ...
    def serviceRecords(self) -> typing.List[QDnsServiceRecord]: ...
    def setName(self, name: str) -> None: ...
    def setNameserver(self, nameserver: QHostAddress) -> None: ...
    def setType(self, arg__1: QDnsLookup.Type) -> None: ...
    def textRecords(self) -> typing.List[QDnsTextRecord]: ...
    def type(self) -> QDnsLookup.Type: ...

class QDnsMailExchangeRecord(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QDnsMailExchangeRecord) -> None: ...
    def exchange(self) -> str: ...
    def name(self) -> str: ...
    def preference(self) -> int: ...
    def swap(self, other: QDnsMailExchangeRecord) -> None: ...
    def timeToLive(self) -> int: ...
    def __copy__(self) -> None: ...

class QDnsServiceRecord(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QDnsServiceRecord) -> None: ...
    def name(self) -> str: ...
    def port(self) -> int: ...
    def priority(self) -> int: ...
    def swap(self, other: QDnsServiceRecord) -> None: ...
    def target(self) -> str: ...
    def timeToLive(self) -> int: ...
    def weight(self) -> int: ...
    def __copy__(self) -> None: ...

class QDnsTextRecord(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QDnsTextRecord) -> None: ...
    def name(self) -> str: ...
    def swap(self, other: QDnsTextRecord) -> None: ...
    def timeToLive(self) -> int: ...
    def values(self) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def __copy__(self) -> None: ...

class QHostAddress(shiboken2.Object):
    class ConversionMode:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QHostAddress.ConversionMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QHostAddress.ConversionMode: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QHostAddress.ConversionMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QHostAddress.ConversionMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QHostAddress.ConversionMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QHostAddress.ConversionMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QHostAddress.ConversionMode: ...

    class ConversionModeFlag:
        ConvertLocalHost: ClassVar[QHostAddress.ConversionModeFlag] = ...
        ConvertUnspecifiedAddress: ClassVar[QHostAddress.ConversionModeFlag] = ...
        ConvertV4CompatToIPv4: ClassVar[QHostAddress.ConversionModeFlag] = ...
        ConvertV4MappedToIPv4: ClassVar[QHostAddress.ConversionModeFlag] = ...
        StrictConversion: ClassVar[QHostAddress.ConversionModeFlag] = ...
        TolerantConversion: ClassVar[QHostAddress.ConversionModeFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QHostAddress.ConversionMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QHostAddress.ConversionModeFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QHostAddress.ConversionMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QHostAddress.ConversionMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QHostAddress.ConversionMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QHostAddress.ConversionMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QHostAddress.ConversionMode: ...

    class SpecialAddress:
        Any: ClassVar[QHostAddress.SpecialAddress] = ...
        AnyIPv4: ClassVar[QHostAddress.SpecialAddress] = ...
        AnyIPv6: ClassVar[QHostAddress.SpecialAddress] = ...
        Broadcast: ClassVar[QHostAddress.SpecialAddress] = ...
        LocalHost: ClassVar[QHostAddress.SpecialAddress] = ...
        LocalHostIPv6: ClassVar[QHostAddress.SpecialAddress] = ...
        Null: ClassVar[QHostAddress.SpecialAddress] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QHostAddress.SpecialAddress: ...
        def __and__(self, other: typing.SupportsInt) -> QHostAddress.SpecialAddress: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QHostAddress.SpecialAddress: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QHostAddress.SpecialAddress: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QHostAddress.SpecialAddress: ...
        def __rand__(self, other: typing.SupportsInt) -> QHostAddress.SpecialAddress: ...
        def __rmul__(self, other: typing.SupportsInt) -> QHostAddress.SpecialAddress: ...
        def __ror__(self, other: typing.SupportsInt) -> QHostAddress.SpecialAddress: ...
        def __rsub__(self, other: typing.SupportsInt) -> QHostAddress.SpecialAddress: ...
        def __rxor__(self, other: typing.SupportsInt) -> QHostAddress.SpecialAddress: ...
        def __sub__(self, other: typing.SupportsInt) -> QHostAddress.SpecialAddress: ...
        def __xor__(self, other: typing.SupportsInt) -> QHostAddress.SpecialAddress: ...
    Any: ClassVar[QHostAddress.SpecialAddress] = ...
    AnyIPv4: ClassVar[QHostAddress.SpecialAddress] = ...
    AnyIPv6: ClassVar[QHostAddress.SpecialAddress] = ...
    Broadcast: ClassVar[QHostAddress.SpecialAddress] = ...
    ConvertLocalHost: ClassVar[QHostAddress.ConversionModeFlag] = ...
    ConvertUnspecifiedAddress: ClassVar[QHostAddress.ConversionModeFlag] = ...
    ConvertV4CompatToIPv4: ClassVar[QHostAddress.ConversionModeFlag] = ...
    ConvertV4MappedToIPv4: ClassVar[QHostAddress.ConversionModeFlag] = ...
    LocalHost: ClassVar[QHostAddress.SpecialAddress] = ...
    LocalHostIPv6: ClassVar[QHostAddress.SpecialAddress] = ...
    Null: ClassVar[QHostAddress.SpecialAddress] = ...
    StrictConversion: ClassVar[QHostAddress.ConversionModeFlag] = ...
    TolerantConversion: ClassVar[QHostAddress.ConversionModeFlag] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, address: QHostAddress.SpecialAddress) -> None: ...
    @overload
    def __init__(self, address: str) -> None: ...
    @overload
    def __init__(self, copy: QHostAddress) -> None: ...
    @overload
    def __init__(self, ip4Addr: int) -> None: ...
    @overload
    def __init__(self, ip6Addr: QIPv6Address) -> None: ...
    def clear(self) -> None: ...
    def isBroadcast(self) -> bool: ...
    def isEqual(self, address: QHostAddress, mode: typing.Union[QHostAddress.ConversionMode,QHostAddress.ConversionModeFlag] = ...) -> bool: ...
    def isGlobal(self) -> bool: ...
    @overload
    def isInSubnet(self, subnet: QHostAddress, netmask: int) -> bool: ...
    @overload
    def isInSubnet(self, subnet: typing.Tuple[QHostAddress,int]) -> bool: ...
    def isLinkLocal(self) -> bool: ...
    def isLoopback(self) -> bool: ...
    def isMulticast(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isSiteLocal(self) -> bool: ...
    def isUniqueLocalUnicast(self) -> bool: ...
    @classmethod
    def parseSubnet(cls, subnet: str) -> typing.Tuple[QHostAddress,int]: ...
    def protocol(self) -> QAbstractSocket.NetworkLayerProtocol: ...
    def scopeId(self) -> str: ...
    @overload
    def setAddress(self, address: QHostAddress.SpecialAddress) -> None: ...
    @overload
    def setAddress(self, address: str) -> bool: ...
    @overload
    def setAddress(self, ip4Addr: int) -> None: ...
    @overload
    def setAddress(self, ip6Addr: QIPv6Address) -> None: ...
    def setScopeId(self, id: str) -> None: ...
    def swap(self, other: QHostAddress) -> None: ...
    @overload
    def toIPv4Address(self) -> int: ...
    @overload
    def toIPv4Address(self) -> typing.Tuple[int,bool]: ...
    def toIPv6Address(self) -> QIPv6Address: ...
    def toString(self) -> str: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QHostInfo(shiboken2.Object):
    class HostInfoError:
        HostNotFound: ClassVar[QHostInfo.HostInfoError] = ...
        NoError: ClassVar[QHostInfo.HostInfoError] = ...
        UnknownError: ClassVar[QHostInfo.HostInfoError] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QHostInfo.HostInfoError: ...
        def __and__(self, other: typing.SupportsInt) -> QHostInfo.HostInfoError: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QHostInfo.HostInfoError: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QHostInfo.HostInfoError: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QHostInfo.HostInfoError: ...
        def __rand__(self, other: typing.SupportsInt) -> QHostInfo.HostInfoError: ...
        def __rmul__(self, other: typing.SupportsInt) -> QHostInfo.HostInfoError: ...
        def __ror__(self, other: typing.SupportsInt) -> QHostInfo.HostInfoError: ...
        def __rsub__(self, other: typing.SupportsInt) -> QHostInfo.HostInfoError: ...
        def __rxor__(self, other: typing.SupportsInt) -> QHostInfo.HostInfoError: ...
        def __sub__(self, other: typing.SupportsInt) -> QHostInfo.HostInfoError: ...
        def __xor__(self, other: typing.SupportsInt) -> QHostInfo.HostInfoError: ...
    HostNotFound: ClassVar[QHostInfo.HostInfoError] = ...
    NoError: ClassVar[QHostInfo.HostInfoError] = ...
    UnknownError: ClassVar[QHostInfo.HostInfoError] = ...
    @overload
    def __init__(self, d: QHostInfo) -> None: ...
    @overload
    def __init__(self, lookupId: int = ...) -> None: ...
    @classmethod
    def abortHostLookup(cls, lookupId: int) -> None: ...
    def addresses(self) -> typing.List[QHostAddress]: ...
    def error(self) -> QHostInfo.HostInfoError: ...
    def errorString(self) -> str: ...
    @classmethod
    def fromName(cls, name: str) -> QHostInfo: ...
    def hostName(self) -> str: ...
    @classmethod
    def localDomainName(cls) -> str: ...
    @classmethod
    def localHostName(cls) -> str: ...
    def lookupId(self) -> int: ...
    def setAddresses(self, addresses: typing.Sequence[QHostAddress]) -> None: ...
    def setError(self, error: QHostInfo.HostInfoError) -> None: ...
    def setErrorString(self, errorString: str) -> None: ...
    def setHostName(self, name: str) -> None: ...
    def setLookupId(self, id: int) -> None: ...
    def swap(self, other: QHostInfo) -> None: ...
    def __copy__(self) -> None: ...

class QHstsPolicy(shiboken2.Object):
    class PolicyFlag:
        IncludeSubDomains: ClassVar[QHstsPolicy.PolicyFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QHstsPolicy.PolicyFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QHstsPolicy.PolicyFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QHstsPolicy.PolicyFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QHstsPolicy.PolicyFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QHstsPolicy.PolicyFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QHstsPolicy.PolicyFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QHstsPolicy.PolicyFlags: ...

    class PolicyFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QHstsPolicy.PolicyFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QHstsPolicy.PolicyFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QHstsPolicy.PolicyFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QHstsPolicy.PolicyFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QHstsPolicy.PolicyFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QHstsPolicy.PolicyFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QHstsPolicy.PolicyFlags: ...
    IncludeSubDomains: ClassVar[QHstsPolicy.PolicyFlag] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, expiry: PySide2.QtCore.QDateTime, flags: typing.Union[QHstsPolicy.PolicyFlags,QHstsPolicy.PolicyFlag], host: str, mode: PySide2.QtCore.QUrl.ParsingMode = ...) -> None: ...
    @overload
    def __init__(self, rhs: QHstsPolicy) -> None: ...
    def expiry(self) -> PySide2.QtCore.QDateTime: ...
    def host(self, options: PySide2.QtCore.QUrl.ComponentFormattingOption = ...) -> str: ...
    def includesSubDomains(self) -> bool: ...
    def isExpired(self) -> bool: ...
    def setExpiry(self, expiry: PySide2.QtCore.QDateTime) -> None: ...
    def setHost(self, host: str, mode: PySide2.QtCore.QUrl.ParsingMode = ...) -> None: ...
    def setIncludesSubDomains(self, include: bool) -> None: ...
    def swap(self, other: QHstsPolicy) -> None: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QHttpMultiPart(PySide2.QtCore.QObject):
    class ContentType:
        AlternativeType: ClassVar[QHttpMultiPart.ContentType] = ...
        FormDataType: ClassVar[QHttpMultiPart.ContentType] = ...
        MixedType: ClassVar[QHttpMultiPart.ContentType] = ...
        RelatedType: ClassVar[QHttpMultiPart.ContentType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QHttpMultiPart.ContentType: ...
        def __and__(self, other: typing.SupportsInt) -> QHttpMultiPart.ContentType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QHttpMultiPart.ContentType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QHttpMultiPart.ContentType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QHttpMultiPart.ContentType: ...
        def __rand__(self, other: typing.SupportsInt) -> QHttpMultiPart.ContentType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QHttpMultiPart.ContentType: ...
        def __ror__(self, other: typing.SupportsInt) -> QHttpMultiPart.ContentType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QHttpMultiPart.ContentType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QHttpMultiPart.ContentType: ...
        def __sub__(self, other: typing.SupportsInt) -> QHttpMultiPart.ContentType: ...
        def __xor__(self, other: typing.SupportsInt) -> QHttpMultiPart.ContentType: ...
    AlternativeType: ClassVar[QHttpMultiPart.ContentType] = ...
    FormDataType: ClassVar[QHttpMultiPart.ContentType] = ...
    MixedType: ClassVar[QHttpMultiPart.ContentType] = ...
    RelatedType: ClassVar[QHttpMultiPart.ContentType] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, contentType: QHttpMultiPart.ContentType, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def append(self, httpPart: QHttpPart) -> None: ...
    def boundary(self) -> PySide2.QtCore.QByteArray: ...
    def setBoundary(self, boundary: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setContentType(self, contentType: QHttpMultiPart.ContentType) -> None: ...

class QHttpPart(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QHttpPart) -> None: ...
    def setBody(self, body: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setBodyDevice(self, device: PySide2.QtCore.QIODevice) -> None: ...
    def setHeader(self, header: QNetworkRequest.KnownHeaders, value: typing.Any) -> None: ...
    def setRawHeader(self, headerName: typing.Union[PySide2.QtCore.QByteArray,bytes], headerValue: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def swap(self, other: QHttpPart) -> None: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QIPv6Address(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QIPv6Address: QIPv6Address) -> None: ...
    def __copy__(self) -> None: ...
    def __delitem__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __len__(self) -> int: ...
    def __setitem__(self, index, object) -> None: ...

class QLocalServer(PySide2.QtCore.QObject):
    class SocketOption:
        GroupAccessOption: ClassVar[QLocalServer.SocketOption] = ...
        NoOptions: ClassVar[QLocalServer.SocketOption] = ...
        OtherAccessOption: ClassVar[QLocalServer.SocketOption] = ...
        UserAccessOption: ClassVar[QLocalServer.SocketOption] = ...
        WorldAccessOption: ClassVar[QLocalServer.SocketOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QLocalServer.SocketOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QLocalServer.SocketOption: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QLocalServer.SocketOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QLocalServer.SocketOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QLocalServer.SocketOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QLocalServer.SocketOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QLocalServer.SocketOptions: ...

    class SocketOptions:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QLocalServer.SocketOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QLocalServer.SocketOptions: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QLocalServer.SocketOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QLocalServer.SocketOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QLocalServer.SocketOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QLocalServer.SocketOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QLocalServer.SocketOptions: ...
    GroupAccessOption: ClassVar[QLocalServer.SocketOption] = ...
    NoOptions: ClassVar[QLocalServer.SocketOption] = ...
    OtherAccessOption: ClassVar[QLocalServer.SocketOption] = ...
    UserAccessOption: ClassVar[QLocalServer.SocketOption] = ...
    WorldAccessOption: ClassVar[QLocalServer.SocketOption] = ...
    newConnection: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., newConnection: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., socketOptions: typing.Union[QLocalServer.SocketOptions,QLocalServer.SocketOption] = ...) -> None: ...
    def close(self) -> None: ...
    def errorString(self) -> str: ...
    def fullServerName(self) -> str: ...
    def hasPendingConnections(self) -> bool: ...
    def incomingConnection(self, socketDescriptor: int) -> None: ...
    def isListening(self) -> bool: ...
    @overload
    def listen(self, name: str) -> bool: ...
    @overload
    def listen(self, socketDescriptor: int) -> bool: ...
    def maxPendingConnections(self) -> int: ...
    def nextPendingConnection(self) -> QLocalSocket: ...
    @classmethod
    def removeServer(cls, name: str) -> bool: ...
    def serverError(self) -> QAbstractSocket.SocketError: ...
    def serverName(self) -> str: ...
    def setMaxPendingConnections(self, numConnections: int) -> None: ...
    def setSocketOptions(self, options: typing.Union[QLocalServer.SocketOptions,QLocalServer.SocketOption]) -> None: ...
    def socketDescriptor(self) -> int: ...
    def socketOptions(self) -> typing.Union[QLocalServer.SocketOptions,QLocalServer.SocketOption]: ...
    def waitForNewConnection(self, msec: int) -> typing.Tuple[bool,bool]: ...

class QLocalSocket(PySide2.QtCore.QIODevice):
    class LocalSocketError:
        ConnectionError: ClassVar[QLocalSocket.LocalSocketError] = ...
        ConnectionRefusedError: ClassVar[QLocalSocket.LocalSocketError] = ...
        DatagramTooLargeError: ClassVar[QLocalSocket.LocalSocketError] = ...
        OperationError: ClassVar[QLocalSocket.LocalSocketError] = ...
        PeerClosedError: ClassVar[QLocalSocket.LocalSocketError] = ...
        ServerNotFoundError: ClassVar[QLocalSocket.LocalSocketError] = ...
        SocketAccessError: ClassVar[QLocalSocket.LocalSocketError] = ...
        SocketResourceError: ClassVar[QLocalSocket.LocalSocketError] = ...
        SocketTimeoutError: ClassVar[QLocalSocket.LocalSocketError] = ...
        UnknownSocketError: ClassVar[QLocalSocket.LocalSocketError] = ...
        UnsupportedSocketOperationError: ClassVar[QLocalSocket.LocalSocketError] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketError: ...
        def __and__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketError: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketError: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketError: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketError: ...
        def __rand__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketError: ...
        def __rmul__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketError: ...
        def __ror__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketError: ...
        def __rsub__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketError: ...
        def __rxor__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketError: ...
        def __sub__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketError: ...
        def __xor__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketError: ...

    class LocalSocketState:
        ClosingState: ClassVar[QLocalSocket.LocalSocketState] = ...
        ConnectedState: ClassVar[QLocalSocket.LocalSocketState] = ...
        ConnectingState: ClassVar[QLocalSocket.LocalSocketState] = ...
        UnconnectedState: ClassVar[QLocalSocket.LocalSocketState] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketState: ...
        def __and__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketState: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketState: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketState: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketState: ...
        def __rand__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketState: ...
        def __rmul__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketState: ...
        def __ror__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketState: ...
        def __rsub__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketState: ...
        def __rxor__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketState: ...
        def __sub__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketState: ...
        def __xor__(self, other: typing.SupportsInt) -> QLocalSocket.LocalSocketState: ...
    ClosingState: ClassVar[QLocalSocket.LocalSocketState] = ...
    ConnectedState: ClassVar[QLocalSocket.LocalSocketState] = ...
    ConnectingState: ClassVar[QLocalSocket.LocalSocketState] = ...
    ConnectionError: ClassVar[QLocalSocket.LocalSocketError] = ...
    ConnectionRefusedError: ClassVar[QLocalSocket.LocalSocketError] = ...
    DatagramTooLargeError: ClassVar[QLocalSocket.LocalSocketError] = ...
    OperationError: ClassVar[QLocalSocket.LocalSocketError] = ...
    PeerClosedError: ClassVar[QLocalSocket.LocalSocketError] = ...
    ServerNotFoundError: ClassVar[QLocalSocket.LocalSocketError] = ...
    SocketAccessError: ClassVar[QLocalSocket.LocalSocketError] = ...
    SocketResourceError: ClassVar[QLocalSocket.LocalSocketError] = ...
    SocketTimeoutError: ClassVar[QLocalSocket.LocalSocketError] = ...
    UnconnectedState: ClassVar[QLocalSocket.LocalSocketState] = ...
    UnknownSocketError: ClassVar[QLocalSocket.LocalSocketError] = ...
    UnsupportedSocketOperationError: ClassVar[QLocalSocket.LocalSocketError] = ...
    connected: ClassVar[PySide2.QtCore.Signal] = ...
    disconnected: ClassVar[PySide2.QtCore.Signal] = ...
    error: ClassVar[PySide2.QtCore.Signal] = ...
    errorOccurred: ClassVar[PySide2.QtCore.Signal] = ...
    stateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., aboutToClose: typing.Callable = ..., bytesWritten: typing.Callable = ..., channelBytesWritten: typing.Callable = ..., channelReadyRead: typing.Callable = ..., connected: typing.Callable = ..., destroyed: typing.Callable = ..., disconnected: typing.Callable = ..., error: typing.Callable = ..., errorOccurred: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., readChannelFinished: typing.Callable = ..., readyRead: typing.Callable = ..., stateChanged: typing.Callable = ...) -> None: ...
    def abort(self) -> None: ...
    def bytesAvailable(self) -> int: ...
    def bytesToWrite(self) -> int: ...
    def canReadLine(self) -> bool: ...
    def close(self) -> None: ...
    @overload
    def connectToServer(self, name: str, openMode: typing.Union[PySide2.QtCore.QIODevice.OpenMode,PySide2.QtCore.QIODevice.OpenModeFlag] = ...) -> None: ...
    @overload
    def connectToServer(self, openMode: typing.Union[PySide2.QtCore.QIODevice.OpenMode,PySide2.QtCore.QIODevice.OpenModeFlag] = ...) -> None: ...
    def disconnectFromServer(self) -> None: ...
    def flush(self) -> bool: ...
    def fullServerName(self) -> str: ...
    def isSequential(self) -> bool: ...
    def isValid(self) -> bool: ...
    def open(self, openMode: typing.Union[PySide2.QtCore.QIODevice.OpenMode,PySide2.QtCore.QIODevice.OpenModeFlag] = ...) -> bool: ...
    def readBufferSize(self) -> int: ...
    def readData(self, arg__1: bytes, arg__2: int) -> int: ...
    def serverName(self) -> str: ...
    def setReadBufferSize(self, size: int) -> None: ...
    def setServerName(self, name: str) -> None: ...
    def setSocketDescriptor(self, socketDescriptor: int, socketState: QLocalSocket.LocalSocketState = ..., openMode: typing.Union[PySide2.QtCore.QIODevice.OpenMode,PySide2.QtCore.QIODevice.OpenModeFlag] = ...) -> bool: ...
    def socketDescriptor(self) -> int: ...
    def state(self) -> QLocalSocket.LocalSocketState: ...
    def waitForBytesWritten(self, msecs: int = ...) -> bool: ...
    def waitForConnected(self, msecs: int = ...) -> bool: ...
    def waitForDisconnected(self, msecs: int = ...) -> bool: ...
    def waitForReadyRead(self, msecs: int = ...) -> bool: ...
    def writeData(self, arg__1: bytes, arg__2: int) -> int: ...

class QNetworkAccessManager(PySide2.QtCore.QObject):
    class NetworkAccessibility:
        Accessible: ClassVar[QNetworkAccessManager.NetworkAccessibility] = ...
        NotAccessible: ClassVar[QNetworkAccessManager.NetworkAccessibility] = ...
        UnknownAccessibility: ClassVar[QNetworkAccessManager.NetworkAccessibility] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkAccessManager.NetworkAccessibility: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkAccessManager.NetworkAccessibility: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkAccessManager.NetworkAccessibility: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkAccessManager.NetworkAccessibility: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkAccessManager.NetworkAccessibility: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkAccessManager.NetworkAccessibility: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkAccessManager.NetworkAccessibility: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkAccessManager.NetworkAccessibility: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkAccessManager.NetworkAccessibility: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkAccessManager.NetworkAccessibility: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkAccessManager.NetworkAccessibility: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkAccessManager.NetworkAccessibility: ...

    class Operation:
        CustomOperation: ClassVar[QNetworkAccessManager.Operation] = ...
        DeleteOperation: ClassVar[QNetworkAccessManager.Operation] = ...
        GetOperation: ClassVar[QNetworkAccessManager.Operation] = ...
        HeadOperation: ClassVar[QNetworkAccessManager.Operation] = ...
        PostOperation: ClassVar[QNetworkAccessManager.Operation] = ...
        PutOperation: ClassVar[QNetworkAccessManager.Operation] = ...
        UnknownOperation: ClassVar[QNetworkAccessManager.Operation] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkAccessManager.Operation: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkAccessManager.Operation: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkAccessManager.Operation: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkAccessManager.Operation: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkAccessManager.Operation: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkAccessManager.Operation: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkAccessManager.Operation: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkAccessManager.Operation: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkAccessManager.Operation: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkAccessManager.Operation: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkAccessManager.Operation: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkAccessManager.Operation: ...
    Accessible: ClassVar[QNetworkAccessManager.NetworkAccessibility] = ...
    CustomOperation: ClassVar[QNetworkAccessManager.Operation] = ...
    DeleteOperation: ClassVar[QNetworkAccessManager.Operation] = ...
    GetOperation: ClassVar[QNetworkAccessManager.Operation] = ...
    HeadOperation: ClassVar[QNetworkAccessManager.Operation] = ...
    NotAccessible: ClassVar[QNetworkAccessManager.NetworkAccessibility] = ...
    PostOperation: ClassVar[QNetworkAccessManager.Operation] = ...
    PutOperation: ClassVar[QNetworkAccessManager.Operation] = ...
    UnknownAccessibility: ClassVar[QNetworkAccessManager.NetworkAccessibility] = ...
    UnknownOperation: ClassVar[QNetworkAccessManager.Operation] = ...
    authenticationRequired: ClassVar[PySide2.QtCore.Signal] = ...
    encrypted: ClassVar[PySide2.QtCore.Signal] = ...
    finished: ClassVar[PySide2.QtCore.Signal] = ...
    networkAccessibleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    networkSessionConnected: ClassVar[PySide2.QtCore.Signal] = ...
    preSharedKeyAuthenticationRequired: ClassVar[PySide2.QtCore.Signal] = ...
    proxyAuthenticationRequired: ClassVar[PySide2.QtCore.Signal] = ...
    sslErrors: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., authenticationRequired: typing.Callable = ..., destroyed: typing.Callable = ..., encrypted: typing.Callable = ..., finished: typing.Callable = ..., networkAccessible: QNetworkAccessManager.NetworkAccessibility = ..., networkAccessibleChanged: typing.Callable = ..., networkSessionConnected: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., preSharedKeyAuthenticationRequired: typing.Callable = ..., proxyAuthenticationRequired: typing.Callable = ..., sslErrors: typing.Callable = ...) -> None: ...
    def activeConfiguration(self) -> QNetworkConfiguration: ...
    def addStrictTransportSecurityHosts(self, knownHosts: typing.List[QHstsPolicy]) -> None: ...
    def autoDeleteReplies(self) -> bool: ...
    def cache(self) -> QAbstractNetworkCache: ...
    def clearAccessCache(self) -> None: ...
    def clearConnectionCache(self) -> None: ...
    def configuration(self) -> QNetworkConfiguration: ...
    def connectToHost(self, hostName: str, port: int = ...) -> None: ...
    @overload
    def connectToHostEncrypted(self, hostName: str, port: int, sslConfiguration: QSslConfiguration, peerName: str) -> None: ...
    @overload
    def connectToHostEncrypted(self, hostName: str, port: int = ..., sslConfiguration: QSslConfiguration = ...) -> None: ...
    def cookieJar(self) -> QNetworkCookieJar: ...
    def createRequest(self, op: QNetworkAccessManager.Operation, request: QNetworkRequest, outgoingData: typing.Union[PySide2.QtCore.QIODevice,None] = ...) -> QNetworkReply: ...
    def deleteResource(self, request: QNetworkRequest) -> QNetworkReply: ...
    def enableStrictTransportSecurityStore(self, enabled: bool, storeDir: str = ...) -> None: ...
    def get(self, request: QNetworkRequest) -> QNetworkReply: ...
    def head(self, request: QNetworkRequest) -> QNetworkReply: ...
    def isStrictTransportSecurityEnabled(self) -> bool: ...
    def isStrictTransportSecurityStoreEnabled(self) -> bool: ...
    def networkAccessible(self) -> QNetworkAccessManager.NetworkAccessibility: ...
    @overload
    def post(self, request: QNetworkRequest, data: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> QNetworkReply: ...
    @overload
    def post(self, request: QNetworkRequest, data: PySide2.QtCore.QIODevice) -> QNetworkReply: ...
    @overload
    def post(self, request: QNetworkRequest, multiPart: QHttpMultiPart) -> QNetworkReply: ...
    def proxy(self) -> QNetworkProxy: ...
    def proxyFactory(self) -> QNetworkProxyFactory: ...
    @overload
    def put(self, request: QNetworkRequest, data: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> QNetworkReply: ...
    @overload
    def put(self, request: QNetworkRequest, data: PySide2.QtCore.QIODevice) -> QNetworkReply: ...
    @overload
    def put(self, request: QNetworkRequest, multiPart: QHttpMultiPart) -> QNetworkReply: ...
    def redirectPolicy(self) -> QNetworkRequest.RedirectPolicy: ...
    @overload
    def sendCustomRequest(self, request: QNetworkRequest, verb: typing.Union[PySide2.QtCore.QByteArray,bytes], data: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> QNetworkReply: ...
    @overload
    def sendCustomRequest(self, request: QNetworkRequest, verb: typing.Union[PySide2.QtCore.QByteArray,bytes], data: typing.Union[PySide2.QtCore.QIODevice,None] = ...) -> QNetworkReply: ...
    @overload
    def sendCustomRequest(self, request: QNetworkRequest, verb: typing.Union[PySide2.QtCore.QByteArray,bytes], multiPart: QHttpMultiPart) -> QNetworkReply: ...
    def setAutoDeleteReplies(self, autoDelete: bool) -> None: ...
    def setCache(self, cache: QAbstractNetworkCache) -> None: ...
    def setConfiguration(self, config: QNetworkConfiguration) -> None: ...
    def setCookieJar(self, cookieJar: QNetworkCookieJar) -> None: ...
    def setNetworkAccessible(self, accessible: QNetworkAccessManager.NetworkAccessibility) -> None: ...
    def setProxy(self, proxy: QNetworkProxy) -> None: ...
    def setProxyFactory(self, factory: QNetworkProxyFactory) -> None: ...
    def setRedirectPolicy(self, policy: QNetworkRequest.RedirectPolicy) -> None: ...
    def setStrictTransportSecurityEnabled(self, enabled: bool) -> None: ...
    def setTransferTimeout(self, timeout: int = ...) -> None: ...
    def strictTransportSecurityHosts(self) -> typing.List[QHstsPolicy]: ...
    def supportedSchemes(self) -> typing.List[str]: ...
    def supportedSchemesImplementation(self) -> typing.List[str]: ...
    def transferTimeout(self) -> int: ...

class QNetworkAddressEntry(shiboken2.Object):
    class DnsEligibilityStatus:
        DnsEligibilityUnknown: ClassVar[QNetworkAddressEntry.DnsEligibilityStatus] = ...
        DnsEligible: ClassVar[QNetworkAddressEntry.DnsEligibilityStatus] = ...
        DnsIneligible: ClassVar[QNetworkAddressEntry.DnsEligibilityStatus] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkAddressEntry.DnsEligibilityStatus: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkAddressEntry.DnsEligibilityStatus: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkAddressEntry.DnsEligibilityStatus: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkAddressEntry.DnsEligibilityStatus: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkAddressEntry.DnsEligibilityStatus: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkAddressEntry.DnsEligibilityStatus: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkAddressEntry.DnsEligibilityStatus: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkAddressEntry.DnsEligibilityStatus: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkAddressEntry.DnsEligibilityStatus: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkAddressEntry.DnsEligibilityStatus: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkAddressEntry.DnsEligibilityStatus: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkAddressEntry.DnsEligibilityStatus: ...
    DnsEligibilityUnknown: ClassVar[QNetworkAddressEntry.DnsEligibilityStatus] = ...
    DnsEligible: ClassVar[QNetworkAddressEntry.DnsEligibilityStatus] = ...
    DnsIneligible: ClassVar[QNetworkAddressEntry.DnsEligibilityStatus] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QNetworkAddressEntry) -> None: ...
    def broadcast(self) -> QHostAddress: ...
    def clearAddressLifetime(self) -> None: ...
    def dnsEligibility(self) -> QNetworkAddressEntry.DnsEligibilityStatus: ...
    def ip(self) -> QHostAddress: ...
    def isLifetimeKnown(self) -> bool: ...
    def isPermanent(self) -> bool: ...
    def isTemporary(self) -> bool: ...
    def netmask(self) -> QHostAddress: ...
    def preferredLifetime(self) -> PySide2.QtCore.QDeadlineTimer: ...
    def prefixLength(self) -> int: ...
    def setAddressLifetime(self, preferred: PySide2.QtCore.QDeadlineTimer, validity: PySide2.QtCore.QDeadlineTimer) -> None: ...
    def setBroadcast(self, newBroadcast: QHostAddress) -> None: ...
    def setDnsEligibility(self, status: QNetworkAddressEntry.DnsEligibilityStatus) -> None: ...
    def setIp(self, newIp: QHostAddress) -> None: ...
    def setNetmask(self, newNetmask: QHostAddress) -> None: ...
    def setPrefixLength(self, length: int) -> None: ...
    def swap(self, other: QNetworkAddressEntry) -> None: ...
    def validityLifetime(self) -> PySide2.QtCore.QDeadlineTimer: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QNetworkCacheMetaData(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QNetworkCacheMetaData) -> None: ...
    def attributes(self) -> typing.Dict[QNetworkRequest.Attribute,typing.Any]: ...
    def expirationDate(self) -> PySide2.QtCore.QDateTime: ...
    def isValid(self) -> bool: ...
    def lastModified(self) -> PySide2.QtCore.QDateTime: ...
    def rawHeaders(self) -> typing.List[typing.Tuple[PySide2.QtCore.QByteArray,PySide2.QtCore.QByteArray]]: ...
    def saveToDisk(self) -> bool: ...
    def setAttributes(self, attributes: typing.Dict[QNetworkRequest.Attribute,typing.Any]) -> None: ...
    def setExpirationDate(self, dateTime: PySide2.QtCore.QDateTime) -> None: ...
    def setLastModified(self, dateTime: PySide2.QtCore.QDateTime) -> None: ...
    def setRawHeaders(self, headers: typing.Sequence[typing.Tuple[PySide2.QtCore.QByteArray,PySide2.QtCore.QByteArray]]) -> None: ...
    def setSaveToDisk(self, allow: bool) -> None: ...
    def setUrl(self, url: PySide2.QtCore.QUrl) -> None: ...
    def swap(self, other: QNetworkCacheMetaData) -> None: ...
    def url(self) -> PySide2.QtCore.QUrl: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QNetworkConfiguration(shiboken2.Object):
    class BearerType:
        Bearer2G: ClassVar[QNetworkConfiguration.BearerType] = ...
        Bearer3G: ClassVar[QNetworkConfiguration.BearerType] = ...
        Bearer4G: ClassVar[QNetworkConfiguration.BearerType] = ...
        BearerBluetooth: ClassVar[QNetworkConfiguration.BearerType] = ...
        BearerCDMA2000: ClassVar[QNetworkConfiguration.BearerType] = ...
        BearerEVDO: ClassVar[QNetworkConfiguration.BearerType] = ...
        BearerEthernet: ClassVar[QNetworkConfiguration.BearerType] = ...
        BearerHSPA: ClassVar[QNetworkConfiguration.BearerType] = ...
        BearerLTE: ClassVar[QNetworkConfiguration.BearerType] = ...
        BearerUnknown: ClassVar[QNetworkConfiguration.BearerType] = ...
        BearerWCDMA: ClassVar[QNetworkConfiguration.BearerType] = ...
        BearerWLAN: ClassVar[QNetworkConfiguration.BearerType] = ...
        BearerWiMAX: ClassVar[QNetworkConfiguration.BearerType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkConfiguration.BearerType: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkConfiguration.BearerType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkConfiguration.BearerType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkConfiguration.BearerType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkConfiguration.BearerType: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkConfiguration.BearerType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkConfiguration.BearerType: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkConfiguration.BearerType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkConfiguration.BearerType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkConfiguration.BearerType: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkConfiguration.BearerType: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkConfiguration.BearerType: ...

    class Purpose:
        PrivatePurpose: ClassVar[QNetworkConfiguration.Purpose] = ...
        PublicPurpose: ClassVar[QNetworkConfiguration.Purpose] = ...
        ServiceSpecificPurpose: ClassVar[QNetworkConfiguration.Purpose] = ...
        UnknownPurpose: ClassVar[QNetworkConfiguration.Purpose] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Purpose: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Purpose: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Purpose: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Purpose: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Purpose: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Purpose: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Purpose: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Purpose: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Purpose: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Purpose: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Purpose: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Purpose: ...

    class StateFlag:
        Active: ClassVar[QNetworkConfiguration.StateFlag] = ...
        Defined: ClassVar[QNetworkConfiguration.StateFlag] = ...
        Discovered: ClassVar[QNetworkConfiguration.StateFlag] = ...
        Undefined: ClassVar[QNetworkConfiguration.StateFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkConfiguration.StateFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QNetworkConfiguration.StateFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkConfiguration.StateFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkConfiguration.StateFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkConfiguration.StateFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkConfiguration.StateFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkConfiguration.StateFlags: ...

    class StateFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkConfiguration.StateFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QNetworkConfiguration.StateFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkConfiguration.StateFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkConfiguration.StateFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkConfiguration.StateFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkConfiguration.StateFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkConfiguration.StateFlags: ...

    class Type:
        InternetAccessPoint: ClassVar[QNetworkConfiguration.Type] = ...
        Invalid: ClassVar[QNetworkConfiguration.Type] = ...
        ServiceNetwork: ClassVar[QNetworkConfiguration.Type] = ...
        UserChoice: ClassVar[QNetworkConfiguration.Type] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Type: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Type: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Type: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Type: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Type: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Type: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Type: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Type: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Type: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Type: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Type: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkConfiguration.Type: ...
    Active: ClassVar[QNetworkConfiguration.StateFlag] = ...
    Bearer2G: ClassVar[QNetworkConfiguration.BearerType] = ...
    Bearer3G: ClassVar[QNetworkConfiguration.BearerType] = ...
    Bearer4G: ClassVar[QNetworkConfiguration.BearerType] = ...
    BearerBluetooth: ClassVar[QNetworkConfiguration.BearerType] = ...
    BearerCDMA2000: ClassVar[QNetworkConfiguration.BearerType] = ...
    BearerEVDO: ClassVar[QNetworkConfiguration.BearerType] = ...
    BearerEthernet: ClassVar[QNetworkConfiguration.BearerType] = ...
    BearerHSPA: ClassVar[QNetworkConfiguration.BearerType] = ...
    BearerLTE: ClassVar[QNetworkConfiguration.BearerType] = ...
    BearerUnknown: ClassVar[QNetworkConfiguration.BearerType] = ...
    BearerWCDMA: ClassVar[QNetworkConfiguration.BearerType] = ...
    BearerWLAN: ClassVar[QNetworkConfiguration.BearerType] = ...
    BearerWiMAX: ClassVar[QNetworkConfiguration.BearerType] = ...
    Defined: ClassVar[QNetworkConfiguration.StateFlag] = ...
    Discovered: ClassVar[QNetworkConfiguration.StateFlag] = ...
    InternetAccessPoint: ClassVar[QNetworkConfiguration.Type] = ...
    Invalid: ClassVar[QNetworkConfiguration.Type] = ...
    PrivatePurpose: ClassVar[QNetworkConfiguration.Purpose] = ...
    PublicPurpose: ClassVar[QNetworkConfiguration.Purpose] = ...
    ServiceNetwork: ClassVar[QNetworkConfiguration.Type] = ...
    ServiceSpecificPurpose: ClassVar[QNetworkConfiguration.Purpose] = ...
    Undefined: ClassVar[QNetworkConfiguration.StateFlag] = ...
    UnknownPurpose: ClassVar[QNetworkConfiguration.Purpose] = ...
    UserChoice: ClassVar[QNetworkConfiguration.Type] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QNetworkConfiguration) -> None: ...
    def bearerType(self) -> QNetworkConfiguration.BearerType: ...
    def bearerTypeFamily(self) -> QNetworkConfiguration.BearerType: ...
    def bearerTypeName(self) -> str: ...
    def children(self) -> typing.List[QNetworkConfiguration]: ...
    def connectTimeout(self) -> int: ...
    def identifier(self) -> str: ...
    def isRoamingAvailable(self) -> bool: ...
    def isValid(self) -> bool: ...
    def name(self) -> str: ...
    def purpose(self) -> QNetworkConfiguration.Purpose: ...
    def setConnectTimeout(self, timeout: int) -> bool: ...
    def state(self) -> typing.Union[QNetworkConfiguration.StateFlags,QNetworkConfiguration.StateFlag]: ...
    def swap(self, other: QNetworkConfiguration) -> None: ...
    def type(self) -> QNetworkConfiguration.Type: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QNetworkConfigurationManager(PySide2.QtCore.QObject):
    class Capabilities:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkConfigurationManager.Capabilities: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QNetworkConfigurationManager.Capabilities: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkConfigurationManager.Capabilities: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkConfigurationManager.Capabilities: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkConfigurationManager.Capabilities: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkConfigurationManager.Capabilities: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkConfigurationManager.Capabilities: ...

    class Capability:
        ApplicationLevelRoaming: ClassVar[QNetworkConfigurationManager.Capability] = ...
        CanStartAndStopInterfaces: ClassVar[QNetworkConfigurationManager.Capability] = ...
        DataStatistics: ClassVar[QNetworkConfigurationManager.Capability] = ...
        DirectConnectionRouting: ClassVar[QNetworkConfigurationManager.Capability] = ...
        ForcedRoaming: ClassVar[QNetworkConfigurationManager.Capability] = ...
        NetworkSessionRequired: ClassVar[QNetworkConfigurationManager.Capability] = ...
        SystemSessionSupport: ClassVar[QNetworkConfigurationManager.Capability] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkConfigurationManager.Capabilities: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QNetworkConfigurationManager.Capability: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkConfigurationManager.Capabilities: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkConfigurationManager.Capabilities: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkConfigurationManager.Capabilities: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkConfigurationManager.Capabilities: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkConfigurationManager.Capabilities: ...
    ApplicationLevelRoaming: ClassVar[QNetworkConfigurationManager.Capability] = ...
    CanStartAndStopInterfaces: ClassVar[QNetworkConfigurationManager.Capability] = ...
    DataStatistics: ClassVar[QNetworkConfigurationManager.Capability] = ...
    DirectConnectionRouting: ClassVar[QNetworkConfigurationManager.Capability] = ...
    ForcedRoaming: ClassVar[QNetworkConfigurationManager.Capability] = ...
    NetworkSessionRequired: ClassVar[QNetworkConfigurationManager.Capability] = ...
    SystemSessionSupport: ClassVar[QNetworkConfigurationManager.Capability] = ...
    configurationAdded: ClassVar[PySide2.QtCore.Signal] = ...
    configurationChanged: ClassVar[PySide2.QtCore.Signal] = ...
    configurationRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    onlineStateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    updateCompleted: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., configurationAdded: typing.Callable = ..., configurationChanged: typing.Callable = ..., configurationRemoved: typing.Callable = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., onlineStateChanged: typing.Callable = ..., updateCompleted: typing.Callable = ...) -> None: ...
    def allConfigurations(self, flags: typing.Union[QNetworkConfiguration.StateFlags,QNetworkConfiguration.StateFlag] = ...) -> typing.List[QNetworkConfiguration]: ...
    def capabilities(self) -> typing.Union[QNetworkConfigurationManager.Capabilities,QNetworkConfigurationManager.Capability]: ...
    def configurationFromIdentifier(self, identifier: str) -> QNetworkConfiguration: ...
    def defaultConfiguration(self) -> QNetworkConfiguration: ...
    def isOnline(self) -> bool: ...
    def updateConfigurations(self) -> None: ...

class QNetworkCookie(shiboken2.Object):
    class RawForm:
        Full: ClassVar[QNetworkCookie.RawForm] = ...
        NameAndValueOnly: ClassVar[QNetworkCookie.RawForm] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkCookie.RawForm: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkCookie.RawForm: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkCookie.RawForm: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkCookie.RawForm: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkCookie.RawForm: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkCookie.RawForm: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkCookie.RawForm: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkCookie.RawForm: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkCookie.RawForm: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkCookie.RawForm: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkCookie.RawForm: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkCookie.RawForm: ...
    Full: ClassVar[QNetworkCookie.RawForm] = ...
    NameAndValueOnly: ClassVar[QNetworkCookie.RawForm] = ...
    @overload
    def __init__(self, name: typing.Union[PySide2.QtCore.QByteArray,bytes] = ..., value: typing.Union[PySide2.QtCore.QByteArray,bytes] = ...) -> None: ...
    @overload
    def __init__(self, other: QNetworkCookie) -> None: ...
    def domain(self) -> str: ...
    def expirationDate(self) -> PySide2.QtCore.QDateTime: ...
    def hasSameIdentifier(self, other: QNetworkCookie) -> bool: ...
    def isHttpOnly(self) -> bool: ...
    def isSecure(self) -> bool: ...
    def isSessionCookie(self) -> bool: ...
    def name(self) -> PySide2.QtCore.QByteArray: ...
    def normalize(self, url: PySide2.QtCore.QUrl) -> None: ...
    @classmethod
    def parseCookies(cls, cookieString: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> typing.List[QNetworkCookie]: ...
    def path(self) -> str: ...
    def setDomain(self, domain: str) -> None: ...
    def setExpirationDate(self, date: PySide2.QtCore.QDateTime) -> None: ...
    def setHttpOnly(self, enable: bool) -> None: ...
    def setName(self, cookieName: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setPath(self, path: str) -> None: ...
    def setSecure(self, enable: bool) -> None: ...
    def setValue(self, value: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def swap(self, other: QNetworkCookie) -> None: ...
    def toRawForm(self, form: QNetworkCookie.RawForm = ...) -> PySide2.QtCore.QByteArray: ...
    def value(self) -> PySide2.QtCore.QByteArray: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QNetworkCookieJar(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def allCookies(self) -> typing.List[QNetworkCookie]: ...
    def cookiesForUrl(self, url: PySide2.QtCore.QUrl) -> typing.List[QNetworkCookie]: ...
    def deleteCookie(self, cookie: QNetworkCookie) -> bool: ...
    def insertCookie(self, cookie: QNetworkCookie) -> bool: ...
    def setAllCookies(self, cookieList: typing.Sequence[QNetworkCookie]) -> None: ...
    def setCookiesFromUrl(self, cookieList: typing.Sequence[QNetworkCookie], url: PySide2.QtCore.QUrl) -> bool: ...
    def updateCookie(self, cookie: QNetworkCookie) -> bool: ...
    def validateCookie(self, cookie: QNetworkCookie, url: PySide2.QtCore.QUrl) -> bool: ...

class QNetworkDatagram(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, data: typing.Union[PySide2.QtCore.QByteArray,bytes], destinationAddress: QHostAddress = ..., port: int = ...) -> None: ...
    @overload
    def __init__(self, other: QNetworkDatagram) -> None: ...
    def clear(self) -> None: ...
    def data(self) -> PySide2.QtCore.QByteArray: ...
    def destinationAddress(self) -> QHostAddress: ...
    def destinationPort(self) -> int: ...
    def hopLimit(self) -> int: ...
    def interfaceIndex(self) -> int: ...
    def isNull(self) -> bool: ...
    def isValid(self) -> bool: ...
    def makeReply(self, payload: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> QNetworkDatagram: ...
    def senderAddress(self) -> QHostAddress: ...
    def senderPort(self) -> int: ...
    def setData(self, data: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setDestination(self, address: QHostAddress, port: int) -> None: ...
    def setHopLimit(self, count: int) -> None: ...
    def setInterfaceIndex(self, index: int) -> None: ...
    def setSender(self, address: QHostAddress, port: int = ...) -> None: ...
    def swap(self, other: QNetworkDatagram) -> None: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...

class QNetworkDiskCache(QAbstractNetworkCache):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def cacheDirectory(self) -> str: ...
    def cacheSize(self) -> int: ...
    def clear(self) -> None: ...
    def data(self, url: PySide2.QtCore.QUrl) -> PySide2.QtCore.QIODevice: ...
    def expire(self) -> int: ...
    def fileMetaData(self, fileName: str) -> QNetworkCacheMetaData: ...
    def insert(self, device: PySide2.QtCore.QIODevice) -> None: ...
    def maximumCacheSize(self) -> int: ...
    def metaData(self, url: PySide2.QtCore.QUrl) -> QNetworkCacheMetaData: ...
    def prepare(self, metaData: QNetworkCacheMetaData) -> PySide2.QtCore.QIODevice: ...
    def remove(self, url: PySide2.QtCore.QUrl) -> bool: ...
    def setCacheDirectory(self, cacheDir: str) -> None: ...
    def setMaximumCacheSize(self, size: int) -> None: ...
    def updateMetaData(self, metaData: QNetworkCacheMetaData) -> None: ...

class QNetworkInterface(shiboken2.Object):
    class InterfaceFlag:
        CanBroadcast: ClassVar[QNetworkInterface.InterfaceFlag] = ...
        CanMulticast: ClassVar[QNetworkInterface.InterfaceFlag] = ...
        IsLoopBack: ClassVar[QNetworkInterface.InterfaceFlag] = ...
        IsPointToPoint: ClassVar[QNetworkInterface.InterfaceFlag] = ...
        IsRunning: ClassVar[QNetworkInterface.InterfaceFlag] = ...
        IsUp: ClassVar[QNetworkInterface.InterfaceFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QNetworkInterface.InterfaceFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceFlags: ...

    class InterfaceFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QNetworkInterface.InterfaceFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceFlags: ...

    class InterfaceType:
        CanBus: ClassVar[QNetworkInterface.InterfaceType] = ...
        Ethernet: ClassVar[QNetworkInterface.InterfaceType] = ...
        Fddi: ClassVar[QNetworkInterface.InterfaceType] = ...
        Ieee1394: ClassVar[QNetworkInterface.InterfaceType] = ...
        Ieee80211: ClassVar[QNetworkInterface.InterfaceType] = ...
        Ieee802154: ClassVar[QNetworkInterface.InterfaceType] = ...
        Ieee80216: ClassVar[QNetworkInterface.InterfaceType] = ...
        Loopback: ClassVar[QNetworkInterface.InterfaceType] = ...
        Phonet: ClassVar[QNetworkInterface.InterfaceType] = ...
        Ppp: ClassVar[QNetworkInterface.InterfaceType] = ...
        SixLoWPAN: ClassVar[QNetworkInterface.InterfaceType] = ...
        Slip: ClassVar[QNetworkInterface.InterfaceType] = ...
        Unknown: ClassVar[QNetworkInterface.InterfaceType] = ...
        Virtual: ClassVar[QNetworkInterface.InterfaceType] = ...
        Wifi: ClassVar[QNetworkInterface.InterfaceType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceType: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceType: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceType: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceType: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceType: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkInterface.InterfaceType: ...
    CanBroadcast: ClassVar[QNetworkInterface.InterfaceFlag] = ...
    CanBus: ClassVar[QNetworkInterface.InterfaceType] = ...
    CanMulticast: ClassVar[QNetworkInterface.InterfaceFlag] = ...
    Ethernet: ClassVar[QNetworkInterface.InterfaceType] = ...
    Fddi: ClassVar[QNetworkInterface.InterfaceType] = ...
    Ieee1394: ClassVar[QNetworkInterface.InterfaceType] = ...
    Ieee80211: ClassVar[QNetworkInterface.InterfaceType] = ...
    Ieee802154: ClassVar[QNetworkInterface.InterfaceType] = ...
    Ieee80216: ClassVar[QNetworkInterface.InterfaceType] = ...
    IsLoopBack: ClassVar[QNetworkInterface.InterfaceFlag] = ...
    IsPointToPoint: ClassVar[QNetworkInterface.InterfaceFlag] = ...
    IsRunning: ClassVar[QNetworkInterface.InterfaceFlag] = ...
    IsUp: ClassVar[QNetworkInterface.InterfaceFlag] = ...
    Loopback: ClassVar[QNetworkInterface.InterfaceType] = ...
    Phonet: ClassVar[QNetworkInterface.InterfaceType] = ...
    Ppp: ClassVar[QNetworkInterface.InterfaceType] = ...
    SixLoWPAN: ClassVar[QNetworkInterface.InterfaceType] = ...
    Slip: ClassVar[QNetworkInterface.InterfaceType] = ...
    Unknown: ClassVar[QNetworkInterface.InterfaceType] = ...
    Virtual: ClassVar[QNetworkInterface.InterfaceType] = ...
    Wifi: ClassVar[QNetworkInterface.InterfaceType] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QNetworkInterface) -> None: ...
    def addressEntries(self) -> typing.List[QNetworkAddressEntry]: ...
    @classmethod
    def allAddresses(cls) -> typing.List[QHostAddress]: ...
    @classmethod
    def allInterfaces(cls) -> typing.List[QNetworkInterface]: ...
    def flags(self) -> typing.Union[QNetworkInterface.InterfaceFlags,QNetworkInterface.InterfaceFlag]: ...
    def hardwareAddress(self) -> str: ...
    def humanReadableName(self) -> str: ...
    def index(self) -> int: ...
    @classmethod
    def interfaceFromIndex(cls, index: int) -> QNetworkInterface: ...
    @classmethod
    def interfaceFromName(cls, name: str) -> QNetworkInterface: ...
    @classmethod
    def interfaceIndexFromName(cls, name: str) -> int: ...
    @classmethod
    def interfaceNameFromIndex(cls, index: int) -> str: ...
    def isValid(self) -> bool: ...
    def maximumTransmissionUnit(self) -> int: ...
    def name(self) -> str: ...
    def swap(self, other: QNetworkInterface) -> None: ...
    def type(self) -> QNetworkInterface.InterfaceType: ...
    def __copy__(self) -> None: ...

class QNetworkProxy(shiboken2.Object):
    class Capabilities:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkProxy.Capabilities: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QNetworkProxy.Capabilities: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkProxy.Capabilities: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkProxy.Capabilities: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkProxy.Capabilities: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkProxy.Capabilities: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkProxy.Capabilities: ...

    class Capability:
        CachingCapability: ClassVar[QNetworkProxy.Capability] = ...
        HostNameLookupCapability: ClassVar[QNetworkProxy.Capability] = ...
        ListeningCapability: ClassVar[QNetworkProxy.Capability] = ...
        SctpListeningCapability: ClassVar[QNetworkProxy.Capability] = ...
        SctpTunnelingCapability: ClassVar[QNetworkProxy.Capability] = ...
        TunnelingCapability: ClassVar[QNetworkProxy.Capability] = ...
        UdpTunnelingCapability: ClassVar[QNetworkProxy.Capability] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkProxy.Capabilities: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QNetworkProxy.Capability: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkProxy.Capabilities: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkProxy.Capabilities: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkProxy.Capabilities: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkProxy.Capabilities: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkProxy.Capabilities: ...

    class ProxyType:
        DefaultProxy: ClassVar[QNetworkProxy.ProxyType] = ...
        FtpCachingProxy: ClassVar[QNetworkProxy.ProxyType] = ...
        HttpCachingProxy: ClassVar[QNetworkProxy.ProxyType] = ...
        HttpProxy: ClassVar[QNetworkProxy.ProxyType] = ...
        NoProxy: ClassVar[QNetworkProxy.ProxyType] = ...
        Socks5Proxy: ClassVar[QNetworkProxy.ProxyType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkProxy.ProxyType: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkProxy.ProxyType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkProxy.ProxyType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkProxy.ProxyType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkProxy.ProxyType: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkProxy.ProxyType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkProxy.ProxyType: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkProxy.ProxyType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkProxy.ProxyType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkProxy.ProxyType: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkProxy.ProxyType: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkProxy.ProxyType: ...
    CachingCapability: ClassVar[QNetworkProxy.Capability] = ...
    DefaultProxy: ClassVar[QNetworkProxy.ProxyType] = ...
    FtpCachingProxy: ClassVar[QNetworkProxy.ProxyType] = ...
    HostNameLookupCapability: ClassVar[QNetworkProxy.Capability] = ...
    HttpCachingProxy: ClassVar[QNetworkProxy.ProxyType] = ...
    HttpProxy: ClassVar[QNetworkProxy.ProxyType] = ...
    ListeningCapability: ClassVar[QNetworkProxy.Capability] = ...
    NoProxy: ClassVar[QNetworkProxy.ProxyType] = ...
    SctpListeningCapability: ClassVar[QNetworkProxy.Capability] = ...
    SctpTunnelingCapability: ClassVar[QNetworkProxy.Capability] = ...
    Socks5Proxy: ClassVar[QNetworkProxy.ProxyType] = ...
    TunnelingCapability: ClassVar[QNetworkProxy.Capability] = ...
    UdpTunnelingCapability: ClassVar[QNetworkProxy.Capability] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QNetworkProxy) -> None: ...
    @overload
    def __init__(self, type: QNetworkProxy.ProxyType, hostName: str = ..., port: int = ..., user: str = ..., password: str = ...) -> None: ...
    @classmethod
    def applicationProxy(cls) -> QNetworkProxy: ...
    def capabilities(self) -> typing.Union[QNetworkProxy.Capabilities,QNetworkProxy.Capability]: ...
    def hasRawHeader(self, headerName: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> bool: ...
    def header(self, header: QNetworkRequest.KnownHeaders) -> typing.Any: ...
    def hostName(self) -> str: ...
    def isCachingProxy(self) -> bool: ...
    def isTransparentProxy(self) -> bool: ...
    def password(self) -> str: ...
    def port(self) -> int: ...
    def rawHeader(self, headerName: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> PySide2.QtCore.QByteArray: ...
    def rawHeaderList(self) -> typing.List[PySide2.QtCore.QByteArray]: ...
    @classmethod
    def setApplicationProxy(cls, proxy: QNetworkProxy) -> None: ...
    def setCapabilities(self, capab: typing.Union[QNetworkProxy.Capabilities,QNetworkProxy.Capability]) -> None: ...
    def setHeader(self, header: QNetworkRequest.KnownHeaders, value: typing.Any) -> None: ...
    def setHostName(self, hostName: str) -> None: ...
    def setPassword(self, password: str) -> None: ...
    def setPort(self, port: int) -> None: ...
    def setRawHeader(self, headerName: typing.Union[PySide2.QtCore.QByteArray,bytes], value: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setType(self, type: QNetworkProxy.ProxyType) -> None: ...
    def setUser(self, userName: str) -> None: ...
    def swap(self, other: QNetworkProxy) -> None: ...
    def type(self) -> QNetworkProxy.ProxyType: ...
    def user(self) -> str: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QNetworkProxyFactory(shiboken2.Object):
    def __init__(self) -> None: ...
    @classmethod
    def proxyForQuery(cls, query: QNetworkProxyQuery) -> typing.List[QNetworkProxy]: ...
    def queryProxy(self, query: QNetworkProxyQuery = ...) -> typing.List[QNetworkProxy]: ...
    @classmethod
    def setApplicationProxyFactory(cls, factory: QNetworkProxyFactory) -> None: ...
    @classmethod
    def setUseSystemConfiguration(cls, enable: bool) -> None: ...
    @classmethod
    def systemProxyForQuery(cls, query: QNetworkProxyQuery = ...) -> typing.List[QNetworkProxy]: ...
    @classmethod
    def usesSystemConfiguration(cls) -> bool: ...

class QNetworkProxyQuery(shiboken2.Object):
    class QueryType:
        SctpServer: ClassVar[QNetworkProxyQuery.QueryType] = ...
        SctpSocket: ClassVar[QNetworkProxyQuery.QueryType] = ...
        TcpServer: ClassVar[QNetworkProxyQuery.QueryType] = ...
        TcpSocket: ClassVar[QNetworkProxyQuery.QueryType] = ...
        UdpSocket: ClassVar[QNetworkProxyQuery.QueryType] = ...
        UrlRequest: ClassVar[QNetworkProxyQuery.QueryType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkProxyQuery.QueryType: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkProxyQuery.QueryType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkProxyQuery.QueryType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkProxyQuery.QueryType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkProxyQuery.QueryType: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkProxyQuery.QueryType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkProxyQuery.QueryType: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkProxyQuery.QueryType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkProxyQuery.QueryType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkProxyQuery.QueryType: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkProxyQuery.QueryType: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkProxyQuery.QueryType: ...
    SctpServer: ClassVar[QNetworkProxyQuery.QueryType] = ...
    SctpSocket: ClassVar[QNetworkProxyQuery.QueryType] = ...
    TcpServer: ClassVar[QNetworkProxyQuery.QueryType] = ...
    TcpSocket: ClassVar[QNetworkProxyQuery.QueryType] = ...
    UdpSocket: ClassVar[QNetworkProxyQuery.QueryType] = ...
    UrlRequest: ClassVar[QNetworkProxyQuery.QueryType] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, bindPort: int, protocolTag: str = ..., queryType: QNetworkProxyQuery.QueryType = ...) -> None: ...
    @overload
    def __init__(self, hostname: str, port: int, protocolTag: str = ..., queryType: QNetworkProxyQuery.QueryType = ...) -> None: ...
    @overload
    def __init__(self, networkConfiguration: QNetworkConfiguration, bindPort: int, protocolTag: str = ..., queryType: QNetworkProxyQuery.QueryType = ...) -> None: ...
    @overload
    def __init__(self, networkConfiguration: QNetworkConfiguration, hostname: str, port: int, protocolTag: str = ..., queryType: QNetworkProxyQuery.QueryType = ...) -> None: ...
    @overload
    def __init__(self, networkConfiguration: QNetworkConfiguration, requestUrl: PySide2.QtCore.QUrl, queryType: QNetworkProxyQuery.QueryType = ...) -> None: ...
    @overload
    def __init__(self, other: QNetworkProxyQuery) -> None: ...
    @overload
    def __init__(self, requestUrl: PySide2.QtCore.QUrl, queryType: QNetworkProxyQuery.QueryType = ...) -> None: ...
    def localPort(self) -> int: ...
    def networkConfiguration(self) -> QNetworkConfiguration: ...
    def peerHostName(self) -> str: ...
    def peerPort(self) -> int: ...
    def protocolTag(self) -> str: ...
    def queryType(self) -> QNetworkProxyQuery.QueryType: ...
    def setLocalPort(self, port: int) -> None: ...
    def setNetworkConfiguration(self, networkConfiguration: QNetworkConfiguration) -> None: ...
    def setPeerHostName(self, hostname: str) -> None: ...
    def setPeerPort(self, port: int) -> None: ...
    def setProtocolTag(self, protocolTag: str) -> None: ...
    def setQueryType(self, type: QNetworkProxyQuery.QueryType) -> None: ...
    def setUrl(self, url: PySide2.QtCore.QUrl) -> None: ...
    def swap(self, other: QNetworkProxyQuery) -> None: ...
    def url(self) -> PySide2.QtCore.QUrl: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QNetworkReply(PySide2.QtCore.QIODevice):
    class NetworkError:
        AuthenticationRequiredError: ClassVar[QNetworkReply.NetworkError] = ...
        BackgroundRequestNotAllowedError: ClassVar[QNetworkReply.NetworkError] = ...
        ConnectionRefusedError: ClassVar[QNetworkReply.NetworkError] = ...
        ContentAccessDenied: ClassVar[QNetworkReply.NetworkError] = ...
        ContentConflictError: ClassVar[QNetworkReply.NetworkError] = ...
        ContentGoneError: ClassVar[QNetworkReply.NetworkError] = ...
        ContentNotFoundError: ClassVar[QNetworkReply.NetworkError] = ...
        ContentOperationNotPermittedError: ClassVar[QNetworkReply.NetworkError] = ...
        ContentReSendError: ClassVar[QNetworkReply.NetworkError] = ...
        HostNotFoundError: ClassVar[QNetworkReply.NetworkError] = ...
        InsecureRedirectError: ClassVar[QNetworkReply.NetworkError] = ...
        InternalServerError: ClassVar[QNetworkReply.NetworkError] = ...
        NetworkSessionFailedError: ClassVar[QNetworkReply.NetworkError] = ...
        NoError: ClassVar[QNetworkReply.NetworkError] = ...
        OperationCanceledError: ClassVar[QNetworkReply.NetworkError] = ...
        OperationNotImplementedError: ClassVar[QNetworkReply.NetworkError] = ...
        ProtocolFailure: ClassVar[QNetworkReply.NetworkError] = ...
        ProtocolInvalidOperationError: ClassVar[QNetworkReply.NetworkError] = ...
        ProtocolUnknownError: ClassVar[QNetworkReply.NetworkError] = ...
        ProxyAuthenticationRequiredError: ClassVar[QNetworkReply.NetworkError] = ...
        ProxyConnectionClosedError: ClassVar[QNetworkReply.NetworkError] = ...
        ProxyConnectionRefusedError: ClassVar[QNetworkReply.NetworkError] = ...
        ProxyNotFoundError: ClassVar[QNetworkReply.NetworkError] = ...
        ProxyTimeoutError: ClassVar[QNetworkReply.NetworkError] = ...
        RemoteHostClosedError: ClassVar[QNetworkReply.NetworkError] = ...
        ServiceUnavailableError: ClassVar[QNetworkReply.NetworkError] = ...
        SslHandshakeFailedError: ClassVar[QNetworkReply.NetworkError] = ...
        TemporaryNetworkFailureError: ClassVar[QNetworkReply.NetworkError] = ...
        TimeoutError: ClassVar[QNetworkReply.NetworkError] = ...
        TooManyRedirectsError: ClassVar[QNetworkReply.NetworkError] = ...
        UnknownContentError: ClassVar[QNetworkReply.NetworkError] = ...
        UnknownNetworkError: ClassVar[QNetworkReply.NetworkError] = ...
        UnknownProxyError: ClassVar[QNetworkReply.NetworkError] = ...
        UnknownServerError: ClassVar[QNetworkReply.NetworkError] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkReply.NetworkError: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkReply.NetworkError: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkReply.NetworkError: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkReply.NetworkError: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkReply.NetworkError: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkReply.NetworkError: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkReply.NetworkError: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkReply.NetworkError: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkReply.NetworkError: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkReply.NetworkError: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkReply.NetworkError: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkReply.NetworkError: ...
    AuthenticationRequiredError: ClassVar[QNetworkReply.NetworkError] = ...
    BackgroundRequestNotAllowedError: ClassVar[QNetworkReply.NetworkError] = ...
    ConnectionRefusedError: ClassVar[QNetworkReply.NetworkError] = ...
    ContentAccessDenied: ClassVar[QNetworkReply.NetworkError] = ...
    ContentConflictError: ClassVar[QNetworkReply.NetworkError] = ...
    ContentGoneError: ClassVar[QNetworkReply.NetworkError] = ...
    ContentNotFoundError: ClassVar[QNetworkReply.NetworkError] = ...
    ContentOperationNotPermittedError: ClassVar[QNetworkReply.NetworkError] = ...
    ContentReSendError: ClassVar[QNetworkReply.NetworkError] = ...
    HostNotFoundError: ClassVar[QNetworkReply.NetworkError] = ...
    InsecureRedirectError: ClassVar[QNetworkReply.NetworkError] = ...
    InternalServerError: ClassVar[QNetworkReply.NetworkError] = ...
    NetworkSessionFailedError: ClassVar[QNetworkReply.NetworkError] = ...
    NoError: ClassVar[QNetworkReply.NetworkError] = ...
    OperationCanceledError: ClassVar[QNetworkReply.NetworkError] = ...
    OperationNotImplementedError: ClassVar[QNetworkReply.NetworkError] = ...
    ProtocolFailure: ClassVar[QNetworkReply.NetworkError] = ...
    ProtocolInvalidOperationError: ClassVar[QNetworkReply.NetworkError] = ...
    ProtocolUnknownError: ClassVar[QNetworkReply.NetworkError] = ...
    ProxyAuthenticationRequiredError: ClassVar[QNetworkReply.NetworkError] = ...
    ProxyConnectionClosedError: ClassVar[QNetworkReply.NetworkError] = ...
    ProxyConnectionRefusedError: ClassVar[QNetworkReply.NetworkError] = ...
    ProxyNotFoundError: ClassVar[QNetworkReply.NetworkError] = ...
    ProxyTimeoutError: ClassVar[QNetworkReply.NetworkError] = ...
    RemoteHostClosedError: ClassVar[QNetworkReply.NetworkError] = ...
    ServiceUnavailableError: ClassVar[QNetworkReply.NetworkError] = ...
    SslHandshakeFailedError: ClassVar[QNetworkReply.NetworkError] = ...
    TemporaryNetworkFailureError: ClassVar[QNetworkReply.NetworkError] = ...
    TimeoutError: ClassVar[QNetworkReply.NetworkError] = ...
    TooManyRedirectsError: ClassVar[QNetworkReply.NetworkError] = ...
    UnknownContentError: ClassVar[QNetworkReply.NetworkError] = ...
    UnknownNetworkError: ClassVar[QNetworkReply.NetworkError] = ...
    UnknownProxyError: ClassVar[QNetworkReply.NetworkError] = ...
    UnknownServerError: ClassVar[QNetworkReply.NetworkError] = ...
    downloadProgress: ClassVar[PySide2.QtCore.Signal] = ...
    encrypted: ClassVar[PySide2.QtCore.Signal] = ...
    error: ClassVar[PySide2.QtCore.Signal] = ...
    errorOccurred: ClassVar[PySide2.QtCore.Signal] = ...
    finished: ClassVar[PySide2.QtCore.Signal] = ...
    metaDataChanged: ClassVar[PySide2.QtCore.Signal] = ...
    preSharedKeyAuthenticationRequired: ClassVar[PySide2.QtCore.Signal] = ...
    redirectAllowed: ClassVar[PySide2.QtCore.Signal] = ...
    redirected: ClassVar[PySide2.QtCore.Signal] = ...
    sslErrors: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    uploadProgress: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def abort(self) -> None: ...
    def attribute(self, code: QNetworkRequest.Attribute) -> typing.Any: ...
    def close(self) -> None: ...
    def hasRawHeader(self, headerName: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> bool: ...
    def header(self, header: QNetworkRequest.KnownHeaders) -> typing.Any: ...
    @overload
    def ignoreSslErrors(self) -> None: ...
    @overload
    def ignoreSslErrors(self, errors: typing.Sequence[QSslError]) -> None: ...
    def ignoreSslErrorsImplementation(self, arg__1: typing.Sequence[QSslError]) -> None: ...
    def isFinished(self) -> bool: ...
    def isRunning(self) -> bool: ...
    def isSequential(self) -> bool: ...
    def manager(self) -> QNetworkAccessManager: ...
    def operation(self) -> QNetworkAccessManager.Operation: ...
    def rawHeader(self, headerName: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> PySide2.QtCore.QByteArray: ...
    def rawHeaderList(self) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def rawHeaderPairs(self) -> typing.List[typing.Tuple[PySide2.QtCore.QByteArray,PySide2.QtCore.QByteArray]]: ...
    def readBufferSize(self) -> int: ...
    def request(self) -> QNetworkRequest: ...
    def setAttribute(self, code: QNetworkRequest.Attribute, value: typing.Any) -> None: ...
    def setError(self, errorCode: QNetworkReply.NetworkError, errorString: str) -> None: ...
    def setFinished(self, arg__1: bool) -> None: ...
    def setHeader(self, header: QNetworkRequest.KnownHeaders, value: typing.Any) -> None: ...
    def setOperation(self, operation: QNetworkAccessManager.Operation) -> None: ...
    def setRawHeader(self, headerName: typing.Union[PySide2.QtCore.QByteArray,bytes], value: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setReadBufferSize(self, size: int) -> None: ...
    def setRequest(self, request: QNetworkRequest) -> None: ...
    def setSslConfiguration(self, configuration: QSslConfiguration) -> None: ...
    def setSslConfigurationImplementation(self, arg__1: QSslConfiguration) -> None: ...
    def setUrl(self, url: PySide2.QtCore.QUrl) -> None: ...
    def sslConfiguration(self) -> QSslConfiguration: ...
    def sslConfigurationImplementation(self, arg__1: QSslConfiguration) -> None: ...
    def url(self) -> PySide2.QtCore.QUrl: ...
    def writeData(self, data: bytes, len: int) -> int: ...

class QNetworkRequest(shiboken2.Object):
    class Attribute:
        AuthenticationReuseAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        AutoDeleteReplyOnFinishAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        BackgroundRequestAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        CacheLoadControlAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        CacheSaveControlAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        ConnectionEncryptedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        CookieLoadControlAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        CookieSaveControlAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        CustomVerbAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        DoNotBufferUploadDataAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        DownloadBufferAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        EmitAllUploadProgressSignalsAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        FollowRedirectsAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        HTTP2AllowedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        HTTP2WasUsedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        Http2AllowedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        Http2DirectAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        Http2WasUsedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        HttpPipeliningAllowedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        HttpPipeliningWasUsedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        HttpReasonPhraseAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        HttpStatusCodeAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        MaximumDownloadBufferSizeAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        OriginalContentLengthAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        RedirectPolicyAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        RedirectionTargetAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        ResourceTypeAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        SourceIsFromCacheAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        SpdyAllowedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        SpdyWasUsedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        SynchronousRequestAttribute: ClassVar[QNetworkRequest.Attribute] = ...
        User: ClassVar[QNetworkRequest.Attribute] = ...
        UserMax: ClassVar[QNetworkRequest.Attribute] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkRequest.Attribute: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkRequest.Attribute: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkRequest.Attribute: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkRequest.Attribute: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkRequest.Attribute: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkRequest.Attribute: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkRequest.Attribute: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkRequest.Attribute: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkRequest.Attribute: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkRequest.Attribute: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkRequest.Attribute: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkRequest.Attribute: ...

    class CacheLoadControl:
        AlwaysCache: ClassVar[QNetworkRequest.CacheLoadControl] = ...
        AlwaysNetwork: ClassVar[QNetworkRequest.CacheLoadControl] = ...
        PreferCache: ClassVar[QNetworkRequest.CacheLoadControl] = ...
        PreferNetwork: ClassVar[QNetworkRequest.CacheLoadControl] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkRequest.CacheLoadControl: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkRequest.CacheLoadControl: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkRequest.CacheLoadControl: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkRequest.CacheLoadControl: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkRequest.CacheLoadControl: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkRequest.CacheLoadControl: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkRequest.CacheLoadControl: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkRequest.CacheLoadControl: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkRequest.CacheLoadControl: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkRequest.CacheLoadControl: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkRequest.CacheLoadControl: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkRequest.CacheLoadControl: ...

    class KnownHeaders:
        ContentDispositionHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
        ContentLengthHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
        ContentTypeHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
        CookieHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
        ETagHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
        IfMatchHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
        IfModifiedSinceHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
        IfNoneMatchHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
        LastModifiedHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
        LocationHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
        ServerHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
        SetCookieHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
        UserAgentHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkRequest.KnownHeaders: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkRequest.KnownHeaders: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkRequest.KnownHeaders: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkRequest.KnownHeaders: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkRequest.KnownHeaders: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkRequest.KnownHeaders: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkRequest.KnownHeaders: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkRequest.KnownHeaders: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkRequest.KnownHeaders: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkRequest.KnownHeaders: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkRequest.KnownHeaders: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkRequest.KnownHeaders: ...

    class LoadControl:
        Automatic: ClassVar[QNetworkRequest.LoadControl] = ...
        Manual: ClassVar[QNetworkRequest.LoadControl] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkRequest.LoadControl: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkRequest.LoadControl: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkRequest.LoadControl: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkRequest.LoadControl: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkRequest.LoadControl: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkRequest.LoadControl: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkRequest.LoadControl: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkRequest.LoadControl: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkRequest.LoadControl: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkRequest.LoadControl: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkRequest.LoadControl: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkRequest.LoadControl: ...

    class Priority:
        HighPriority: ClassVar[QNetworkRequest.Priority] = ...
        LowPriority: ClassVar[QNetworkRequest.Priority] = ...
        NormalPriority: ClassVar[QNetworkRequest.Priority] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkRequest.Priority: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkRequest.Priority: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkRequest.Priority: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkRequest.Priority: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkRequest.Priority: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkRequest.Priority: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkRequest.Priority: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkRequest.Priority: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkRequest.Priority: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkRequest.Priority: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkRequest.Priority: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkRequest.Priority: ...

    class RedirectPolicy:
        ManualRedirectPolicy: ClassVar[QNetworkRequest.RedirectPolicy] = ...
        NoLessSafeRedirectPolicy: ClassVar[QNetworkRequest.RedirectPolicy] = ...
        SameOriginRedirectPolicy: ClassVar[QNetworkRequest.RedirectPolicy] = ...
        UserVerifiedRedirectPolicy: ClassVar[QNetworkRequest.RedirectPolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkRequest.RedirectPolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkRequest.RedirectPolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkRequest.RedirectPolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkRequest.RedirectPolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkRequest.RedirectPolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkRequest.RedirectPolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkRequest.RedirectPolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkRequest.RedirectPolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkRequest.RedirectPolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkRequest.RedirectPolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkRequest.RedirectPolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkRequest.RedirectPolicy: ...

    class TransferTimeoutConstant:
        DefaultTransferTimeoutConstant: ClassVar[QNetworkRequest.TransferTimeoutConstant] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkRequest.TransferTimeoutConstant: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkRequest.TransferTimeoutConstant: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkRequest.TransferTimeoutConstant: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkRequest.TransferTimeoutConstant: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkRequest.TransferTimeoutConstant: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkRequest.TransferTimeoutConstant: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkRequest.TransferTimeoutConstant: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkRequest.TransferTimeoutConstant: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkRequest.TransferTimeoutConstant: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkRequest.TransferTimeoutConstant: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkRequest.TransferTimeoutConstant: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkRequest.TransferTimeoutConstant: ...
    AlwaysCache: ClassVar[QNetworkRequest.CacheLoadControl] = ...
    AlwaysNetwork: ClassVar[QNetworkRequest.CacheLoadControl] = ...
    AuthenticationReuseAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    AutoDeleteReplyOnFinishAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    Automatic: ClassVar[QNetworkRequest.LoadControl] = ...
    BackgroundRequestAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    CacheLoadControlAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    CacheSaveControlAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    ConnectionEncryptedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    ContentDispositionHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
    ContentLengthHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
    ContentTypeHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
    CookieHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
    CookieLoadControlAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    CookieSaveControlAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    CustomVerbAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    DefaultTransferTimeoutConstant: ClassVar[QNetworkRequest.TransferTimeoutConstant] = ...
    DoNotBufferUploadDataAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    DownloadBufferAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    ETagHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
    EmitAllUploadProgressSignalsAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    FollowRedirectsAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    HTTP2AllowedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    HTTP2WasUsedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    HighPriority: ClassVar[QNetworkRequest.Priority] = ...
    Http2AllowedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    Http2DirectAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    Http2WasUsedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    HttpPipeliningAllowedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    HttpPipeliningWasUsedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    HttpReasonPhraseAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    HttpStatusCodeAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    IfMatchHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
    IfModifiedSinceHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
    IfNoneMatchHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
    LastModifiedHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
    LocationHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
    LowPriority: ClassVar[QNetworkRequest.Priority] = ...
    Manual: ClassVar[QNetworkRequest.LoadControl] = ...
    ManualRedirectPolicy: ClassVar[QNetworkRequest.RedirectPolicy] = ...
    MaximumDownloadBufferSizeAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    NoLessSafeRedirectPolicy: ClassVar[QNetworkRequest.RedirectPolicy] = ...
    NormalPriority: ClassVar[QNetworkRequest.Priority] = ...
    OriginalContentLengthAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    PreferCache: ClassVar[QNetworkRequest.CacheLoadControl] = ...
    PreferNetwork: ClassVar[QNetworkRequest.CacheLoadControl] = ...
    RedirectPolicyAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    RedirectionTargetAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    ResourceTypeAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    SameOriginRedirectPolicy: ClassVar[QNetworkRequest.RedirectPolicy] = ...
    ServerHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
    SetCookieHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
    SourceIsFromCacheAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    SpdyAllowedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    SpdyWasUsedAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    SynchronousRequestAttribute: ClassVar[QNetworkRequest.Attribute] = ...
    User: ClassVar[QNetworkRequest.Attribute] = ...
    UserAgentHeader: ClassVar[QNetworkRequest.KnownHeaders] = ...
    UserMax: ClassVar[QNetworkRequest.Attribute] = ...
    UserVerifiedRedirectPolicy: ClassVar[QNetworkRequest.RedirectPolicy] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QNetworkRequest) -> None: ...
    @overload
    def __init__(self, url: PySide2.QtCore.QUrl) -> None: ...
    def attribute(self, code: QNetworkRequest.Attribute, defaultValue: typing.Any = ...) -> typing.Any: ...
    def hasRawHeader(self, headerName: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> bool: ...
    def header(self, header: QNetworkRequest.KnownHeaders) -> typing.Any: ...
    def maximumRedirectsAllowed(self) -> int: ...
    def originatingObject(self) -> PySide2.QtCore.QObject: ...
    def peerVerifyName(self) -> str: ...
    def priority(self) -> QNetworkRequest.Priority: ...
    def rawHeader(self, headerName: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> PySide2.QtCore.QByteArray: ...
    def rawHeaderList(self) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def setAttribute(self, code: QNetworkRequest.Attribute, value: typing.Any) -> None: ...
    def setHeader(self, header: QNetworkRequest.KnownHeaders, value: typing.Any) -> None: ...
    def setMaximumRedirectsAllowed(self, maximumRedirectsAllowed: int) -> None: ...
    def setOriginatingObject(self, object: PySide2.QtCore.QObject) -> None: ...
    def setPeerVerifyName(self, peerName: str) -> None: ...
    def setPriority(self, priority: QNetworkRequest.Priority) -> None: ...
    def setRawHeader(self, headerName: typing.Union[PySide2.QtCore.QByteArray,bytes], value: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setSslConfiguration(self, configuration: QSslConfiguration) -> None: ...
    def setTransferTimeout(self, timeout: int = ...) -> None: ...
    def setUrl(self, url: PySide2.QtCore.QUrl) -> None: ...
    def sslConfiguration(self) -> QSslConfiguration: ...
    def swap(self, other: QNetworkRequest) -> None: ...
    def transferTimeout(self) -> int: ...
    def url(self) -> PySide2.QtCore.QUrl: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QNetworkSession(PySide2.QtCore.QObject):
    class SessionError:
        InvalidConfigurationError: ClassVar[QNetworkSession.SessionError] = ...
        OperationNotSupportedError: ClassVar[QNetworkSession.SessionError] = ...
        RoamingError: ClassVar[QNetworkSession.SessionError] = ...
        SessionAbortedError: ClassVar[QNetworkSession.SessionError] = ...
        UnknownSessionError: ClassVar[QNetworkSession.SessionError] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkSession.SessionError: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkSession.SessionError: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkSession.SessionError: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkSession.SessionError: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkSession.SessionError: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkSession.SessionError: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkSession.SessionError: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkSession.SessionError: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkSession.SessionError: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkSession.SessionError: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkSession.SessionError: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkSession.SessionError: ...

    class State:
        Closing: ClassVar[QNetworkSession.State] = ...
        Connected: ClassVar[QNetworkSession.State] = ...
        Connecting: ClassVar[QNetworkSession.State] = ...
        Disconnected: ClassVar[QNetworkSession.State] = ...
        Invalid: ClassVar[QNetworkSession.State] = ...
        NotAvailable: ClassVar[QNetworkSession.State] = ...
        Roaming: ClassVar[QNetworkSession.State] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QNetworkSession.State: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkSession.State: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QNetworkSession.State: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkSession.State: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QNetworkSession.State: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkSession.State: ...
        def __rmul__(self, other: typing.SupportsInt) -> QNetworkSession.State: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkSession.State: ...
        def __rsub__(self, other: typing.SupportsInt) -> QNetworkSession.State: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkSession.State: ...
        def __sub__(self, other: typing.SupportsInt) -> QNetworkSession.State: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkSession.State: ...

    class UsagePolicies:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkSession.UsagePolicies: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QNetworkSession.UsagePolicies: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkSession.UsagePolicies: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkSession.UsagePolicies: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkSession.UsagePolicies: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkSession.UsagePolicies: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkSession.UsagePolicies: ...

    class UsagePolicy:
        NoBackgroundTrafficPolicy: ClassVar[QNetworkSession.UsagePolicy] = ...
        NoPolicy: ClassVar[QNetworkSession.UsagePolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QNetworkSession.UsagePolicies: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QNetworkSession.UsagePolicy: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QNetworkSession.UsagePolicies: ...
        def __rand__(self, other: typing.SupportsInt) -> QNetworkSession.UsagePolicies: ...
        def __ror__(self, other: typing.SupportsInt) -> QNetworkSession.UsagePolicies: ...
        def __rxor__(self, other: typing.SupportsInt) -> QNetworkSession.UsagePolicies: ...
        def __xor__(self, other: typing.SupportsInt) -> QNetworkSession.UsagePolicies: ...
    Closing: ClassVar[QNetworkSession.State] = ...
    Connected: ClassVar[QNetworkSession.State] = ...
    Connecting: ClassVar[QNetworkSession.State] = ...
    Disconnected: ClassVar[QNetworkSession.State] = ...
    Invalid: ClassVar[QNetworkSession.State] = ...
    InvalidConfigurationError: ClassVar[QNetworkSession.SessionError] = ...
    NoBackgroundTrafficPolicy: ClassVar[QNetworkSession.UsagePolicy] = ...
    NoPolicy: ClassVar[QNetworkSession.UsagePolicy] = ...
    NotAvailable: ClassVar[QNetworkSession.State] = ...
    OperationNotSupportedError: ClassVar[QNetworkSession.SessionError] = ...
    Roaming: ClassVar[QNetworkSession.State] = ...
    RoamingError: ClassVar[QNetworkSession.SessionError] = ...
    SessionAbortedError: ClassVar[QNetworkSession.SessionError] = ...
    UnknownSessionError: ClassVar[QNetworkSession.SessionError] = ...
    closed: ClassVar[PySide2.QtCore.Signal] = ...
    error: ClassVar[PySide2.QtCore.Signal] = ...
    newConfigurationActivated: ClassVar[PySide2.QtCore.Signal] = ...
    opened: ClassVar[PySide2.QtCore.Signal] = ...
    preferredConfigurationChanged: ClassVar[PySide2.QtCore.Signal] = ...
    stateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    usagePoliciesChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, connConfig: QNetworkConfiguration, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def accept(self) -> None: ...
    def activeTime(self) -> int: ...
    def bytesReceived(self) -> int: ...
    def bytesWritten(self) -> int: ...
    def close(self) -> None: ...
    def configuration(self) -> QNetworkConfiguration: ...
    def connectNotify(self, signal: PySide2.QtCore.QMetaMethod) -> None: ...
    def disconnectNotify(self, signal: PySide2.QtCore.QMetaMethod) -> None: ...
    def errorString(self) -> str: ...
    def ignore(self) -> None: ...
    def interface(self) -> QNetworkInterface: ...
    def isOpen(self) -> bool: ...
    def migrate(self) -> None: ...
    def open(self) -> None: ...
    def reject(self) -> None: ...
    def sessionProperty(self, key: str) -> typing.Any: ...
    def setSessionProperty(self, key: str, value: typing.Any) -> None: ...
    def state(self) -> QNetworkSession.State: ...
    def stop(self) -> None: ...
    def usagePolicies(self) -> typing.Union[QNetworkSession.UsagePolicies,QNetworkSession.UsagePolicy]: ...
    def waitForOpened(self, msecs: int = ...) -> bool: ...

class QOcspCertificateStatus:
    Good: ClassVar[QOcspCertificateStatus] = ...
    Revoked: ClassVar[QOcspCertificateStatus] = ...
    Unknown: ClassVar[QOcspCertificateStatus] = ...
    values: ClassVar[dict] = ...
    name: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __add__(self, other: typing.SupportsInt) -> QOcspCertificateStatus: ...
    def __and__(self, other: typing.SupportsInt) -> QOcspCertificateStatus: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other: typing.SupportsInt) -> QOcspCertificateStatus: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: typing.SupportsInt) -> QOcspCertificateStatus: ...
    def __pos__(self) -> Any: ...
    def __radd__(self, other: typing.SupportsInt) -> QOcspCertificateStatus: ...
    def __rand__(self, other: typing.SupportsInt) -> QOcspCertificateStatus: ...
    def __rmul__(self, other: typing.SupportsInt) -> QOcspCertificateStatus: ...
    def __ror__(self, other: typing.SupportsInt) -> QOcspCertificateStatus: ...
    def __rsub__(self, other: typing.SupportsInt) -> QOcspCertificateStatus: ...
    def __rxor__(self, other: typing.SupportsInt) -> QOcspCertificateStatus: ...
    def __sub__(self, other: typing.SupportsInt) -> QOcspCertificateStatus: ...
    def __xor__(self, other: typing.SupportsInt) -> QOcspCertificateStatus: ...

class QOcspResponse(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QOcspResponse) -> None: ...
    def certificateStatus(self) -> QOcspCertificateStatus: ...
    def revocationReason(self) -> QOcspRevocationReason: ...
    def subject(self) -> QSslCertificate: ...
    def swap(self, other: QOcspResponse) -> None: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QOcspRevocationReason:
    AffiliationChanged: ClassVar[QOcspRevocationReason] = ...
    CACompromise: ClassVar[QOcspRevocationReason] = ...
    CertificateHold: ClassVar[QOcspRevocationReason] = ...
    CessationOfOperation: ClassVar[QOcspRevocationReason] = ...
    KeyCompromise: ClassVar[QOcspRevocationReason] = ...
    None_: ClassVar[QOcspRevocationReason] = ...
    RemoveFromCRL: ClassVar[QOcspRevocationReason] = ...
    Superseded: ClassVar[QOcspRevocationReason] = ...
    Unspecified: ClassVar[QOcspRevocationReason] = ...
    values: ClassVar[dict] = ...
    name: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __add__(self, other: typing.SupportsInt) -> QOcspRevocationReason: ...
    def __and__(self, other: typing.SupportsInt) -> QOcspRevocationReason: ...
    def __bool__(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mul__(self, other: typing.SupportsInt) -> QOcspRevocationReason: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: typing.SupportsInt) -> QOcspRevocationReason: ...
    def __pos__(self) -> Any: ...
    def __radd__(self, other: typing.SupportsInt) -> QOcspRevocationReason: ...
    def __rand__(self, other: typing.SupportsInt) -> QOcspRevocationReason: ...
    def __rmul__(self, other: typing.SupportsInt) -> QOcspRevocationReason: ...
    def __ror__(self, other: typing.SupportsInt) -> QOcspRevocationReason: ...
    def __rsub__(self, other: typing.SupportsInt) -> QOcspRevocationReason: ...
    def __rxor__(self, other: typing.SupportsInt) -> QOcspRevocationReason: ...
    def __sub__(self, other: typing.SupportsInt) -> QOcspRevocationReason: ...
    def __xor__(self, other: typing.SupportsInt) -> QOcspRevocationReason: ...

class QPasswordDigestor(shiboken2.Object):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def deriveKeyPbkdf1(cls, algorithm: PySide2.QtCore.QCryptographicHash.Algorithm, password: typing.Union[PySide2.QtCore.QByteArray,bytes], salt: typing.Union[PySide2.QtCore.QByteArray,bytes], iterations: int, dkLen: int) -> PySide2.QtCore.QByteArray: ...
    @classmethod
    def deriveKeyPbkdf2(cls, algorithm: PySide2.QtCore.QCryptographicHash.Algorithm, password: typing.Union[PySide2.QtCore.QByteArray,bytes], salt: typing.Union[PySide2.QtCore.QByteArray,bytes], iterations: int, dkLen: int) -> PySide2.QtCore.QByteArray: ...

class QSsl(shiboken2.Object):
    class AlternativeNameEntryType:
        DnsEntry: ClassVar[QSsl.AlternativeNameEntryType] = ...
        EmailEntry: ClassVar[QSsl.AlternativeNameEntryType] = ...
        IpAddressEntry: ClassVar[QSsl.AlternativeNameEntryType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSsl.AlternativeNameEntryType: ...
        def __and__(self, other: typing.SupportsInt) -> QSsl.AlternativeNameEntryType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSsl.AlternativeNameEntryType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSsl.AlternativeNameEntryType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSsl.AlternativeNameEntryType: ...
        def __rand__(self, other: typing.SupportsInt) -> QSsl.AlternativeNameEntryType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSsl.AlternativeNameEntryType: ...
        def __ror__(self, other: typing.SupportsInt) -> QSsl.AlternativeNameEntryType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSsl.AlternativeNameEntryType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSsl.AlternativeNameEntryType: ...
        def __sub__(self, other: typing.SupportsInt) -> QSsl.AlternativeNameEntryType: ...
        def __xor__(self, other: typing.SupportsInt) -> QSsl.AlternativeNameEntryType: ...

    class EncodingFormat:
        Der: ClassVar[QSsl.EncodingFormat] = ...
        Pem: ClassVar[QSsl.EncodingFormat] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSsl.EncodingFormat: ...
        def __and__(self, other: typing.SupportsInt) -> QSsl.EncodingFormat: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSsl.EncodingFormat: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSsl.EncodingFormat: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSsl.EncodingFormat: ...
        def __rand__(self, other: typing.SupportsInt) -> QSsl.EncodingFormat: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSsl.EncodingFormat: ...
        def __ror__(self, other: typing.SupportsInt) -> QSsl.EncodingFormat: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSsl.EncodingFormat: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSsl.EncodingFormat: ...
        def __sub__(self, other: typing.SupportsInt) -> QSsl.EncodingFormat: ...
        def __xor__(self, other: typing.SupportsInt) -> QSsl.EncodingFormat: ...

    class KeyAlgorithm:
        Dh: ClassVar[QSsl.KeyAlgorithm] = ...
        Dsa: ClassVar[QSsl.KeyAlgorithm] = ...
        Ec: ClassVar[QSsl.KeyAlgorithm] = ...
        Opaque: ClassVar[QSsl.KeyAlgorithm] = ...
        Rsa: ClassVar[QSsl.KeyAlgorithm] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSsl.KeyAlgorithm: ...
        def __and__(self, other: typing.SupportsInt) -> QSsl.KeyAlgorithm: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSsl.KeyAlgorithm: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSsl.KeyAlgorithm: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSsl.KeyAlgorithm: ...
        def __rand__(self, other: typing.SupportsInt) -> QSsl.KeyAlgorithm: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSsl.KeyAlgorithm: ...
        def __ror__(self, other: typing.SupportsInt) -> QSsl.KeyAlgorithm: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSsl.KeyAlgorithm: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSsl.KeyAlgorithm: ...
        def __sub__(self, other: typing.SupportsInt) -> QSsl.KeyAlgorithm: ...
        def __xor__(self, other: typing.SupportsInt) -> QSsl.KeyAlgorithm: ...

    class KeyType:
        PrivateKey: ClassVar[QSsl.KeyType] = ...
        PublicKey: ClassVar[QSsl.KeyType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSsl.KeyType: ...
        def __and__(self, other: typing.SupportsInt) -> QSsl.KeyType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSsl.KeyType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSsl.KeyType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSsl.KeyType: ...
        def __rand__(self, other: typing.SupportsInt) -> QSsl.KeyType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSsl.KeyType: ...
        def __ror__(self, other: typing.SupportsInt) -> QSsl.KeyType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSsl.KeyType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSsl.KeyType: ...
        def __sub__(self, other: typing.SupportsInt) -> QSsl.KeyType: ...
        def __xor__(self, other: typing.SupportsInt) -> QSsl.KeyType: ...

    class SslOption:
        SslOptionDisableCompression: ClassVar[QSsl.SslOption] = ...
        SslOptionDisableEmptyFragments: ClassVar[QSsl.SslOption] = ...
        SslOptionDisableLegacyRenegotiation: ClassVar[QSsl.SslOption] = ...
        SslOptionDisableServerCipherPreference: ClassVar[QSsl.SslOption] = ...
        SslOptionDisableServerNameIndication: ClassVar[QSsl.SslOption] = ...
        SslOptionDisableSessionPersistence: ClassVar[QSsl.SslOption] = ...
        SslOptionDisableSessionSharing: ClassVar[QSsl.SslOption] = ...
        SslOptionDisableSessionTickets: ClassVar[QSsl.SslOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSsl.SslOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSsl.SslOption: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSsl.SslOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QSsl.SslOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QSsl.SslOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSsl.SslOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QSsl.SslOptions: ...

    class SslOptions:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSsl.SslOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSsl.SslOptions: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSsl.SslOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QSsl.SslOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QSsl.SslOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSsl.SslOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QSsl.SslOptions: ...

    class SslProtocol:
        AnyProtocol: ClassVar[QSsl.SslProtocol] = ...
        DtlsV1_0: ClassVar[QSsl.SslProtocol] = ...
        DtlsV1_0OrLater: ClassVar[QSsl.SslProtocol] = ...
        DtlsV1_2: ClassVar[QSsl.SslProtocol] = ...
        DtlsV1_2OrLater: ClassVar[QSsl.SslProtocol] = ...
        SecureProtocols: ClassVar[QSsl.SslProtocol] = ...
        SslV2: ClassVar[QSsl.SslProtocol] = ...
        SslV3: ClassVar[QSsl.SslProtocol] = ...
        TlsV1SslV3: ClassVar[QSsl.SslProtocol] = ...
        TlsV1_0: ClassVar[QSsl.SslProtocol] = ...
        TlsV1_0OrLater: ClassVar[QSsl.SslProtocol] = ...
        TlsV1_1: ClassVar[QSsl.SslProtocol] = ...
        TlsV1_1OrLater: ClassVar[QSsl.SslProtocol] = ...
        TlsV1_2: ClassVar[QSsl.SslProtocol] = ...
        TlsV1_2OrLater: ClassVar[QSsl.SslProtocol] = ...
        TlsV1_3: ClassVar[QSsl.SslProtocol] = ...
        TlsV1_3OrLater: ClassVar[QSsl.SslProtocol] = ...
        UnknownProtocol: ClassVar[QSsl.SslProtocol] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSsl.SslProtocol: ...
        def __and__(self, other: typing.SupportsInt) -> QSsl.SslProtocol: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSsl.SslProtocol: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSsl.SslProtocol: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSsl.SslProtocol: ...
        def __rand__(self, other: typing.SupportsInt) -> QSsl.SslProtocol: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSsl.SslProtocol: ...
        def __ror__(self, other: typing.SupportsInt) -> QSsl.SslProtocol: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSsl.SslProtocol: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSsl.SslProtocol: ...
        def __sub__(self, other: typing.SupportsInt) -> QSsl.SslProtocol: ...
        def __xor__(self, other: typing.SupportsInt) -> QSsl.SslProtocol: ...
    AnyProtocol: ClassVar[QSsl.SslProtocol] = ...
    Der: ClassVar[QSsl.EncodingFormat] = ...
    Dh: ClassVar[QSsl.KeyAlgorithm] = ...
    DnsEntry: ClassVar[QSsl.AlternativeNameEntryType] = ...
    Dsa: ClassVar[QSsl.KeyAlgorithm] = ...
    DtlsV1_0: ClassVar[QSsl.SslProtocol] = ...
    DtlsV1_0OrLater: ClassVar[QSsl.SslProtocol] = ...
    DtlsV1_2: ClassVar[QSsl.SslProtocol] = ...
    DtlsV1_2OrLater: ClassVar[QSsl.SslProtocol] = ...
    Ec: ClassVar[QSsl.KeyAlgorithm] = ...
    EmailEntry: ClassVar[QSsl.AlternativeNameEntryType] = ...
    IpAddressEntry: ClassVar[QSsl.AlternativeNameEntryType] = ...
    Opaque: ClassVar[QSsl.KeyAlgorithm] = ...
    Pem: ClassVar[QSsl.EncodingFormat] = ...
    PrivateKey: ClassVar[QSsl.KeyType] = ...
    PublicKey: ClassVar[QSsl.KeyType] = ...
    Rsa: ClassVar[QSsl.KeyAlgorithm] = ...
    SecureProtocols: ClassVar[QSsl.SslProtocol] = ...
    SslOptionDisableCompression: ClassVar[QSsl.SslOption] = ...
    SslOptionDisableEmptyFragments: ClassVar[QSsl.SslOption] = ...
    SslOptionDisableLegacyRenegotiation: ClassVar[QSsl.SslOption] = ...
    SslOptionDisableServerCipherPreference: ClassVar[QSsl.SslOption] = ...
    SslOptionDisableServerNameIndication: ClassVar[QSsl.SslOption] = ...
    SslOptionDisableSessionPersistence: ClassVar[QSsl.SslOption] = ...
    SslOptionDisableSessionSharing: ClassVar[QSsl.SslOption] = ...
    SslOptionDisableSessionTickets: ClassVar[QSsl.SslOption] = ...
    SslV2: ClassVar[QSsl.SslProtocol] = ...
    SslV3: ClassVar[QSsl.SslProtocol] = ...
    TlsV1SslV3: ClassVar[QSsl.SslProtocol] = ...
    TlsV1_0: ClassVar[QSsl.SslProtocol] = ...
    TlsV1_0OrLater: ClassVar[QSsl.SslProtocol] = ...
    TlsV1_1: ClassVar[QSsl.SslProtocol] = ...
    TlsV1_1OrLater: ClassVar[QSsl.SslProtocol] = ...
    TlsV1_2: ClassVar[QSsl.SslProtocol] = ...
    TlsV1_2OrLater: ClassVar[QSsl.SslProtocol] = ...
    TlsV1_3: ClassVar[QSsl.SslProtocol] = ...
    TlsV1_3OrLater: ClassVar[QSsl.SslProtocol] = ...
    UnknownProtocol: ClassVar[QSsl.SslProtocol] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class QSslCertificate(shiboken2.Object):
    class PatternSyntax:
        FixedString: ClassVar[QSslCertificate.PatternSyntax] = ...
        RegularExpression: ClassVar[QSslCertificate.PatternSyntax] = ...
        Wildcard: ClassVar[QSslCertificate.PatternSyntax] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSslCertificate.PatternSyntax: ...
        def __and__(self, other: typing.SupportsInt) -> QSslCertificate.PatternSyntax: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSslCertificate.PatternSyntax: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSslCertificate.PatternSyntax: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSslCertificate.PatternSyntax: ...
        def __rand__(self, other: typing.SupportsInt) -> QSslCertificate.PatternSyntax: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSslCertificate.PatternSyntax: ...
        def __ror__(self, other: typing.SupportsInt) -> QSslCertificate.PatternSyntax: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSslCertificate.PatternSyntax: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSslCertificate.PatternSyntax: ...
        def __sub__(self, other: typing.SupportsInt) -> QSslCertificate.PatternSyntax: ...
        def __xor__(self, other: typing.SupportsInt) -> QSslCertificate.PatternSyntax: ...

    class SubjectInfo:
        CommonName: ClassVar[QSslCertificate.SubjectInfo] = ...
        CountryName: ClassVar[QSslCertificate.SubjectInfo] = ...
        DistinguishedNameQualifier: ClassVar[QSslCertificate.SubjectInfo] = ...
        EmailAddress: ClassVar[QSslCertificate.SubjectInfo] = ...
        LocalityName: ClassVar[QSslCertificate.SubjectInfo] = ...
        Organization: ClassVar[QSslCertificate.SubjectInfo] = ...
        OrganizationalUnitName: ClassVar[QSslCertificate.SubjectInfo] = ...
        SerialNumber: ClassVar[QSslCertificate.SubjectInfo] = ...
        StateOrProvinceName: ClassVar[QSslCertificate.SubjectInfo] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSslCertificate.SubjectInfo: ...
        def __and__(self, other: typing.SupportsInt) -> QSslCertificate.SubjectInfo: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSslCertificate.SubjectInfo: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSslCertificate.SubjectInfo: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSslCertificate.SubjectInfo: ...
        def __rand__(self, other: typing.SupportsInt) -> QSslCertificate.SubjectInfo: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSslCertificate.SubjectInfo: ...
        def __ror__(self, other: typing.SupportsInt) -> QSslCertificate.SubjectInfo: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSslCertificate.SubjectInfo: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSslCertificate.SubjectInfo: ...
        def __sub__(self, other: typing.SupportsInt) -> QSslCertificate.SubjectInfo: ...
        def __xor__(self, other: typing.SupportsInt) -> QSslCertificate.SubjectInfo: ...
    CommonName: ClassVar[QSslCertificate.SubjectInfo] = ...
    CountryName: ClassVar[QSslCertificate.SubjectInfo] = ...
    DistinguishedNameQualifier: ClassVar[QSslCertificate.SubjectInfo] = ...
    EmailAddress: ClassVar[QSslCertificate.SubjectInfo] = ...
    LocalityName: ClassVar[QSslCertificate.SubjectInfo] = ...
    Organization: ClassVar[QSslCertificate.SubjectInfo] = ...
    OrganizationalUnitName: ClassVar[QSslCertificate.SubjectInfo] = ...
    SerialNumber: ClassVar[QSslCertificate.SubjectInfo] = ...
    StateOrProvinceName: ClassVar[QSslCertificate.SubjectInfo] = ...
    @overload
    def __init__(self, data: typing.Union[PySide2.QtCore.QByteArray,bytes] = ..., format: QSsl.EncodingFormat = ...) -> None: ...
    @overload
    def __init__(self, device: PySide2.QtCore.QIODevice, format: QSsl.EncodingFormat = ...) -> None: ...
    @overload
    def __init__(self, other: QSslCertificate) -> None: ...
    def clear(self) -> None: ...
    def digest(self, algorithm: PySide2.QtCore.QCryptographicHash.Algorithm = ...) -> PySide2.QtCore.QByteArray: ...
    def effectiveDate(self) -> PySide2.QtCore.QDateTime: ...
    def expiryDate(self) -> PySide2.QtCore.QDateTime: ...
    def extensions(self) -> typing.List[QSslCertificateExtension]: ...
    @classmethod
    def fromData(cls, data: typing.Union[PySide2.QtCore.QByteArray,bytes], format: QSsl.EncodingFormat = ...) -> typing.List[QSslCertificate]: ...
    @classmethod
    def fromDevice(cls, device: PySide2.QtCore.QIODevice, format: QSsl.EncodingFormat = ...) -> typing.List[QSslCertificate]: ...
    @classmethod
    @overload
    def fromPath(cls, path: str, format: QSsl.EncodingFormat, syntax: PySide2.QtCore.QRegExp.PatternSyntax) -> typing.List[QSslCertificate]: ...
    @classmethod
    @overload
    def fromPath(cls, path: str, format: QSsl.EncodingFormat = ..., syntax: QSslCertificate.PatternSyntax = ...) -> typing.List[QSslCertificate]: ...
    def handle(self) -> int: ...
    @classmethod
    def importPkcs12(cls, device: PySide2.QtCore.QIODevice, key: QSslKey, cert: QSslCertificate, caCertificates: typing.Union[typing.Sequence[QSslCertificate],None] = ..., passPhrase: typing.Union[PySide2.QtCore.QByteArray,bytes] = ...) -> bool: ...
    def isBlacklisted(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isSelfSigned(self) -> bool: ...
    def issuerDisplayName(self) -> str: ...
    @overload
    def issuerInfo(self, attribute: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> typing.List[str]: ...
    @overload
    def issuerInfo(self, info: QSslCertificate.SubjectInfo) -> typing.List[str]: ...
    def issuerInfoAttributes(self) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def publicKey(self) -> QSslKey: ...
    def serialNumber(self) -> PySide2.QtCore.QByteArray: ...
    def subjectAlternativeNames(self) -> typing.OrderedDict[QSsl.AlternativeNameEntryType,typing.List[str]]: ...
    def subjectDisplayName(self) -> str: ...
    @overload
    def subjectInfo(self, attribute: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> typing.List[str]: ...
    @overload
    def subjectInfo(self, info: QSslCertificate.SubjectInfo) -> typing.List[str]: ...
    def subjectInfoAttributes(self) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def swap(self, other: QSslCertificate) -> None: ...
    def toDer(self) -> PySide2.QtCore.QByteArray: ...
    def toPem(self) -> PySide2.QtCore.QByteArray: ...
    def toText(self) -> str: ...
    @classmethod
    def verify(cls, certificateChain: typing.Sequence[QSslCertificate], hostName: str = ...) -> typing.List[QSslError]: ...
    def version(self) -> PySide2.QtCore.QByteArray: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QSslCertificateExtension(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QSslCertificateExtension) -> None: ...
    def isCritical(self) -> bool: ...
    def isSupported(self) -> bool: ...
    def name(self) -> str: ...
    def oid(self) -> str: ...
    def swap(self, other: QSslCertificateExtension) -> None: ...
    def value(self) -> typing.Any: ...
    def __copy__(self) -> None: ...

class QSslCipher(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, name: str, protocol: QSsl.SslProtocol) -> None: ...
    @overload
    def __init__(self, other: QSslCipher) -> None: ...
    def authenticationMethod(self) -> str: ...
    def encryptionMethod(self) -> str: ...
    def isNull(self) -> bool: ...
    def keyExchangeMethod(self) -> str: ...
    def name(self) -> str: ...
    def protocol(self) -> QSsl.SslProtocol: ...
    def protocolString(self) -> str: ...
    def supportedBits(self) -> int: ...
    def swap(self, other: QSslCipher) -> None: ...
    def usedBits(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QSslConfiguration(shiboken2.Object):
    class NextProtocolNegotiationStatus:
        NextProtocolNegotiationNegotiated: ClassVar[QSslConfiguration.NextProtocolNegotiationStatus] = ...
        NextProtocolNegotiationNone: ClassVar[QSslConfiguration.NextProtocolNegotiationStatus] = ...
        NextProtocolNegotiationUnsupported: ClassVar[QSslConfiguration.NextProtocolNegotiationStatus] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSslConfiguration.NextProtocolNegotiationStatus: ...
        def __and__(self, other: typing.SupportsInt) -> QSslConfiguration.NextProtocolNegotiationStatus: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSslConfiguration.NextProtocolNegotiationStatus: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSslConfiguration.NextProtocolNegotiationStatus: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSslConfiguration.NextProtocolNegotiationStatus: ...
        def __rand__(self, other: typing.SupportsInt) -> QSslConfiguration.NextProtocolNegotiationStatus: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSslConfiguration.NextProtocolNegotiationStatus: ...
        def __ror__(self, other: typing.SupportsInt) -> QSslConfiguration.NextProtocolNegotiationStatus: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSslConfiguration.NextProtocolNegotiationStatus: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSslConfiguration.NextProtocolNegotiationStatus: ...
        def __sub__(self, other: typing.SupportsInt) -> QSslConfiguration.NextProtocolNegotiationStatus: ...
        def __xor__(self, other: typing.SupportsInt) -> QSslConfiguration.NextProtocolNegotiationStatus: ...
    ALPNProtocolHTTP2: ClassVar[str] = ...
    NextProtocolHttp1_1: ClassVar[str] = ...
    NextProtocolNegotiationNegotiated: ClassVar[QSslConfiguration.NextProtocolNegotiationStatus] = ...
    NextProtocolNegotiationNone: ClassVar[QSslConfiguration.NextProtocolNegotiationStatus] = ...
    NextProtocolNegotiationUnsupported: ClassVar[QSslConfiguration.NextProtocolNegotiationStatus] = ...
    NextProtocolSpdy3_0: ClassVar[str] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QSslConfiguration) -> None: ...
    def addCaCertificate(self, certificate: QSslCertificate) -> None: ...
    @overload
    def addCaCertificates(self, certificates: typing.Sequence[QSslCertificate]) -> None: ...
    @overload
    def addCaCertificates(self, path: str, format: QSsl.EncodingFormat = ..., syntax: QSslCertificate.PatternSyntax = ...) -> bool: ...
    def allowedNextProtocols(self) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def backendConfiguration(self) -> typing.Dict[PySide2.QtCore.QByteArray,typing.Any]: ...
    def caCertificates(self) -> typing.List[QSslCertificate]: ...
    def ciphers(self) -> typing.List[QSslCipher]: ...
    @classmethod
    def defaultConfiguration(cls) -> QSslConfiguration: ...
    def diffieHellmanParameters(self) -> QSslDiffieHellmanParameters: ...
    def ephemeralServerKey(self) -> QSslKey: ...
    def isNull(self) -> bool: ...
    def localCertificate(self) -> QSslCertificate: ...
    def localCertificateChain(self) -> typing.List[QSslCertificate]: ...
    def nextNegotiatedProtocol(self) -> PySide2.QtCore.QByteArray: ...
    def nextProtocolNegotiationStatus(self) -> QSslConfiguration.NextProtocolNegotiationStatus: ...
    def ocspStaplingEnabled(self) -> bool: ...
    def peerCertificate(self) -> QSslCertificate: ...
    def peerCertificateChain(self) -> typing.List[QSslCertificate]: ...
    def peerVerifyDepth(self) -> int: ...
    def peerVerifyMode(self) -> QSslSocket.PeerVerifyMode: ...
    def preSharedKeyIdentityHint(self) -> PySide2.QtCore.QByteArray: ...
    def privateKey(self) -> QSslKey: ...
    def protocol(self) -> QSsl.SslProtocol: ...
    def sessionCipher(self) -> QSslCipher: ...
    def sessionProtocol(self) -> QSsl.SslProtocol: ...
    def sessionTicket(self) -> PySide2.QtCore.QByteArray: ...
    def sessionTicketLifeTimeHint(self) -> int: ...
    def setAllowedNextProtocols(self, protocols: typing.Sequence[PySide2.QtCore.QByteArray]) -> None: ...
    def setBackendConfiguration(self, backendConfiguration: typing.Dict[PySide2.QtCore.QByteArray,typing.Any] = ...) -> None: ...
    def setBackendConfigurationOption(self, name: typing.Union[PySide2.QtCore.QByteArray,bytes], value: typing.Any) -> None: ...
    def setCaCertificates(self, certificates: typing.Sequence[QSslCertificate]) -> None: ...
    def setCiphers(self, ciphers: typing.Sequence[QSslCipher]) -> None: ...
    @classmethod
    def setDefaultConfiguration(cls, configuration: QSslConfiguration) -> None: ...
    def setDiffieHellmanParameters(self, dhparams: QSslDiffieHellmanParameters) -> None: ...
    def setLocalCertificate(self, certificate: QSslCertificate) -> None: ...
    def setLocalCertificateChain(self, localChain: typing.Sequence[QSslCertificate]) -> None: ...
    def setOcspStaplingEnabled(self, enable: bool) -> None: ...
    def setPeerVerifyDepth(self, depth: int) -> None: ...
    def setPeerVerifyMode(self, mode: QSslSocket.PeerVerifyMode) -> None: ...
    def setPreSharedKeyIdentityHint(self, hint: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setPrivateKey(self, key: QSslKey) -> None: ...
    def setProtocol(self, protocol: QSsl.SslProtocol) -> None: ...
    def setSessionTicket(self, sessionTicket: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setSslOption(self, option: QSsl.SslOption, on: bool) -> None: ...
    @classmethod
    def supportedCiphers(cls) -> typing.List[QSslCipher]: ...
    def swap(self, other: QSslConfiguration) -> None: ...
    @classmethod
    def systemCaCertificates(cls) -> typing.List[QSslCertificate]: ...
    def testSslOption(self, option: QSsl.SslOption) -> bool: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QSslDiffieHellmanParameters(shiboken2.Object):
    class Error:
        InvalidInputDataError: ClassVar[QSslDiffieHellmanParameters.Error] = ...
        NoError: ClassVar[QSslDiffieHellmanParameters.Error] = ...
        UnsafeParametersError: ClassVar[QSslDiffieHellmanParameters.Error] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSslDiffieHellmanParameters.Error: ...
        def __and__(self, other: typing.SupportsInt) -> QSslDiffieHellmanParameters.Error: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSslDiffieHellmanParameters.Error: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSslDiffieHellmanParameters.Error: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSslDiffieHellmanParameters.Error: ...
        def __rand__(self, other: typing.SupportsInt) -> QSslDiffieHellmanParameters.Error: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSslDiffieHellmanParameters.Error: ...
        def __ror__(self, other: typing.SupportsInt) -> QSslDiffieHellmanParameters.Error: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSslDiffieHellmanParameters.Error: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSslDiffieHellmanParameters.Error: ...
        def __sub__(self, other: typing.SupportsInt) -> QSslDiffieHellmanParameters.Error: ...
        def __xor__(self, other: typing.SupportsInt) -> QSslDiffieHellmanParameters.Error: ...
    InvalidInputDataError: ClassVar[QSslDiffieHellmanParameters.Error] = ...
    NoError: ClassVar[QSslDiffieHellmanParameters.Error] = ...
    UnsafeParametersError: ClassVar[QSslDiffieHellmanParameters.Error] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QSslDiffieHellmanParameters) -> None: ...
    @classmethod
    def defaultParameters(cls) -> QSslDiffieHellmanParameters: ...
    def error(self) -> QSslDiffieHellmanParameters.Error: ...
    def errorString(self) -> str: ...
    @classmethod
    @overload
    def fromEncoded(cls, device: PySide2.QtCore.QIODevice, format: QSsl.EncodingFormat = ...) -> QSslDiffieHellmanParameters: ...
    @classmethod
    @overload
    def fromEncoded(cls, encoded: typing.Union[PySide2.QtCore.QByteArray,bytes], format: QSsl.EncodingFormat = ...) -> QSslDiffieHellmanParameters: ...
    def isEmpty(self) -> bool: ...
    def isValid(self) -> bool: ...
    def swap(self, other: QSslDiffieHellmanParameters) -> None: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QSslError(shiboken2.Object):
    class SslError:
        AuthorityIssuerSerialNumberMismatch: ClassVar[QSslError.SslError] = ...
        CertificateBlacklisted: ClassVar[QSslError.SslError] = ...
        CertificateExpired: ClassVar[QSslError.SslError] = ...
        CertificateNotYetValid: ClassVar[QSslError.SslError] = ...
        CertificateRejected: ClassVar[QSslError.SslError] = ...
        CertificateRevoked: ClassVar[QSslError.SslError] = ...
        CertificateSignatureFailed: ClassVar[QSslError.SslError] = ...
        CertificateStatusUnknown: ClassVar[QSslError.SslError] = ...
        CertificateUntrusted: ClassVar[QSslError.SslError] = ...
        HostNameMismatch: ClassVar[QSslError.SslError] = ...
        InvalidCaCertificate: ClassVar[QSslError.SslError] = ...
        InvalidNotAfterField: ClassVar[QSslError.SslError] = ...
        InvalidNotBeforeField: ClassVar[QSslError.SslError] = ...
        InvalidPurpose: ClassVar[QSslError.SslError] = ...
        NoError: ClassVar[QSslError.SslError] = ...
        NoPeerCertificate: ClassVar[QSslError.SslError] = ...
        NoSslSupport: ClassVar[QSslError.SslError] = ...
        OcspInternalError: ClassVar[QSslError.SslError] = ...
        OcspMalformedRequest: ClassVar[QSslError.SslError] = ...
        OcspMalformedResponse: ClassVar[QSslError.SslError] = ...
        OcspNoResponseFound: ClassVar[QSslError.SslError] = ...
        OcspResponseCannotBeTrusted: ClassVar[QSslError.SslError] = ...
        OcspResponseCertIdUnknown: ClassVar[QSslError.SslError] = ...
        OcspResponseExpired: ClassVar[QSslError.SslError] = ...
        OcspSigRequred: ClassVar[QSslError.SslError] = ...
        OcspStatusUnknown: ClassVar[QSslError.SslError] = ...
        OcspTryLater: ClassVar[QSslError.SslError] = ...
        OcspUnauthorized: ClassVar[QSslError.SslError] = ...
        PathLengthExceeded: ClassVar[QSslError.SslError] = ...
        SelfSignedCertificate: ClassVar[QSslError.SslError] = ...
        SelfSignedCertificateInChain: ClassVar[QSslError.SslError] = ...
        SubjectIssuerMismatch: ClassVar[QSslError.SslError] = ...
        UnableToDecodeIssuerPublicKey: ClassVar[QSslError.SslError] = ...
        UnableToDecryptCertificateSignature: ClassVar[QSslError.SslError] = ...
        UnableToGetIssuerCertificate: ClassVar[QSslError.SslError] = ...
        UnableToGetLocalIssuerCertificate: ClassVar[QSslError.SslError] = ...
        UnableToVerifyFirstCertificate: ClassVar[QSslError.SslError] = ...
        UnspecifiedError: ClassVar[QSslError.SslError] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSslError.SslError: ...
        def __and__(self, other: typing.SupportsInt) -> QSslError.SslError: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSslError.SslError: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSslError.SslError: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSslError.SslError: ...
        def __rand__(self, other: typing.SupportsInt) -> QSslError.SslError: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSslError.SslError: ...
        def __ror__(self, other: typing.SupportsInt) -> QSslError.SslError: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSslError.SslError: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSslError.SslError: ...
        def __sub__(self, other: typing.SupportsInt) -> QSslError.SslError: ...
        def __xor__(self, other: typing.SupportsInt) -> QSslError.SslError: ...
    AuthorityIssuerSerialNumberMismatch: ClassVar[QSslError.SslError] = ...
    CertificateBlacklisted: ClassVar[QSslError.SslError] = ...
    CertificateExpired: ClassVar[QSslError.SslError] = ...
    CertificateNotYetValid: ClassVar[QSslError.SslError] = ...
    CertificateRejected: ClassVar[QSslError.SslError] = ...
    CertificateRevoked: ClassVar[QSslError.SslError] = ...
    CertificateSignatureFailed: ClassVar[QSslError.SslError] = ...
    CertificateStatusUnknown: ClassVar[QSslError.SslError] = ...
    CertificateUntrusted: ClassVar[QSslError.SslError] = ...
    HostNameMismatch: ClassVar[QSslError.SslError] = ...
    InvalidCaCertificate: ClassVar[QSslError.SslError] = ...
    InvalidNotAfterField: ClassVar[QSslError.SslError] = ...
    InvalidNotBeforeField: ClassVar[QSslError.SslError] = ...
    InvalidPurpose: ClassVar[QSslError.SslError] = ...
    NoError: ClassVar[QSslError.SslError] = ...
    NoPeerCertificate: ClassVar[QSslError.SslError] = ...
    NoSslSupport: ClassVar[QSslError.SslError] = ...
    OcspInternalError: ClassVar[QSslError.SslError] = ...
    OcspMalformedRequest: ClassVar[QSslError.SslError] = ...
    OcspMalformedResponse: ClassVar[QSslError.SslError] = ...
    OcspNoResponseFound: ClassVar[QSslError.SslError] = ...
    OcspResponseCannotBeTrusted: ClassVar[QSslError.SslError] = ...
    OcspResponseCertIdUnknown: ClassVar[QSslError.SslError] = ...
    OcspResponseExpired: ClassVar[QSslError.SslError] = ...
    OcspSigRequred: ClassVar[QSslError.SslError] = ...
    OcspStatusUnknown: ClassVar[QSslError.SslError] = ...
    OcspTryLater: ClassVar[QSslError.SslError] = ...
    OcspUnauthorized: ClassVar[QSslError.SslError] = ...
    PathLengthExceeded: ClassVar[QSslError.SslError] = ...
    SelfSignedCertificate: ClassVar[QSslError.SslError] = ...
    SelfSignedCertificateInChain: ClassVar[QSslError.SslError] = ...
    SubjectIssuerMismatch: ClassVar[QSslError.SslError] = ...
    UnableToDecodeIssuerPublicKey: ClassVar[QSslError.SslError] = ...
    UnableToDecryptCertificateSignature: ClassVar[QSslError.SslError] = ...
    UnableToGetIssuerCertificate: ClassVar[QSslError.SslError] = ...
    UnableToGetLocalIssuerCertificate: ClassVar[QSslError.SslError] = ...
    UnableToVerifyFirstCertificate: ClassVar[QSslError.SslError] = ...
    UnspecifiedError: ClassVar[QSslError.SslError] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, error: QSslError.SslError) -> None: ...
    @overload
    def __init__(self, error: QSslError.SslError, certificate: QSslCertificate) -> None: ...
    @overload
    def __init__(self, other: QSslError) -> None: ...
    def certificate(self) -> QSslCertificate: ...
    def error(self) -> QSslError.SslError: ...
    def errorString(self) -> str: ...
    def swap(self, other: QSslError) -> None: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QSslKey(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, device: PySide2.QtCore.QIODevice, algorithm: QSsl.KeyAlgorithm, format: QSsl.EncodingFormat = ..., type: QSsl.KeyType = ..., passPhrase: typing.Union[PySide2.QtCore.QByteArray,bytes] = ...) -> None: ...
    @overload
    def __init__(self, encoded: typing.Union[PySide2.QtCore.QByteArray,bytes], algorithm: QSsl.KeyAlgorithm, format: QSsl.EncodingFormat = ..., type: QSsl.KeyType = ..., passPhrase: typing.Union[PySide2.QtCore.QByteArray,bytes] = ...) -> None: ...
    @overload
    def __init__(self, handle: int, type: QSsl.KeyType = ...) -> None: ...
    @overload
    def __init__(self, other: QSslKey) -> None: ...
    def algorithm(self) -> QSsl.KeyAlgorithm: ...
    def clear(self) -> None: ...
    def handle(self) -> int: ...
    def isNull(self) -> bool: ...
    def length(self) -> int: ...
    def swap(self, other: QSslKey) -> None: ...
    def toDer(self, passPhrase: typing.Union[PySide2.QtCore.QByteArray,bytes] = ...) -> PySide2.QtCore.QByteArray: ...
    def toPem(self, passPhrase: typing.Union[PySide2.QtCore.QByteArray,bytes] = ...) -> PySide2.QtCore.QByteArray: ...
    def type(self) -> QSsl.KeyType: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QSslPreSharedKeyAuthenticator(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, authenticator: QSslPreSharedKeyAuthenticator) -> None: ...
    def identity(self) -> PySide2.QtCore.QByteArray: ...
    def identityHint(self) -> PySide2.QtCore.QByteArray: ...
    def maximumIdentityLength(self) -> int: ...
    def maximumPreSharedKeyLength(self) -> int: ...
    def preSharedKey(self) -> PySide2.QtCore.QByteArray: ...
    def setIdentity(self, identity: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setPreSharedKey(self, preSharedKey: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def swap(self, other: QSslPreSharedKeyAuthenticator) -> None: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QSslSocket(QTcpSocket):
    class PeerVerifyMode:
        AutoVerifyPeer: ClassVar[QSslSocket.PeerVerifyMode] = ...
        QueryPeer: ClassVar[QSslSocket.PeerVerifyMode] = ...
        VerifyNone: ClassVar[QSslSocket.PeerVerifyMode] = ...
        VerifyPeer: ClassVar[QSslSocket.PeerVerifyMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSslSocket.PeerVerifyMode: ...
        def __and__(self, other: typing.SupportsInt) -> QSslSocket.PeerVerifyMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSslSocket.PeerVerifyMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSslSocket.PeerVerifyMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSslSocket.PeerVerifyMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QSslSocket.PeerVerifyMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSslSocket.PeerVerifyMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QSslSocket.PeerVerifyMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSslSocket.PeerVerifyMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSslSocket.PeerVerifyMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QSslSocket.PeerVerifyMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QSslSocket.PeerVerifyMode: ...

    class SslMode:
        SslClientMode: ClassVar[QSslSocket.SslMode] = ...
        SslServerMode: ClassVar[QSslSocket.SslMode] = ...
        UnencryptedMode: ClassVar[QSslSocket.SslMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSslSocket.SslMode: ...
        def __and__(self, other: typing.SupportsInt) -> QSslSocket.SslMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSslSocket.SslMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSslSocket.SslMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSslSocket.SslMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QSslSocket.SslMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSslSocket.SslMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QSslSocket.SslMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSslSocket.SslMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSslSocket.SslMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QSslSocket.SslMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QSslSocket.SslMode: ...
    AutoVerifyPeer: ClassVar[QSslSocket.PeerVerifyMode] = ...
    QueryPeer: ClassVar[QSslSocket.PeerVerifyMode] = ...
    SslClientMode: ClassVar[QSslSocket.SslMode] = ...
    SslServerMode: ClassVar[QSslSocket.SslMode] = ...
    UnencryptedMode: ClassVar[QSslSocket.SslMode] = ...
    VerifyNone: ClassVar[QSslSocket.PeerVerifyMode] = ...
    VerifyPeer: ClassVar[QSslSocket.PeerVerifyMode] = ...
    encrypted: ClassVar[PySide2.QtCore.Signal] = ...
    encryptedBytesWritten: ClassVar[PySide2.QtCore.Signal] = ...
    modeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    newSessionTicketReceived: ClassVar[PySide2.QtCore.Signal] = ...
    peerVerifyError: ClassVar[PySide2.QtCore.Signal] = ...
    preSharedKeyAuthenticationRequired: ClassVar[PySide2.QtCore.Signal] = ...
    sslErrors: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., aboutToClose: typing.Callable = ..., bytesWritten: typing.Callable = ..., channelBytesWritten: typing.Callable = ..., channelReadyRead: typing.Callable = ..., connected: typing.Callable = ..., destroyed: typing.Callable = ..., disconnected: typing.Callable = ..., encrypted: typing.Callable = ..., encryptedBytesWritten: typing.Callable = ..., error: typing.Callable = ..., errorOccurred: typing.Callable = ..., hostFound: typing.Callable = ..., modeChanged: typing.Callable = ..., newSessionTicketReceived: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., peerVerifyError: typing.Callable = ..., preSharedKeyAuthenticationRequired: typing.Callable = ..., proxyAuthenticationRequired: typing.Callable = ..., readChannelFinished: typing.Callable = ..., readyRead: typing.Callable = ..., sslErrors: typing.Callable = ..., stateChanged: typing.Callable = ...) -> None: ...
    def abort(self) -> None: ...
    def addCaCertificate(self, certificate: QSslCertificate) -> None: ...
    @overload
    def addCaCertificates(self, certificates: typing.Sequence[QSslCertificate]) -> None: ...
    @overload
    def addCaCertificates(self, path: str, format: QSsl.EncodingFormat = ..., syntax: PySide2.QtCore.QRegExp.PatternSyntax = ...) -> bool: ...
    @classmethod
    def addDefaultCaCertificate(cls, certificate: QSslCertificate) -> None: ...
    @classmethod
    @overload
    def addDefaultCaCertificates(cls, certificates: typing.Sequence[QSslCertificate]) -> None: ...
    @classmethod
    @overload
    def addDefaultCaCertificates(cls, path: str, format: QSsl.EncodingFormat = ..., syntax: PySide2.QtCore.QRegExp.PatternSyntax = ...) -> bool: ...
    def atEnd(self) -> bool: ...
    def bytesAvailable(self) -> int: ...
    def bytesToWrite(self) -> int: ...
    def caCertificates(self) -> typing.List[QSslCertificate]: ...
    def canReadLine(self) -> bool: ...
    def ciphers(self) -> typing.List[QSslCipher]: ...
    def close(self) -> None: ...
    @overload
    def connectToHost(self, address: QHostAddress, port: int, mode: typing.Union[PySide2.QtCore.QIODevice.OpenMode,PySide2.QtCore.QIODevice.OpenModeFlag] = ...) -> None: ...
    @overload
    def connectToHost(self, hostName: str, port: int, openMode: typing.Union[PySide2.QtCore.QIODevice.OpenMode,PySide2.QtCore.QIODevice.OpenModeFlag] = ..., protocol: QAbstractSocket.NetworkLayerProtocol = ...) -> None: ...
    @overload
    def connectToHostEncrypted(self, hostName: str, port: int, mode: typing.Union[PySide2.QtCore.QIODevice.OpenMode,PySide2.QtCore.QIODevice.OpenModeFlag] = ..., protocol: QAbstractSocket.NetworkLayerProtocol = ...) -> None: ...
    @overload
    def connectToHostEncrypted(self, hostName: str, port: int, sslPeerName: str, mode: typing.Union[PySide2.QtCore.QIODevice.OpenMode,PySide2.QtCore.QIODevice.OpenModeFlag] = ..., protocol: QAbstractSocket.NetworkLayerProtocol = ...) -> None: ...
    @classmethod
    def defaultCaCertificates(cls) -> typing.List[QSslCertificate]: ...
    @classmethod
    def defaultCiphers(cls) -> typing.List[QSslCipher]: ...
    def disconnectFromHost(self) -> None: ...
    def encryptedBytesAvailable(self) -> int: ...
    def encryptedBytesToWrite(self) -> int: ...
    def flush(self) -> bool: ...
    @overload
    def ignoreSslErrors(self) -> None: ...
    @overload
    def ignoreSslErrors(self, errors: typing.Sequence[QSslError]) -> None: ...
    def isEncrypted(self) -> bool: ...
    def localCertificate(self) -> QSslCertificate: ...
    def localCertificateChain(self) -> typing.List[QSslCertificate]: ...
    def mode(self) -> QSslSocket.SslMode: ...
    def ocspResponses(self) -> typing.List[QOcspResponse]: ...
    def peerCertificate(self) -> QSslCertificate: ...
    def peerCertificateChain(self) -> typing.List[QSslCertificate]: ...
    def peerVerifyDepth(self) -> int: ...
    def peerVerifyMode(self) -> QSslSocket.PeerVerifyMode: ...
    def peerVerifyName(self) -> str: ...
    def privateKey(self) -> QSslKey: ...
    def protocol(self) -> QSsl.SslProtocol: ...
    def readData(self, data: bytes, maxlen: int) -> int: ...
    def resume(self) -> None: ...
    def sessionCipher(self) -> QSslCipher: ...
    def sessionProtocol(self) -> QSsl.SslProtocol: ...
    def setCaCertificates(self, certificates: typing.Sequence[QSslCertificate]) -> None: ...
    @overload
    def setCiphers(self, ciphers: typing.Sequence[QSslCipher]) -> None: ...
    @overload
    def setCiphers(self, ciphers: str) -> None: ...
    @classmethod
    def setDefaultCaCertificates(cls, certificates: typing.Sequence[QSslCertificate]) -> None: ...
    @classmethod
    def setDefaultCiphers(cls, ciphers: typing.Sequence[QSslCipher]) -> None: ...
    @overload
    def setLocalCertificate(self, certificate: QSslCertificate) -> None: ...
    @overload
    def setLocalCertificate(self, fileName: str, format: QSsl.EncodingFormat = ...) -> None: ...
    def setLocalCertificateChain(self, localChain: typing.Sequence[QSslCertificate]) -> None: ...
    def setPeerVerifyDepth(self, depth: int) -> None: ...
    def setPeerVerifyMode(self, mode: QSslSocket.PeerVerifyMode) -> None: ...
    def setPeerVerifyName(self, hostName: str) -> None: ...
    @overload
    def setPrivateKey(self, fileName: str, algorithm: QSsl.KeyAlgorithm = ..., format: QSsl.EncodingFormat = ..., passPhrase: typing.Union[PySide2.QtCore.QByteArray,bytes] = ...) -> None: ...
    @overload
    def setPrivateKey(self, key: QSslKey) -> None: ...
    def setProtocol(self, protocol: QSsl.SslProtocol) -> None: ...
    def setReadBufferSize(self, size: int) -> None: ...
    def setSocketDescriptor(self, socketDescriptor: int, state: QAbstractSocket.SocketState = ..., openMode: typing.Union[PySide2.QtCore.QIODevice.OpenMode,PySide2.QtCore.QIODevice.OpenModeFlag] = ...) -> bool: ...
    def setSocketOption(self, option: QAbstractSocket.SocketOption, value: typing.Any) -> None: ...
    def setSslConfiguration(self, config: QSslConfiguration) -> None: ...
    def socketOption(self, option: QAbstractSocket.SocketOption) -> typing.Any: ...
    def sslConfiguration(self) -> QSslConfiguration: ...
    def sslHandshakeErrors(self) -> typing.List[QSslError]: ...
    @classmethod
    def sslLibraryBuildVersionNumber(cls) -> int: ...
    @classmethod
    def sslLibraryBuildVersionString(cls) -> str: ...
    @classmethod
    def sslLibraryVersionNumber(cls) -> int: ...
    @classmethod
    def sslLibraryVersionString(cls) -> str: ...
    def startClientEncryption(self) -> None: ...
    def startServerEncryption(self) -> None: ...
    @classmethod
    def supportedCiphers(cls) -> typing.List[QSslCipher]: ...
    @classmethod
    def supportsSsl(cls) -> bool: ...
    @classmethod
    def systemCaCertificates(cls) -> typing.List[QSslCertificate]: ...
    def waitForBytesWritten(self, msecs: int = ...) -> bool: ...
    def waitForConnected(self, msecs: int = ...) -> bool: ...
    def waitForDisconnected(self, msecs: int = ...) -> bool: ...
    def waitForEncrypted(self, msecs: int = ...) -> bool: ...
    def waitForReadyRead(self, msecs: int = ...) -> bool: ...
    def writeData(self, data: bytes, len: int) -> int: ...

class QTcpServer(PySide2.QtCore.QObject):
    acceptError: ClassVar[PySide2.QtCore.Signal] = ...
    newConnection: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., acceptError: typing.Callable = ..., destroyed: typing.Callable = ..., newConnection: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def addPendingConnection(self, socket: QTcpSocket) -> None: ...
    def close(self) -> None: ...
    def errorString(self) -> str: ...
    def hasPendingConnections(self) -> bool: ...
    def incomingConnection(self, handle: int) -> None: ...
    def isListening(self) -> bool: ...
    def listen(self, address: QHostAddress = ..., port: int = ...) -> bool: ...
    def maxPendingConnections(self) -> int: ...
    def nextPendingConnection(self) -> QTcpSocket: ...
    def pauseAccepting(self) -> None: ...
    def proxy(self) -> QNetworkProxy: ...
    def resumeAccepting(self) -> None: ...
    def serverAddress(self) -> QHostAddress: ...
    def serverError(self) -> QAbstractSocket.SocketError: ...
    def serverPort(self) -> int: ...
    def setMaxPendingConnections(self, numConnections: int) -> None: ...
    def setProxy(self, networkProxy: QNetworkProxy) -> None: ...
    def setSocketDescriptor(self, socketDescriptor: int) -> bool: ...
    def socketDescriptor(self) -> int: ...
    def waitForNewConnection(self, msec: int) -> typing.Tuple[bool,bool]: ...

class QTcpSocket(QAbstractSocket):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., aboutToClose: typing.Callable = ..., bytesWritten: typing.Callable = ..., channelBytesWritten: typing.Callable = ..., channelReadyRead: typing.Callable = ..., connected: typing.Callable = ..., destroyed: typing.Callable = ..., disconnected: typing.Callable = ..., error: typing.Callable = ..., errorOccurred: typing.Callable = ..., hostFound: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., proxyAuthenticationRequired: typing.Callable = ..., readChannelFinished: typing.Callable = ..., readyRead: typing.Callable = ..., stateChanged: typing.Callable = ...) -> None: ...

class QUdpSocket(QAbstractSocket):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., aboutToClose: typing.Callable = ..., bytesWritten: typing.Callable = ..., channelBytesWritten: typing.Callable = ..., channelReadyRead: typing.Callable = ..., connected: typing.Callable = ..., destroyed: typing.Callable = ..., disconnected: typing.Callable = ..., error: typing.Callable = ..., errorOccurred: typing.Callable = ..., hostFound: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., proxyAuthenticationRequired: typing.Callable = ..., readChannelFinished: typing.Callable = ..., readyRead: typing.Callable = ..., stateChanged: typing.Callable = ...) -> None: ...
    def hasPendingDatagrams(self) -> bool: ...
    @overload
    def joinMulticastGroup(self, groupAddress: QHostAddress) -> bool: ...
    @overload
    def joinMulticastGroup(self, groupAddress: QHostAddress, iface: QNetworkInterface) -> bool: ...
    @overload
    def leaveMulticastGroup(self, groupAddress: QHostAddress) -> bool: ...
    @overload
    def leaveMulticastGroup(self, groupAddress: QHostAddress, iface: QNetworkInterface) -> bool: ...
    def multicastInterface(self) -> QNetworkInterface: ...
    def pendingDatagramSize(self) -> int: ...
    def readDatagram(self, data: bytes, maxlen: int, host: QHostAddress) -> typing.Tuple[int,int]: ...
    def receiveDatagram(self, maxSize: int = ...) -> QNetworkDatagram: ...
    def setMulticastInterface(self, iface: QNetworkInterface) -> None: ...
    @overload
    def writeDatagram(self, datagram: typing.Union[PySide2.QtCore.QByteArray,bytes], host: QHostAddress, port: int) -> int: ...
    @overload
    def writeDatagram(self, datagram: QNetworkDatagram) -> int: ...
