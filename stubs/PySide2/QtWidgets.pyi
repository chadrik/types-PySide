from typing import Any, Callable, ClassVar, Dict, Iterator, List, Optional, Tuple, Union

from typing import overload
import PySide2.QtCore
import PySide2.QtGui
import shiboken2
import typing
T = typing.TypeVar('T')

class QAbstractButton(QWidget):
    clicked: ClassVar[PySide2.QtCore.Signal] = ...
    pressed: ClassVar[PySide2.QtCore.Signal] = ...
    released: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    toggled: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def animateClick(self, msec: int = ...) -> None: ...
    def autoExclusive(self) -> bool: ...
    def autoRepeat(self) -> bool: ...
    def autoRepeatDelay(self) -> int: ...
    def autoRepeatInterval(self) -> int: ...
    def changeEvent(self, e: PySide2.QtCore.QEvent) -> None: ...
    def checkStateSet(self) -> None: ...
    def click(self) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def focusInEvent(self, e: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusOutEvent(self, e: PySide2.QtGui.QFocusEvent) -> None: ...
    def group(self) -> QButtonGroup: ...
    def hitButton(self, pos: PySide2.QtCore.QPoint) -> bool: ...
    def icon(self) -> PySide2.QtGui.QIcon: ...
    def iconSize(self) -> PySide2.QtCore.QSize: ...
    def isCheckable(self) -> bool: ...
    def isChecked(self) -> bool: ...
    def isDown(self) -> bool: ...
    def keyPressEvent(self, e: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, e: PySide2.QtGui.QKeyEvent) -> None: ...
    def mouseMoveEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def nextCheckState(self) -> None: ...
    def paintEvent(self, e: PySide2.QtGui.QPaintEvent) -> None: ...
    def setAutoExclusive(self, arg__1: bool) -> None: ...
    def setAutoRepeat(self, arg__1: bool) -> None: ...
    def setAutoRepeatDelay(self, arg__1: int) -> None: ...
    def setAutoRepeatInterval(self, arg__1: int) -> None: ...
    def setCheckable(self, arg__1: bool) -> None: ...
    def setChecked(self, arg__1: bool) -> None: ...
    def setDown(self, arg__1: bool) -> None: ...
    def setIcon(self, icon: PySide2.QtGui.QIcon) -> None: ...
    def setIconSize(self, size: PySide2.QtCore.QSize) -> None: ...
    def setShortcut(self, key: typing.Union[PySide2.QtGui.QKeySequence,str]) -> None: ...
    def setText(self, text: str) -> None: ...
    def shortcut(self) -> PySide2.QtGui.QKeySequence: ...
    def text(self) -> str: ...
    def timerEvent(self, e: PySide2.QtCore.QTimerEvent) -> None: ...
    def toggle(self) -> None: ...

class QAbstractGraphicsShapeItem(QGraphicsItem):
    def __init__(self, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    def brush(self) -> PySide2.QtGui.QBrush: ...
    def isObscuredBy(self, item: QGraphicsItem) -> bool: ...
    def opaqueArea(self) -> PySide2.QtGui.QPainterPath: ...
    def pen(self) -> PySide2.QtGui.QPen: ...
    def setBrush(self, brush: PySide2.QtGui.QBrush) -> None: ...
    def setPen(self, pen: PySide2.QtGui.QPen) -> None: ...

class QAbstractItemDelegate(PySide2.QtCore.QObject):
    class EndEditHint:
        EditNextItem: ClassVar[QAbstractItemDelegate.EndEditHint] = ...
        EditPreviousItem: ClassVar[QAbstractItemDelegate.EndEditHint] = ...
        NoHint: ClassVar[QAbstractItemDelegate.EndEditHint] = ...
        RevertModelCache: ClassVar[QAbstractItemDelegate.EndEditHint] = ...
        SubmitModelCache: ClassVar[QAbstractItemDelegate.EndEditHint] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractItemDelegate.EndEditHint: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractItemDelegate.EndEditHint: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractItemDelegate.EndEditHint: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractItemDelegate.EndEditHint: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractItemDelegate.EndEditHint: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractItemDelegate.EndEditHint: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractItemDelegate.EndEditHint: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractItemDelegate.EndEditHint: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractItemDelegate.EndEditHint: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractItemDelegate.EndEditHint: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractItemDelegate.EndEditHint: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractItemDelegate.EndEditHint: ...
    EditNextItem: ClassVar[QAbstractItemDelegate.EndEditHint] = ...
    EditPreviousItem: ClassVar[QAbstractItemDelegate.EndEditHint] = ...
    NoHint: ClassVar[QAbstractItemDelegate.EndEditHint] = ...
    RevertModelCache: ClassVar[QAbstractItemDelegate.EndEditHint] = ...
    SubmitModelCache: ClassVar[QAbstractItemDelegate.EndEditHint] = ...
    closeEditor: ClassVar[PySide2.QtCore.Signal] = ...
    commitData: ClassVar[PySide2.QtCore.Signal] = ...
    sizeHintChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def createEditor(self, parent: typing.Optional[QWidget], option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> QWidget: ...
    def destroyEditor(self, editor: QWidget, index: PySide2.QtCore.QModelIndex) -> None: ...
    def editorEvent(self, event: PySide2.QtCore.QEvent, model: PySide2.QtCore.QAbstractItemModel, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> bool: ...
    @classmethod
    def elidedText(cls, fontMetrics: PySide2.QtGui.QFontMetrics, width: int, mode: PySide2.QtCore.Qt.TextElideMode, text: str) -> str: ...
    def helpEvent(self, event: PySide2.QtGui.QHelpEvent, view: QAbstractItemView, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def paint(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> None: ...
    def paintingRoles(self) -> typing.List[int]: ...
    def setEditorData(self, editor: QWidget, index: PySide2.QtCore.QModelIndex) -> None: ...
    def setModelData(self, editor: QWidget, model: PySide2.QtCore.QAbstractItemModel, index: PySide2.QtCore.QModelIndex) -> None: ...
    def sizeHint(self, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QSize: ...
    def updateEditorGeometry(self, editor: QWidget, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> None: ...

class QAbstractItemView(QAbstractScrollArea):
    class CursorAction:
        MoveDown: ClassVar[QAbstractItemView.CursorAction] = ...
        MoveEnd: ClassVar[QAbstractItemView.CursorAction] = ...
        MoveHome: ClassVar[QAbstractItemView.CursorAction] = ...
        MoveLeft: ClassVar[QAbstractItemView.CursorAction] = ...
        MoveNext: ClassVar[QAbstractItemView.CursorAction] = ...
        MovePageDown: ClassVar[QAbstractItemView.CursorAction] = ...
        MovePageUp: ClassVar[QAbstractItemView.CursorAction] = ...
        MovePrevious: ClassVar[QAbstractItemView.CursorAction] = ...
        MoveRight: ClassVar[QAbstractItemView.CursorAction] = ...
        MoveUp: ClassVar[QAbstractItemView.CursorAction] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractItemView.CursorAction: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractItemView.CursorAction: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractItemView.CursorAction: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractItemView.CursorAction: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractItemView.CursorAction: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractItemView.CursorAction: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractItemView.CursorAction: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractItemView.CursorAction: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractItemView.CursorAction: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractItemView.CursorAction: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractItemView.CursorAction: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractItemView.CursorAction: ...

    class DragDropMode:
        DragDrop: ClassVar[QAbstractItemView.DragDropMode] = ...
        DragOnly: ClassVar[QAbstractItemView.DragDropMode] = ...
        DropOnly: ClassVar[QAbstractItemView.DragDropMode] = ...
        InternalMove: ClassVar[QAbstractItemView.DragDropMode] = ...
        NoDragDrop: ClassVar[QAbstractItemView.DragDropMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractItemView.DragDropMode: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractItemView.DragDropMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractItemView.DragDropMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractItemView.DragDropMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractItemView.DragDropMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractItemView.DragDropMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractItemView.DragDropMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractItemView.DragDropMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractItemView.DragDropMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractItemView.DragDropMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractItemView.DragDropMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractItemView.DragDropMode: ...

    class DropIndicatorPosition:
        AboveItem: ClassVar[QAbstractItemView.DropIndicatorPosition] = ...
        BelowItem: ClassVar[QAbstractItemView.DropIndicatorPosition] = ...
        OnItem: ClassVar[QAbstractItemView.DropIndicatorPosition] = ...
        OnViewport: ClassVar[QAbstractItemView.DropIndicatorPosition] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractItemView.DropIndicatorPosition: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractItemView.DropIndicatorPosition: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractItemView.DropIndicatorPosition: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractItemView.DropIndicatorPosition: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractItemView.DropIndicatorPosition: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractItemView.DropIndicatorPosition: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractItemView.DropIndicatorPosition: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractItemView.DropIndicatorPosition: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractItemView.DropIndicatorPosition: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractItemView.DropIndicatorPosition: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractItemView.DropIndicatorPosition: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractItemView.DropIndicatorPosition: ...

    class EditTrigger:
        AllEditTriggers: ClassVar[QAbstractItemView.EditTrigger] = ...
        AnyKeyPressed: ClassVar[QAbstractItemView.EditTrigger] = ...
        CurrentChanged: ClassVar[QAbstractItemView.EditTrigger] = ...
        DoubleClicked: ClassVar[QAbstractItemView.EditTrigger] = ...
        EditKeyPressed: ClassVar[QAbstractItemView.EditTrigger] = ...
        NoEditTriggers: ClassVar[QAbstractItemView.EditTrigger] = ...
        SelectedClicked: ClassVar[QAbstractItemView.EditTrigger] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractItemView.EditTriggers: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QAbstractItemView.EditTrigger: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractItemView.EditTriggers: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractItemView.EditTriggers: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractItemView.EditTriggers: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractItemView.EditTriggers: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractItemView.EditTriggers: ...

    class EditTriggers:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractItemView.EditTriggers: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QAbstractItemView.EditTriggers: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractItemView.EditTriggers: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractItemView.EditTriggers: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractItemView.EditTriggers: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractItemView.EditTriggers: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractItemView.EditTriggers: ...

    class ScrollHint:
        EnsureVisible: ClassVar[QAbstractItemView.ScrollHint] = ...
        PositionAtBottom: ClassVar[QAbstractItemView.ScrollHint] = ...
        PositionAtCenter: ClassVar[QAbstractItemView.ScrollHint] = ...
        PositionAtTop: ClassVar[QAbstractItemView.ScrollHint] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollHint: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollHint: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollHint: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollHint: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollHint: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollHint: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollHint: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollHint: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollHint: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollHint: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollHint: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollHint: ...

    class ScrollMode:
        ScrollPerItem: ClassVar[QAbstractItemView.ScrollMode] = ...
        ScrollPerPixel: ClassVar[QAbstractItemView.ScrollMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollMode: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractItemView.ScrollMode: ...

    class SelectionBehavior:
        SelectColumns: ClassVar[QAbstractItemView.SelectionBehavior] = ...
        SelectItems: ClassVar[QAbstractItemView.SelectionBehavior] = ...
        SelectRows: ClassVar[QAbstractItemView.SelectionBehavior] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionBehavior: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionBehavior: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionBehavior: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionBehavior: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionBehavior: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionBehavior: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionBehavior: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionBehavior: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionBehavior: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionBehavior: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionBehavior: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionBehavior: ...

    class SelectionMode:
        ContiguousSelection: ClassVar[QAbstractItemView.SelectionMode] = ...
        ExtendedSelection: ClassVar[QAbstractItemView.SelectionMode] = ...
        MultiSelection: ClassVar[QAbstractItemView.SelectionMode] = ...
        NoSelection: ClassVar[QAbstractItemView.SelectionMode] = ...
        SingleSelection: ClassVar[QAbstractItemView.SelectionMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionMode: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractItemView.SelectionMode: ...

    class State:
        AnimatingState: ClassVar[QAbstractItemView.State] = ...
        CollapsingState: ClassVar[QAbstractItemView.State] = ...
        DragSelectingState: ClassVar[QAbstractItemView.State] = ...
        DraggingState: ClassVar[QAbstractItemView.State] = ...
        EditingState: ClassVar[QAbstractItemView.State] = ...
        ExpandingState: ClassVar[QAbstractItemView.State] = ...
        NoState: ClassVar[QAbstractItemView.State] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractItemView.State: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractItemView.State: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractItemView.State: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractItemView.State: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractItemView.State: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractItemView.State: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractItemView.State: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractItemView.State: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractItemView.State: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractItemView.State: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractItemView.State: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractItemView.State: ...
    AboveItem: ClassVar[QAbstractItemView.DropIndicatorPosition] = ...
    AllEditTriggers: ClassVar[QAbstractItemView.EditTrigger] = ...
    AnimatingState: ClassVar[QAbstractItemView.State] = ...
    AnyKeyPressed: ClassVar[QAbstractItemView.EditTrigger] = ...
    BelowItem: ClassVar[QAbstractItemView.DropIndicatorPosition] = ...
    CollapsingState: ClassVar[QAbstractItemView.State] = ...
    ContiguousSelection: ClassVar[QAbstractItemView.SelectionMode] = ...
    CurrentChanged: ClassVar[QAbstractItemView.EditTrigger] = ...
    DoubleClicked: ClassVar[QAbstractItemView.EditTrigger] = ...
    DragDrop: ClassVar[QAbstractItemView.DragDropMode] = ...
    DragOnly: ClassVar[QAbstractItemView.DragDropMode] = ...
    DragSelectingState: ClassVar[QAbstractItemView.State] = ...
    DraggingState: ClassVar[QAbstractItemView.State] = ...
    DropOnly: ClassVar[QAbstractItemView.DragDropMode] = ...
    EditKeyPressed: ClassVar[QAbstractItemView.EditTrigger] = ...
    EditingState: ClassVar[QAbstractItemView.State] = ...
    EnsureVisible: ClassVar[QAbstractItemView.ScrollHint] = ...
    ExpandingState: ClassVar[QAbstractItemView.State] = ...
    ExtendedSelection: ClassVar[QAbstractItemView.SelectionMode] = ...
    InternalMove: ClassVar[QAbstractItemView.DragDropMode] = ...
    MoveDown: ClassVar[QAbstractItemView.CursorAction] = ...
    MoveEnd: ClassVar[QAbstractItemView.CursorAction] = ...
    MoveHome: ClassVar[QAbstractItemView.CursorAction] = ...
    MoveLeft: ClassVar[QAbstractItemView.CursorAction] = ...
    MoveNext: ClassVar[QAbstractItemView.CursorAction] = ...
    MovePageDown: ClassVar[QAbstractItemView.CursorAction] = ...
    MovePageUp: ClassVar[QAbstractItemView.CursorAction] = ...
    MovePrevious: ClassVar[QAbstractItemView.CursorAction] = ...
    MoveRight: ClassVar[QAbstractItemView.CursorAction] = ...
    MoveUp: ClassVar[QAbstractItemView.CursorAction] = ...
    MultiSelection: ClassVar[QAbstractItemView.SelectionMode] = ...
    NoDragDrop: ClassVar[QAbstractItemView.DragDropMode] = ...
    NoEditTriggers: ClassVar[QAbstractItemView.EditTrigger] = ...
    NoSelection: ClassVar[QAbstractItemView.SelectionMode] = ...
    NoState: ClassVar[QAbstractItemView.State] = ...
    OnItem: ClassVar[QAbstractItemView.DropIndicatorPosition] = ...
    OnViewport: ClassVar[QAbstractItemView.DropIndicatorPosition] = ...
    PositionAtBottom: ClassVar[QAbstractItemView.ScrollHint] = ...
    PositionAtCenter: ClassVar[QAbstractItemView.ScrollHint] = ...
    PositionAtTop: ClassVar[QAbstractItemView.ScrollHint] = ...
    ScrollPerItem: ClassVar[QAbstractItemView.ScrollMode] = ...
    ScrollPerPixel: ClassVar[QAbstractItemView.ScrollMode] = ...
    SelectColumns: ClassVar[QAbstractItemView.SelectionBehavior] = ...
    SelectItems: ClassVar[QAbstractItemView.SelectionBehavior] = ...
    SelectRows: ClassVar[QAbstractItemView.SelectionBehavior] = ...
    SelectedClicked: ClassVar[QAbstractItemView.EditTrigger] = ...
    SingleSelection: ClassVar[QAbstractItemView.SelectionMode] = ...
    activated: ClassVar[PySide2.QtCore.Signal] = ...
    clicked: ClassVar[PySide2.QtCore.Signal] = ...
    doubleClicked: ClassVar[PySide2.QtCore.Signal] = ...
    entered: ClassVar[PySide2.QtCore.Signal] = ...
    iconSizeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    pressed: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    viewportEntered: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QAbstractScrollArea.Shadow = ..., frameShape: QAbstractScrollArea.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QAbstractScrollArea.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def alternatingRowColors(self) -> bool: ...
    def autoScrollMargin(self) -> int: ...
    def clearSelection(self) -> None: ...
    def closeEditor(self, editor: QWidget, hint: QAbstractItemDelegate.EndEditHint) -> None: ...
    def closePersistentEditor(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    def commitData(self, editor: QWidget) -> None: ...
    def currentChanged(self, current: PySide2.QtCore.QModelIndex, previous: PySide2.QtCore.QModelIndex) -> None: ...
    def currentIndex(self) -> PySide2.QtCore.QModelIndex: ...
    def dataChanged(self, topLeft: PySide2.QtCore.QModelIndex, bottomRight: PySide2.QtCore.QModelIndex, roles: typing.List[int] = ...) -> None: ...
    def defaultDropAction(self) -> PySide2.QtCore.Qt.DropAction: ...
    def dirtyRegionOffset(self) -> PySide2.QtCore.QPoint: ...
    def doAutoScroll(self) -> None: ...
    def doItemsLayout(self) -> None: ...
    def dragDropMode(self) -> QAbstractItemView.DragDropMode: ...
    def dragDropOverwriteMode(self) -> bool: ...
    def dragEnabled(self) -> bool: ...
    def dragEnterEvent(self, event: PySide2.QtGui.QDragEnterEvent) -> None: ...
    def dragLeaveEvent(self, event: PySide2.QtGui.QDragLeaveEvent) -> None: ...
    def dragMoveEvent(self, event: PySide2.QtGui.QDragMoveEvent) -> None: ...
    def dropEvent(self, event: PySide2.QtGui.QDropEvent) -> None: ...
    def dropIndicatorPosition(self) -> QAbstractItemView.DropIndicatorPosition: ...
    @overload
    def edit(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    @overload
    def edit(self, index: PySide2.QtCore.QModelIndex, trigger: QAbstractItemView.EditTrigger, event: PySide2.QtCore.QEvent) -> bool: ...
    def editTriggers(self) -> typing.Union[QAbstractItemView.EditTriggers,QAbstractItemView.EditTrigger]: ...
    def editorDestroyed(self, editor: PySide2.QtCore.QObject) -> None: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def eventFilter(self, object: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool: ...
    def executeDelayedItemsLayout(self) -> None: ...
    def focusInEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def focusOutEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def hasAutoScroll(self) -> bool: ...
    def horizontalOffset(self) -> int: ...
    def horizontalScrollMode(self) -> QAbstractItemView.ScrollMode: ...
    def horizontalScrollbarAction(self, action: int) -> None: ...
    def horizontalScrollbarValueChanged(self, value: int) -> None: ...
    def horizontalStepsPerItem(self) -> int: ...
    def iconSize(self) -> PySide2.QtCore.QSize: ...
    def indexAt(self, point: PySide2.QtCore.QPoint) -> PySide2.QtCore.QModelIndex: ...
    def indexWidget(self, index: PySide2.QtCore.QModelIndex) -> QWidget: ...
    def inputMethodEvent(self, event: PySide2.QtGui.QInputMethodEvent) -> None: ...
    def inputMethodQuery(self, query: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    def isIndexHidden(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def isPersistentEditorOpen(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    @overload
    def itemDelegate(self) -> QAbstractItemDelegate: ...
    @overload
    def itemDelegate(self, index: PySide2.QtCore.QModelIndex) -> QAbstractItemDelegate: ...
    def itemDelegateForColumn(self, column: int) -> QAbstractItemDelegate: ...
    def itemDelegateForRow(self, row: int) -> QAbstractItemDelegate: ...
    def keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyboardSearch(self, search: str) -> None: ...
    def model(self) -> PySide2.QtCore.QAbstractItemModel: ...
    def mouseDoubleClickEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseMoveEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def moveCursor(self, cursorAction: QAbstractItemView.CursorAction, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> PySide2.QtCore.QModelIndex: ...
    def openPersistentEditor(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    def reset(self) -> None: ...
    def resetHorizontalScrollMode(self) -> None: ...
    def resetVerticalScrollMode(self) -> None: ...
    def resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None: ...
    def rootIndex(self) -> PySide2.QtCore.QModelIndex: ...
    def rowsAboutToBeRemoved(self, parent: PySide2.QtCore.QModelIndex, start: int, end: int) -> None: ...
    def rowsInserted(self, parent: PySide2.QtCore.QModelIndex, start: int, end: int) -> None: ...
    def scheduleDelayedItemsLayout(self) -> None: ...
    def scrollDirtyRegion(self, dx: int, dy: int) -> None: ...
    def scrollTo(self, index: PySide2.QtCore.QModelIndex, hint: QAbstractItemView.ScrollHint = ...) -> None: ...
    def scrollToBottom(self) -> None: ...
    def scrollToTop(self) -> None: ...
    def selectAll(self) -> None: ...
    def selectedIndexes(self) -> typing.List[QModelIndex]: ...
    def selectionBehavior(self) -> QAbstractItemView.SelectionBehavior: ...
    def selectionChanged(self, selected: PySide2.QtCore.QItemSelection, deselected: PySide2.QtCore.QItemSelection) -> None: ...
    def selectionCommand(self, index: PySide2.QtCore.QModelIndex, event: typing.Union[PySide2.QtCore.QEvent,None] = ...) -> typing.Union[PySide2.QtCore.QItemSelectionModel.SelectionFlags,PySide2.QtCore.QItemSelectionModel.SelectionFlag]: ...
    def selectionMode(self) -> QAbstractItemView.SelectionMode: ...
    def selectionModel(self) -> PySide2.QtCore.QItemSelectionModel: ...
    def setAlternatingRowColors(self, enable: bool) -> None: ...
    def setAutoScroll(self, enable: bool) -> None: ...
    def setAutoScrollMargin(self, margin: int) -> None: ...
    def setCurrentIndex(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    def setDefaultDropAction(self, dropAction: PySide2.QtCore.Qt.DropAction) -> None: ...
    def setDirtyRegion(self, region: PySide2.QtGui.QRegion) -> None: ...
    def setDragDropMode(self, behavior: QAbstractItemView.DragDropMode) -> None: ...
    def setDragDropOverwriteMode(self, overwrite: bool) -> None: ...
    def setDragEnabled(self, enable: bool) -> None: ...
    def setDropIndicatorShown(self, enable: bool) -> None: ...
    def setEditTriggers(self, triggers: typing.Union[QAbstractItemView.EditTriggers,QAbstractItemView.EditTrigger]) -> None: ...
    def setHorizontalScrollMode(self, mode: QAbstractItemView.ScrollMode) -> None: ...
    def setHorizontalStepsPerItem(self, steps: int) -> None: ...
    def setIconSize(self, size: PySide2.QtCore.QSize) -> None: ...
    def setIndexWidget(self, index: PySide2.QtCore.QModelIndex, widget: QWidget) -> None: ...
    def setItemDelegate(self, delegate: QAbstractItemDelegate) -> None: ...
    def setItemDelegateForColumn(self, column: int, delegate: QAbstractItemDelegate) -> None: ...
    def setItemDelegateForRow(self, row: int, delegate: QAbstractItemDelegate) -> None: ...
    def setModel(self, model: typing.Optional[PySide2.QtCore.QAbstractItemModel]) -> None: ...
    def setRootIndex(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    def setSelection(self, rect: PySide2.QtCore.QRect, command: typing.Union[PySide2.QtCore.QItemSelectionModel.SelectionFlags,PySide2.QtCore.QItemSelectionModel.SelectionFlag]) -> None: ...
    def setSelectionBehavior(self, behavior: QAbstractItemView.SelectionBehavior) -> None: ...
    def setSelectionMode(self, mode: QAbstractItemView.SelectionMode) -> None: ...
    def setSelectionModel(self, selectionModel: PySide2.QtCore.QItemSelectionModel) -> None: ...
    def setState(self, state: QAbstractItemView.State) -> None: ...
    def setTabKeyNavigation(self, enable: bool) -> None: ...
    def setTextElideMode(self, mode: PySide2.QtCore.Qt.TextElideMode) -> None: ...
    def setVerticalScrollMode(self, mode: QAbstractItemView.ScrollMode) -> None: ...
    def setVerticalStepsPerItem(self, steps: int) -> None: ...
    def showDropIndicator(self) -> bool: ...
    def sizeHintForColumn(self, column: int) -> int: ...
    def sizeHintForIndex(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QSize: ...
    def sizeHintForRow(self, row: int) -> int: ...
    def startAutoScroll(self) -> None: ...
    def startDrag(self, supportedActions: typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction]) -> None: ...
    def state(self) -> QAbstractItemView.State: ...
    def stopAutoScroll(self) -> None: ...
    def tabKeyNavigation(self) -> bool: ...
    def textElideMode(self) -> PySide2.QtCore.Qt.TextElideMode: ...
    def timerEvent(self, event: PySide2.QtCore.QTimerEvent) -> None: ...
    @overload
    def update(self) -> None: ...
    @overload
    def update(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    def updateEditorData(self) -> None: ...
    def updateEditorGeometries(self) -> None: ...
    def updateGeometries(self) -> None: ...
    def verticalOffset(self) -> int: ...
    def verticalScrollMode(self) -> QAbstractItemView.ScrollMode: ...
    def verticalScrollbarAction(self, action: int) -> None: ...
    def verticalScrollbarValueChanged(self, value: int) -> None: ...
    def verticalStepsPerItem(self) -> int: ...
    def viewOptions(self) -> QStyleOptionViewItem: ...
    def viewportEvent(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def viewportSizeHint(self) -> PySide2.QtCore.QSize: ...
    def visualRect(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QRect: ...
    def visualRegionForSelection(self, selection: PySide2.QtCore.QItemSelection) -> PySide2.QtGui.QRegion: ...

class QAbstractScrollArea(QFrame):
    class SizeAdjustPolicy:
        AdjustIgnored: ClassVar[QAbstractScrollArea.SizeAdjustPolicy] = ...
        AdjustToContents: ClassVar[QAbstractScrollArea.SizeAdjustPolicy] = ...
        AdjustToContentsOnFirstShow: ClassVar[QAbstractScrollArea.SizeAdjustPolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractScrollArea.SizeAdjustPolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractScrollArea.SizeAdjustPolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractScrollArea.SizeAdjustPolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractScrollArea.SizeAdjustPolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractScrollArea.SizeAdjustPolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractScrollArea.SizeAdjustPolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractScrollArea.SizeAdjustPolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractScrollArea.SizeAdjustPolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractScrollArea.SizeAdjustPolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractScrollArea.SizeAdjustPolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractScrollArea.SizeAdjustPolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractScrollArea.SizeAdjustPolicy: ...
    AdjustIgnored: ClassVar[QAbstractScrollArea.SizeAdjustPolicy] = ...
    AdjustToContents: ClassVar[QAbstractScrollArea.SizeAdjustPolicy] = ...
    AdjustToContentsOnFirstShow: ClassVar[QAbstractScrollArea.SizeAdjustPolicy] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QAbstractScrollArea.Shadow = ..., frameShape: QAbstractScrollArea.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QAbstractScrollArea.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def addScrollBarWidget(self, widget: QWidget, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def contextMenuEvent(self, arg__1: PySide2.QtGui.QContextMenuEvent) -> None: ...
    def cornerWidget(self) -> QWidget: ...
    def dragEnterEvent(self, arg__1: PySide2.QtGui.QDragEnterEvent) -> None: ...
    def dragLeaveEvent(self, arg__1: PySide2.QtGui.QDragLeaveEvent) -> None: ...
    def dragMoveEvent(self, arg__1: PySide2.QtGui.QDragMoveEvent) -> None: ...
    def dropEvent(self, arg__1: PySide2.QtGui.QDropEvent) -> None: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def eventFilter(self, arg__1: PySide2.QtCore.QObject, arg__2: PySide2.QtCore.QEvent) -> bool: ...
    def horizontalScrollBar(self) -> QScrollBar: ...
    def horizontalScrollBarPolicy(self) -> PySide2.QtCore.Qt.ScrollBarPolicy: ...
    def keyPressEvent(self, arg__1: PySide2.QtGui.QKeyEvent) -> None: ...
    def maximumViewportSize(self) -> PySide2.QtCore.QSize: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def mouseDoubleClickEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseMoveEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def resizeEvent(self, arg__1: PySide2.QtGui.QResizeEvent) -> None: ...
    def scrollBarWidgets(self, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> typing.List[QWidget]: ...
    def scrollContentsBy(self, dx: int, dy: int) -> None: ...
    def setCornerWidget(self, widget: QWidget) -> None: ...
    def setHorizontalScrollBar(self, scrollbar: QScrollBar) -> None: ...
    def setHorizontalScrollBarPolicy(self, arg__1: PySide2.QtCore.Qt.ScrollBarPolicy) -> None: ...
    def setSizeAdjustPolicy(self, policy: QAbstractScrollArea.SizeAdjustPolicy) -> None: ...
    def setVerticalScrollBar(self, scrollbar: QScrollBar) -> None: ...
    def setVerticalScrollBarPolicy(self, arg__1: PySide2.QtCore.Qt.ScrollBarPolicy) -> None: ...
    def setViewport(self, widget: QWidget) -> None: ...
    @overload
    def setViewportMargins(self, left: int, top: int, right: int, bottom: int) -> None: ...
    @overload
    def setViewportMargins(self, margins: PySide2.QtCore.QMargins) -> None: ...
    def setupViewport(self, viewport: QWidget) -> None: ...
    def sizeAdjustPolicy(self) -> QAbstractScrollArea.SizeAdjustPolicy: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def verticalScrollBar(self) -> QScrollBar: ...
    def verticalScrollBarPolicy(self) -> PySide2.QtCore.Qt.ScrollBarPolicy: ...
    def viewport(self) -> QWidget: ...
    def viewportEvent(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def viewportMargins(self) -> PySide2.QtCore.QMargins: ...
    def viewportSizeHint(self) -> PySide2.QtCore.QSize: ...
    def wheelEvent(self, arg__1: PySide2.QtGui.QWheelEvent) -> None: ...

class QAbstractSlider(QWidget):
    class SliderAction:
        SliderMove: ClassVar[QAbstractSlider.SliderAction] = ...
        SliderNoAction: ClassVar[QAbstractSlider.SliderAction] = ...
        SliderPageStepAdd: ClassVar[QAbstractSlider.SliderAction] = ...
        SliderPageStepSub: ClassVar[QAbstractSlider.SliderAction] = ...
        SliderSingleStepAdd: ClassVar[QAbstractSlider.SliderAction] = ...
        SliderSingleStepSub: ClassVar[QAbstractSlider.SliderAction] = ...
        SliderToMaximum: ClassVar[QAbstractSlider.SliderAction] = ...
        SliderToMinimum: ClassVar[QAbstractSlider.SliderAction] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderAction: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderAction: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderAction: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderAction: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderAction: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderAction: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderAction: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderAction: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderAction: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderAction: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderAction: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderAction: ...

    class SliderChange:
        SliderOrientationChange: ClassVar[QAbstractSlider.SliderChange] = ...
        SliderRangeChange: ClassVar[QAbstractSlider.SliderChange] = ...
        SliderStepsChange: ClassVar[QAbstractSlider.SliderChange] = ...
        SliderValueChange: ClassVar[QAbstractSlider.SliderChange] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderChange: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderChange: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderChange: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderChange: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderChange: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderChange: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderChange: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderChange: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderChange: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderChange: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderChange: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSlider.SliderChange: ...
    SliderMove: ClassVar[QAbstractSlider.SliderAction] = ...
    SliderNoAction: ClassVar[QAbstractSlider.SliderAction] = ...
    SliderOrientationChange: ClassVar[QAbstractSlider.SliderChange] = ...
    SliderPageStepAdd: ClassVar[QAbstractSlider.SliderAction] = ...
    SliderPageStepSub: ClassVar[QAbstractSlider.SliderAction] = ...
    SliderRangeChange: ClassVar[QAbstractSlider.SliderChange] = ...
    SliderSingleStepAdd: ClassVar[QAbstractSlider.SliderAction] = ...
    SliderSingleStepSub: ClassVar[QAbstractSlider.SliderAction] = ...
    SliderStepsChange: ClassVar[QAbstractSlider.SliderChange] = ...
    SliderToMaximum: ClassVar[QAbstractSlider.SliderAction] = ...
    SliderToMinimum: ClassVar[QAbstractSlider.SliderAction] = ...
    SliderValueChange: ClassVar[QAbstractSlider.SliderChange] = ...
    actionTriggered: ClassVar[PySide2.QtCore.Signal] = ...
    rangeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    sliderMoved: ClassVar[PySide2.QtCore.Signal] = ...
    sliderPressed: ClassVar[PySide2.QtCore.Signal] = ...
    sliderReleased: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    valueChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., actionTriggered: typing.Callable = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., invertedAppearance: bool = ..., invertedControls: bool = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximum: int = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimum: int = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., orientation: PySide2.QtCore.Qt.Orientation = ..., pageStep: int = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rangeChanged: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., singleStep: int = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., sliderDown: bool = ..., sliderMoved: typing.Callable = ..., sliderPosition: int = ..., sliderPressed: typing.Callable = ..., sliderReleased: typing.Callable = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., tracking: bool = ..., updatesEnabled: bool = ..., value: int = ..., valueChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def changeEvent(self, e: PySide2.QtCore.QEvent) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def hasTracking(self) -> bool: ...
    def invertedAppearance(self) -> bool: ...
    def invertedControls(self) -> bool: ...
    def isSliderDown(self) -> bool: ...
    def keyPressEvent(self, ev: PySide2.QtGui.QKeyEvent) -> None: ...
    def maximum(self) -> int: ...
    def minimum(self) -> int: ...
    def orientation(self) -> PySide2.QtCore.Qt.Orientation: ...
    def pageStep(self) -> int: ...
    def repeatAction(self) -> QAbstractSlider.SliderAction: ...
    def setInvertedAppearance(self, arg__1: bool) -> None: ...
    def setInvertedControls(self, arg__1: bool) -> None: ...
    def setMaximum(self, arg__1: int) -> None: ...
    def setMinimum(self, arg__1: int) -> None: ...
    def setOrientation(self, arg__1: PySide2.QtCore.Qt.Orientation) -> None: ...
    def setPageStep(self, arg__1: int) -> None: ...
    def setRange(self, min: int, max: int) -> None: ...
    def setRepeatAction(self, action: QAbstractSlider.SliderAction, thresholdTime: int = ..., repeatTime: int = ...) -> None: ...
    def setSingleStep(self, arg__1: int) -> None: ...
    def setSliderDown(self, arg__1: bool) -> None: ...
    def setSliderPosition(self, arg__1: int) -> None: ...
    def setTracking(self, enable: bool) -> None: ...
    def setValue(self, arg__1: int) -> None: ...
    def singleStep(self) -> int: ...
    def sliderChange(self, change: QAbstractSlider.SliderChange) -> None: ...
    def sliderPosition(self) -> int: ...
    def timerEvent(self, arg__1: PySide2.QtCore.QTimerEvent) -> None: ...
    def triggerAction(self, action: QAbstractSlider.SliderAction) -> None: ...
    def value(self) -> int: ...
    def wheelEvent(self, e: PySide2.QtGui.QWheelEvent) -> None: ...

class QAbstractSpinBox(QWidget):
    class ButtonSymbols:
        NoButtons: ClassVar[QAbstractSpinBox.ButtonSymbols] = ...
        PlusMinus: ClassVar[QAbstractSpinBox.ButtonSymbols] = ...
        UpDownArrows: ClassVar[QAbstractSpinBox.ButtonSymbols] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractSpinBox.ButtonSymbols: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSpinBox.ButtonSymbols: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractSpinBox.ButtonSymbols: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSpinBox.ButtonSymbols: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractSpinBox.ButtonSymbols: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSpinBox.ButtonSymbols: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractSpinBox.ButtonSymbols: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSpinBox.ButtonSymbols: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractSpinBox.ButtonSymbols: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSpinBox.ButtonSymbols: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractSpinBox.ButtonSymbols: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSpinBox.ButtonSymbols: ...

    class CorrectionMode:
        CorrectToNearestValue: ClassVar[QAbstractSpinBox.CorrectionMode] = ...
        CorrectToPreviousValue: ClassVar[QAbstractSpinBox.CorrectionMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractSpinBox.CorrectionMode: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSpinBox.CorrectionMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractSpinBox.CorrectionMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSpinBox.CorrectionMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractSpinBox.CorrectionMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSpinBox.CorrectionMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractSpinBox.CorrectionMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSpinBox.CorrectionMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractSpinBox.CorrectionMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSpinBox.CorrectionMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractSpinBox.CorrectionMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSpinBox.CorrectionMode: ...

    class StepEnabled:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepEnabled: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QAbstractSpinBox.StepEnabled: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepEnabled: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepEnabled: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepEnabled: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepEnabled: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepEnabled: ...

    class StepEnabledFlag:
        StepDownEnabled: ClassVar[QAbstractSpinBox.StepEnabledFlag] = ...
        StepNone: ClassVar[QAbstractSpinBox.StepEnabledFlag] = ...
        StepUpEnabled: ClassVar[QAbstractSpinBox.StepEnabledFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepEnabled: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QAbstractSpinBox.StepEnabledFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepEnabled: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepEnabled: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepEnabled: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepEnabled: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepEnabled: ...

    class StepType:
        AdaptiveDecimalStepType: ClassVar[QAbstractSpinBox.StepType] = ...
        DefaultStepType: ClassVar[QAbstractSpinBox.StepType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepType: ...
        def __and__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepType: ...
        def __rand__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepType: ...
        def __ror__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepType: ...
        def __sub__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepType: ...
        def __xor__(self, other: typing.SupportsInt) -> QAbstractSpinBox.StepType: ...
    AdaptiveDecimalStepType: ClassVar[QAbstractSpinBox.StepType] = ...
    CorrectToNearestValue: ClassVar[QAbstractSpinBox.CorrectionMode] = ...
    CorrectToPreviousValue: ClassVar[QAbstractSpinBox.CorrectionMode] = ...
    DefaultStepType: ClassVar[QAbstractSpinBox.StepType] = ...
    NoButtons: ClassVar[QAbstractSpinBox.ButtonSymbols] = ...
    PlusMinus: ClassVar[QAbstractSpinBox.ButtonSymbols] = ...
    StepDownEnabled: ClassVar[QAbstractSpinBox.StepEnabledFlag] = ...
    StepNone: ClassVar[QAbstractSpinBox.StepEnabledFlag] = ...
    StepUpEnabled: ClassVar[QAbstractSpinBox.StepEnabledFlag] = ...
    UpDownArrows: ClassVar[QAbstractSpinBox.ButtonSymbols] = ...
    editingFinished: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., accelerated: bool = ..., acceptDrops: bool = ..., acceptableInput: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., buttonSymbols: QAbstractSpinBox.ButtonSymbols = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., correctionMode: QAbstractSpinBox.CorrectionMode = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., keyboardTracking: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., showGroupSeparator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., specialValueText: str = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wrapping: bool = ..., x: int = ..., y: int = ...) -> None: ...
    def alignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def buttonSymbols(self) -> QAbstractSpinBox.ButtonSymbols: ...
    def changeEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def clear(self) -> None: ...
    def closeEvent(self, event: PySide2.QtGui.QCloseEvent) -> None: ...
    def contextMenuEvent(self, event: PySide2.QtGui.QContextMenuEvent) -> None: ...
    def correctionMode(self) -> QAbstractSpinBox.CorrectionMode: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def fixup(self, input: str) -> None: ...
    def focusInEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusOutEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def hasAcceptableInput(self) -> bool: ...
    def hasFrame(self) -> bool: ...
    def hideEvent(self, event: PySide2.QtGui.QHideEvent) -> None: ...
    def initStyleOption(self, option: QStyleOptionSpinBox) -> None: ...
    def inputMethodQuery(self, arg__1: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    def interpretText(self) -> None: ...
    def isAccelerated(self) -> bool: ...
    def isGroupSeparatorShown(self) -> bool: ...
    def isReadOnly(self) -> bool: ...
    def keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyboardTracking(self) -> bool: ...
    def lineEdit(self) -> QLineEdit: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def mouseMoveEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def paintEvent(self, event: PySide2.QtGui.QPaintEvent) -> None: ...
    def resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None: ...
    def selectAll(self) -> None: ...
    def setAccelerated(self, on: bool) -> None: ...
    def setAlignment(self, flag: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setButtonSymbols(self, bs: QAbstractSpinBox.ButtonSymbols) -> None: ...
    def setCorrectionMode(self, cm: QAbstractSpinBox.CorrectionMode) -> None: ...
    def setFrame(self, arg__1: bool) -> None: ...
    def setGroupSeparatorShown(self, shown: bool) -> None: ...
    def setKeyboardTracking(self, kt: bool) -> None: ...
    def setLineEdit(self, edit: QLineEdit) -> None: ...
    def setReadOnly(self, r: bool) -> None: ...
    def setSpecialValueText(self, txt: str) -> None: ...
    def setWrapping(self, w: bool) -> None: ...
    def showEvent(self, event: PySide2.QtGui.QShowEvent) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def specialValueText(self) -> str: ...
    def stepBy(self, steps: int) -> None: ...
    def stepDown(self) -> None: ...
    def stepEnabled(self) -> typing.Union[QAbstractSpinBox.StepEnabled,QAbstractSpinBox.StepEnabledFlag]: ...
    def stepUp(self) -> None: ...
    def text(self) -> str: ...
    def timerEvent(self, event: PySide2.QtCore.QTimerEvent) -> None: ...
    def validate(self, input: str, pos: int) -> PySide2.QtGui.QValidator.State: ...
    def wheelEvent(self, event: PySide2.QtGui.QWheelEvent) -> None: ...
    def wrapping(self) -> bool: ...

class QAccessibleWidget(PySide2.QtGui.QAccessibleObject):
    def __init__(self, o: QWidget, r: PySide2.QtGui.QAccessible.Role = ..., name: str = ...) -> None: ...
    def actionNames(self) -> typing.List[str]: ...
    def addControllingSignal(self, signal: str) -> None: ...
    def backgroundColor(self) -> PySide2.QtGui.QColor: ...
    def child(self, index: int) -> PySide2.QtGui.QAccessibleInterface: ...
    def childCount(self) -> int: ...
    def doAction(self, actionName: str) -> None: ...
    def focusChild(self) -> PySide2.QtGui.QAccessibleInterface: ...
    def foregroundColor(self) -> PySide2.QtGui.QColor: ...
    def indexOfChild(self, child: PySide2.QtGui.QAccessibleInterface) -> int: ...
    def interface_cast(self, t: PySide2.QtGui.QAccessible.InterfaceType) -> int: ...
    def isValid(self) -> bool: ...
    def keyBindingsForAction(self, actionName: str) -> typing.List[str]: ...
    def parent(self) -> PySide2.QtGui.QAccessibleInterface: ...
    def parentObject(self) -> PySide2.QtCore.QObject: ...
    def rect(self) -> PySide2.QtCore.QRect: ...
    def relations(self, match: typing.Union[PySide2.QtGui.QAccessible.Relation,PySide2.QtGui.QAccessible.RelationFlag] = ...) -> typing.List[typing.Tuple[PySide2.QtGui.QAccessibleInterface,PySide2.QtGui.QAccessible.Relation]]: ...
    def role(self) -> PySide2.QtGui.QAccessible.Role: ...
    def state(self) -> PySide2.QtGui.QAccessible.State: ...
    def text(self, t: PySide2.QtGui.QAccessible.Text) -> str: ...
    def widget(self) -> QWidget: ...
    def window(self) -> PySide2.QtGui.QWindow: ...

class QAction(PySide2.QtCore.QObject):
    class ActionEvent:
        Hover: ClassVar[QAction.ActionEvent] = ...
        Trigger: ClassVar[QAction.ActionEvent] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAction.ActionEvent: ...
        def __and__(self, other: typing.SupportsInt) -> QAction.ActionEvent: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAction.ActionEvent: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAction.ActionEvent: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAction.ActionEvent: ...
        def __rand__(self, other: typing.SupportsInt) -> QAction.ActionEvent: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAction.ActionEvent: ...
        def __ror__(self, other: typing.SupportsInt) -> QAction.ActionEvent: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAction.ActionEvent: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAction.ActionEvent: ...
        def __sub__(self, other: typing.SupportsInt) -> QAction.ActionEvent: ...
        def __xor__(self, other: typing.SupportsInt) -> QAction.ActionEvent: ...

    class MenuRole:
        AboutQtRole: ClassVar[QAction.MenuRole] = ...
        AboutRole: ClassVar[QAction.MenuRole] = ...
        ApplicationSpecificRole: ClassVar[QAction.MenuRole] = ...
        NoRole: ClassVar[QAction.MenuRole] = ...
        PreferencesRole: ClassVar[QAction.MenuRole] = ...
        QuitRole: ClassVar[QAction.MenuRole] = ...
        TextHeuristicRole: ClassVar[QAction.MenuRole] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAction.MenuRole: ...
        def __and__(self, other: typing.SupportsInt) -> QAction.MenuRole: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAction.MenuRole: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAction.MenuRole: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAction.MenuRole: ...
        def __rand__(self, other: typing.SupportsInt) -> QAction.MenuRole: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAction.MenuRole: ...
        def __ror__(self, other: typing.SupportsInt) -> QAction.MenuRole: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAction.MenuRole: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAction.MenuRole: ...
        def __sub__(self, other: typing.SupportsInt) -> QAction.MenuRole: ...
        def __xor__(self, other: typing.SupportsInt) -> QAction.MenuRole: ...

    class Priority:
        HighPriority: ClassVar[QAction.Priority] = ...
        LowPriority: ClassVar[QAction.Priority] = ...
        NormalPriority: ClassVar[QAction.Priority] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAction.Priority: ...
        def __and__(self, other: typing.SupportsInt) -> QAction.Priority: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAction.Priority: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAction.Priority: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAction.Priority: ...
        def __rand__(self, other: typing.SupportsInt) -> QAction.Priority: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAction.Priority: ...
        def __ror__(self, other: typing.SupportsInt) -> QAction.Priority: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAction.Priority: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAction.Priority: ...
        def __sub__(self, other: typing.SupportsInt) -> QAction.Priority: ...
        def __xor__(self, other: typing.SupportsInt) -> QAction.Priority: ...
    AboutQtRole: ClassVar[QAction.MenuRole] = ...
    AboutRole: ClassVar[QAction.MenuRole] = ...
    ApplicationSpecificRole: ClassVar[QAction.MenuRole] = ...
    HighPriority: ClassVar[QAction.Priority] = ...
    Hover: ClassVar[QAction.ActionEvent] = ...
    LowPriority: ClassVar[QAction.Priority] = ...
    NoRole: ClassVar[QAction.MenuRole] = ...
    NormalPriority: ClassVar[QAction.Priority] = ...
    PreferencesRole: ClassVar[QAction.MenuRole] = ...
    QuitRole: ClassVar[QAction.MenuRole] = ...
    TextHeuristicRole: ClassVar[QAction.MenuRole] = ...
    Trigger: ClassVar[QAction.ActionEvent] = ...
    changed: ClassVar[PySide2.QtCore.Signal] = ...
    hovered: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    toggled: ClassVar[PySide2.QtCore.Signal] = ...
    triggered: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, icon: PySide2.QtGui.QIcon, text: str, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., autoRepeat: bool = ..., changed: typing.Callable = ..., checkable: bool = ..., checked: bool = ..., destroyed: typing.Callable = ..., enabled: bool = ..., font: PySide2.QtGui.QFont = ..., hovered: typing.Callable = ..., iconText: str = ..., iconVisibleInMenu: bool = ..., menuRole: QAction.MenuRole = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., priority: QAction.Priority = ..., shortcut: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., shortcutContext: PySide2.QtCore.Qt.ShortcutContext = ..., shortcutVisibleInContextMenu: bool = ..., statusTip: str = ..., toggled: typing.Callable = ..., toolTip: str = ..., triggered: typing.Callable = ..., visible: bool = ..., whatsThis: str = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., autoRepeat: bool = ..., changed: typing.Callable = ..., checkable: bool = ..., checked: bool = ..., destroyed: typing.Callable = ..., enabled: bool = ..., font: PySide2.QtGui.QFont = ..., hovered: typing.Callable = ..., icon: PySide2.QtGui.QIcon = ..., iconText: str = ..., iconVisibleInMenu: bool = ..., menuRole: QAction.MenuRole = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., priority: QAction.Priority = ..., shortcut: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., shortcutContext: PySide2.QtCore.Qt.ShortcutContext = ..., shortcutVisibleInContextMenu: bool = ..., statusTip: str = ..., text: str = ..., toggled: typing.Callable = ..., toolTip: str = ..., triggered: typing.Callable = ..., visible: bool = ..., whatsThis: str = ...) -> None: ...
    @overload
    def __init__(self, text: str, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., autoRepeat: bool = ..., changed: typing.Callable = ..., checkable: bool = ..., checked: bool = ..., destroyed: typing.Callable = ..., enabled: bool = ..., font: PySide2.QtGui.QFont = ..., hovered: typing.Callable = ..., icon: PySide2.QtGui.QIcon = ..., iconText: str = ..., iconVisibleInMenu: bool = ..., menuRole: QAction.MenuRole = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., priority: QAction.Priority = ..., shortcut: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., shortcutContext: PySide2.QtCore.Qt.ShortcutContext = ..., shortcutVisibleInContextMenu: bool = ..., statusTip: str = ..., toggled: typing.Callable = ..., toolTip: str = ..., triggered: typing.Callable = ..., visible: bool = ..., whatsThis: str = ...) -> None: ...
    def actionGroup(self) -> QActionGroup: ...
    def activate(self, event: QAction.ActionEvent) -> None: ...
    def associatedGraphicsWidgets(self) -> typing.List[QGraphicsWidget]: ...
    def associatedWidgets(self) -> typing.List[QWidget]: ...
    def autoRepeat(self) -> bool: ...
    def data(self) -> typing.Any: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def font(self) -> PySide2.QtGui.QFont: ...
    def hover(self) -> None: ...
    def icon(self) -> PySide2.QtGui.QIcon: ...
    def iconText(self) -> str: ...
    def isCheckable(self) -> bool: ...
    def isChecked(self) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isIconVisibleInMenu(self) -> bool: ...
    def isSeparator(self) -> bool: ...
    def isShortcutVisibleInContextMenu(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def menu(self) -> QMenu: ...
    def menuRole(self) -> QAction.MenuRole: ...
    def parentWidget(self) -> QWidget: ...
    def priority(self) -> QAction.Priority: ...
    def setActionGroup(self, group: QActionGroup) -> None: ...
    def setAutoRepeat(self, arg__1: bool) -> None: ...
    def setCheckable(self, arg__1: bool) -> None: ...
    def setChecked(self, arg__1: bool) -> None: ...
    def setData(self, var: typing.Any) -> None: ...
    def setDisabled(self, b: bool) -> None: ...
    def setEnabled(self, arg__1: bool) -> None: ...
    def setFont(self, font: PySide2.QtGui.QFont) -> None: ...
    def setIcon(self, icon: PySide2.QtGui.QIcon) -> None: ...
    def setIconText(self, text: str) -> None: ...
    def setIconVisibleInMenu(self, visible: bool) -> None: ...
    def setMenu(self, menu: QMenu) -> None: ...
    def setMenuRole(self, menuRole: QAction.MenuRole) -> None: ...
    def setPriority(self, priority: QAction.Priority) -> None: ...
    def setSeparator(self, b: bool) -> None: ...
    def setShortcut(self, shortcut: typing.Union[PySide2.QtGui.QKeySequence,str]) -> None: ...
    def setShortcutContext(self, context: PySide2.QtCore.Qt.ShortcutContext) -> None: ...
    def setShortcutVisibleInContextMenu(self, show: bool) -> None: ...
    @overload
    def setShortcuts(self, arg__1: PySide2.QtGui.QKeySequence.StandardKey) -> None: ...
    @overload
    def setShortcuts(self, shortcuts: typing.Sequence[PySide2.QtGui.QKeySequence]) -> None: ...
    def setStatusTip(self, statusTip: str) -> None: ...
    def setText(self, text: str) -> None: ...
    def setToolTip(self, tip: str) -> None: ...
    def setVisible(self, arg__1: bool) -> None: ...
    def setWhatsThis(self, what: str) -> None: ...
    def shortcut(self) -> PySide2.QtGui.QKeySequence: ...
    def shortcutContext(self) -> PySide2.QtCore.Qt.ShortcutContext: ...
    def shortcuts(self) -> typing.List[PySide2.QtGui.QKeySequence]: ...
    def showStatusText(self, widget: typing.Union[QWidget,None] = ...) -> bool: ...
    def statusTip(self) -> str: ...
    def text(self) -> str: ...
    def toggle(self) -> None: ...
    def toolTip(self) -> str: ...
    def trigger(self) -> None: ...
    def whatsThis(self) -> str: ...

class QActionGroup(PySide2.QtCore.QObject):
    class ExclusionPolicy:
        Exclusive: ClassVar[QActionGroup.ExclusionPolicy] = ...
        ExclusiveOptional: ClassVar[QActionGroup.ExclusionPolicy] = ...
        None_: ClassVar[QActionGroup.ExclusionPolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QActionGroup.ExclusionPolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QActionGroup.ExclusionPolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QActionGroup.ExclusionPolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QActionGroup.ExclusionPolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QActionGroup.ExclusionPolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QActionGroup.ExclusionPolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QActionGroup.ExclusionPolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QActionGroup.ExclusionPolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QActionGroup.ExclusionPolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QActionGroup.ExclusionPolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QActionGroup.ExclusionPolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QActionGroup.ExclusionPolicy: ...
    hovered: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    triggered: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject], destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def actions(self) -> typing.List[QAction]: ...
    @overload
    def addAction(self, a: QAction) -> QAction: ...
    @overload
    def addAction(self, icon: PySide2.QtGui.QIcon, text: str) -> QAction: ...
    @overload
    def addAction(self, text: str) -> QAction: ...
    def checkedAction(self) -> QAction: ...
    def exclusionPolicy(self) -> QActionGroup.ExclusionPolicy: ...
    def isEnabled(self) -> bool: ...
    def isExclusive(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def removeAction(self, a: QAction) -> None: ...
    def setDisabled(self, b: bool) -> None: ...
    def setEnabled(self, arg__1: bool) -> None: ...
    def setExclusionPolicy(self, policy: QActionGroup.ExclusionPolicy) -> None: ...
    def setExclusive(self, arg__1: bool) -> None: ...
    def setVisible(self, arg__1: bool) -> None: ...

class QApplication(PySide2.QtGui.QGuiApplication):
    class ColorSpec:
        CustomColor: ClassVar[QApplication.ColorSpec] = ...
        ManyColor: ClassVar[QApplication.ColorSpec] = ...
        NormalColor: ClassVar[QApplication.ColorSpec] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QApplication.ColorSpec: ...
        def __and__(self, other: typing.SupportsInt) -> QApplication.ColorSpec: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QApplication.ColorSpec: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QApplication.ColorSpec: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QApplication.ColorSpec: ...
        def __rand__(self, other: typing.SupportsInt) -> QApplication.ColorSpec: ...
        def __rmul__(self, other: typing.SupportsInt) -> QApplication.ColorSpec: ...
        def __ror__(self, other: typing.SupportsInt) -> QApplication.ColorSpec: ...
        def __rsub__(self, other: typing.SupportsInt) -> QApplication.ColorSpec: ...
        def __rxor__(self, other: typing.SupportsInt) -> QApplication.ColorSpec: ...
        def __sub__(self, other: typing.SupportsInt) -> QApplication.ColorSpec: ...
        def __xor__(self, other: typing.SupportsInt) -> QApplication.ColorSpec: ...
    CustomColor: ClassVar[QApplication.ColorSpec] = ...
    ManyColor: ClassVar[QApplication.ColorSpec] = ...
    NormalColor: ClassVar[QApplication.ColorSpec] = ...
    focusChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, arg__1: typing.Sequence[str], destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @classmethod
    def aboutQt(cls) -> None: ...
    @classmethod
    def activeModalWidget(cls) -> QWidget: ...
    @classmethod
    def activePopupWidget(cls) -> QWidget: ...
    @classmethod
    def activeWindow(cls) -> QWidget: ...
    @classmethod
    def alert(cls, widget: QWidget, duration: int = ...) -> None: ...
    @classmethod
    def allWidgets(cls) -> typing.List[QWidget]: ...
    def autoSipEnabled(self) -> bool: ...
    @classmethod
    def beep(cls) -> None: ...
    @classmethod
    def closeAllWindows(cls) -> None: ...
    @classmethod
    def colorSpec(cls) -> int: ...
    @classmethod
    def cursorFlashTime(cls) -> int: ...
    @classmethod
    def desktop(cls) -> QDesktopWidget: ...
    @classmethod
    def doubleClickInterval(cls) -> int: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    @classmethod
    def exec_(cls) -> int: ...
    @classmethod
    def focusWidget(cls) -> QWidget: ...
    @classmethod
    @overload
    def font(cls) -> PySide2.QtGui.QFont: ...
    @classmethod
    @overload
    def font(cls, arg__1: QWidget) -> PySide2.QtGui.QFont: ...
    @classmethod
    @overload
    def font(cls, className: bytes) -> PySide2.QtGui.QFont: ...
    @classmethod
    def fontMetrics(cls) -> PySide2.QtGui.QFontMetrics: ...
    @classmethod
    def globalStrut(cls) -> PySide2.QtCore.QSize: ...
    @classmethod
    def isEffectEnabled(cls, arg__1: PySide2.QtCore.Qt.UIEffect) -> bool: ...
    @classmethod
    def keyboardInputInterval(cls) -> int: ...
    def notify(self, arg__1: PySide2.QtCore.QObject, arg__2: PySide2.QtCore.QEvent) -> bool: ...
    @classmethod
    @overload
    def palette(cls) -> PySide2.QtGui.QPalette: ...
    @classmethod
    @overload
    def palette(cls, arg__1: QWidget) -> PySide2.QtGui.QPalette: ...
    @classmethod
    @overload
    def palette(cls, className: bytes) -> PySide2.QtGui.QPalette: ...
    @classmethod
    def setActiveWindow(cls, act: QWidget) -> None: ...
    def setAutoSipEnabled(self, enabled: bool) -> None: ...
    @classmethod
    def setColorSpec(cls, arg__1: int) -> None: ...
    @classmethod
    def setCursorFlashTime(cls, arg__1: int) -> None: ...
    @classmethod
    def setDoubleClickInterval(cls, arg__1: int) -> None: ...
    @classmethod
    def setEffectEnabled(cls, arg__1: PySide2.QtCore.Qt.UIEffect, enable: bool = ...) -> None: ...
    @classmethod
    def setFont(cls, arg__1: PySide2.QtGui.QFont, className: typing.Union[bytes,None] = ...) -> None: ...
    @classmethod
    def setGlobalStrut(cls, arg__1: PySide2.QtCore.QSize) -> None: ...
    @classmethod
    def setKeyboardInputInterval(cls, arg__1: int) -> None: ...
    @classmethod
    @overload
    def setPalette(cls, arg__1: PySide2.QtGui.QPalette, className: typing.Union[bytes,None] = ...) -> None: ...
    @classmethod
    @overload
    def setPalette(cls, pal: PySide2.QtGui.QPalette) -> None: ...
    @classmethod
    def setStartDragDistance(cls, l: int) -> None: ...
    @classmethod
    def setStartDragTime(cls, ms: int) -> None: ...
    @classmethod
    @overload
    def setStyle(cls, arg__1: QStyle) -> None: ...
    @classmethod
    @overload
    def setStyle(cls, arg__1: str) -> QStyle: ...
    def setStyleSheet(self, sheet: str) -> None: ...
    @classmethod
    def setWheelScrollLines(cls, arg__1: int) -> None: ...
    @classmethod
    def setWindowIcon(cls, icon: PySide2.QtGui.QIcon) -> None: ...
    @classmethod
    def startDragDistance(cls) -> int: ...
    @classmethod
    def startDragTime(cls) -> int: ...
    @classmethod
    def style(cls) -> QStyle: ...
    def styleSheet(self) -> str: ...
    @classmethod
    @overload
    def topLevelAt(cls, p: PySide2.QtCore.QPoint) -> QWidget: ...
    @classmethod
    @overload
    def topLevelAt(cls, x: int, y: int) -> QWidget: ...
    @classmethod
    def topLevelWidgets(cls) -> typing.List[QWidget]: ...
    @classmethod
    def wheelScrollLines(cls) -> int: ...
    @classmethod
    @overload
    def widgetAt(cls, p: PySide2.QtCore.QPoint) -> QWidget: ...
    @classmethod
    @overload
    def widgetAt(cls, x: int, y: int) -> QWidget: ...
    @classmethod
    def windowIcon(cls) -> PySide2.QtGui.QIcon: ...

class QBoxLayout(QLayout):
    class Direction:
        BottomToTop: ClassVar[QBoxLayout.Direction] = ...
        Down: ClassVar[QBoxLayout.Direction] = ...
        LeftToRight: ClassVar[QBoxLayout.Direction] = ...
        RightToLeft: ClassVar[QBoxLayout.Direction] = ...
        TopToBottom: ClassVar[QBoxLayout.Direction] = ...
        Up: ClassVar[QBoxLayout.Direction] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QBoxLayout.Direction: ...
        def __and__(self, other: typing.SupportsInt) -> QBoxLayout.Direction: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QBoxLayout.Direction: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QBoxLayout.Direction: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QBoxLayout.Direction: ...
        def __rand__(self, other: typing.SupportsInt) -> QBoxLayout.Direction: ...
        def __rmul__(self, other: typing.SupportsInt) -> QBoxLayout.Direction: ...
        def __ror__(self, other: typing.SupportsInt) -> QBoxLayout.Direction: ...
        def __rsub__(self, other: typing.SupportsInt) -> QBoxLayout.Direction: ...
        def __rxor__(self, other: typing.SupportsInt) -> QBoxLayout.Direction: ...
        def __sub__(self, other: typing.SupportsInt) -> QBoxLayout.Direction: ...
        def __xor__(self, other: typing.SupportsInt) -> QBoxLayout.Direction: ...
    BottomToTop: ClassVar[QBoxLayout.Direction] = ...
    Down: ClassVar[QBoxLayout.Direction] = ...
    LeftToRight: ClassVar[QBoxLayout.Direction] = ...
    RightToLeft: ClassVar[QBoxLayout.Direction] = ...
    TopToBottom: ClassVar[QBoxLayout.Direction] = ...
    Up: ClassVar[QBoxLayout.Direction] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, arg__1: QBoxLayout.Direction, parent: typing.Union[QWidget,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def addItem(self, arg__1: QLayoutItem) -> None: ...
    def addLayout(self, layout: QLayout, stretch: int = ...) -> None: ...
    def addSpacerItem(self, spacerItem: QSpacerItem) -> None: ...
    def addSpacing(self, size: int) -> None: ...
    def addStretch(self, stretch: int = ...) -> None: ...
    def addStrut(self, arg__1: int) -> None: ...
    @overload
    def addWidget(self, arg__1: QWidget, stretch: int = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ...) -> None: ...
    @overload
    def addWidget(self, w: QWidget) -> None: ...
    def count(self) -> int: ...
    def direction(self) -> QBoxLayout.Direction: ...
    def expandingDirections(self) -> typing.Union[PySide2.QtCore.Qt.Orientations,PySide2.QtCore.Qt.Orientation]: ...
    def hasHeightForWidth(self) -> bool: ...
    def heightForWidth(self, arg__1: int) -> int: ...
    def insertItem(self, index: int, arg__2: QLayoutItem) -> None: ...
    def insertLayout(self, index: int, layout: QLayout, stretch: int = ...) -> None: ...
    def insertSpacerItem(self, index: int, spacerItem: QSpacerItem) -> None: ...
    def insertSpacing(self, index: int, size: int) -> None: ...
    def insertStretch(self, index: int, stretch: int = ...) -> None: ...
    def insertWidget(self, index: int, widget: QWidget, stretch: int = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ...) -> None: ...
    def invalidate(self) -> None: ...
    def itemAt(self, arg__1: int) -> QLayoutItem: ...
    def maximumSize(self) -> PySide2.QtCore.QSize: ...
    def minimumHeightForWidth(self, arg__1: int) -> int: ...
    def minimumSize(self) -> PySide2.QtCore.QSize: ...
    def setDirection(self, arg__1: QBoxLayout.Direction) -> None: ...
    def setGeometry(self, arg__1: PySide2.QtCore.QRect) -> None: ...
    def setSpacing(self, spacing: int) -> None: ...
    def setStretch(self, index: int, stretch: int) -> None: ...
    @overload
    def setStretchFactor(self, l: QLayout, stretch: int) -> bool: ...
    @overload
    def setStretchFactor(self, w: QWidget, stretch: int) -> bool: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def spacing(self) -> int: ...
    def stretch(self, index: int) -> int: ...
    def takeAt(self, arg__1: int) -> QLayoutItem: ...

class QButtonGroup(PySide2.QtCore.QObject):
    buttonClicked: ClassVar[PySide2.QtCore.Signal] = ...
    buttonPressed: ClassVar[PySide2.QtCore.Signal] = ...
    buttonReleased: ClassVar[PySide2.QtCore.Signal] = ...
    buttonToggled: ClassVar[PySide2.QtCore.Signal] = ...
    idClicked: ClassVar[PySide2.QtCore.Signal] = ...
    idPressed: ClassVar[PySide2.QtCore.Signal] = ...
    idReleased: ClassVar[PySide2.QtCore.Signal] = ...
    idToggled: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., buttonClicked: typing.Callable = ..., buttonPressed: typing.Callable = ..., buttonReleased: typing.Callable = ..., buttonToggled: typing.Callable = ..., destroyed: typing.Callable = ..., exclusive: bool = ..., idClicked: typing.Callable = ..., idPressed: typing.Callable = ..., idReleased: typing.Callable = ..., idToggled: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def addButton(self, arg__1: QAbstractButton, id: int = ...) -> None: ...
    def button(self, id: int) -> QAbstractButton: ...
    def buttons(self) -> typing.List[QAbstractButton]: ...
    def checkedButton(self) -> QAbstractButton: ...
    def checkedId(self) -> int: ...
    def exclusive(self) -> bool: ...
    def id(self, button: QAbstractButton) -> int: ...
    def removeButton(self, arg__1: QAbstractButton) -> None: ...
    def setExclusive(self, arg__1: bool) -> None: ...
    def setId(self, button: QAbstractButton, id: int) -> None: ...

class QCalendarWidget(QWidget):
    class HorizontalHeaderFormat:
        LongDayNames: ClassVar[QCalendarWidget.HorizontalHeaderFormat] = ...
        NoHorizontalHeader: ClassVar[QCalendarWidget.HorizontalHeaderFormat] = ...
        ShortDayNames: ClassVar[QCalendarWidget.HorizontalHeaderFormat] = ...
        SingleLetterDayNames: ClassVar[QCalendarWidget.HorizontalHeaderFormat] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QCalendarWidget.HorizontalHeaderFormat: ...
        def __and__(self, other: typing.SupportsInt) -> QCalendarWidget.HorizontalHeaderFormat: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QCalendarWidget.HorizontalHeaderFormat: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QCalendarWidget.HorizontalHeaderFormat: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QCalendarWidget.HorizontalHeaderFormat: ...
        def __rand__(self, other: typing.SupportsInt) -> QCalendarWidget.HorizontalHeaderFormat: ...
        def __rmul__(self, other: typing.SupportsInt) -> QCalendarWidget.HorizontalHeaderFormat: ...
        def __ror__(self, other: typing.SupportsInt) -> QCalendarWidget.HorizontalHeaderFormat: ...
        def __rsub__(self, other: typing.SupportsInt) -> QCalendarWidget.HorizontalHeaderFormat: ...
        def __rxor__(self, other: typing.SupportsInt) -> QCalendarWidget.HorizontalHeaderFormat: ...
        def __sub__(self, other: typing.SupportsInt) -> QCalendarWidget.HorizontalHeaderFormat: ...
        def __xor__(self, other: typing.SupportsInt) -> QCalendarWidget.HorizontalHeaderFormat: ...

    class SelectionMode:
        NoSelection: ClassVar[QCalendarWidget.SelectionMode] = ...
        SingleSelection: ClassVar[QCalendarWidget.SelectionMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QCalendarWidget.SelectionMode: ...
        def __and__(self, other: typing.SupportsInt) -> QCalendarWidget.SelectionMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QCalendarWidget.SelectionMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QCalendarWidget.SelectionMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QCalendarWidget.SelectionMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QCalendarWidget.SelectionMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QCalendarWidget.SelectionMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QCalendarWidget.SelectionMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QCalendarWidget.SelectionMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QCalendarWidget.SelectionMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QCalendarWidget.SelectionMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QCalendarWidget.SelectionMode: ...

    class VerticalHeaderFormat:
        ISOWeekNumbers: ClassVar[QCalendarWidget.VerticalHeaderFormat] = ...
        NoVerticalHeader: ClassVar[QCalendarWidget.VerticalHeaderFormat] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QCalendarWidget.VerticalHeaderFormat: ...
        def __and__(self, other: typing.SupportsInt) -> QCalendarWidget.VerticalHeaderFormat: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QCalendarWidget.VerticalHeaderFormat: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QCalendarWidget.VerticalHeaderFormat: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QCalendarWidget.VerticalHeaderFormat: ...
        def __rand__(self, other: typing.SupportsInt) -> QCalendarWidget.VerticalHeaderFormat: ...
        def __rmul__(self, other: typing.SupportsInt) -> QCalendarWidget.VerticalHeaderFormat: ...
        def __ror__(self, other: typing.SupportsInt) -> QCalendarWidget.VerticalHeaderFormat: ...
        def __rsub__(self, other: typing.SupportsInt) -> QCalendarWidget.VerticalHeaderFormat: ...
        def __rxor__(self, other: typing.SupportsInt) -> QCalendarWidget.VerticalHeaderFormat: ...
        def __sub__(self, other: typing.SupportsInt) -> QCalendarWidget.VerticalHeaderFormat: ...
        def __xor__(self, other: typing.SupportsInt) -> QCalendarWidget.VerticalHeaderFormat: ...
    ISOWeekNumbers: ClassVar[QCalendarWidget.VerticalHeaderFormat] = ...
    LongDayNames: ClassVar[QCalendarWidget.HorizontalHeaderFormat] = ...
    NoHorizontalHeader: ClassVar[QCalendarWidget.HorizontalHeaderFormat] = ...
    NoSelection: ClassVar[QCalendarWidget.SelectionMode] = ...
    NoVerticalHeader: ClassVar[QCalendarWidget.VerticalHeaderFormat] = ...
    ShortDayNames: ClassVar[QCalendarWidget.HorizontalHeaderFormat] = ...
    SingleLetterDayNames: ClassVar[QCalendarWidget.HorizontalHeaderFormat] = ...
    SingleSelection: ClassVar[QCalendarWidget.SelectionMode] = ...
    activated: ClassVar[PySide2.QtCore.Signal] = ...
    clicked: ClassVar[PySide2.QtCore.Signal] = ...
    currentPageChanged: ClassVar[PySide2.QtCore.Signal] = ...
    selectionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., activated: typing.Callable = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., currentPageChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., dateEditAcceptDelay: int = ..., dateEditEnabled: bool = ..., destroyed: typing.Callable = ..., enabled: bool = ..., firstDayOfWeek: PySide2.QtCore.Qt.DayOfWeek = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., gridVisible: bool = ..., height: int = ..., horizontalHeaderFormat: QCalendarWidget.HorizontalHeaderFormat = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumDate: PySide2.QtCore.QDate = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumDate: PySide2.QtCore.QDate = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., navigationBarVisible: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., selectedDate: PySide2.QtCore.QDate = ..., selectionChanged: typing.Callable = ..., selectionMode: QCalendarWidget.SelectionMode = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., verticalHeaderFormat: QCalendarWidget.VerticalHeaderFormat = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def calendar(self) -> PySide2.QtCore.QCalendar: ...
    def dateEditAcceptDelay(self) -> int: ...
    @overload
    def dateTextFormat(self) -> typing.Dict[PySide2.QtCore.QDate,PySide2.QtGui.QTextCharFormat]: ...
    @overload
    def dateTextFormat(self, date: PySide2.QtCore.QDate) -> PySide2.QtGui.QTextCharFormat: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def eventFilter(self, watched: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool: ...
    def firstDayOfWeek(self) -> PySide2.QtCore.Qt.DayOfWeek: ...
    def headerTextFormat(self) -> PySide2.QtGui.QTextCharFormat: ...
    def horizontalHeaderFormat(self) -> QCalendarWidget.HorizontalHeaderFormat: ...
    def isDateEditEnabled(self) -> bool: ...
    def isGridVisible(self) -> bool: ...
    def isNavigationBarVisible(self) -> bool: ...
    def keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def maximumDate(self) -> PySide2.QtCore.QDate: ...
    def minimumDate(self) -> PySide2.QtCore.QDate: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def monthShown(self) -> int: ...
    def mousePressEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def paintCell(self, painter: PySide2.QtGui.QPainter, rect: PySide2.QtCore.QRect, date: PySide2.QtCore.QDate) -> None: ...
    def resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None: ...
    def selectedDate(self) -> PySide2.QtCore.QDate: ...
    def selectionMode(self) -> QCalendarWidget.SelectionMode: ...
    def setCalendar(self, calendar: PySide2.QtCore.QCalendar) -> None: ...
    def setCurrentPage(self, year: int, month: int) -> None: ...
    def setDateEditAcceptDelay(self, delay: int) -> None: ...
    def setDateEditEnabled(self, enable: bool) -> None: ...
    def setDateRange(self, min: PySide2.QtCore.QDate, max: PySide2.QtCore.QDate) -> None: ...
    def setDateTextFormat(self, date: PySide2.QtCore.QDate, format: PySide2.QtGui.QTextCharFormat) -> None: ...
    def setFirstDayOfWeek(self, dayOfWeek: PySide2.QtCore.Qt.DayOfWeek) -> None: ...
    def setGridVisible(self, show: bool) -> None: ...
    def setHeaderTextFormat(self, format: PySide2.QtGui.QTextCharFormat) -> None: ...
    def setHorizontalHeaderFormat(self, format: QCalendarWidget.HorizontalHeaderFormat) -> None: ...
    def setMaximumDate(self, date: PySide2.QtCore.QDate) -> None: ...
    def setMinimumDate(self, date: PySide2.QtCore.QDate) -> None: ...
    def setNavigationBarVisible(self, visible: bool) -> None: ...
    def setSelectedDate(self, date: PySide2.QtCore.QDate) -> None: ...
    def setSelectionMode(self, mode: QCalendarWidget.SelectionMode) -> None: ...
    def setVerticalHeaderFormat(self, format: QCalendarWidget.VerticalHeaderFormat) -> None: ...
    def setWeekdayTextFormat(self, dayOfWeek: PySide2.QtCore.Qt.DayOfWeek, format: PySide2.QtGui.QTextCharFormat) -> None: ...
    def showNextMonth(self) -> None: ...
    def showNextYear(self) -> None: ...
    def showPreviousMonth(self) -> None: ...
    def showPreviousYear(self) -> None: ...
    def showSelectedDate(self) -> None: ...
    def showToday(self) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def updateCell(self, date: PySide2.QtCore.QDate) -> None: ...
    def updateCells(self) -> None: ...
    def verticalHeaderFormat(self) -> QCalendarWidget.VerticalHeaderFormat: ...
    def weekdayTextFormat(self, dayOfWeek: PySide2.QtCore.Qt.DayOfWeek) -> PySide2.QtGui.QTextCharFormat: ...
    def yearShown(self) -> int: ...

class QCheckBox(QAbstractButton):
    stateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoExclusive: bool = ..., autoFillBackground: bool = ..., autoRepeat: bool = ..., autoRepeatDelay: int = ..., autoRepeatInterval: int = ..., baseSize: PySide2.QtCore.QSize = ..., checkable: bool = ..., checked: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., down: bool = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., icon: PySide2.QtGui.QIcon = ..., iconSize: PySide2.QtCore.QSize = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., released: typing.Callable = ..., shortcut: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., stateChanged: typing.Callable = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., toggled: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., tristate: bool = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, text: str, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoExclusive: bool = ..., autoFillBackground: bool = ..., autoRepeat: bool = ..., autoRepeatDelay: int = ..., autoRepeatInterval: int = ..., baseSize: PySide2.QtCore.QSize = ..., checkable: bool = ..., checked: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., down: bool = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., icon: PySide2.QtGui.QIcon = ..., iconSize: PySide2.QtCore.QSize = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., released: typing.Callable = ..., shortcut: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., stateChanged: typing.Callable = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toggled: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., tristate: bool = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def checkState(self) -> PySide2.QtCore.Qt.CheckState: ...
    def checkStateSet(self) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def hitButton(self, pos: PySide2.QtCore.QPoint) -> bool: ...
    def initStyleOption(self, option: QStyleOptionButton) -> None: ...
    def isTristate(self) -> bool: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def mouseMoveEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def nextCheckState(self) -> None: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def setCheckState(self, state: PySide2.QtCore.Qt.CheckState) -> None: ...
    def setTristate(self, y: bool = ...) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...

class QColorDialog(QDialog):
    class ColorDialogOption:
        DontUseNativeDialog: ClassVar[QColorDialog.ColorDialogOption] = ...
        NoButtons: ClassVar[QColorDialog.ColorDialogOption] = ...
        ShowAlphaChannel: ClassVar[QColorDialog.ColorDialogOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QColorDialog.ColorDialogOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QColorDialog.ColorDialogOption: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QColorDialog.ColorDialogOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QColorDialog.ColorDialogOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QColorDialog.ColorDialogOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QColorDialog.ColorDialogOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QColorDialog.ColorDialogOptions: ...

    class ColorDialogOptions:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QColorDialog.ColorDialogOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QColorDialog.ColorDialogOptions: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QColorDialog.ColorDialogOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QColorDialog.ColorDialogOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QColorDialog.ColorDialogOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QColorDialog.ColorDialogOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QColorDialog.ColorDialogOptions: ...
    DontUseNativeDialog: ClassVar[QColorDialog.ColorDialogOption] = ...
    NoButtons: ClassVar[QColorDialog.ColorDialogOption] = ...
    ShowAlphaChannel: ClassVar[QColorDialog.ColorDialogOption] = ...
    colorSelected: ClassVar[PySide2.QtCore.Signal] = ...
    currentColorChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, initial: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor], parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., colorSelected: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., currentColor: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor] = ..., currentColorChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., finished: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., options: typing.Union[QColorDialog.ColorDialogOptions,QColorDialog.ColorDialogOption] = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeGripEnabled: bool = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., colorSelected: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., currentColor: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor] = ..., currentColorChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., finished: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., options: typing.Union[QColorDialog.ColorDialogOptions,QColorDialog.ColorDialogOption] = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeGripEnabled: bool = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def changeEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def currentColor(self) -> PySide2.QtGui.QColor: ...
    @classmethod
    def customColor(cls, index: int) -> PySide2.QtGui.QColor: ...
    @classmethod
    def customCount(cls) -> int: ...
    def done(self, result: int) -> None: ...
    @classmethod
    def getColor(cls, initial: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor] = ..., parent: typing.Union[QWidget,None] = ..., title: str = ..., options: typing.Union[QColorDialog.ColorDialogOptions,QColorDialog.ColorDialogOption] = ...) -> PySide2.QtGui.QColor: ...
    @overload
    def open(self) -> None: ...
    @overload
    def open(self, receiver: PySide2.QtCore.QObject, member: bytes) -> None: ...
    def options(self) -> typing.Union[QColorDialog.ColorDialogOptions,QColorDialog.ColorDialogOption]: ...
    def selectedColor(self) -> PySide2.QtGui.QColor: ...
    def setCurrentColor(self, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @classmethod
    def setCustomColor(cls, index: int, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setOption(self, option: QColorDialog.ColorDialogOption, on: bool = ...) -> None: ...
    def setOptions(self, options: typing.Union[QColorDialog.ColorDialogOptions,QColorDialog.ColorDialogOption]) -> None: ...
    @classmethod
    def setStandardColor(cls, index: int, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    @classmethod
    def standardColor(cls, index: int) -> PySide2.QtGui.QColor: ...
    def testOption(self, option: QColorDialog.ColorDialogOption) -> bool: ...

class QColormap(shiboken2.Object):
    class Mode:
        Direct: ClassVar[QColormap.Mode] = ...
        Gray: ClassVar[QColormap.Mode] = ...
        Indexed: ClassVar[QColormap.Mode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QColormap.Mode: ...
        def __and__(self, other: typing.SupportsInt) -> QColormap.Mode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QColormap.Mode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QColormap.Mode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QColormap.Mode: ...
        def __rand__(self, other: typing.SupportsInt) -> QColormap.Mode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QColormap.Mode: ...
        def __ror__(self, other: typing.SupportsInt) -> QColormap.Mode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QColormap.Mode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QColormap.Mode: ...
        def __sub__(self, other: typing.SupportsInt) -> QColormap.Mode: ...
        def __xor__(self, other: typing.SupportsInt) -> QColormap.Mode: ...
    Direct: ClassVar[QColormap.Mode] = ...
    Gray: ClassVar[QColormap.Mode] = ...
    Indexed: ClassVar[QColormap.Mode] = ...
    def __init__(self, colormap: QColormap) -> None: ...
    @classmethod
    def cleanup(cls) -> None: ...
    def colorAt(self, pixel: int) -> PySide2.QtGui.QColor: ...
    def colormap(self) -> typing.List[PySide2.QtGui.QColor]: ...
    def depth(self) -> int: ...
    @classmethod
    def initialize(cls) -> None: ...
    @classmethod
    def instance(cls, screen: int = ...) -> QColormap: ...
    def mode(self) -> QColormap.Mode: ...
    def pixel(self, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> int: ...
    def size(self) -> int: ...
    def __copy__(self) -> None: ...

class QColumnView(QAbstractItemView):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    updatePreviewWidget: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., activated: typing.Callable = ..., alternatingRowColors: bool = ..., autoFillBackground: bool = ..., autoScroll: bool = ..., autoScrollMargin: int = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., defaultDropAction: PySide2.QtCore.Qt.DropAction = ..., destroyed: typing.Callable = ..., doubleClicked: typing.Callable = ..., dragDropMode: QColumnView.DragDropMode = ..., dragDropOverwriteMode: bool = ..., dragEnabled: bool = ..., editTriggers: QColumnView.EditTriggers = ..., enabled: bool = ..., entered: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QColumnView.Shadow = ..., frameShape: QColumnView.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., horizontalScrollMode: QColumnView.ScrollMode = ..., iconSize: PySide2.QtCore.QSize = ..., iconSizeChanged: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., resizeGripsVisible: bool = ..., selectionBehavior: QColumnView.SelectionBehavior = ..., selectionMode: QColumnView.SelectionMode = ..., showDropIndicator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QColumnView.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabKeyNavigation: bool = ..., tabletTracking: bool = ..., textElideMode: PySide2.QtCore.Qt.TextElideMode = ..., toolTip: str = ..., toolTipDuration: int = ..., updatePreviewWidget: typing.Callable = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., verticalScrollMode: QColumnView.ScrollMode = ..., viewportEntered: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def columnWidths(self) -> typing.List[int]: ...
    def createColumn(self, rootIndex: PySide2.QtCore.QModelIndex) -> QAbstractItemView: ...
    def currentChanged(self, current: PySide2.QtCore.QModelIndex, previous: PySide2.QtCore.QModelIndex) -> None: ...
    def horizontalOffset(self) -> int: ...
    def indexAt(self, point: PySide2.QtCore.QPoint) -> PySide2.QtCore.QModelIndex: ...
    def initializeColumn(self, column: QAbstractItemView) -> None: ...
    def isIndexHidden(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def moveCursor(self, cursorAction: QAbstractItemView.CursorAction, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> PySide2.QtCore.QModelIndex: ...
    def previewWidget(self) -> QWidget: ...
    def resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None: ...
    def resizeGripsVisible(self) -> bool: ...
    def rowsInserted(self, parent: PySide2.QtCore.QModelIndex, start: int, end: int) -> None: ...
    def scrollContentsBy(self, dx: int, dy: int) -> None: ...
    def scrollTo(self, index: PySide2.QtCore.QModelIndex, hint: QAbstractItemView.ScrollHint = ...) -> None: ...
    def selectAll(self) -> None: ...
    def setColumnWidths(self, list: typing.Sequence[int]) -> None: ...
    def setModel(self, model: typing.Optional[PySide2.QtCore.QAbstractItemModel]) -> None: ...
    def setPreviewWidget(self, widget: QWidget) -> None: ...
    def setResizeGripsVisible(self, visible: bool) -> None: ...
    def setRootIndex(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    def setSelection(self, rect: PySide2.QtCore.QRect, command: typing.Union[PySide2.QtCore.QItemSelectionModel.SelectionFlags,PySide2.QtCore.QItemSelectionModel.SelectionFlag]) -> None: ...
    def setSelectionModel(self, selectionModel: PySide2.QtCore.QItemSelectionModel) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def verticalOffset(self) -> int: ...
    def visualRect(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QRect: ...
    def visualRegionForSelection(self, selection: PySide2.QtCore.QItemSelection) -> PySide2.QtGui.QRegion: ...

class QComboBox(QWidget):
    class InsertPolicy:
        InsertAfterCurrent: ClassVar[QComboBox.InsertPolicy] = ...
        InsertAlphabetically: ClassVar[QComboBox.InsertPolicy] = ...
        InsertAtBottom: ClassVar[QComboBox.InsertPolicy] = ...
        InsertAtCurrent: ClassVar[QComboBox.InsertPolicy] = ...
        InsertAtTop: ClassVar[QComboBox.InsertPolicy] = ...
        InsertBeforeCurrent: ClassVar[QComboBox.InsertPolicy] = ...
        NoInsert: ClassVar[QComboBox.InsertPolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QComboBox.InsertPolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QComboBox.InsertPolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QComboBox.InsertPolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QComboBox.InsertPolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QComboBox.InsertPolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QComboBox.InsertPolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QComboBox.InsertPolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QComboBox.InsertPolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QComboBox.InsertPolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QComboBox.InsertPolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QComboBox.InsertPolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QComboBox.InsertPolicy: ...

    class SizeAdjustPolicy:
        AdjustToContents: ClassVar[QComboBox.SizeAdjustPolicy] = ...
        AdjustToContentsOnFirstShow: ClassVar[QComboBox.SizeAdjustPolicy] = ...
        AdjustToMinimumContentsLength: ClassVar[QComboBox.SizeAdjustPolicy] = ...
        AdjustToMinimumContentsLengthWithIcon: ClassVar[QComboBox.SizeAdjustPolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QComboBox.SizeAdjustPolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QComboBox.SizeAdjustPolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QComboBox.SizeAdjustPolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QComboBox.SizeAdjustPolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QComboBox.SizeAdjustPolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QComboBox.SizeAdjustPolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QComboBox.SizeAdjustPolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QComboBox.SizeAdjustPolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QComboBox.SizeAdjustPolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QComboBox.SizeAdjustPolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QComboBox.SizeAdjustPolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QComboBox.SizeAdjustPolicy: ...
    AdjustToContents: ClassVar[QComboBox.SizeAdjustPolicy] = ...
    AdjustToContentsOnFirstShow: ClassVar[QComboBox.SizeAdjustPolicy] = ...
    AdjustToMinimumContentsLength: ClassVar[QComboBox.SizeAdjustPolicy] = ...
    AdjustToMinimumContentsLengthWithIcon: ClassVar[QComboBox.SizeAdjustPolicy] = ...
    InsertAfterCurrent: ClassVar[QComboBox.InsertPolicy] = ...
    InsertAlphabetically: ClassVar[QComboBox.InsertPolicy] = ...
    InsertAtBottom: ClassVar[QComboBox.InsertPolicy] = ...
    InsertAtCurrent: ClassVar[QComboBox.InsertPolicy] = ...
    InsertAtTop: ClassVar[QComboBox.InsertPolicy] = ...
    InsertBeforeCurrent: ClassVar[QComboBox.InsertPolicy] = ...
    NoInsert: ClassVar[QComboBox.InsertPolicy] = ...
    activated: ClassVar[PySide2.QtCore.Signal] = ...
    currentIndexChanged: ClassVar[PySide2.QtCore.Signal] = ...
    currentTextChanged: ClassVar[PySide2.QtCore.Signal] = ...
    editTextChanged: ClassVar[PySide2.QtCore.Signal] = ...
    highlighted: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    textActivated: ClassVar[PySide2.QtCore.Signal] = ...
    textHighlighted: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., activated: typing.Callable = ..., autoCompletion: bool = ..., autoCompletionCaseSensitivity: PySide2.QtCore.Qt.CaseSensitivity = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., count: int = ..., currentData: object = ..., currentIndex: int = ..., currentIndexChanged: typing.Callable = ..., currentText: str = ..., currentTextChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., duplicatesEnabled: bool = ..., editTextChanged: typing.Callable = ..., editable: bool = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., highlighted: typing.Callable = ..., iconSize: PySide2.QtCore.QSize = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., insertPolicy: QComboBox.InsertPolicy = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maxCount: int = ..., maxVisibleItems: int = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumContentsLength: int = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., modelColumn: int = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., placeholderText: str = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QComboBox.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., textActivated: typing.Callable = ..., textHighlighted: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def addItem(self, icon: PySide2.QtGui.QIcon, text: str, userData: typing.Any = ...) -> None: ...
    @overload
    def addItem(self, text: str, userData: typing.Any = ...) -> None: ...
    def addItems(self, texts: typing.Sequence[str]) -> None: ...
    def autoCompletion(self) -> bool: ...
    def autoCompletionCaseSensitivity(self) -> PySide2.QtCore.Qt.CaseSensitivity: ...
    def changeEvent(self, e: PySide2.QtCore.QEvent) -> None: ...
    def clear(self) -> None: ...
    def clearEditText(self) -> None: ...
    def completer(self) -> QCompleter: ...
    def contextMenuEvent(self, e: PySide2.QtGui.QContextMenuEvent) -> None: ...
    def count(self) -> int: ...
    def currentData(self, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> typing.Any: ...
    def currentIndex(self) -> int: ...
    def currentText(self) -> str: ...
    def duplicatesEnabled(self) -> bool: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def findData(self, data: typing.Any, role: PySide2.QtCore.Qt.ItemDataRole = ..., flags: typing.Union[PySide2.QtCore.Qt.MatchFlags,PySide2.QtCore.Qt.MatchFlag] = ...) -> int: ...
    def findText(self, text: str, flags: typing.Union[PySide2.QtCore.Qt.MatchFlags,PySide2.QtCore.Qt.MatchFlag] = ...) -> int: ...
    def focusInEvent(self, e: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusOutEvent(self, e: PySide2.QtGui.QFocusEvent) -> None: ...
    def hasFrame(self) -> bool: ...
    def hideEvent(self, e: PySide2.QtGui.QHideEvent) -> None: ...
    def hidePopup(self) -> None: ...
    def iconSize(self) -> PySide2.QtCore.QSize: ...
    def initStyleOption(self, option: QStyleOptionComboBox) -> None: ...
    def inputMethodEvent(self, arg__1: PySide2.QtGui.QInputMethodEvent) -> None: ...
    @overload
    def inputMethodQuery(self, arg__1: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    @overload
    def inputMethodQuery(self, query: PySide2.QtCore.Qt.InputMethodQuery, argument: typing.Any) -> typing.Any: ...
    @overload
    def insertItem(self, index: int, icon: PySide2.QtGui.QIcon, text: str, userData: typing.Any = ...) -> None: ...
    @overload
    def insertItem(self, index: int, text: str, userData: typing.Any = ...) -> None: ...
    def insertItems(self, index: int, texts: typing.Sequence[str]) -> None: ...
    def insertPolicy(self) -> QComboBox.InsertPolicy: ...
    def insertSeparator(self, index: int) -> None: ...
    def isEditable(self) -> bool: ...
    def itemData(self, index: int, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> typing.Any: ...
    def itemDelegate(self) -> QAbstractItemDelegate: ...
    def itemIcon(self, index: int) -> PySide2.QtGui.QIcon: ...
    def itemText(self, index: int) -> str: ...
    def keyPressEvent(self, e: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, e: PySide2.QtGui.QKeyEvent) -> None: ...
    def lineEdit(self) -> QLineEdit: ...
    def maxCount(self) -> int: ...
    def maxVisibleItems(self) -> int: ...
    def minimumContentsLength(self) -> int: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def model(self) -> PySide2.QtCore.QAbstractItemModel: ...
    def modelColumn(self) -> int: ...
    def mousePressEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def paintEvent(self, e: PySide2.QtGui.QPaintEvent) -> None: ...
    def placeholderText(self) -> str: ...
    def removeItem(self, index: int) -> None: ...
    def resizeEvent(self, e: PySide2.QtGui.QResizeEvent) -> None: ...
    def rootModelIndex(self) -> PySide2.QtCore.QModelIndex: ...
    def setAutoCompletion(self, enable: bool) -> None: ...
    def setAutoCompletionCaseSensitivity(self, sensitivity: PySide2.QtCore.Qt.CaseSensitivity) -> None: ...
    def setCompleter(self, c: QCompleter) -> None: ...
    def setCurrentIndex(self, index: int) -> None: ...
    def setCurrentText(self, text: str) -> None: ...
    def setDuplicatesEnabled(self, enable: bool) -> None: ...
    def setEditText(self, text: str) -> None: ...
    def setEditable(self, editable: bool) -> None: ...
    def setFrame(self, arg__1: bool) -> None: ...
    def setIconSize(self, size: PySide2.QtCore.QSize) -> None: ...
    def setInsertPolicy(self, policy: QComboBox.InsertPolicy) -> None: ...
    def setItemData(self, index: int, value: typing.Any, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> None: ...
    def setItemDelegate(self, delegate: QAbstractItemDelegate) -> None: ...
    def setItemIcon(self, index: int, icon: PySide2.QtGui.QIcon) -> None: ...
    def setItemText(self, index: int, text: str) -> None: ...
    def setLineEdit(self, edit: QLineEdit) -> None: ...
    def setMaxCount(self, max: int) -> None: ...
    def setMaxVisibleItems(self, maxItems: int) -> None: ...
    def setMinimumContentsLength(self, characters: int) -> None: ...
    def setModel(self, model: typing.Optional[PySide2.QtCore.QAbstractItemModel]) -> None: ...
    def setModelColumn(self, visibleColumn: int) -> None: ...
    def setPlaceholderText(self, placeholderText: str) -> None: ...
    def setRootModelIndex(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    def setSizeAdjustPolicy(self, policy: QComboBox.SizeAdjustPolicy) -> None: ...
    def setValidator(self, v: PySide2.QtGui.QValidator) -> None: ...
    def setView(self, itemView: QAbstractItemView) -> None: ...
    def showEvent(self, e: PySide2.QtGui.QShowEvent) -> None: ...
    def showPopup(self) -> None: ...
    def sizeAdjustPolicy(self) -> QComboBox.SizeAdjustPolicy: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def validator(self) -> PySide2.QtGui.QValidator: ...
    def view(self) -> QAbstractItemView: ...
    def wheelEvent(self, e: PySide2.QtGui.QWheelEvent) -> None: ...

class QCommandLinkButton(QPushButton):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoDefault: bool = ..., autoExclusive: bool = ..., autoFillBackground: bool = ..., autoRepeat: bool = ..., autoRepeatDelay: int = ..., autoRepeatInterval: int = ..., baseSize: PySide2.QtCore.QSize = ..., checkable: bool = ..., checked: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., default: bool = ..., description: str = ..., destroyed: typing.Callable = ..., down: bool = ..., enabled: bool = ..., flat: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., icon: PySide2.QtGui.QIcon = ..., iconSize: PySide2.QtCore.QSize = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., released: typing.Callable = ..., shortcut: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., toggled: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, text: str, description: str, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoDefault: bool = ..., autoExclusive: bool = ..., autoFillBackground: bool = ..., autoRepeat: bool = ..., autoRepeatDelay: int = ..., autoRepeatInterval: int = ..., baseSize: PySide2.QtCore.QSize = ..., checkable: bool = ..., checked: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., default: bool = ..., destroyed: typing.Callable = ..., down: bool = ..., enabled: bool = ..., flat: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., icon: PySide2.QtGui.QIcon = ..., iconSize: PySide2.QtCore.QSize = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., released: typing.Callable = ..., shortcut: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toggled: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, text: str, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoDefault: bool = ..., autoExclusive: bool = ..., autoFillBackground: bool = ..., autoRepeat: bool = ..., autoRepeatDelay: int = ..., autoRepeatInterval: int = ..., baseSize: PySide2.QtCore.QSize = ..., checkable: bool = ..., checked: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., default: bool = ..., description: str = ..., destroyed: typing.Callable = ..., down: bool = ..., enabled: bool = ..., flat: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., icon: PySide2.QtGui.QIcon = ..., iconSize: PySide2.QtCore.QSize = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., released: typing.Callable = ..., shortcut: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toggled: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def description(self) -> str: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def heightForWidth(self, arg__1: int) -> int: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def setDescription(self, description: str) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...

class QCommonStyle(QStyle):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def drawComplexControl(self, cc: QStyle.ComplexControl, opt: QStyleOptionComplex, p: PySide2.QtGui.QPainter, w: typing.Union[QWidget,None] = ...) -> None: ...
    def drawControl(self, element: QStyle.ControlElement, opt: QStyleOption, p: PySide2.QtGui.QPainter, w: typing.Union[QWidget,None] = ...) -> None: ...
    def drawPrimitive(self, pe: QStyle.PrimitiveElement, opt: QStyleOption, p: PySide2.QtGui.QPainter, w: typing.Union[QWidget,None] = ...) -> None: ...
    def generatedIconPixmap(self, iconMode: PySide2.QtGui.QIcon.Mode, pixmap: PySide2.QtGui.QPixmap, opt: QStyleOption) -> PySide2.QtGui.QPixmap: ...
    def hitTestComplexControl(self, cc: QStyle.ComplexControl, opt: QStyleOptionComplex, pt: PySide2.QtCore.QPoint, w: typing.Union[QWidget,None] = ...) -> QStyle.SubControl: ...
    def layoutSpacing(self, control1: QSizePolicy.ControlType, control2: QSizePolicy.ControlType, orientation: PySide2.QtCore.Qt.Orientation, option: typing.Union[QStyleOption,None] = ..., widget: typing.Union[QWidget,None] = ...) -> int: ...
    def pixelMetric(self, m: QStyle.PixelMetric, opt: typing.Union[QStyleOption,None] = ..., widget: typing.Union[QWidget,None] = ...) -> int: ...
    @overload
    def polish(self, app: QApplication) -> None: ...
    @overload
    def polish(self, application: QApplication) -> None: ...
    @overload
    def polish(self, arg__1: PySide2.QtGui.QPalette) -> None: ...
    @overload
    def polish(self, widget: QWidget) -> None: ...
    def sizeFromContents(self, ct: QStyle.ContentsType, opt: QStyleOption, contentsSize: PySide2.QtCore.QSize, widget: typing.Union[QWidget,None] = ...) -> PySide2.QtCore.QSize: ...
    def standardIcon(self, standardIcon: QStyle.StandardPixmap, opt: typing.Union[QStyleOption,None] = ..., widget: typing.Union[QWidget,None] = ...) -> PySide2.QtGui.QIcon: ...
    def standardPixmap(self, sp: QStyle.StandardPixmap, opt: typing.Union[QStyleOption,None] = ..., widget: typing.Union[QWidget,None] = ...) -> PySide2.QtGui.QPixmap: ...
    def styleHint(self, sh: QStyle.StyleHint, opt: typing.Union[QStyleOption,None] = ..., w: typing.Union[QWidget,None] = ..., shret: typing.Union[QStyleHintReturn,None] = ...) -> int: ...
    def subControlRect(self, cc: QStyle.ComplexControl, opt: QStyleOptionComplex, sc: QStyle.SubControl, w: typing.Union[QWidget,None] = ...) -> PySide2.QtCore.QRect: ...
    def subElementRect(self, r: QStyle.SubElement, opt: QStyleOption, widget: typing.Union[QWidget,None] = ...) -> PySide2.QtCore.QRect: ...
    @overload
    def unpolish(self, application: QApplication) -> None: ...
    @overload
    def unpolish(self, widget: QWidget) -> None: ...

class QCompleter(PySide2.QtCore.QObject):
    class CompletionMode:
        InlineCompletion: ClassVar[QCompleter.CompletionMode] = ...
        PopupCompletion: ClassVar[QCompleter.CompletionMode] = ...
        UnfilteredPopupCompletion: ClassVar[QCompleter.CompletionMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QCompleter.CompletionMode: ...
        def __and__(self, other: typing.SupportsInt) -> QCompleter.CompletionMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QCompleter.CompletionMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QCompleter.CompletionMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QCompleter.CompletionMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QCompleter.CompletionMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QCompleter.CompletionMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QCompleter.CompletionMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QCompleter.CompletionMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QCompleter.CompletionMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QCompleter.CompletionMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QCompleter.CompletionMode: ...

    class ModelSorting:
        CaseInsensitivelySortedModel: ClassVar[QCompleter.ModelSorting] = ...
        CaseSensitivelySortedModel: ClassVar[QCompleter.ModelSorting] = ...
        UnsortedModel: ClassVar[QCompleter.ModelSorting] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QCompleter.ModelSorting: ...
        def __and__(self, other: typing.SupportsInt) -> QCompleter.ModelSorting: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QCompleter.ModelSorting: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QCompleter.ModelSorting: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QCompleter.ModelSorting: ...
        def __rand__(self, other: typing.SupportsInt) -> QCompleter.ModelSorting: ...
        def __rmul__(self, other: typing.SupportsInt) -> QCompleter.ModelSorting: ...
        def __ror__(self, other: typing.SupportsInt) -> QCompleter.ModelSorting: ...
        def __rsub__(self, other: typing.SupportsInt) -> QCompleter.ModelSorting: ...
        def __rxor__(self, other: typing.SupportsInt) -> QCompleter.ModelSorting: ...
        def __sub__(self, other: typing.SupportsInt) -> QCompleter.ModelSorting: ...
        def __xor__(self, other: typing.SupportsInt) -> QCompleter.ModelSorting: ...
    CaseInsensitivelySortedModel: ClassVar[QCompleter.ModelSorting] = ...
    CaseSensitivelySortedModel: ClassVar[QCompleter.ModelSorting] = ...
    InlineCompletion: ClassVar[QCompleter.CompletionMode] = ...
    PopupCompletion: ClassVar[QCompleter.CompletionMode] = ...
    UnfilteredPopupCompletion: ClassVar[QCompleter.CompletionMode] = ...
    UnsortedModel: ClassVar[QCompleter.ModelSorting] = ...
    activated: ClassVar[PySide2.QtCore.Signal] = ...
    highlighted: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, completions: typing.Sequence[str], parent: typing.Union[PySide2.QtCore.QObject,None] = ..., activated: typing.Callable = ..., caseSensitivity: PySide2.QtCore.Qt.CaseSensitivity = ..., completionColumn: int = ..., completionMode: QCompleter.CompletionMode = ..., completionPrefix: str = ..., completionRole: int = ..., destroyed: typing.Callable = ..., filterMode: typing.Union[PySide2.QtCore.Qt.MatchFlags,PySide2.QtCore.Qt.MatchFlag] = ..., highlighted: typing.Callable = ..., maxVisibleItems: int = ..., modelSorting: QCompleter.ModelSorting = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., wrapAround: bool = ...) -> None: ...
    @overload
    def __init__(self, model: PySide2.QtCore.QAbstractItemModel, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., activated: typing.Callable = ..., caseSensitivity: PySide2.QtCore.Qt.CaseSensitivity = ..., completionColumn: int = ..., completionMode: QCompleter.CompletionMode = ..., completionPrefix: str = ..., completionRole: int = ..., destroyed: typing.Callable = ..., filterMode: typing.Union[PySide2.QtCore.Qt.MatchFlags,PySide2.QtCore.Qt.MatchFlag] = ..., highlighted: typing.Callable = ..., maxVisibleItems: int = ..., modelSorting: QCompleter.ModelSorting = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., wrapAround: bool = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., activated: typing.Callable = ..., caseSensitivity: PySide2.QtCore.Qt.CaseSensitivity = ..., completionColumn: int = ..., completionMode: QCompleter.CompletionMode = ..., completionPrefix: str = ..., completionRole: int = ..., destroyed: typing.Callable = ..., filterMode: typing.Union[PySide2.QtCore.Qt.MatchFlags,PySide2.QtCore.Qt.MatchFlag] = ..., highlighted: typing.Callable = ..., maxVisibleItems: int = ..., modelSorting: QCompleter.ModelSorting = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., wrapAround: bool = ...) -> None: ...
    def caseSensitivity(self) -> PySide2.QtCore.Qt.CaseSensitivity: ...
    def complete(self, rect: PySide2.QtCore.QRect = ...) -> None: ...
    def completionColumn(self) -> int: ...
    def completionCount(self) -> int: ...
    def completionMode(self) -> QCompleter.CompletionMode: ...
    def completionModel(self) -> PySide2.QtCore.QAbstractItemModel: ...
    def completionPrefix(self) -> str: ...
    def completionRole(self) -> int: ...
    def currentCompletion(self) -> str: ...
    def currentIndex(self) -> PySide2.QtCore.QModelIndex: ...
    def currentRow(self) -> int: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def eventFilter(self, o: PySide2.QtCore.QObject, e: PySide2.QtCore.QEvent) -> bool: ...
    def filterMode(self) -> typing.Union[PySide2.QtCore.Qt.MatchFlags,PySide2.QtCore.Qt.MatchFlag]: ...
    def maxVisibleItems(self) -> int: ...
    def model(self) -> PySide2.QtCore.QAbstractItemModel: ...
    def modelSorting(self) -> QCompleter.ModelSorting: ...
    def pathFromIndex(self, index: PySide2.QtCore.QModelIndex) -> str: ...
    def popup(self) -> QAbstractItemView: ...
    def setCaseSensitivity(self, caseSensitivity: PySide2.QtCore.Qt.CaseSensitivity) -> None: ...
    def setCompletionColumn(self, column: int) -> None: ...
    def setCompletionMode(self, mode: QCompleter.CompletionMode) -> None: ...
    def setCompletionPrefix(self, prefix: str) -> None: ...
    def setCompletionRole(self, role: PySide2.QtCore.Qt.ItemDataRole) -> None: ...
    def setCurrentRow(self, row: int) -> bool: ...
    def setFilterMode(self, filterMode: typing.Union[PySide2.QtCore.Qt.MatchFlags,PySide2.QtCore.Qt.MatchFlag]) -> None: ...
    def setMaxVisibleItems(self, maxItems: int) -> None: ...
    def setModel(self, c: PySide2.QtCore.QAbstractItemModel) -> None: ...
    def setModelSorting(self, sorting: QCompleter.ModelSorting) -> None: ...
    def setPopup(self, popup: QAbstractItemView) -> None: ...
    def setWidget(self, widget: QWidget) -> None: ...
    def setWrapAround(self, wrap: bool) -> None: ...
    def splitPath(self, path: str) -> typing.List[str]: ...
    def widget(self) -> QWidget: ...
    def wrapAround(self) -> bool: ...

class QDataWidgetMapper(PySide2.QtCore.QObject):
    class SubmitPolicy:
        AutoSubmit: ClassVar[QDataWidgetMapper.SubmitPolicy] = ...
        ManualSubmit: ClassVar[QDataWidgetMapper.SubmitPolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QDataWidgetMapper.SubmitPolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QDataWidgetMapper.SubmitPolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QDataWidgetMapper.SubmitPolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QDataWidgetMapper.SubmitPolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QDataWidgetMapper.SubmitPolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QDataWidgetMapper.SubmitPolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QDataWidgetMapper.SubmitPolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QDataWidgetMapper.SubmitPolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QDataWidgetMapper.SubmitPolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QDataWidgetMapper.SubmitPolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QDataWidgetMapper.SubmitPolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QDataWidgetMapper.SubmitPolicy: ...
    AutoSubmit: ClassVar[QDataWidgetMapper.SubmitPolicy] = ...
    ManualSubmit: ClassVar[QDataWidgetMapper.SubmitPolicy] = ...
    currentIndexChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., currentIndex: int = ..., currentIndexChanged: typing.Callable = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., orientation: PySide2.QtCore.Qt.Orientation = ..., submitPolicy: QDataWidgetMapper.SubmitPolicy = ...) -> None: ...
    @overload
    def addMapping(self, widget: QWidget, section: int) -> None: ...
    @overload
    def addMapping(self, widget: QWidget, section: int, propertyName: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def clearMapping(self) -> None: ...
    def currentIndex(self) -> int: ...
    def itemDelegate(self) -> QAbstractItemDelegate: ...
    def mappedPropertyName(self, widget: QWidget) -> PySide2.QtCore.QByteArray: ...
    def mappedSection(self, widget: QWidget) -> int: ...
    def mappedWidgetAt(self, section: int) -> QWidget: ...
    def model(self) -> PySide2.QtCore.QAbstractItemModel: ...
    def orientation(self) -> PySide2.QtCore.Qt.Orientation: ...
    def removeMapping(self, widget: QWidget) -> None: ...
    def revert(self) -> None: ...
    def rootIndex(self) -> PySide2.QtCore.QModelIndex: ...
    def setCurrentIndex(self, index: int) -> None: ...
    def setCurrentModelIndex(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    def setItemDelegate(self, delegate: QAbstractItemDelegate) -> None: ...
    def setModel(self, model: typing.Optional[PySide2.QtCore.QAbstractItemModel]) -> None: ...
    def setOrientation(self, aOrientation: PySide2.QtCore.Qt.Orientation) -> None: ...
    def setRootIndex(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    def setSubmitPolicy(self, policy: QDataWidgetMapper.SubmitPolicy) -> None: ...
    def submit(self) -> bool: ...
    def submitPolicy(self) -> QDataWidgetMapper.SubmitPolicy: ...
    def toFirst(self) -> None: ...
    def toLast(self) -> None: ...
    def toNext(self) -> None: ...
    def toPrevious(self) -> None: ...

class QDateEdit(QDateTimeEdit):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    userDateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, date: PySide2.QtCore.QDate, parent: typing.Union[QWidget,None] = ..., accelerated: bool = ..., acceptDrops: bool = ..., acceptableInput: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., buttonSymbols: QDateEdit.ButtonSymbols = ..., calendarPopup: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., correctionMode: QDateEdit.CorrectionMode = ..., currentSection: QDateEdit.Section = ..., currentSectionIndex: int = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., dateChanged: typing.Callable = ..., dateTime: PySide2.QtCore.QDateTime = ..., dateTimeChanged: typing.Callable = ..., destroyed: typing.Callable = ..., displayFormat: str = ..., displayedSections: QDateEdit.Sections = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., keyboardTracking: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumDate: PySide2.QtCore.QDate = ..., maximumDateTime: PySide2.QtCore.QDateTime = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumTime: PySide2.QtCore.QTime = ..., maximumWidth: int = ..., minimized: bool = ..., minimumDate: PySide2.QtCore.QDate = ..., minimumDateTime: PySide2.QtCore.QDateTime = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumTime: PySide2.QtCore.QTime = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., sectionCount: int = ..., showGroupSeparator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., specialValueText: str = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., time: PySide2.QtCore.QTime = ..., timeChanged: typing.Callable = ..., timeSpec: PySide2.QtCore.Qt.TimeSpec = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., userDateChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wrapping: bool = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., accelerated: bool = ..., acceptDrops: bool = ..., acceptableInput: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., buttonSymbols: QDateEdit.ButtonSymbols = ..., calendarPopup: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., correctionMode: QDateEdit.CorrectionMode = ..., currentSection: QDateEdit.Section = ..., currentSectionIndex: int = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., date: PySide2.QtCore.QDate = ..., dateChanged: typing.Callable = ..., dateTime: PySide2.QtCore.QDateTime = ..., dateTimeChanged: typing.Callable = ..., destroyed: typing.Callable = ..., displayFormat: str = ..., displayedSections: QDateEdit.Sections = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., keyboardTracking: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumDate: PySide2.QtCore.QDate = ..., maximumDateTime: PySide2.QtCore.QDateTime = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumTime: PySide2.QtCore.QTime = ..., maximumWidth: int = ..., minimized: bool = ..., minimumDate: PySide2.QtCore.QDate = ..., minimumDateTime: PySide2.QtCore.QDateTime = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumTime: PySide2.QtCore.QTime = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., sectionCount: int = ..., showGroupSeparator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., specialValueText: str = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., time: PySide2.QtCore.QTime = ..., timeChanged: typing.Callable = ..., timeSpec: PySide2.QtCore.Qt.TimeSpec = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., userDateChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wrapping: bool = ..., x: int = ..., y: int = ...) -> None: ...

class QDateTimeEdit(QAbstractSpinBox):
    class Section:
        AmPmSection: ClassVar[QDateTimeEdit.Section] = ...
        DateSections_Mask: ClassVar[QDateTimeEdit.Section] = ...
        DaySection: ClassVar[QDateTimeEdit.Section] = ...
        HourSection: ClassVar[QDateTimeEdit.Section] = ...
        MSecSection: ClassVar[QDateTimeEdit.Section] = ...
        MinuteSection: ClassVar[QDateTimeEdit.Section] = ...
        MonthSection: ClassVar[QDateTimeEdit.Section] = ...
        NoSection: ClassVar[QDateTimeEdit.Section] = ...
        SecondSection: ClassVar[QDateTimeEdit.Section] = ...
        TimeSections_Mask: ClassVar[QDateTimeEdit.Section] = ...
        YearSection: ClassVar[QDateTimeEdit.Section] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QDateTimeEdit.Sections: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QDateTimeEdit.Section: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QDateTimeEdit.Sections: ...
        def __rand__(self, other: typing.SupportsInt) -> QDateTimeEdit.Sections: ...
        def __ror__(self, other: typing.SupportsInt) -> QDateTimeEdit.Sections: ...
        def __rxor__(self, other: typing.SupportsInt) -> QDateTimeEdit.Sections: ...
        def __xor__(self, other: typing.SupportsInt) -> QDateTimeEdit.Sections: ...

    class Sections:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QDateTimeEdit.Sections: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QDateTimeEdit.Sections: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QDateTimeEdit.Sections: ...
        def __rand__(self, other: typing.SupportsInt) -> QDateTimeEdit.Sections: ...
        def __ror__(self, other: typing.SupportsInt) -> QDateTimeEdit.Sections: ...
        def __rxor__(self, other: typing.SupportsInt) -> QDateTimeEdit.Sections: ...
        def __xor__(self, other: typing.SupportsInt) -> QDateTimeEdit.Sections: ...
    AmPmSection: ClassVar[QDateTimeEdit.Section] = ...
    DateSections_Mask: ClassVar[QDateTimeEdit.Section] = ...
    DaySection: ClassVar[QDateTimeEdit.Section] = ...
    HourSection: ClassVar[QDateTimeEdit.Section] = ...
    MSecSection: ClassVar[QDateTimeEdit.Section] = ...
    MinuteSection: ClassVar[QDateTimeEdit.Section] = ...
    MonthSection: ClassVar[QDateTimeEdit.Section] = ...
    NoSection: ClassVar[QDateTimeEdit.Section] = ...
    SecondSection: ClassVar[QDateTimeEdit.Section] = ...
    TimeSections_Mask: ClassVar[QDateTimeEdit.Section] = ...
    YearSection: ClassVar[QDateTimeEdit.Section] = ...
    dateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    dateTimeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    timeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, d: PySide2.QtCore.QDate, parent: typing.Union[QWidget,None] = ..., accelerated: bool = ..., acceptDrops: bool = ..., acceptableInput: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., buttonSymbols: QDateTimeEdit.ButtonSymbols = ..., calendarPopup: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., correctionMode: QDateTimeEdit.CorrectionMode = ..., currentSection: QDateTimeEdit.Section = ..., currentSectionIndex: int = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., date: PySide2.QtCore.QDate = ..., dateChanged: typing.Callable = ..., dateTime: PySide2.QtCore.QDateTime = ..., dateTimeChanged: typing.Callable = ..., destroyed: typing.Callable = ..., displayFormat: str = ..., displayedSections: typing.Union[QDateTimeEdit.Sections,QDateTimeEdit.Section] = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., keyboardTracking: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumDate: PySide2.QtCore.QDate = ..., maximumDateTime: PySide2.QtCore.QDateTime = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumTime: PySide2.QtCore.QTime = ..., maximumWidth: int = ..., minimized: bool = ..., minimumDate: PySide2.QtCore.QDate = ..., minimumDateTime: PySide2.QtCore.QDateTime = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumTime: PySide2.QtCore.QTime = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., sectionCount: int = ..., showGroupSeparator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., specialValueText: str = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., time: PySide2.QtCore.QTime = ..., timeChanged: typing.Callable = ..., timeSpec: PySide2.QtCore.Qt.TimeSpec = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wrapping: bool = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, dt: PySide2.QtCore.QDateTime, parent: typing.Union[QWidget,None] = ..., accelerated: bool = ..., acceptDrops: bool = ..., acceptableInput: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., buttonSymbols: QDateTimeEdit.ButtonSymbols = ..., calendarPopup: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., correctionMode: QDateTimeEdit.CorrectionMode = ..., currentSection: QDateTimeEdit.Section = ..., currentSectionIndex: int = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., date: PySide2.QtCore.QDate = ..., dateChanged: typing.Callable = ..., dateTime: PySide2.QtCore.QDateTime = ..., dateTimeChanged: typing.Callable = ..., destroyed: typing.Callable = ..., displayFormat: str = ..., displayedSections: typing.Union[QDateTimeEdit.Sections,QDateTimeEdit.Section] = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., keyboardTracking: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumDate: PySide2.QtCore.QDate = ..., maximumDateTime: PySide2.QtCore.QDateTime = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumTime: PySide2.QtCore.QTime = ..., maximumWidth: int = ..., minimized: bool = ..., minimumDate: PySide2.QtCore.QDate = ..., minimumDateTime: PySide2.QtCore.QDateTime = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumTime: PySide2.QtCore.QTime = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., sectionCount: int = ..., showGroupSeparator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., specialValueText: str = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., time: PySide2.QtCore.QTime = ..., timeChanged: typing.Callable = ..., timeSpec: PySide2.QtCore.Qt.TimeSpec = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wrapping: bool = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., accelerated: bool = ..., acceptDrops: bool = ..., acceptableInput: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., buttonSymbols: QDateTimeEdit.ButtonSymbols = ..., calendarPopup: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., correctionMode: QDateTimeEdit.CorrectionMode = ..., currentSection: QDateTimeEdit.Section = ..., currentSectionIndex: int = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., date: PySide2.QtCore.QDate = ..., dateChanged: typing.Callable = ..., dateTime: PySide2.QtCore.QDateTime = ..., dateTimeChanged: typing.Callable = ..., destroyed: typing.Callable = ..., displayFormat: str = ..., displayedSections: typing.Union[QDateTimeEdit.Sections,QDateTimeEdit.Section] = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., keyboardTracking: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumDate: PySide2.QtCore.QDate = ..., maximumDateTime: PySide2.QtCore.QDateTime = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumTime: PySide2.QtCore.QTime = ..., maximumWidth: int = ..., minimized: bool = ..., minimumDate: PySide2.QtCore.QDate = ..., minimumDateTime: PySide2.QtCore.QDateTime = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumTime: PySide2.QtCore.QTime = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., sectionCount: int = ..., showGroupSeparator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., specialValueText: str = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., time: PySide2.QtCore.QTime = ..., timeChanged: typing.Callable = ..., timeSpec: PySide2.QtCore.Qt.TimeSpec = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wrapping: bool = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, t: PySide2.QtCore.QTime, parent: typing.Union[QWidget,None] = ..., accelerated: bool = ..., acceptDrops: bool = ..., acceptableInput: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., buttonSymbols: QDateTimeEdit.ButtonSymbols = ..., calendarPopup: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., correctionMode: QDateTimeEdit.CorrectionMode = ..., currentSection: QDateTimeEdit.Section = ..., currentSectionIndex: int = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., date: PySide2.QtCore.QDate = ..., dateChanged: typing.Callable = ..., dateTime: PySide2.QtCore.QDateTime = ..., dateTimeChanged: typing.Callable = ..., destroyed: typing.Callable = ..., displayFormat: str = ..., displayedSections: typing.Union[QDateTimeEdit.Sections,QDateTimeEdit.Section] = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., keyboardTracking: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumDate: PySide2.QtCore.QDate = ..., maximumDateTime: PySide2.QtCore.QDateTime = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumTime: PySide2.QtCore.QTime = ..., maximumWidth: int = ..., minimized: bool = ..., minimumDate: PySide2.QtCore.QDate = ..., minimumDateTime: PySide2.QtCore.QDateTime = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumTime: PySide2.QtCore.QTime = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., sectionCount: int = ..., showGroupSeparator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., specialValueText: str = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., time: PySide2.QtCore.QTime = ..., timeChanged: typing.Callable = ..., timeSpec: PySide2.QtCore.Qt.TimeSpec = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wrapping: bool = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, val: typing.Any, parserType: type, parent: typing.Union[QWidget,None] = ..., accelerated: bool = ..., acceptDrops: bool = ..., acceptableInput: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., buttonSymbols: QDateTimeEdit.ButtonSymbols = ..., calendarPopup: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., correctionMode: QDateTimeEdit.CorrectionMode = ..., currentSection: QDateTimeEdit.Section = ..., currentSectionIndex: int = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., date: PySide2.QtCore.QDate = ..., dateChanged: typing.Callable = ..., dateTime: PySide2.QtCore.QDateTime = ..., dateTimeChanged: typing.Callable = ..., destroyed: typing.Callable = ..., displayFormat: str = ..., displayedSections: typing.Union[QDateTimeEdit.Sections,QDateTimeEdit.Section] = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., keyboardTracking: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumDate: PySide2.QtCore.QDate = ..., maximumDateTime: PySide2.QtCore.QDateTime = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumTime: PySide2.QtCore.QTime = ..., maximumWidth: int = ..., minimized: bool = ..., minimumDate: PySide2.QtCore.QDate = ..., minimumDateTime: PySide2.QtCore.QDateTime = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumTime: PySide2.QtCore.QTime = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., sectionCount: int = ..., showGroupSeparator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., specialValueText: str = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., time: PySide2.QtCore.QTime = ..., timeChanged: typing.Callable = ..., timeSpec: PySide2.QtCore.Qt.TimeSpec = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wrapping: bool = ..., x: int = ..., y: int = ...) -> None: ...
    def calendar(self) -> PySide2.QtCore.QCalendar: ...
    def calendarPopup(self) -> bool: ...
    def calendarWidget(self) -> QCalendarWidget: ...
    def clear(self) -> None: ...
    def clearMaximumDate(self) -> None: ...
    def clearMaximumDateTime(self) -> None: ...
    def clearMaximumTime(self) -> None: ...
    def clearMinimumDate(self) -> None: ...
    def clearMinimumDateTime(self) -> None: ...
    def clearMinimumTime(self) -> None: ...
    def currentSection(self) -> QDateTimeEdit.Section: ...
    def currentSectionIndex(self) -> int: ...
    def date(self) -> PySide2.QtCore.QDate: ...
    def dateTime(self) -> PySide2.QtCore.QDateTime: ...
    def dateTimeFromText(self, text: str) -> PySide2.QtCore.QDateTime: ...
    def displayFormat(self) -> str: ...
    def displayedSections(self) -> typing.Union[QDateTimeEdit.Sections,QDateTimeEdit.Section]: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def fixup(self, input: str) -> None: ...
    def focusInEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def initStyleOption(self, option: QStyleOptionSpinBox) -> None: ...
    def keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def maximumDate(self) -> PySide2.QtCore.QDate: ...
    def maximumDateTime(self) -> PySide2.QtCore.QDateTime: ...
    def maximumTime(self) -> PySide2.QtCore.QTime: ...
    def minimumDate(self) -> PySide2.QtCore.QDate: ...
    def minimumDateTime(self) -> PySide2.QtCore.QDateTime: ...
    def minimumTime(self) -> PySide2.QtCore.QTime: ...
    def mousePressEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def paintEvent(self, event: PySide2.QtGui.QPaintEvent) -> None: ...
    def sectionAt(self, index: int) -> QDateTimeEdit.Section: ...
    def sectionCount(self) -> int: ...
    def sectionText(self, section: QDateTimeEdit.Section) -> str: ...
    def setCalendar(self, calendar: PySide2.QtCore.QCalendar) -> None: ...
    def setCalendarPopup(self, enable: bool) -> None: ...
    def setCalendarWidget(self, calendarWidget: QCalendarWidget) -> None: ...
    def setCurrentSection(self, section: QDateTimeEdit.Section) -> None: ...
    def setCurrentSectionIndex(self, index: int) -> None: ...
    def setDate(self, date: PySide2.QtCore.QDate) -> None: ...
    def setDateRange(self, min: PySide2.QtCore.QDate, max: PySide2.QtCore.QDate) -> None: ...
    def setDateTime(self, dateTime: PySide2.QtCore.QDateTime) -> None: ...
    def setDateTimeRange(self, min: PySide2.QtCore.QDateTime, max: PySide2.QtCore.QDateTime) -> None: ...
    def setDisplayFormat(self, format: str) -> None: ...
    def setMaximumDate(self, max: PySide2.QtCore.QDate) -> None: ...
    def setMaximumDateTime(self, dt: PySide2.QtCore.QDateTime) -> None: ...
    def setMaximumTime(self, max: PySide2.QtCore.QTime) -> None: ...
    def setMinimumDate(self, min: PySide2.QtCore.QDate) -> None: ...
    def setMinimumDateTime(self, dt: PySide2.QtCore.QDateTime) -> None: ...
    def setMinimumTime(self, min: PySide2.QtCore.QTime) -> None: ...
    def setSelectedSection(self, section: QDateTimeEdit.Section) -> None: ...
    def setTime(self, time: PySide2.QtCore.QTime) -> None: ...
    def setTimeRange(self, min: PySide2.QtCore.QTime, max: PySide2.QtCore.QTime) -> None: ...
    def setTimeSpec(self, spec: PySide2.QtCore.Qt.TimeSpec) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def stepBy(self, steps: int) -> None: ...
    def stepEnabled(self) -> typing.Union[QAbstractSpinBox.StepEnabled,QAbstractSpinBox.StepEnabledFlag]: ...
    def textFromDateTime(self, dt: PySide2.QtCore.QDateTime) -> str: ...
    def time(self) -> PySide2.QtCore.QTime: ...
    def timeSpec(self) -> PySide2.QtCore.Qt.TimeSpec: ...
    def validate(self, input: str, pos: int) -> PySide2.QtGui.QValidator.State: ...
    def wheelEvent(self, event: PySide2.QtGui.QWheelEvent) -> None: ...

class QDesktopWidget(QWidget):
    primaryScreenChanged: ClassVar[PySide2.QtCore.Signal] = ...
    resized: ClassVar[PySide2.QtCore.Signal] = ...
    screenCountChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    workAreaResized: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., primaryScreen: int = ..., primaryScreenChanged: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., resized: typing.Callable = ..., screenCount: int = ..., screenCountChanged: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., virtualDesktop: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., workAreaResized: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def availableGeometry(self, point: PySide2.QtCore.QPoint) -> PySide2.QtCore.QRect: ...
    @overload
    def availableGeometry(self, screen: int = ...) -> PySide2.QtCore.QRect: ...
    @overload
    def availableGeometry(self, widget: QWidget) -> PySide2.QtCore.QRect: ...
    def isVirtualDesktop(self) -> bool: ...
    def numScreens(self) -> int: ...
    def primaryScreen(self) -> int: ...
    def resizeEvent(self, e: PySide2.QtGui.QResizeEvent) -> None: ...
    @overload
    def screen(self) -> PySide2.QtGui.QScreen: ...
    @overload
    def screen(self, screen: int = ...) -> QWidget: ...
    def screenCount(self) -> int: ...
    @overload
    def screenGeometry(self, point: PySide2.QtCore.QPoint) -> PySide2.QtCore.QRect: ...
    @overload
    def screenGeometry(self, screen: int = ...) -> PySide2.QtCore.QRect: ...
    @overload
    def screenGeometry(self, widget: QWidget) -> PySide2.QtCore.QRect: ...
    @overload
    def screenNumber(self, arg__1: PySide2.QtCore.QPoint) -> int: ...
    @overload
    def screenNumber(self, widget: typing.Union[QWidget,None] = ...) -> int: ...

class QDial(QAbstractSlider):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., actionTriggered: typing.Callable = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., invertedAppearance: bool = ..., invertedControls: bool = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximum: int = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimum: int = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., notchSize: int = ..., notchTarget: float = ..., notchesVisible: bool = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., orientation: PySide2.QtCore.Qt.Orientation = ..., pageStep: int = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rangeChanged: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., singleStep: int = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., sliderDown: bool = ..., sliderMoved: typing.Callable = ..., sliderPosition: int = ..., sliderPressed: typing.Callable = ..., sliderReleased: typing.Callable = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., tracking: bool = ..., updatesEnabled: bool = ..., value: int = ..., valueChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wrapping: bool = ..., x: int = ..., y: int = ...) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def initStyleOption(self, option: QStyleOptionSlider) -> None: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def mouseMoveEvent(self, me: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, me: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, me: PySide2.QtGui.QMouseEvent) -> None: ...
    def notchSize(self) -> int: ...
    def notchTarget(self) -> float: ...
    def notchesVisible(self) -> bool: ...
    def paintEvent(self, pe: PySide2.QtGui.QPaintEvent) -> None: ...
    def resizeEvent(self, re: PySide2.QtGui.QResizeEvent) -> None: ...
    def setNotchTarget(self, target: float) -> None: ...
    def setNotchesVisible(self, visible: bool) -> None: ...
    def setWrapping(self, on: bool) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def sliderChange(self, change: QAbstractSlider.SliderChange) -> None: ...
    def wrapping(self) -> bool: ...

class QDialog(QWidget):
    class DialogCode:
        Accepted: ClassVar[QDialog.DialogCode] = ...
        Rejected: ClassVar[QDialog.DialogCode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QDialog.DialogCode: ...
        def __and__(self, other: typing.SupportsInt) -> QDialog.DialogCode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QDialog.DialogCode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QDialog.DialogCode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QDialog.DialogCode: ...
        def __rand__(self, other: typing.SupportsInt) -> QDialog.DialogCode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QDialog.DialogCode: ...
        def __ror__(self, other: typing.SupportsInt) -> QDialog.DialogCode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QDialog.DialogCode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QDialog.DialogCode: ...
        def __sub__(self, other: typing.SupportsInt) -> QDialog.DialogCode: ...
        def __xor__(self, other: typing.SupportsInt) -> QDialog.DialogCode: ...
    Accepted: ClassVar[QDialog.DialogCode] = ...
    Rejected: ClassVar[QDialog.DialogCode] = ...
    accepted: ClassVar[PySide2.QtCore.Signal] = ...
    finished: ClassVar[PySide2.QtCore.Signal] = ...
    rejected: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., f: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., finished: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeGripEnabled: bool = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def accept(self) -> None: ...
    def adjustPosition(self, arg__1: QWidget) -> None: ...
    def closeEvent(self, arg__1: PySide2.QtGui.QCloseEvent) -> None: ...
    def contextMenuEvent(self, arg__1: PySide2.QtGui.QContextMenuEvent) -> None: ...
    def done(self, arg__1: int) -> None: ...
    def eventFilter(self, arg__1: PySide2.QtCore.QObject, arg__2: PySide2.QtCore.QEvent) -> bool: ...
    def exec_(self) -> int: ...
    def extension(self) -> QWidget: ...
    def isSizeGripEnabled(self) -> bool: ...
    def keyPressEvent(self, arg__1: PySide2.QtGui.QKeyEvent) -> None: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def open(self) -> None: ...
    def orientation(self) -> PySide2.QtCore.Qt.Orientation: ...
    def reject(self) -> None: ...
    def resizeEvent(self, arg__1: PySide2.QtGui.QResizeEvent) -> None: ...
    def result(self) -> int: ...
    def setExtension(self, extension: QWidget) -> None: ...
    def setModal(self, modal: bool) -> None: ...
    def setOrientation(self, orientation: PySide2.QtCore.Qt.Orientation) -> None: ...
    def setResult(self, r: int) -> None: ...
    def setSizeGripEnabled(self, arg__1: bool) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def showEvent(self, arg__1: PySide2.QtGui.QShowEvent) -> None: ...
    def showExtension(self, arg__1: bool) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...

class QDialogButtonBox(QWidget):
    class ButtonLayout:
        AndroidLayout: ClassVar[QDialogButtonBox.ButtonLayout] = ...
        GnomeLayout: ClassVar[QDialogButtonBox.ButtonLayout] = ...
        KdeLayout: ClassVar[QDialogButtonBox.ButtonLayout] = ...
        MacLayout: ClassVar[QDialogButtonBox.ButtonLayout] = ...
        WinLayout: ClassVar[QDialogButtonBox.ButtonLayout] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonLayout: ...
        def __and__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonLayout: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonLayout: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonLayout: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonLayout: ...
        def __rand__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonLayout: ...
        def __rmul__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonLayout: ...
        def __ror__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonLayout: ...
        def __rsub__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonLayout: ...
        def __rxor__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonLayout: ...
        def __sub__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonLayout: ...
        def __xor__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonLayout: ...

    class ButtonRole:
        AcceptRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
        ActionRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
        ApplyRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
        DestructiveRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
        HelpRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
        InvalidRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
        NRoles: ClassVar[QDialogButtonBox.ButtonRole] = ...
        NoRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
        RejectRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
        ResetRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
        YesRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonRole: ...
        def __and__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonRole: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonRole: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonRole: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonRole: ...
        def __rand__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonRole: ...
        def __rmul__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonRole: ...
        def __ror__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonRole: ...
        def __rsub__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonRole: ...
        def __rxor__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonRole: ...
        def __sub__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonRole: ...
        def __xor__(self, other: typing.SupportsInt) -> QDialogButtonBox.ButtonRole: ...

    class StandardButton:
        Abort: ClassVar[QDialogButtonBox.StandardButton] = ...
        Apply: ClassVar[QDialogButtonBox.StandardButton] = ...
        Cancel: ClassVar[QDialogButtonBox.StandardButton] = ...
        Close: ClassVar[QDialogButtonBox.StandardButton] = ...
        Discard: ClassVar[QDialogButtonBox.StandardButton] = ...
        FirstButton: ClassVar[QDialogButtonBox.StandardButton] = ...
        Help: ClassVar[QDialogButtonBox.StandardButton] = ...
        Ignore: ClassVar[QDialogButtonBox.StandardButton] = ...
        LastButton: ClassVar[QDialogButtonBox.StandardButton] = ...
        No: ClassVar[QDialogButtonBox.StandardButton] = ...
        NoButton: ClassVar[QDialogButtonBox.StandardButton] = ...
        NoToAll: ClassVar[QDialogButtonBox.StandardButton] = ...
        Ok: ClassVar[QDialogButtonBox.StandardButton] = ...
        Open: ClassVar[QDialogButtonBox.StandardButton] = ...
        Reset: ClassVar[QDialogButtonBox.StandardButton] = ...
        RestoreDefaults: ClassVar[QDialogButtonBox.StandardButton] = ...
        Retry: ClassVar[QDialogButtonBox.StandardButton] = ...
        Save: ClassVar[QDialogButtonBox.StandardButton] = ...
        SaveAll: ClassVar[QDialogButtonBox.StandardButton] = ...
        Yes: ClassVar[QDialogButtonBox.StandardButton] = ...
        YesToAll: ClassVar[QDialogButtonBox.StandardButton] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QDialogButtonBox.StandardButtons: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QDialogButtonBox.StandardButton: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QDialogButtonBox.StandardButtons: ...
        def __rand__(self, other: typing.SupportsInt) -> QDialogButtonBox.StandardButtons: ...
        def __ror__(self, other: typing.SupportsInt) -> QDialogButtonBox.StandardButtons: ...
        def __rxor__(self, other: typing.SupportsInt) -> QDialogButtonBox.StandardButtons: ...
        def __xor__(self, other: typing.SupportsInt) -> QDialogButtonBox.StandardButtons: ...

    class StandardButtons:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QDialogButtonBox.StandardButtons: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QDialogButtonBox.StandardButtons: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QDialogButtonBox.StandardButtons: ...
        def __rand__(self, other: typing.SupportsInt) -> QDialogButtonBox.StandardButtons: ...
        def __ror__(self, other: typing.SupportsInt) -> QDialogButtonBox.StandardButtons: ...
        def __rxor__(self, other: typing.SupportsInt) -> QDialogButtonBox.StandardButtons: ...
        def __xor__(self, other: typing.SupportsInt) -> QDialogButtonBox.StandardButtons: ...
    Abort: ClassVar[QDialogButtonBox.StandardButton] = ...
    AcceptRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
    ActionRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
    AndroidLayout: ClassVar[QDialogButtonBox.ButtonLayout] = ...
    Apply: ClassVar[QDialogButtonBox.StandardButton] = ...
    ApplyRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
    Cancel: ClassVar[QDialogButtonBox.StandardButton] = ...
    Close: ClassVar[QDialogButtonBox.StandardButton] = ...
    DestructiveRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
    Discard: ClassVar[QDialogButtonBox.StandardButton] = ...
    FirstButton: ClassVar[QDialogButtonBox.StandardButton] = ...
    GnomeLayout: ClassVar[QDialogButtonBox.ButtonLayout] = ...
    Help: ClassVar[QDialogButtonBox.StandardButton] = ...
    HelpRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
    Ignore: ClassVar[QDialogButtonBox.StandardButton] = ...
    InvalidRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
    KdeLayout: ClassVar[QDialogButtonBox.ButtonLayout] = ...
    LastButton: ClassVar[QDialogButtonBox.StandardButton] = ...
    MacLayout: ClassVar[QDialogButtonBox.ButtonLayout] = ...
    NRoles: ClassVar[QDialogButtonBox.ButtonRole] = ...
    No: ClassVar[QDialogButtonBox.StandardButton] = ...
    NoButton: ClassVar[QDialogButtonBox.StandardButton] = ...
    NoRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
    NoToAll: ClassVar[QDialogButtonBox.StandardButton] = ...
    Ok: ClassVar[QDialogButtonBox.StandardButton] = ...
    Open: ClassVar[QDialogButtonBox.StandardButton] = ...
    RejectRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
    Reset: ClassVar[QDialogButtonBox.StandardButton] = ...
    ResetRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
    RestoreDefaults: ClassVar[QDialogButtonBox.StandardButton] = ...
    Retry: ClassVar[QDialogButtonBox.StandardButton] = ...
    Save: ClassVar[QDialogButtonBox.StandardButton] = ...
    SaveAll: ClassVar[QDialogButtonBox.StandardButton] = ...
    WinLayout: ClassVar[QDialogButtonBox.ButtonLayout] = ...
    Yes: ClassVar[QDialogButtonBox.StandardButton] = ...
    YesRole: ClassVar[QDialogButtonBox.ButtonRole] = ...
    YesToAll: ClassVar[QDialogButtonBox.StandardButton] = ...
    accepted: ClassVar[PySide2.QtCore.Signal] = ...
    clicked: ClassVar[PySide2.QtCore.Signal] = ...
    helpRequested: ClassVar[PySide2.QtCore.Signal] = ...
    rejected: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, buttons: typing.Union[QDialogButtonBox.StandardButtons,QDialogButtonBox.StandardButton], orientation: PySide2.QtCore.Qt.Orientation, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., centerButtons: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., helpRequested: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., standardButtons: typing.Union[QDialogButtonBox.StandardButtons,QDialogButtonBox.StandardButton] = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, buttons: typing.Union[QDialogButtonBox.StandardButtons,QDialogButtonBox.StandardButton], parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., centerButtons: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., helpRequested: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., orientation: PySide2.QtCore.Qt.Orientation = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., standardButtons: typing.Union[QDialogButtonBox.StandardButtons,QDialogButtonBox.StandardButton] = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, orientation: PySide2.QtCore.Qt.Orientation, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., centerButtons: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., helpRequested: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., standardButtons: typing.Union[QDialogButtonBox.StandardButtons,QDialogButtonBox.StandardButton] = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., centerButtons: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., helpRequested: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., orientation: PySide2.QtCore.Qt.Orientation = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., standardButtons: typing.Union[QDialogButtonBox.StandardButtons,QDialogButtonBox.StandardButton] = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def addButton(self, button: QAbstractButton, role: QDialogButtonBox.ButtonRole) -> None: ...
    @overload
    def addButton(self, button: QDialogButtonBox.StandardButton) -> QPushButton: ...
    @overload
    def addButton(self, text: str, role: QDialogButtonBox.ButtonRole) -> QPushButton: ...
    def button(self, which: QDialogButtonBox.StandardButton) -> QPushButton: ...
    def buttonRole(self, button: QAbstractButton) -> QDialogButtonBox.ButtonRole: ...
    def buttons(self) -> typing.List[QAbstractButton]: ...
    def centerButtons(self) -> bool: ...
    def changeEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def clear(self) -> None: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def orientation(self) -> PySide2.QtCore.Qt.Orientation: ...
    def removeButton(self, button: QAbstractButton) -> None: ...
    def setCenterButtons(self, center: bool) -> None: ...
    def setOrientation(self, orientation: PySide2.QtCore.Qt.Orientation) -> None: ...
    def setStandardButtons(self, buttons: typing.Union[QDialogButtonBox.StandardButtons,QDialogButtonBox.StandardButton]) -> None: ...
    def standardButton(self, button: QAbstractButton) -> QDialogButtonBox.StandardButton: ...
    def standardButtons(self) -> typing.Union[QDialogButtonBox.StandardButtons,QDialogButtonBox.StandardButton]: ...

class QDirModel(PySide2.QtCore.QAbstractItemModel):
    class Roles:
        FileIconRole: ClassVar[QDirModel.Roles] = ...
        FileNameRole: ClassVar[QDirModel.Roles] = ...
        FilePathRole: ClassVar[QDirModel.Roles] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QDirModel.Roles: ...
        def __and__(self, other: typing.SupportsInt) -> QDirModel.Roles: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QDirModel.Roles: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QDirModel.Roles: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QDirModel.Roles: ...
        def __rand__(self, other: typing.SupportsInt) -> QDirModel.Roles: ...
        def __rmul__(self, other: typing.SupportsInt) -> QDirModel.Roles: ...
        def __ror__(self, other: typing.SupportsInt) -> QDirModel.Roles: ...
        def __rsub__(self, other: typing.SupportsInt) -> QDirModel.Roles: ...
        def __rxor__(self, other: typing.SupportsInt) -> QDirModel.Roles: ...
        def __sub__(self, other: typing.SupportsInt) -> QDirModel.Roles: ...
        def __xor__(self, other: typing.SupportsInt) -> QDirModel.Roles: ...
    FileIconRole: ClassVar[QDirModel.Roles] = ...
    FileNameRole: ClassVar[QDirModel.Roles] = ...
    FilePathRole: ClassVar[QDirModel.Roles] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, nameFilters: typing.Sequence[str], filters: typing.Union[PySide2.QtCore.QDir.Filters,PySide2.QtCore.QDir.Filter], sort: typing.Union[PySide2.QtCore.QDir.SortFlags,PySide2.QtCore.QDir.SortFlag], parent: typing.Union[PySide2.QtCore.QObject,None] = ..., columnsAboutToBeInserted: typing.Callable = ..., columnsAboutToBeMoved: typing.Callable = ..., columnsAboutToBeRemoved: typing.Callable = ..., columnsInserted: typing.Callable = ..., columnsMoved: typing.Callable = ..., columnsRemoved: typing.Callable = ..., dataChanged: typing.Callable = ..., destroyed: typing.Callable = ..., headerDataChanged: typing.Callable = ..., layoutAboutToBeChanged: typing.Callable = ..., layoutChanged: typing.Callable = ..., lazyChildCount: bool = ..., modelAboutToBeReset: typing.Callable = ..., modelReset: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., readOnly: bool = ..., resolveSymlinks: bool = ..., rowsAboutToBeInserted: typing.Callable = ..., rowsAboutToBeMoved: typing.Callable = ..., rowsAboutToBeRemoved: typing.Callable = ..., rowsInserted: typing.Callable = ..., rowsMoved: typing.Callable = ..., rowsRemoved: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., columnsAboutToBeInserted: typing.Callable = ..., columnsAboutToBeMoved: typing.Callable = ..., columnsAboutToBeRemoved: typing.Callable = ..., columnsInserted: typing.Callable = ..., columnsMoved: typing.Callable = ..., columnsRemoved: typing.Callable = ..., dataChanged: typing.Callable = ..., destroyed: typing.Callable = ..., headerDataChanged: typing.Callable = ..., layoutAboutToBeChanged: typing.Callable = ..., layoutChanged: typing.Callable = ..., lazyChildCount: bool = ..., modelAboutToBeReset: typing.Callable = ..., modelReset: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., readOnly: bool = ..., resolveSymlinks: bool = ..., rowsAboutToBeInserted: typing.Callable = ..., rowsAboutToBeMoved: typing.Callable = ..., rowsAboutToBeRemoved: typing.Callable = ..., rowsInserted: typing.Callable = ..., rowsMoved: typing.Callable = ..., rowsRemoved: typing.Callable = ...) -> None: ...
    def columnCount(self, parent: PySide2.QtCore.QModelIndex = ...) -> int: ...
    def data(self, index: PySide2.QtCore.QModelIndex, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> typing.Any: ...
    def dropMimeData(self, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction, row: int, column: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def fileIcon(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtGui.QIcon: ...
    def fileInfo(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QFileInfo: ...
    def fileName(self, index: PySide2.QtCore.QModelIndex) -> str: ...
    def filePath(self, index: PySide2.QtCore.QModelIndex) -> str: ...
    def filter(self) -> typing.Union[PySide2.QtCore.QDir.Filters,PySide2.QtCore.QDir.Filter]: ...
    def flags(self, index: PySide2.QtCore.QModelIndex) -> typing.Union[PySide2.QtCore.Qt.ItemFlags,PySide2.QtCore.Qt.ItemFlag]: ...
    def hasChildren(self, index: PySide2.QtCore.QModelIndex = ...) -> bool: ...
    def headerData(self, section: int, orientation: PySide2.QtCore.Qt.Orientation, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> typing.Any: ...
    def iconProvider(self) -> QFileIconProvider: ...
    @overload
    def index(self, path: str, column: int = ...) -> PySide2.QtCore.QModelIndex: ...
    @overload
    def index(self, row: int, column: int, parent: PySide2.QtCore.QModelIndex = ...) -> PySide2.QtCore.QModelIndex: ...
    def isDir(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def isReadOnly(self) -> bool: ...
    def lazyChildCount(self) -> bool: ...
    def mimeData(self, indexes: typing.List[int]) -> PySide2.QtCore.QMimeData: ...
    def mimeTypes(self) -> typing.List[str]: ...
    def mkdir(self, parent: PySide2.QtCore.QModelIndex, name: str) -> PySide2.QtCore.QModelIndex: ...
    def nameFilters(self) -> typing.List[str]: ...
    @overload
    def parent(self) -> PySide2.QtCore.QObject: ...
    @overload
    def parent(self, child: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def refresh(self, parent: PySide2.QtCore.QModelIndex = ...) -> None: ...
    def remove(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def resolveSymlinks(self) -> bool: ...
    def rmdir(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def rowCount(self, parent: PySide2.QtCore.QModelIndex = ...) -> int: ...
    def setData(self, index: PySide2.QtCore.QModelIndex, value: typing.Any, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> bool: ...
    def setFilter(self, filters: typing.Union[PySide2.QtCore.QDir.Filters,PySide2.QtCore.QDir.Filter]) -> None: ...
    def setIconProvider(self, provider: QFileIconProvider) -> None: ...
    def setLazyChildCount(self, enable: bool) -> None: ...
    def setNameFilters(self, filters: typing.Sequence[str]) -> None: ...
    def setReadOnly(self, enable: bool) -> None: ...
    def setResolveSymlinks(self, enable: bool) -> None: ...
    def setSorting(self, sort: typing.Union[PySide2.QtCore.QDir.SortFlags,PySide2.QtCore.QDir.SortFlag]) -> None: ...
    def sort(self, column: int, order: PySide2.QtCore.Qt.SortOrder = ...) -> None: ...
    def sorting(self) -> typing.Union[PySide2.QtCore.QDir.SortFlags,PySide2.QtCore.QDir.SortFlag]: ...
    def supportedDropActions(self) -> typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction]: ...

class QDockWidget(QWidget):
    class DockWidgetFeature:
        AllDockWidgetFeatures: ClassVar[QDockWidget.DockWidgetFeature] = ...
        DockWidgetClosable: ClassVar[QDockWidget.DockWidgetFeature] = ...
        DockWidgetFeatureMask: ClassVar[QDockWidget.DockWidgetFeature] = ...
        DockWidgetFloatable: ClassVar[QDockWidget.DockWidgetFeature] = ...
        DockWidgetMovable: ClassVar[QDockWidget.DockWidgetFeature] = ...
        DockWidgetVerticalTitleBar: ClassVar[QDockWidget.DockWidgetFeature] = ...
        NoDockWidgetFeatures: ClassVar[QDockWidget.DockWidgetFeature] = ...
        Reserved: ClassVar[QDockWidget.DockWidgetFeature] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QDockWidget.DockWidgetFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QDockWidget.DockWidgetFeature: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QDockWidget.DockWidgetFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QDockWidget.DockWidgetFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QDockWidget.DockWidgetFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QDockWidget.DockWidgetFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QDockWidget.DockWidgetFeatures: ...

    class DockWidgetFeatures:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QDockWidget.DockWidgetFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QDockWidget.DockWidgetFeatures: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QDockWidget.DockWidgetFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QDockWidget.DockWidgetFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QDockWidget.DockWidgetFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QDockWidget.DockWidgetFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QDockWidget.DockWidgetFeatures: ...
    AllDockWidgetFeatures: ClassVar[QDockWidget.DockWidgetFeature] = ...
    DockWidgetClosable: ClassVar[QDockWidget.DockWidgetFeature] = ...
    DockWidgetFeatureMask: ClassVar[QDockWidget.DockWidgetFeature] = ...
    DockWidgetFloatable: ClassVar[QDockWidget.DockWidgetFeature] = ...
    DockWidgetMovable: ClassVar[QDockWidget.DockWidgetFeature] = ...
    DockWidgetVerticalTitleBar: ClassVar[QDockWidget.DockWidgetFeature] = ...
    NoDockWidgetFeatures: ClassVar[QDockWidget.DockWidgetFeature] = ...
    Reserved: ClassVar[QDockWidget.DockWidgetFeature] = ...
    allowedAreasChanged: ClassVar[PySide2.QtCore.Signal] = ...
    dockLocationChanged: ClassVar[PySide2.QtCore.Signal] = ...
    featuresChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    topLevelChanged: ClassVar[PySide2.QtCore.Signal] = ...
    visibilityChanged: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., allowedAreas: typing.Union[PySide2.QtCore.Qt.DockWidgetAreas,PySide2.QtCore.Qt.DockWidgetArea] = ..., allowedAreasChanged: typing.Callable = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., dockLocationChanged: typing.Callable = ..., enabled: bool = ..., features: typing.Union[QDockWidget.DockWidgetFeatures,QDockWidget.DockWidgetFeature] = ..., featuresChanged: typing.Callable = ..., floating: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., topLevelChanged: typing.Callable = ..., updatesEnabled: bool = ..., visibilityChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, title: str, parent: typing.Union[QWidget,None] = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., allowedAreas: typing.Union[PySide2.QtCore.Qt.DockWidgetAreas,PySide2.QtCore.Qt.DockWidgetArea] = ..., allowedAreasChanged: typing.Callable = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., dockLocationChanged: typing.Callable = ..., enabled: bool = ..., features: typing.Union[QDockWidget.DockWidgetFeatures,QDockWidget.DockWidgetFeature] = ..., featuresChanged: typing.Callable = ..., floating: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., topLevelChanged: typing.Callable = ..., updatesEnabled: bool = ..., visibilityChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def allowedAreas(self) -> typing.Union[PySide2.QtCore.Qt.DockWidgetAreas,PySide2.QtCore.Qt.DockWidgetArea]: ...
    def changeEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def closeEvent(self, event: PySide2.QtGui.QCloseEvent) -> None: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def features(self) -> typing.Union[QDockWidget.DockWidgetFeatures,QDockWidget.DockWidgetFeature]: ...
    def initStyleOption(self, option: QStyleOptionDockWidget) -> None: ...
    def isAreaAllowed(self, area: PySide2.QtCore.Qt.DockWidgetArea) -> bool: ...
    def isFloating(self) -> bool: ...
    def paintEvent(self, event: PySide2.QtGui.QPaintEvent) -> None: ...
    def setAllowedAreas(self, areas: typing.Union[PySide2.QtCore.Qt.DockWidgetAreas,PySide2.QtCore.Qt.DockWidgetArea]) -> None: ...
    def setFeatures(self, features: typing.Union[QDockWidget.DockWidgetFeatures,QDockWidget.DockWidgetFeature]) -> None: ...
    def setFloating(self, floating: bool) -> None: ...
    def setTitleBarWidget(self, widget: QWidget) -> None: ...
    def setWidget(self, widget: QWidget) -> None: ...
    def titleBarWidget(self) -> QWidget: ...
    def toggleViewAction(self) -> QAction: ...
    def widget(self) -> QWidget: ...

class QDoubleSpinBox(QAbstractSpinBox):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    textChanged: ClassVar[PySide2.QtCore.Signal] = ...
    valueChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., accelerated: bool = ..., acceptDrops: bool = ..., acceptableInput: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., buttonSymbols: QDoubleSpinBox.ButtonSymbols = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., cleanText: str = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., correctionMode: QDoubleSpinBox.CorrectionMode = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., decimals: int = ..., destroyed: typing.Callable = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., keyboardTracking: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximum: float = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimum: float = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., prefix: str = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., showGroupSeparator: bool = ..., singleStep: float = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., specialValueText: str = ..., statusTip: str = ..., stepType: QDoubleSpinBox.StepType = ..., styleSheet: str = ..., suffix: str = ..., tabletTracking: bool = ..., text: str = ..., textChanged: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., value: float = ..., valueChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wrapping: bool = ..., x: int = ..., y: int = ...) -> None: ...
    def cleanText(self) -> str: ...
    def decimals(self) -> int: ...
    def fixup(self, str: str) -> None: ...
    def maximum(self) -> float: ...
    def minimum(self) -> float: ...
    def prefix(self) -> str: ...
    def setDecimals(self, prec: int) -> None: ...
    def setMaximum(self, max: float) -> None: ...
    def setMinimum(self, min: float) -> None: ...
    def setPrefix(self, prefix: str) -> None: ...
    def setRange(self, min: float, max: float) -> None: ...
    def setSingleStep(self, val: float) -> None: ...
    def setStepType(self, stepType: QAbstractSpinBox.StepType) -> None: ...
    def setSuffix(self, suffix: str) -> None: ...
    def setValue(self, val: float) -> None: ...
    def singleStep(self) -> float: ...
    def stepType(self) -> QAbstractSpinBox.StepType: ...
    def suffix(self) -> str: ...
    def textFromValue(self, val: float) -> str: ...
    def validate(self, input: str, pos: int) -> PySide2.QtGui.QValidator.State: ...
    def value(self) -> float: ...
    def valueFromText(self, text: str) -> float: ...

class QErrorMessage(QDialog):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., finished: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeGripEnabled: bool = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def changeEvent(self, e: PySide2.QtCore.QEvent) -> None: ...
    def done(self, arg__1: int) -> None: ...
    @classmethod
    def qtHandler(cls) -> QErrorMessage: ...
    @overload
    def showMessage(self, message: str) -> None: ...
    @overload
    def showMessage(self, message: str, type: str) -> None: ...

class QFileDialog(QDialog):
    class AcceptMode:
        AcceptOpen: ClassVar[QFileDialog.AcceptMode] = ...
        AcceptSave: ClassVar[QFileDialog.AcceptMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFileDialog.AcceptMode: ...
        def __and__(self, other: typing.SupportsInt) -> QFileDialog.AcceptMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFileDialog.AcceptMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFileDialog.AcceptMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFileDialog.AcceptMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QFileDialog.AcceptMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFileDialog.AcceptMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QFileDialog.AcceptMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFileDialog.AcceptMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFileDialog.AcceptMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QFileDialog.AcceptMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QFileDialog.AcceptMode: ...

    class DialogLabel:
        Accept: ClassVar[QFileDialog.DialogLabel] = ...
        FileName: ClassVar[QFileDialog.DialogLabel] = ...
        FileType: ClassVar[QFileDialog.DialogLabel] = ...
        LookIn: ClassVar[QFileDialog.DialogLabel] = ...
        Reject: ClassVar[QFileDialog.DialogLabel] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFileDialog.DialogLabel: ...
        def __and__(self, other: typing.SupportsInt) -> QFileDialog.DialogLabel: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFileDialog.DialogLabel: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFileDialog.DialogLabel: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFileDialog.DialogLabel: ...
        def __rand__(self, other: typing.SupportsInt) -> QFileDialog.DialogLabel: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFileDialog.DialogLabel: ...
        def __ror__(self, other: typing.SupportsInt) -> QFileDialog.DialogLabel: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFileDialog.DialogLabel: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFileDialog.DialogLabel: ...
        def __sub__(self, other: typing.SupportsInt) -> QFileDialog.DialogLabel: ...
        def __xor__(self, other: typing.SupportsInt) -> QFileDialog.DialogLabel: ...

    class FileMode:
        AnyFile: ClassVar[QFileDialog.FileMode] = ...
        Directory: ClassVar[QFileDialog.FileMode] = ...
        DirectoryOnly: ClassVar[QFileDialog.FileMode] = ...
        ExistingFile: ClassVar[QFileDialog.FileMode] = ...
        ExistingFiles: ClassVar[QFileDialog.FileMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFileDialog.FileMode: ...
        def __and__(self, other: typing.SupportsInt) -> QFileDialog.FileMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFileDialog.FileMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFileDialog.FileMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFileDialog.FileMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QFileDialog.FileMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFileDialog.FileMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QFileDialog.FileMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFileDialog.FileMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFileDialog.FileMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QFileDialog.FileMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QFileDialog.FileMode: ...

    class Option:
        DontConfirmOverwrite: ClassVar[QFileDialog.Option] = ...
        DontResolveSymlinks: ClassVar[QFileDialog.Option] = ...
        DontUseCustomDirectoryIcons: ClassVar[QFileDialog.Option] = ...
        DontUseNativeDialog: ClassVar[QFileDialog.Option] = ...
        DontUseSheet: ClassVar[QFileDialog.Option] = ...
        HideNameFilterDetails: ClassVar[QFileDialog.Option] = ...
        ReadOnly: ClassVar[QFileDialog.Option] = ...
        ShowDirsOnly: ClassVar[QFileDialog.Option] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QFileDialog.Options: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QFileDialog.Option: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFileDialog.Options: ...
        def __rand__(self, other: typing.SupportsInt) -> QFileDialog.Options: ...
        def __ror__(self, other: typing.SupportsInt) -> QFileDialog.Options: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFileDialog.Options: ...
        def __xor__(self, other: typing.SupportsInt) -> QFileDialog.Options: ...

    class Options:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QFileDialog.Options: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QFileDialog.Options: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFileDialog.Options: ...
        def __rand__(self, other: typing.SupportsInt) -> QFileDialog.Options: ...
        def __ror__(self, other: typing.SupportsInt) -> QFileDialog.Options: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFileDialog.Options: ...
        def __xor__(self, other: typing.SupportsInt) -> QFileDialog.Options: ...

    class ViewMode:
        Detail: ClassVar[QFileDialog.ViewMode] = ...
        List: ClassVar[QFileDialog.ViewMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFileDialog.ViewMode: ...
        def __and__(self, other: typing.SupportsInt) -> QFileDialog.ViewMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFileDialog.ViewMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFileDialog.ViewMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFileDialog.ViewMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QFileDialog.ViewMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFileDialog.ViewMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QFileDialog.ViewMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFileDialog.ViewMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFileDialog.ViewMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QFileDialog.ViewMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QFileDialog.ViewMode: ...
    Accept: ClassVar[QFileDialog.DialogLabel] = ...
    AcceptOpen: ClassVar[QFileDialog.AcceptMode] = ...
    AcceptSave: ClassVar[QFileDialog.AcceptMode] = ...
    AnyFile: ClassVar[QFileDialog.FileMode] = ...
    Detail: ClassVar[QFileDialog.ViewMode] = ...
    Directory: ClassVar[QFileDialog.FileMode] = ...
    DirectoryOnly: ClassVar[QFileDialog.FileMode] = ...
    DontConfirmOverwrite: ClassVar[QFileDialog.Option] = ...
    DontResolveSymlinks: ClassVar[QFileDialog.Option] = ...
    DontUseCustomDirectoryIcons: ClassVar[QFileDialog.Option] = ...
    DontUseNativeDialog: ClassVar[QFileDialog.Option] = ...
    DontUseSheet: ClassVar[QFileDialog.Option] = ...
    ExistingFile: ClassVar[QFileDialog.FileMode] = ...
    ExistingFiles: ClassVar[QFileDialog.FileMode] = ...
    FileName: ClassVar[QFileDialog.DialogLabel] = ...
    FileType: ClassVar[QFileDialog.DialogLabel] = ...
    HideNameFilterDetails: ClassVar[QFileDialog.Option] = ...
    List: ClassVar[QFileDialog.ViewMode] = ...
    LookIn: ClassVar[QFileDialog.DialogLabel] = ...
    ReadOnly: ClassVar[QFileDialog.Option] = ...
    Reject: ClassVar[QFileDialog.DialogLabel] = ...
    ShowDirsOnly: ClassVar[QFileDialog.Option] = ...
    currentChanged: ClassVar[PySide2.QtCore.Signal] = ...
    currentUrlChanged: ClassVar[PySide2.QtCore.Signal] = ...
    directoryEntered: ClassVar[PySide2.QtCore.Signal] = ...
    directoryUrlEntered: ClassVar[PySide2.QtCore.Signal] = ...
    fileSelected: ClassVar[PySide2.QtCore.Signal] = ...
    filesSelected: ClassVar[PySide2.QtCore.Signal] = ...
    filterSelected: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    urlSelected: ClassVar[PySide2.QtCore.Signal] = ...
    urlsSelected: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, parent: typing.Optional[QWidget], f: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType], acceptDrops: bool = ..., acceptMode: QFileDialog.AcceptMode = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., confirmOverwrite: bool = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., currentChanged: typing.Callable = ..., currentUrlChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., defaultSuffix: str = ..., destroyed: typing.Callable = ..., directoryEntered: typing.Callable = ..., directoryUrlEntered: typing.Callable = ..., enabled: bool = ..., fileMode: QFileDialog.FileMode = ..., fileSelected: typing.Callable = ..., filesSelected: typing.Callable = ..., filterSelected: typing.Callable = ..., finished: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., nameFilterDetailsVisible: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., options: typing.Union[QFileDialog.Options,QFileDialog.Option] = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., resolveSymlinks: bool = ..., size: PySide2.QtCore.QSize = ..., sizeGripEnabled: bool = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., supportedSchemes: None = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., urlSelected: typing.Callable = ..., urlsSelected: typing.Callable = ..., viewMode: QFileDialog.ViewMode = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., caption: str = ..., directory: str = ..., filter: str = ..., acceptDrops: bool = ..., acceptMode: QFileDialog.AcceptMode = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., confirmOverwrite: bool = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., currentChanged: typing.Callable = ..., currentUrlChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., defaultSuffix: str = ..., destroyed: typing.Callable = ..., directoryEntered: typing.Callable = ..., directoryUrlEntered: typing.Callable = ..., enabled: bool = ..., fileMode: QFileDialog.FileMode = ..., fileSelected: typing.Callable = ..., filesSelected: typing.Callable = ..., filterSelected: typing.Callable = ..., finished: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., nameFilterDetailsVisible: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., options: typing.Union[QFileDialog.Options,QFileDialog.Option] = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., resolveSymlinks: bool = ..., size: PySide2.QtCore.QSize = ..., sizeGripEnabled: bool = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., supportedSchemes: None = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., urlSelected: typing.Callable = ..., urlsSelected: typing.Callable = ..., viewMode: QFileDialog.ViewMode = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def accept(self) -> None: ...
    def acceptMode(self) -> QFileDialog.AcceptMode: ...
    def changeEvent(self, e: PySide2.QtCore.QEvent) -> None: ...
    def confirmOverwrite(self) -> bool: ...
    def defaultSuffix(self) -> str: ...
    def directory(self) -> PySide2.QtCore.QDir: ...
    def directoryUrl(self) -> PySide2.QtCore.QUrl: ...
    def done(self, result: int) -> None: ...
    def fileMode(self) -> QFileDialog.FileMode: ...
    def filter(self) -> typing.Union[PySide2.QtCore.QDir.Filters,PySide2.QtCore.QDir.Filter]: ...
    @classmethod
    def getExistingDirectory(cls, parent: typing.Union[QWidget,None] = ..., caption: str = ..., dir: str = ..., options: typing.Union[QFileDialog.Options,QFileDialog.Option] = ...) -> str: ...
    @classmethod
    def getExistingDirectoryUrl(cls, parent: typing.Union[QWidget,None] = ..., caption: str = ..., dir: PySide2.QtCore.QUrl = ..., options: typing.Union[QFileDialog.Options,QFileDialog.Option] = ..., supportedSchemes: typing.Sequence[str] = ...) -> PySide2.QtCore.QUrl: ...
    @classmethod
    def getOpenFileName(cls, parent: typing.Union[QWidget,None] = ..., caption: str = ..., dir: str = ..., filter: str = ..., options: typing.Union[QFileDialog.Options,QFileDialog.Option] = ...) -> typing.Tuple[str,str]: ...
    @classmethod
    def getOpenFileNames(cls, parent: typing.Union[QWidget,None] = ..., caption: str = ..., dir: str = ..., filter: str = ..., options: typing.Union[QFileDialog.Options,QFileDialog.Option] = ...) -> typing.Tuple[typing.List[str],str]: ...
    @classmethod
    def getOpenFileUrl(cls, parent: typing.Union[QWidget,None] = ..., caption: str = ..., dir: PySide2.QtCore.QUrl = ..., filter: str = ..., options: typing.Union[QFileDialog.Options,QFileDialog.Option] = ..., supportedSchemes: typing.Sequence[str] = ...) -> typing.Tuple[PySide2.QtCore.QUrl,str]: ...
    @classmethod
    def getOpenFileUrls(cls, parent: typing.Union[QWidget,None] = ..., caption: str = ..., dir: PySide2.QtCore.QUrl = ..., filter: str = ..., options: typing.Union[QFileDialog.Options,QFileDialog.Option] = ..., supportedSchemes: typing.Sequence[str] = ...) -> typing.Tuple[typing.List[PySide2.QtCore.QUrl],str]: ...
    @classmethod
    def getSaveFileName(cls, parent: typing.Union[QWidget,None] = ..., caption: str = ..., dir: str = ..., filter: str = ..., options: typing.Union[QFileDialog.Options,QFileDialog.Option] = ...) -> typing.Tuple[str,str]: ...
    @classmethod
    def getSaveFileUrl(cls, parent: typing.Union[QWidget,None] = ..., caption: str = ..., dir: PySide2.QtCore.QUrl = ..., filter: str = ..., options: typing.Union[QFileDialog.Options,QFileDialog.Option] = ..., supportedSchemes: typing.Sequence[str] = ...) -> typing.Tuple[PySide2.QtCore.QUrl,str]: ...
    def history(self) -> typing.List[str]: ...
    def iconProvider(self) -> QFileIconProvider: ...
    def isNameFilterDetailsVisible(self) -> bool: ...
    def isReadOnly(self) -> bool: ...
    def itemDelegate(self) -> QAbstractItemDelegate: ...
    def labelText(self, label: QFileDialog.DialogLabel) -> str: ...
    def mimeTypeFilters(self) -> typing.List[str]: ...
    def nameFilters(self) -> typing.List[str]: ...
    @overload
    def open(self) -> None: ...
    @overload
    def open(self, receiver: PySide2.QtCore.QObject, member: bytes) -> None: ...
    def options(self) -> typing.Union[QFileDialog.Options,QFileDialog.Option]: ...
    def proxyModel(self) -> PySide2.QtCore.QAbstractProxyModel: ...
    def resolveSymlinks(self) -> bool: ...
    def restoreState(self, state: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> bool: ...
    @classmethod
    def saveFileContent(cls, fileContent: typing.Union[PySide2.QtCore.QByteArray,bytes], fileNameHint: str = ...) -> None: ...
    def saveState(self) -> PySide2.QtCore.QByteArray: ...
    def selectFile(self, filename: str) -> None: ...
    def selectMimeTypeFilter(self, filter: str) -> None: ...
    def selectNameFilter(self, filter: str) -> None: ...
    def selectUrl(self, url: PySide2.QtCore.QUrl) -> None: ...
    def selectedFiles(self) -> typing.List[str]: ...
    def selectedMimeTypeFilter(self) -> str: ...
    def selectedNameFilter(self) -> str: ...
    def selectedUrls(self) -> typing.List[PySide2.QtCore.QUrl]: ...
    def setAcceptMode(self, mode: QFileDialog.AcceptMode) -> None: ...
    def setConfirmOverwrite(self, enabled: bool) -> None: ...
    def setDefaultSuffix(self, suffix: str) -> None: ...
    @overload
    def setDirectory(self, directory: PySide2.QtCore.QDir) -> None: ...
    @overload
    def setDirectory(self, directory: str) -> None: ...
    def setDirectoryUrl(self, directory: PySide2.QtCore.QUrl) -> None: ...
    def setFileMode(self, mode: QFileDialog.FileMode) -> None: ...
    def setFilter(self, filters: typing.Union[PySide2.QtCore.QDir.Filters,PySide2.QtCore.QDir.Filter]) -> None: ...
    def setHistory(self, paths: typing.Sequence[str]) -> None: ...
    def setIconProvider(self, provider: QFileIconProvider) -> None: ...
    def setItemDelegate(self, delegate: QAbstractItemDelegate) -> None: ...
    def setLabelText(self, label: QFileDialog.DialogLabel, text: str) -> None: ...
    def setMimeTypeFilters(self, filters: typing.Sequence[str]) -> None: ...
    def setNameFilter(self, filter: str) -> None: ...
    def setNameFilterDetailsVisible(self, enabled: bool) -> None: ...
    def setNameFilters(self, filters: typing.Sequence[str]) -> None: ...
    def setOption(self, option: QFileDialog.Option, on: bool = ...) -> None: ...
    def setOptions(self, options: typing.Union[QFileDialog.Options,QFileDialog.Option]) -> None: ...
    def setProxyModel(self, model: PySide2.QtCore.QAbstractProxyModel) -> None: ...
    def setReadOnly(self, enabled: bool) -> None: ...
    def setResolveSymlinks(self, enabled: bool) -> None: ...
    def setSidebarUrls(self, urls: typing.Sequence[PySide2.QtCore.QUrl]) -> None: ...
    def setSupportedSchemes(self, schemes: typing.Sequence[str]) -> None: ...
    def setViewMode(self, mode: QFileDialog.ViewMode) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def sidebarUrls(self) -> typing.List[PySide2.QtCore.QUrl]: ...
    def supportedSchemes(self) -> typing.List[str]: ...
    def testOption(self, option: QFileDialog.Option) -> bool: ...
    def viewMode(self) -> QFileDialog.ViewMode: ...

class QFileIconProvider(shiboken2.Object):
    class IconType:
        Computer: ClassVar[QFileIconProvider.IconType] = ...
        Desktop: ClassVar[QFileIconProvider.IconType] = ...
        Drive: ClassVar[QFileIconProvider.IconType] = ...
        File: ClassVar[QFileIconProvider.IconType] = ...
        Folder: ClassVar[QFileIconProvider.IconType] = ...
        Network: ClassVar[QFileIconProvider.IconType] = ...
        Trashcan: ClassVar[QFileIconProvider.IconType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFileIconProvider.IconType: ...
        def __and__(self, other: typing.SupportsInt) -> QFileIconProvider.IconType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFileIconProvider.IconType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFileIconProvider.IconType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFileIconProvider.IconType: ...
        def __rand__(self, other: typing.SupportsInt) -> QFileIconProvider.IconType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFileIconProvider.IconType: ...
        def __ror__(self, other: typing.SupportsInt) -> QFileIconProvider.IconType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFileIconProvider.IconType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFileIconProvider.IconType: ...
        def __sub__(self, other: typing.SupportsInt) -> QFileIconProvider.IconType: ...
        def __xor__(self, other: typing.SupportsInt) -> QFileIconProvider.IconType: ...

    class Option:
        DontUseCustomDirectoryIcons: ClassVar[QFileIconProvider.Option] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QFileIconProvider.Options: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QFileIconProvider.Option: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFileIconProvider.Options: ...
        def __rand__(self, other: typing.SupportsInt) -> QFileIconProvider.Options: ...
        def __ror__(self, other: typing.SupportsInt) -> QFileIconProvider.Options: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFileIconProvider.Options: ...
        def __xor__(self, other: typing.SupportsInt) -> QFileIconProvider.Options: ...

    class Options:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QFileIconProvider.Options: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QFileIconProvider.Options: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFileIconProvider.Options: ...
        def __rand__(self, other: typing.SupportsInt) -> QFileIconProvider.Options: ...
        def __ror__(self, other: typing.SupportsInt) -> QFileIconProvider.Options: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFileIconProvider.Options: ...
        def __xor__(self, other: typing.SupportsInt) -> QFileIconProvider.Options: ...
    Computer: ClassVar[QFileIconProvider.IconType] = ...
    Desktop: ClassVar[QFileIconProvider.IconType] = ...
    DontUseCustomDirectoryIcons: ClassVar[QFileIconProvider.Option] = ...
    Drive: ClassVar[QFileIconProvider.IconType] = ...
    File: ClassVar[QFileIconProvider.IconType] = ...
    Folder: ClassVar[QFileIconProvider.IconType] = ...
    Network: ClassVar[QFileIconProvider.IconType] = ...
    Trashcan: ClassVar[QFileIconProvider.IconType] = ...
    def __init__(self) -> None: ...
    @overload
    def icon(self, info: PySide2.QtCore.QFileInfo) -> PySide2.QtGui.QIcon: ...
    @overload
    def icon(self, type: QFileIconProvider.IconType) -> PySide2.QtGui.QIcon: ...
    def options(self) -> typing.Union[QFileIconProvider.Options,QFileIconProvider.Option]: ...
    def setOptions(self, options: typing.Union[QFileIconProvider.Options,QFileIconProvider.Option]) -> None: ...
    def type(self, info: PySide2.QtCore.QFileInfo) -> str: ...

class QFileSystemModel(PySide2.QtCore.QAbstractItemModel):
    class Option:
        DontResolveSymlinks: ClassVar[QFileSystemModel.Option] = ...
        DontUseCustomDirectoryIcons: ClassVar[QFileSystemModel.Option] = ...
        DontWatchForChanges: ClassVar[QFileSystemModel.Option] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QFileSystemModel.Options: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QFileSystemModel.Option: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFileSystemModel.Options: ...
        def __rand__(self, other: typing.SupportsInt) -> QFileSystemModel.Options: ...
        def __ror__(self, other: typing.SupportsInt) -> QFileSystemModel.Options: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFileSystemModel.Options: ...
        def __xor__(self, other: typing.SupportsInt) -> QFileSystemModel.Options: ...

    class Options:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QFileSystemModel.Options: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QFileSystemModel.Options: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFileSystemModel.Options: ...
        def __rand__(self, other: typing.SupportsInt) -> QFileSystemModel.Options: ...
        def __ror__(self, other: typing.SupportsInt) -> QFileSystemModel.Options: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFileSystemModel.Options: ...
        def __xor__(self, other: typing.SupportsInt) -> QFileSystemModel.Options: ...

    class Roles:
        FileIconRole: ClassVar[QFileSystemModel.Roles] = ...
        FileNameRole: ClassVar[QFileSystemModel.Roles] = ...
        FilePathRole: ClassVar[QFileSystemModel.Roles] = ...
        FilePermissions: ClassVar[QFileSystemModel.Roles] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFileSystemModel.Roles: ...
        def __and__(self, other: typing.SupportsInt) -> QFileSystemModel.Roles: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFileSystemModel.Roles: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFileSystemModel.Roles: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFileSystemModel.Roles: ...
        def __rand__(self, other: typing.SupportsInt) -> QFileSystemModel.Roles: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFileSystemModel.Roles: ...
        def __ror__(self, other: typing.SupportsInt) -> QFileSystemModel.Roles: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFileSystemModel.Roles: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFileSystemModel.Roles: ...
        def __sub__(self, other: typing.SupportsInt) -> QFileSystemModel.Roles: ...
        def __xor__(self, other: typing.SupportsInt) -> QFileSystemModel.Roles: ...
    DontResolveSymlinks: ClassVar[QFileSystemModel.Option] = ...
    DontUseCustomDirectoryIcons: ClassVar[QFileSystemModel.Option] = ...
    DontWatchForChanges: ClassVar[QFileSystemModel.Option] = ...
    FileIconRole: ClassVar[QFileSystemModel.Roles] = ...
    FileNameRole: ClassVar[QFileSystemModel.Roles] = ...
    FilePathRole: ClassVar[QFileSystemModel.Roles] = ...
    FilePermissions: ClassVar[QFileSystemModel.Roles] = ...
    directoryLoaded: ClassVar[PySide2.QtCore.Signal] = ...
    fileRenamed: ClassVar[PySide2.QtCore.Signal] = ...
    rootPathChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., columnsAboutToBeInserted: typing.Callable = ..., columnsAboutToBeMoved: typing.Callable = ..., columnsAboutToBeRemoved: typing.Callable = ..., columnsInserted: typing.Callable = ..., columnsMoved: typing.Callable = ..., columnsRemoved: typing.Callable = ..., dataChanged: typing.Callable = ..., destroyed: typing.Callable = ..., directoryLoaded: typing.Callable = ..., fileRenamed: typing.Callable = ..., headerDataChanged: typing.Callable = ..., layoutAboutToBeChanged: typing.Callable = ..., layoutChanged: typing.Callable = ..., modelAboutToBeReset: typing.Callable = ..., modelReset: typing.Callable = ..., nameFilterDisables: bool = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., options: typing.Union[QFileSystemModel.Options,QFileSystemModel.Option] = ..., readOnly: bool = ..., resolveSymlinks: bool = ..., rootPathChanged: typing.Callable = ..., rowsAboutToBeInserted: typing.Callable = ..., rowsAboutToBeMoved: typing.Callable = ..., rowsAboutToBeRemoved: typing.Callable = ..., rowsInserted: typing.Callable = ..., rowsMoved: typing.Callable = ..., rowsRemoved: typing.Callable = ...) -> None: ...
    def canFetchMore(self, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def columnCount(self, parent: PySide2.QtCore.QModelIndex = ...) -> int: ...
    def data(self, index: PySide2.QtCore.QModelIndex, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> typing.Any: ...
    def dropMimeData(self, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction, row: int, column: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def fetchMore(self, parent: PySide2.QtCore.QModelIndex) -> None: ...
    def fileIcon(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtGui.QIcon: ...
    def fileInfo(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QFileInfo: ...
    def fileName(self, index: PySide2.QtCore.QModelIndex) -> str: ...
    def filePath(self, index: PySide2.QtCore.QModelIndex) -> str: ...
    def filter(self) -> typing.Union[PySide2.QtCore.QDir.Filters,PySide2.QtCore.QDir.Filter]: ...
    def flags(self, index: PySide2.QtCore.QModelIndex) -> typing.Union[PySide2.QtCore.Qt.ItemFlags,PySide2.QtCore.Qt.ItemFlag]: ...
    def hasChildren(self, parent: PySide2.QtCore.QModelIndex = ...) -> bool: ...
    def headerData(self, section: int, orientation: PySide2.QtCore.Qt.Orientation, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> typing.Any: ...
    def iconProvider(self) -> QFileIconProvider: ...
    @overload
    def index(self, path: str, column: int = ...) -> PySide2.QtCore.QModelIndex: ...
    @overload
    def index(self, row: int, column: int, parent: PySide2.QtCore.QModelIndex = ...) -> PySide2.QtCore.QModelIndex: ...
    def isDir(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def isReadOnly(self) -> bool: ...
    def lastModified(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QDateTime: ...
    def mimeData(self, indexes: typing.List[int]) -> PySide2.QtCore.QMimeData: ...
    def mimeTypes(self) -> typing.List[str]: ...
    def mkdir(self, parent: PySide2.QtCore.QModelIndex, name: str) -> PySide2.QtCore.QModelIndex: ...
    def myComputer(self, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> typing.Any: ...
    def nameFilterDisables(self) -> bool: ...
    def nameFilters(self) -> typing.List[str]: ...
    def options(self) -> typing.Union[QFileSystemModel.Options,QFileSystemModel.Option]: ...
    @overload
    def parent(self) -> PySide2.QtCore.QObject: ...
    @overload
    def parent(self, child: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def remove(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def resolveSymlinks(self) -> bool: ...
    def rmdir(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def rootDirectory(self) -> PySide2.QtCore.QDir: ...
    def rootPath(self) -> str: ...
    def rowCount(self, parent: PySide2.QtCore.QModelIndex = ...) -> int: ...
    def setData(self, index: PySide2.QtCore.QModelIndex, value: typing.Any, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> bool: ...
    def setFilter(self, filters: typing.Union[PySide2.QtCore.QDir.Filters,PySide2.QtCore.QDir.Filter]) -> None: ...
    def setIconProvider(self, provider: QFileIconProvider) -> None: ...
    def setNameFilterDisables(self, enable: bool) -> None: ...
    def setNameFilters(self, filters: typing.Sequence[str]) -> None: ...
    def setOption(self, option: QFileSystemModel.Option, on: bool = ...) -> None: ...
    def setOptions(self, options: typing.Union[QFileSystemModel.Options,QFileSystemModel.Option]) -> None: ...
    def setReadOnly(self, enable: bool) -> None: ...
    def setResolveSymlinks(self, enable: bool) -> None: ...
    def setRootPath(self, path: str) -> PySide2.QtCore.QModelIndex: ...
    def sibling(self, row: int, column: int, idx: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def size(self, index: PySide2.QtCore.QModelIndex) -> int: ...
    def sort(self, column: int, order: PySide2.QtCore.Qt.SortOrder = ...) -> None: ...
    def supportedDropActions(self) -> typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction]: ...
    def testOption(self, option: QFileSystemModel.Option) -> bool: ...
    def timerEvent(self, event: PySide2.QtCore.QTimerEvent) -> None: ...
    def type(self, index: PySide2.QtCore.QModelIndex) -> str: ...

class QFocusFrame(QWidget):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def eventFilter(self, arg__1: PySide2.QtCore.QObject, arg__2: PySide2.QtCore.QEvent) -> bool: ...
    def initStyleOption(self, option: QStyleOption) -> None: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def setWidget(self, widget: QWidget) -> None: ...
    def widget(self) -> QWidget: ...

class QFontComboBox(QComboBox):
    class FontFilter:
        AllFonts: ClassVar[QFontComboBox.FontFilter] = ...
        MonospacedFonts: ClassVar[QFontComboBox.FontFilter] = ...
        NonScalableFonts: ClassVar[QFontComboBox.FontFilter] = ...
        ProportionalFonts: ClassVar[QFontComboBox.FontFilter] = ...
        ScalableFonts: ClassVar[QFontComboBox.FontFilter] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QFontComboBox.FontFilters: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QFontComboBox.FontFilter: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFontComboBox.FontFilters: ...
        def __rand__(self, other: typing.SupportsInt) -> QFontComboBox.FontFilters: ...
        def __ror__(self, other: typing.SupportsInt) -> QFontComboBox.FontFilters: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFontComboBox.FontFilters: ...
        def __xor__(self, other: typing.SupportsInt) -> QFontComboBox.FontFilters: ...

    class FontFilters:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QFontComboBox.FontFilters: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QFontComboBox.FontFilters: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFontComboBox.FontFilters: ...
        def __rand__(self, other: typing.SupportsInt) -> QFontComboBox.FontFilters: ...
        def __ror__(self, other: typing.SupportsInt) -> QFontComboBox.FontFilters: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFontComboBox.FontFilters: ...
        def __xor__(self, other: typing.SupportsInt) -> QFontComboBox.FontFilters: ...
    AllFonts: ClassVar[QFontComboBox.FontFilter] = ...
    MonospacedFonts: ClassVar[QFontComboBox.FontFilter] = ...
    NonScalableFonts: ClassVar[QFontComboBox.FontFilter] = ...
    ProportionalFonts: ClassVar[QFontComboBox.FontFilter] = ...
    ScalableFonts: ClassVar[QFontComboBox.FontFilter] = ...
    currentFontChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., activated: typing.Callable = ..., autoCompletion: bool = ..., autoCompletionCaseSensitivity: PySide2.QtCore.Qt.CaseSensitivity = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., count: int = ..., currentData: object = ..., currentFont: PySide2.QtGui.QFont = ..., currentFontChanged: typing.Callable = ..., currentIndex: int = ..., currentIndexChanged: typing.Callable = ..., currentText: str = ..., currentTextChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., duplicatesEnabled: bool = ..., editTextChanged: typing.Callable = ..., editable: bool = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., fontFilters: typing.Union[QFontComboBox.FontFilters,QFontComboBox.FontFilter] = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., highlighted: typing.Callable = ..., iconSize: PySide2.QtCore.QSize = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., insertPolicy: QFontComboBox.InsertPolicy = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maxCount: int = ..., maxVisibleItems: int = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumContentsLength: int = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., modelColumn: int = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., placeholderText: str = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QFontComboBox.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., textActivated: typing.Callable = ..., textHighlighted: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., writingSystem: typing.Any = ..., x: int = ..., y: int = ...) -> None: ...
    def currentFont(self) -> PySide2.QtGui.QFont: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def fontFilters(self) -> typing.Union[QFontComboBox.FontFilters,QFontComboBox.FontFilter]: ...
    def setCurrentFont(self, f: PySide2.QtGui.QFont) -> None: ...
    def setFontFilters(self, filters: typing.Union[QFontComboBox.FontFilters,QFontComboBox.FontFilter]) -> None: ...
    def setWritingSystem(self, arg__1: PySide2.QtGui.QFontDatabase.WritingSystem) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def writingSystem(self) -> PySide2.QtGui.QFontDatabase.WritingSystem: ...

class QFontDialog(QDialog):
    class FontDialogOption:
        DontUseNativeDialog: ClassVar[QFontDialog.FontDialogOption] = ...
        MonospacedFonts: ClassVar[QFontDialog.FontDialogOption] = ...
        NoButtons: ClassVar[QFontDialog.FontDialogOption] = ...
        NonScalableFonts: ClassVar[QFontDialog.FontDialogOption] = ...
        ProportionalFonts: ClassVar[QFontDialog.FontDialogOption] = ...
        ScalableFonts: ClassVar[QFontDialog.FontDialogOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QFontDialog.FontDialogOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QFontDialog.FontDialogOption: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFontDialog.FontDialogOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QFontDialog.FontDialogOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QFontDialog.FontDialogOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFontDialog.FontDialogOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QFontDialog.FontDialogOptions: ...

    class FontDialogOptions:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QFontDialog.FontDialogOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QFontDialog.FontDialogOptions: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFontDialog.FontDialogOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QFontDialog.FontDialogOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QFontDialog.FontDialogOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFontDialog.FontDialogOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QFontDialog.FontDialogOptions: ...
    DontUseNativeDialog: ClassVar[QFontDialog.FontDialogOption] = ...
    MonospacedFonts: ClassVar[QFontDialog.FontDialogOption] = ...
    NoButtons: ClassVar[QFontDialog.FontDialogOption] = ...
    NonScalableFonts: ClassVar[QFontDialog.FontDialogOption] = ...
    ProportionalFonts: ClassVar[QFontDialog.FontDialogOption] = ...
    ScalableFonts: ClassVar[QFontDialog.FontDialogOption] = ...
    currentFontChanged: ClassVar[PySide2.QtCore.Signal] = ...
    fontSelected: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, initial: PySide2.QtGui.QFont, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., currentFont: PySide2.QtGui.QFont = ..., currentFontChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., finished: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., fontSelected: typing.Callable = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., options: typing.Union[QFontDialog.FontDialogOptions,QFontDialog.FontDialogOption] = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeGripEnabled: bool = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., currentFont: PySide2.QtGui.QFont = ..., currentFontChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., finished: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., fontSelected: typing.Callable = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., options: typing.Union[QFontDialog.FontDialogOptions,QFontDialog.FontDialogOption] = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeGripEnabled: bool = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def changeEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def currentFont(self) -> PySide2.QtGui.QFont: ...
    def done(self, result: int) -> None: ...
    def eventFilter(self, object: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool: ...
    @classmethod
    @overload
    def getFont(cls, initial: PySide2.QtGui.QFont, parent: typing.Union[QWidget,None] = ..., title: str = ..., options: typing.Union[QFontDialog.FontDialogOptions,QFontDialog.FontDialogOption] = ...) -> typing.Tuple[PySide2.QtGui.QFont,bool]: ...
    @classmethod
    @overload
    def getFont(cls, parent: typing.Union[QWidget,None] = ...) -> typing.Tuple[PySide2.QtGui.QFont,bool]: ...
    @overload
    def open(self) -> None: ...
    @overload
    def open(self, receiver: PySide2.QtCore.QObject, member: bytes) -> None: ...
    def options(self) -> typing.Union[QFontDialog.FontDialogOptions,QFontDialog.FontDialogOption]: ...
    def selectedFont(self) -> PySide2.QtGui.QFont: ...
    def setCurrentFont(self, font: PySide2.QtGui.QFont) -> None: ...
    def setOption(self, option: QFontDialog.FontDialogOption, on: bool = ...) -> None: ...
    def setOptions(self, options: typing.Union[QFontDialog.FontDialogOptions,QFontDialog.FontDialogOption]) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def testOption(self, option: QFontDialog.FontDialogOption) -> bool: ...

class QFormLayout(QLayout):
    class FieldGrowthPolicy:
        AllNonFixedFieldsGrow: ClassVar[QFormLayout.FieldGrowthPolicy] = ...
        ExpandingFieldsGrow: ClassVar[QFormLayout.FieldGrowthPolicy] = ...
        FieldsStayAtSizeHint: ClassVar[QFormLayout.FieldGrowthPolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFormLayout.FieldGrowthPolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QFormLayout.FieldGrowthPolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFormLayout.FieldGrowthPolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFormLayout.FieldGrowthPolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFormLayout.FieldGrowthPolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QFormLayout.FieldGrowthPolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFormLayout.FieldGrowthPolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QFormLayout.FieldGrowthPolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFormLayout.FieldGrowthPolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFormLayout.FieldGrowthPolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QFormLayout.FieldGrowthPolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QFormLayout.FieldGrowthPolicy: ...

    class ItemRole:
        FieldRole: ClassVar[QFormLayout.ItemRole] = ...
        LabelRole: ClassVar[QFormLayout.ItemRole] = ...
        SpanningRole: ClassVar[QFormLayout.ItemRole] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFormLayout.ItemRole: ...
        def __and__(self, other: typing.SupportsInt) -> QFormLayout.ItemRole: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFormLayout.ItemRole: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFormLayout.ItemRole: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFormLayout.ItemRole: ...
        def __rand__(self, other: typing.SupportsInt) -> QFormLayout.ItemRole: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFormLayout.ItemRole: ...
        def __ror__(self, other: typing.SupportsInt) -> QFormLayout.ItemRole: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFormLayout.ItemRole: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFormLayout.ItemRole: ...
        def __sub__(self, other: typing.SupportsInt) -> QFormLayout.ItemRole: ...
        def __xor__(self, other: typing.SupportsInt) -> QFormLayout.ItemRole: ...

    class RowWrapPolicy:
        DontWrapRows: ClassVar[QFormLayout.RowWrapPolicy] = ...
        WrapAllRows: ClassVar[QFormLayout.RowWrapPolicy] = ...
        WrapLongRows: ClassVar[QFormLayout.RowWrapPolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFormLayout.RowWrapPolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QFormLayout.RowWrapPolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFormLayout.RowWrapPolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFormLayout.RowWrapPolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFormLayout.RowWrapPolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QFormLayout.RowWrapPolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFormLayout.RowWrapPolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QFormLayout.RowWrapPolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFormLayout.RowWrapPolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFormLayout.RowWrapPolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QFormLayout.RowWrapPolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QFormLayout.RowWrapPolicy: ...
    AllNonFixedFieldsGrow: ClassVar[QFormLayout.FieldGrowthPolicy] = ...
    DontWrapRows: ClassVar[QFormLayout.RowWrapPolicy] = ...
    ExpandingFieldsGrow: ClassVar[QFormLayout.FieldGrowthPolicy] = ...
    FieldRole: ClassVar[QFormLayout.ItemRole] = ...
    FieldsStayAtSizeHint: ClassVar[QFormLayout.FieldGrowthPolicy] = ...
    LabelRole: ClassVar[QFormLayout.ItemRole] = ...
    SpanningRole: ClassVar[QFormLayout.ItemRole] = ...
    WrapAllRows: ClassVar[QFormLayout.RowWrapPolicy] = ...
    WrapLongRows: ClassVar[QFormLayout.RowWrapPolicy] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., destroyed: typing.Callable = ..., fieldGrowthPolicy: QFormLayout.FieldGrowthPolicy = ..., formAlignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., horizontalSpacing: int = ..., labelAlignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., margin: int = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., rowWrapPolicy: QFormLayout.RowWrapPolicy = ..., sizeConstraint: QFormLayout.SizeConstraint = ..., spacing: int = ..., verticalSpacing: int = ...) -> None: ...
    def addItem(self, item: QLayoutItem) -> None: ...
    @overload
    def addRow(self, label: QWidget, field: QLayout) -> None: ...
    @overload
    def addRow(self, label: QWidget, field: QWidget) -> None: ...
    @overload
    def addRow(self, labelText: str, field: QLayout) -> None: ...
    @overload
    def addRow(self, labelText: str, field: QWidget) -> None: ...
    @overload
    def addRow(self, layout: QLayout) -> None: ...
    @overload
    def addRow(self, widget: QWidget) -> None: ...
    def count(self) -> int: ...
    def expandingDirections(self) -> typing.Union[PySide2.QtCore.Qt.Orientations,PySide2.QtCore.Qt.Orientation]: ...
    def fieldGrowthPolicy(self) -> QFormLayout.FieldGrowthPolicy: ...
    def formAlignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def getItemPosition(self, index: int, rolePtr: QFormLayout.ItemRole) -> int: ...
    def getLayoutPosition(self, layout: QLayout, rolePtr: QFormLayout.ItemRole) -> int: ...
    def getWidgetPosition(self, widget: QWidget, rolePtr: QFormLayout.ItemRole) -> int: ...
    def hasHeightForWidth(self) -> bool: ...
    def heightForWidth(self, width: int) -> int: ...
    def horizontalSpacing(self) -> int: ...
    @overload
    def insertRow(self, row: int, label: QWidget, field: QLayout) -> None: ...
    @overload
    def insertRow(self, row: int, label: QWidget, field: QWidget) -> None: ...
    @overload
    def insertRow(self, row: int, labelText: str, field: QLayout) -> None: ...
    @overload
    def insertRow(self, row: int, labelText: str, field: QWidget) -> None: ...
    @overload
    def insertRow(self, row: int, layout: QLayout) -> None: ...
    @overload
    def insertRow(self, row: int, widget: QWidget) -> None: ...
    def invalidate(self) -> None: ...
    @overload
    def itemAt(self, index: int) -> QLayoutItem: ...
    @overload
    def itemAt(self, row: int, role: QFormLayout.ItemRole) -> QLayoutItem: ...
    def labelAlignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    @overload
    def labelForField(self, field: QLayout) -> QWidget: ...
    @overload
    def labelForField(self, field: QWidget) -> QWidget: ...
    def minimumSize(self) -> PySide2.QtCore.QSize: ...
    @overload
    def removeRow(self, layout: QLayout) -> None: ...
    @overload
    def removeRow(self, row: int) -> None: ...
    @overload
    def removeRow(self, widget: QWidget) -> None: ...
    def rowCount(self) -> int: ...
    def rowWrapPolicy(self) -> QFormLayout.RowWrapPolicy: ...
    def setFieldGrowthPolicy(self, policy: QFormLayout.FieldGrowthPolicy) -> None: ...
    def setFormAlignment(self, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setGeometry(self, rect: PySide2.QtCore.QRect) -> None: ...
    def setHorizontalSpacing(self, spacing: int) -> None: ...
    def setItem(self, row: int, role: QFormLayout.ItemRole, item: QLayoutItem) -> None: ...
    def setLabelAlignment(self, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setLayout(self, row: int, role: QFormLayout.ItemRole, layout: QLayout) -> None: ...
    def setRowWrapPolicy(self, policy: QFormLayout.RowWrapPolicy) -> None: ...
    def setSpacing(self, arg__1: int) -> None: ...
    def setVerticalSpacing(self, spacing: int) -> None: ...
    def setWidget(self, row: int, role: QFormLayout.ItemRole, widget: QWidget) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def spacing(self) -> int: ...
    def takeAt(self, index: int) -> QLayoutItem: ...
    def verticalSpacing(self) -> int: ...

class QFrame(QWidget):
    class Shadow:
        Plain: ClassVar[QFrame.Shadow] = ...
        Raised: ClassVar[QFrame.Shadow] = ...
        Sunken: ClassVar[QFrame.Shadow] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFrame.Shadow: ...
        def __and__(self, other: typing.SupportsInt) -> QFrame.Shadow: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFrame.Shadow: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFrame.Shadow: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFrame.Shadow: ...
        def __rand__(self, other: typing.SupportsInt) -> QFrame.Shadow: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFrame.Shadow: ...
        def __ror__(self, other: typing.SupportsInt) -> QFrame.Shadow: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFrame.Shadow: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFrame.Shadow: ...
        def __sub__(self, other: typing.SupportsInt) -> QFrame.Shadow: ...
        def __xor__(self, other: typing.SupportsInt) -> QFrame.Shadow: ...

    class Shape:
        Box: ClassVar[QFrame.Shape] = ...
        HLine: ClassVar[QFrame.Shape] = ...
        NoFrame: ClassVar[QFrame.Shape] = ...
        Panel: ClassVar[QFrame.Shape] = ...
        StyledPanel: ClassVar[QFrame.Shape] = ...
        VLine: ClassVar[QFrame.Shape] = ...
        WinPanel: ClassVar[QFrame.Shape] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFrame.Shape: ...
        def __and__(self, other: typing.SupportsInt) -> QFrame.Shape: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFrame.Shape: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFrame.Shape: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFrame.Shape: ...
        def __rand__(self, other: typing.SupportsInt) -> QFrame.Shape: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFrame.Shape: ...
        def __ror__(self, other: typing.SupportsInt) -> QFrame.Shape: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFrame.Shape: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFrame.Shape: ...
        def __sub__(self, other: typing.SupportsInt) -> QFrame.Shape: ...
        def __xor__(self, other: typing.SupportsInt) -> QFrame.Shape: ...

    class StyleMask:
        Shadow_Mask: ClassVar[QFrame.StyleMask] = ...
        Shape_Mask: ClassVar[QFrame.StyleMask] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFrame.StyleMask: ...
        def __and__(self, other: typing.SupportsInt) -> QFrame.StyleMask: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFrame.StyleMask: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFrame.StyleMask: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFrame.StyleMask: ...
        def __rand__(self, other: typing.SupportsInt) -> QFrame.StyleMask: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFrame.StyleMask: ...
        def __ror__(self, other: typing.SupportsInt) -> QFrame.StyleMask: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFrame.StyleMask: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFrame.StyleMask: ...
        def __sub__(self, other: typing.SupportsInt) -> QFrame.StyleMask: ...
        def __xor__(self, other: typing.SupportsInt) -> QFrame.StyleMask: ...
    Box: ClassVar[QFrame.Shape] = ...
    HLine: ClassVar[QFrame.Shape] = ...
    NoFrame: ClassVar[QFrame.Shape] = ...
    Panel: ClassVar[QFrame.Shape] = ...
    Plain: ClassVar[QFrame.Shadow] = ...
    Raised: ClassVar[QFrame.Shadow] = ...
    Shadow_Mask: ClassVar[QFrame.StyleMask] = ...
    Shape_Mask: ClassVar[QFrame.StyleMask] = ...
    StyledPanel: ClassVar[QFrame.Shape] = ...
    Sunken: ClassVar[QFrame.Shadow] = ...
    VLine: ClassVar[QFrame.Shape] = ...
    WinPanel: ClassVar[QFrame.Shape] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., f: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QFrame.Shadow = ..., frameShape: QFrame.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def changeEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def drawFrame(self, arg__1: PySide2.QtGui.QPainter) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def frameRect(self) -> PySide2.QtCore.QRect: ...
    def frameShadow(self) -> QFrame.Shadow: ...
    def frameShape(self) -> QFrame.Shape: ...
    def frameStyle(self) -> int: ...
    def frameWidth(self) -> int: ...
    def initStyleOption(self, option: QStyleOptionFrame) -> None: ...
    def lineWidth(self) -> int: ...
    def midLineWidth(self) -> int: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def setFrameRect(self, arg__1: PySide2.QtCore.QRect) -> None: ...
    def setFrameShadow(self, arg__1: QFrame.Shadow) -> None: ...
    def setFrameShape(self, arg__1: QFrame.Shape) -> None: ...
    def setFrameStyle(self, arg__1: typing.Union[QFrame.Shape,QFrame.Shadow,typing.SupportsInt]) -> None: ...
    def setLineWidth(self, arg__1: int) -> None: ...
    def setMidLineWidth(self, arg__1: int) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...

class QGesture(PySide2.QtCore.QObject):
    class GestureCancelPolicy:
        CancelAllInContext: ClassVar[QGesture.GestureCancelPolicy] = ...
        CancelNone: ClassVar[QGesture.GestureCancelPolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGesture.GestureCancelPolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QGesture.GestureCancelPolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGesture.GestureCancelPolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGesture.GestureCancelPolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGesture.GestureCancelPolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QGesture.GestureCancelPolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGesture.GestureCancelPolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QGesture.GestureCancelPolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGesture.GestureCancelPolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGesture.GestureCancelPolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QGesture.GestureCancelPolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QGesture.GestureCancelPolicy: ...
    CancelAllInContext: ClassVar[QGesture.GestureCancelPolicy] = ...
    CancelNone: ClassVar[QGesture.GestureCancelPolicy] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., gestureCancelPolicy: typing.Any = ..., gestureType: PySide2.QtCore.Qt.GestureType = ..., hasHotSpot: bool = ..., hotSpot: PySide2.QtCore.QPointF = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., state: PySide2.QtCore.Qt.GestureState = ...) -> None: ...
    def gestureCancelPolicy(self) -> QGesture.GestureCancelPolicy: ...
    def gestureType(self) -> PySide2.QtCore.Qt.GestureType: ...
    def hasHotSpot(self) -> bool: ...
    def hotSpot(self) -> PySide2.QtCore.QPointF: ...
    def setGestureCancelPolicy(self, policy: QGesture.GestureCancelPolicy) -> None: ...
    def setHotSpot(self, value: PySide2.QtCore.QPointF) -> None: ...
    def state(self) -> PySide2.QtCore.Qt.GestureState: ...
    def unsetHotSpot(self) -> None: ...

class QGestureEvent(PySide2.QtCore.QEvent):
    def __init__(self, gestures: typing.Sequence[QGesture]) -> None: ...
    @overload
    def accept(self) -> None: ...
    @overload
    def accept(self, arg__1: PySide2.QtCore.Qt.GestureType) -> None: ...
    @overload
    def accept(self, arg__1: QGesture) -> None: ...
    def activeGestures(self) -> typing.List[QGesture]: ...
    def canceledGestures(self) -> typing.List[QGesture]: ...
    def gesture(self, type: PySide2.QtCore.Qt.GestureType) -> QGesture: ...
    def gestures(self) -> typing.List[QGesture]: ...
    @overload
    def ignore(self) -> None: ...
    @overload
    def ignore(self, arg__1: PySide2.QtCore.Qt.GestureType) -> None: ...
    @overload
    def ignore(self, arg__1: QGesture) -> None: ...
    @overload
    def isAccepted(self) -> bool: ...
    @overload
    def isAccepted(self, arg__1: PySide2.QtCore.Qt.GestureType) -> bool: ...
    @overload
    def isAccepted(self, arg__1: QGesture) -> bool: ...
    def mapToGraphicsScene(self, gesturePoint: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    @overload
    def setAccepted(self, accepted: bool) -> None: ...
    @overload
    def setAccepted(self, arg__1: PySide2.QtCore.Qt.GestureType, arg__2: bool) -> None: ...
    @overload
    def setAccepted(self, arg__1: QGesture, arg__2: bool) -> None: ...
    def setWidget(self, widget: QWidget) -> None: ...
    def widget(self) -> QWidget: ...

class QGestureRecognizer(shiboken2.Object):
    class Result:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QGestureRecognizer.Result: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QGestureRecognizer.Result: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGestureRecognizer.Result: ...
        def __rand__(self, other: typing.SupportsInt) -> QGestureRecognizer.Result: ...
        def __ror__(self, other: typing.SupportsInt) -> QGestureRecognizer.Result: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGestureRecognizer.Result: ...
        def __xor__(self, other: typing.SupportsInt) -> QGestureRecognizer.Result: ...

    class ResultFlag:
        CancelGesture: ClassVar[QGestureRecognizer.ResultFlag] = ...
        ConsumeEventHint: ClassVar[QGestureRecognizer.ResultFlag] = ...
        FinishGesture: ClassVar[QGestureRecognizer.ResultFlag] = ...
        Ignore: ClassVar[QGestureRecognizer.ResultFlag] = ...
        MayBeGesture: ClassVar[QGestureRecognizer.ResultFlag] = ...
        ResultHint_Mask: ClassVar[QGestureRecognizer.ResultFlag] = ...
        ResultState_Mask: ClassVar[QGestureRecognizer.ResultFlag] = ...
        TriggerGesture: ClassVar[QGestureRecognizer.ResultFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QGestureRecognizer.Result: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QGestureRecognizer.ResultFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGestureRecognizer.Result: ...
        def __rand__(self, other: typing.SupportsInt) -> QGestureRecognizer.Result: ...
        def __ror__(self, other: typing.SupportsInt) -> QGestureRecognizer.Result: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGestureRecognizer.Result: ...
        def __xor__(self, other: typing.SupportsInt) -> QGestureRecognizer.Result: ...
    CancelGesture: ClassVar[QGestureRecognizer.ResultFlag] = ...
    ConsumeEventHint: ClassVar[QGestureRecognizer.ResultFlag] = ...
    FinishGesture: ClassVar[QGestureRecognizer.ResultFlag] = ...
    Ignore: ClassVar[QGestureRecognizer.ResultFlag] = ...
    MayBeGesture: ClassVar[QGestureRecognizer.ResultFlag] = ...
    ResultHint_Mask: ClassVar[QGestureRecognizer.ResultFlag] = ...
    ResultState_Mask: ClassVar[QGestureRecognizer.ResultFlag] = ...
    TriggerGesture: ClassVar[QGestureRecognizer.ResultFlag] = ...
    def __init__(self) -> None: ...
    def create(self, target: PySide2.QtCore.QObject) -> QGesture: ...
    def recognize(self, state: QGesture, watched: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> typing.Union[QGestureRecognizer.Result,QGestureRecognizer.ResultFlag]: ...
    @classmethod
    def registerRecognizer(cls, recognizer: QGestureRecognizer) -> PySide2.QtCore.Qt.GestureType: ...
    def reset(self, state: QGesture) -> None: ...
    @classmethod
    def unregisterRecognizer(cls, type: PySide2.QtCore.Qt.GestureType) -> None: ...

class QGraphicsAnchor(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def setSizePolicy(self, policy: QSizePolicy.Policy) -> None: ...
    def setSpacing(self, spacing: float) -> None: ...
    def sizePolicy(self) -> QSizePolicy.Policy: ...
    def spacing(self) -> float: ...
    def unsetSpacing(self) -> None: ...

class QGraphicsAnchorLayout(QGraphicsLayout):
    def __init__(self, parent: typing.Union[QGraphicsLayoutItem,None] = ...) -> None: ...
    def addAnchor(self, firstItem: QGraphicsLayoutItem, firstEdge: PySide2.QtCore.Qt.AnchorPoint, secondItem: QGraphicsLayoutItem, secondEdge: PySide2.QtCore.Qt.AnchorPoint) -> QGraphicsAnchor: ...
    def addAnchors(self, firstItem: QGraphicsLayoutItem, secondItem: QGraphicsLayoutItem, orientations: typing.Union[PySide2.QtCore.Qt.Orientations,PySide2.QtCore.Qt.Orientation] = ...) -> None: ...
    def addCornerAnchors(self, firstItem: QGraphicsLayoutItem, firstCorner: PySide2.QtCore.Qt.Corner, secondItem: QGraphicsLayoutItem, secondCorner: PySide2.QtCore.Qt.Corner) -> None: ...
    def anchor(self, firstItem: QGraphicsLayoutItem, firstEdge: PySide2.QtCore.Qt.AnchorPoint, secondItem: QGraphicsLayoutItem, secondEdge: PySide2.QtCore.Qt.AnchorPoint) -> QGraphicsAnchor: ...
    def count(self) -> int: ...
    def horizontalSpacing(self) -> float: ...
    def invalidate(self) -> None: ...
    def itemAt(self, index: int) -> QGraphicsLayoutItem: ...
    def removeAt(self, index: int) -> None: ...
    def setGeometry(self, rect: PySide2.QtCore.QRectF) -> None: ...
    def setHorizontalSpacing(self, spacing: float) -> None: ...
    def setSpacing(self, spacing: float) -> None: ...
    def setVerticalSpacing(self, spacing: float) -> None: ...
    def sizeHint(self, which: PySide2.QtCore.Qt.SizeHint, constraint: PySide2.QtCore.QSizeF = ...) -> PySide2.QtCore.QSizeF: ...
    def verticalSpacing(self) -> float: ...

class QGraphicsBlurEffect(QGraphicsEffect):
    class BlurHint:
        AnimationHint: ClassVar[QGraphicsBlurEffect.BlurHint] = ...
        PerformanceHint: ClassVar[QGraphicsBlurEffect.BlurHint] = ...
        QualityHint: ClassVar[QGraphicsBlurEffect.BlurHint] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsBlurEffect.BlurHints: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QGraphicsBlurEffect.BlurHint: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsBlurEffect.BlurHints: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsBlurEffect.BlurHints: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsBlurEffect.BlurHints: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsBlurEffect.BlurHints: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsBlurEffect.BlurHints: ...

    class BlurHints:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsBlurEffect.BlurHints: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QGraphicsBlurEffect.BlurHints: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsBlurEffect.BlurHints: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsBlurEffect.BlurHints: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsBlurEffect.BlurHints: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsBlurEffect.BlurHints: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsBlurEffect.BlurHints: ...
    AnimationHint: ClassVar[QGraphicsBlurEffect.BlurHint] = ...
    PerformanceHint: ClassVar[QGraphicsBlurEffect.BlurHint] = ...
    QualityHint: ClassVar[QGraphicsBlurEffect.BlurHint] = ...
    blurHintsChanged: ClassVar[PySide2.QtCore.Signal] = ...
    blurRadiusChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., blurHints: typing.Union[QGraphicsBlurEffect.BlurHints,QGraphicsBlurEffect.BlurHint] = ..., blurHintsChanged: typing.Callable = ..., blurRadius: float = ..., blurRadiusChanged: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., enabledChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def blurHints(self) -> typing.Union[QGraphicsBlurEffect.BlurHints,QGraphicsBlurEffect.BlurHint]: ...
    def blurRadius(self) -> float: ...
    def boundingRectFor(self, rect: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def draw(self, painter: PySide2.QtGui.QPainter) -> None: ...
    def setBlurHints(self, hints: typing.Union[QGraphicsBlurEffect.BlurHints,QGraphicsBlurEffect.BlurHint]) -> None: ...
    def setBlurRadius(self, blurRadius: float) -> None: ...

class QGraphicsColorizeEffect(QGraphicsEffect):
    colorChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    strengthChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor] = ..., colorChanged: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., enabledChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., strength: float = ..., strengthChanged: typing.Callable = ...) -> None: ...
    def color(self) -> PySide2.QtGui.QColor: ...
    def draw(self, painter: PySide2.QtGui.QPainter) -> None: ...
    def setColor(self, c: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setStrength(self, strength: float) -> None: ...
    def strength(self) -> float: ...

class QGraphicsDropShadowEffect(QGraphicsEffect):
    blurRadiusChanged: ClassVar[PySide2.QtCore.Signal] = ...
    colorChanged: ClassVar[PySide2.QtCore.Signal] = ...
    offsetChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., blurRadius: float = ..., blurRadiusChanged: typing.Callable = ..., color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor] = ..., colorChanged: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., enabledChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., offset: PySide2.QtCore.QPointF = ..., offsetChanged: typing.Callable = ..., xOffset: float = ..., yOffset: float = ...) -> None: ...
    def blurRadius(self) -> float: ...
    def boundingRectFor(self, rect: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def color(self) -> PySide2.QtGui.QColor: ...
    def draw(self, painter: PySide2.QtGui.QPainter) -> None: ...
    def offset(self) -> PySide2.QtCore.QPointF: ...
    def setBlurRadius(self, blurRadius: float) -> None: ...
    def setColor(self, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def setOffset(self, d: float) -> None: ...
    @overload
    def setOffset(self, dx: float, dy: float) -> None: ...
    @overload
    def setOffset(self, ofs: PySide2.QtCore.QPointF) -> None: ...
    def setXOffset(self, dx: float) -> None: ...
    def setYOffset(self, dy: float) -> None: ...
    def xOffset(self) -> float: ...
    def yOffset(self) -> float: ...

class QGraphicsEffect(PySide2.QtCore.QObject):
    class ChangeFlag:
        SourceAttached: ClassVar[QGraphicsEffect.ChangeFlag] = ...
        SourceBoundingRectChanged: ClassVar[QGraphicsEffect.ChangeFlag] = ...
        SourceDetached: ClassVar[QGraphicsEffect.ChangeFlag] = ...
        SourceInvalidated: ClassVar[QGraphicsEffect.ChangeFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsEffect.ChangeFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QGraphicsEffect.ChangeFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsEffect.ChangeFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsEffect.ChangeFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsEffect.ChangeFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsEffect.ChangeFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsEffect.ChangeFlags: ...

    class ChangeFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsEffect.ChangeFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QGraphicsEffect.ChangeFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsEffect.ChangeFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsEffect.ChangeFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsEffect.ChangeFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsEffect.ChangeFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsEffect.ChangeFlags: ...

    class PixmapPadMode:
        NoPad: ClassVar[QGraphicsEffect.PixmapPadMode] = ...
        PadToEffectiveBoundingRect: ClassVar[QGraphicsEffect.PixmapPadMode] = ...
        PadToTransparentBorder: ClassVar[QGraphicsEffect.PixmapPadMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGraphicsEffect.PixmapPadMode: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsEffect.PixmapPadMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGraphicsEffect.PixmapPadMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsEffect.PixmapPadMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGraphicsEffect.PixmapPadMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsEffect.PixmapPadMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGraphicsEffect.PixmapPadMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsEffect.PixmapPadMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGraphicsEffect.PixmapPadMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsEffect.PixmapPadMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QGraphicsEffect.PixmapPadMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsEffect.PixmapPadMode: ...
    NoPad: ClassVar[QGraphicsEffect.PixmapPadMode] = ...
    PadToEffectiveBoundingRect: ClassVar[QGraphicsEffect.PixmapPadMode] = ...
    PadToTransparentBorder: ClassVar[QGraphicsEffect.PixmapPadMode] = ...
    SourceAttached: ClassVar[QGraphicsEffect.ChangeFlag] = ...
    SourceBoundingRectChanged: ClassVar[QGraphicsEffect.ChangeFlag] = ...
    SourceDetached: ClassVar[QGraphicsEffect.ChangeFlag] = ...
    SourceInvalidated: ClassVar[QGraphicsEffect.ChangeFlag] = ...
    enabledChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def boundingRectFor(self, sourceRect: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def draw(self, painter: PySide2.QtGui.QPainter) -> None: ...
    def drawSource(self, painter: PySide2.QtGui.QPainter) -> None: ...
    def isEnabled(self) -> bool: ...
    def setEnabled(self, enable: bool) -> None: ...
    def sourceBoundingRect(self, system: PySide2.QtCore.Qt.CoordinateSystem = ...) -> PySide2.QtCore.QRectF: ...
    def sourceChanged(self, flags: typing.Union[QGraphicsEffect.ChangeFlags,QGraphicsEffect.ChangeFlag]) -> None: ...
    def sourceIsPixmap(self) -> bool: ...
    def sourcePixmap(self, system: PySide2.QtCore.Qt.CoordinateSystem = ..., offset: typing.Union[PySide2.QtCore.QPoint,None] = ..., mode: QGraphicsEffect.PixmapPadMode = ...) -> PySide2.QtGui.QPixmap: ...
    def update(self) -> None: ...
    def updateBoundingRect(self) -> None: ...

class QGraphicsEllipseItem(QAbstractGraphicsShapeItem):
    @overload
    def __init__(self, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    @overload
    def __init__(self, rect: PySide2.QtCore.QRectF, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    @overload
    def __init__(self, x: float, y: float, w: float, h: float, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def contains(self, point: PySide2.QtCore.QPointF) -> bool: ...
    def extension(self, variant: typing.Any) -> typing.Any: ...
    def isObscuredBy(self, item: QGraphicsItem) -> bool: ...
    def opaqueArea(self) -> PySide2.QtGui.QPainterPath: ...
    def paint(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionGraphicsItem, widget: typing.Union[QWidget,None] = ...) -> None: ...
    def rect(self) -> PySide2.QtCore.QRectF: ...
    @overload
    def setRect(self, rect: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def setRect(self, x: float, y: float, w: float, h: float) -> None: ...
    def setSpanAngle(self, angle: int) -> None: ...
    def setStartAngle(self, angle: int) -> None: ...
    def shape(self) -> PySide2.QtGui.QPainterPath: ...
    def spanAngle(self) -> int: ...
    def startAngle(self) -> int: ...
    def type(self) -> int: ...

class QGraphicsGridLayout(QGraphicsLayout):
    def __init__(self, parent: typing.Union[QGraphicsLayoutItem,None] = ...) -> None: ...
    @overload
    def addItem(self, item: QGraphicsLayoutItem, row: int, column: int, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ...) -> None: ...
    @overload
    def addItem(self, item: QGraphicsLayoutItem, row: int, column: int, rowSpan: int, columnSpan: int, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ...) -> None: ...
    def alignment(self, item: QGraphicsLayoutItem) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def columnAlignment(self, column: int) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def columnCount(self) -> int: ...
    def columnMaximumWidth(self, column: int) -> float: ...
    def columnMinimumWidth(self, column: int) -> float: ...
    def columnPreferredWidth(self, column: int) -> float: ...
    def columnSpacing(self, column: int) -> float: ...
    def columnStretchFactor(self, column: int) -> int: ...
    def count(self) -> int: ...
    def horizontalSpacing(self) -> float: ...
    def invalidate(self) -> None: ...
    @overload
    def itemAt(self, index: int) -> QGraphicsLayoutItem: ...
    @overload
    def itemAt(self, row: int, column: int) -> QGraphicsLayoutItem: ...
    def removeAt(self, index: int) -> None: ...
    def removeItem(self, item: QGraphicsLayoutItem) -> None: ...
    def rowAlignment(self, row: int) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def rowCount(self) -> int: ...
    def rowMaximumHeight(self, row: int) -> float: ...
    def rowMinimumHeight(self, row: int) -> float: ...
    def rowPreferredHeight(self, row: int) -> float: ...
    def rowSpacing(self, row: int) -> float: ...
    def rowStretchFactor(self, row: int) -> int: ...
    def setAlignment(self, item: QGraphicsLayoutItem, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setColumnAlignment(self, column: int, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setColumnFixedWidth(self, column: int, width: float) -> None: ...
    def setColumnMaximumWidth(self, column: int, width: float) -> None: ...
    def setColumnMinimumWidth(self, column: int, width: float) -> None: ...
    def setColumnPreferredWidth(self, column: int, width: float) -> None: ...
    def setColumnSpacing(self, column: int, spacing: float) -> None: ...
    def setColumnStretchFactor(self, column: int, stretch: int) -> None: ...
    def setGeometry(self, rect: PySide2.QtCore.QRectF) -> None: ...
    def setHorizontalSpacing(self, spacing: float) -> None: ...
    def setRowAlignment(self, row: int, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setRowFixedHeight(self, row: int, height: float) -> None: ...
    def setRowMaximumHeight(self, row: int, height: float) -> None: ...
    def setRowMinimumHeight(self, row: int, height: float) -> None: ...
    def setRowPreferredHeight(self, row: int, height: float) -> None: ...
    def setRowSpacing(self, row: int, spacing: float) -> None: ...
    def setRowStretchFactor(self, row: int, stretch: int) -> None: ...
    def setSpacing(self, spacing: float) -> None: ...
    def setVerticalSpacing(self, spacing: float) -> None: ...
    def sizeHint(self, which: PySide2.QtCore.Qt.SizeHint, constraint: PySide2.QtCore.QSizeF = ...) -> PySide2.QtCore.QSizeF: ...
    def verticalSpacing(self) -> float: ...

class QGraphicsItem(shiboken2.Object):
    class CacheMode:
        DeviceCoordinateCache: ClassVar[QGraphicsItem.CacheMode] = ...
        ItemCoordinateCache: ClassVar[QGraphicsItem.CacheMode] = ...
        NoCache: ClassVar[QGraphicsItem.CacheMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGraphicsItem.CacheMode: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsItem.CacheMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGraphicsItem.CacheMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsItem.CacheMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGraphicsItem.CacheMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsItem.CacheMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGraphicsItem.CacheMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsItem.CacheMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGraphicsItem.CacheMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsItem.CacheMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QGraphicsItem.CacheMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsItem.CacheMode: ...

    class Extension:
        UserExtension: ClassVar[QGraphicsItem.Extension] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGraphicsItem.Extension: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsItem.Extension: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGraphicsItem.Extension: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsItem.Extension: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGraphicsItem.Extension: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsItem.Extension: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGraphicsItem.Extension: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsItem.Extension: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGraphicsItem.Extension: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsItem.Extension: ...
        def __sub__(self, other: typing.SupportsInt) -> QGraphicsItem.Extension: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsItem.Extension: ...

    class GraphicsItemChange:
        ItemChildAddedChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemChildRemovedChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemCursorChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemCursorHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemEnabledChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemEnabledHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemFlagsChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemFlagsHaveChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemMatrixChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemOpacityChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemOpacityHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemParentChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemParentHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemPositionChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemPositionHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemRotationChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemRotationHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemScaleChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemScaleHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemSceneChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemSceneHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemScenePositionHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemSelectedChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemSelectedHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemToolTipChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemToolTipHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemTransformChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemTransformHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemTransformOriginPointChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemTransformOriginPointHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemVisibleChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemVisibleHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemZValueChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        ItemZValueHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemChange: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemChange: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemChange: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemChange: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemChange: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemChange: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemChange: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemChange: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemChange: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemChange: ...
        def __sub__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemChange: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemChange: ...

    class GraphicsItemFlag:
        ItemAcceptsInputMethod: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemClipsChildrenToShape: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemClipsToShape: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemContainsChildrenInShape: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemDoesntPropagateOpacityToChildren: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemHasNoContents: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemIgnoresParentOpacity: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemIgnoresTransformations: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemIsFocusScope: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemIsFocusable: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemIsMovable: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemIsPanel: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemIsSelectable: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemNegativeZStacksBehindParent: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemSendsGeometryChanges: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemSendsScenePositionChanges: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemStacksBehindParent: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemStopsClickFocusPropagation: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemStopsFocusHandling: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        ItemUsesExtendedStyleOption: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QGraphicsItem.GraphicsItemFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemFlags: ...

    class GraphicsItemFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QGraphicsItem.GraphicsItemFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsItem.GraphicsItemFlags: ...

    class PanelModality:
        NonModal: ClassVar[QGraphicsItem.PanelModality] = ...
        PanelModal: ClassVar[QGraphicsItem.PanelModality] = ...
        SceneModal: ClassVar[QGraphicsItem.PanelModality] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGraphicsItem.PanelModality: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsItem.PanelModality: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGraphicsItem.PanelModality: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsItem.PanelModality: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGraphicsItem.PanelModality: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsItem.PanelModality: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGraphicsItem.PanelModality: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsItem.PanelModality: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGraphicsItem.PanelModality: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsItem.PanelModality: ...
        def __sub__(self, other: typing.SupportsInt) -> QGraphicsItem.PanelModality: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsItem.PanelModality: ...
    DeviceCoordinateCache: ClassVar[QGraphicsItem.CacheMode] = ...
    ItemAcceptsInputMethod: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemChildAddedChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemChildRemovedChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemClipsChildrenToShape: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemClipsToShape: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemContainsChildrenInShape: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemCoordinateCache: ClassVar[QGraphicsItem.CacheMode] = ...
    ItemCursorChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemCursorHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemDoesntPropagateOpacityToChildren: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemEnabledChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemEnabledHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemFlagsChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemFlagsHaveChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemHasNoContents: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemIgnoresParentOpacity: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemIgnoresTransformations: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemIsFocusScope: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemIsFocusable: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemIsMovable: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemIsPanel: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemIsSelectable: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemMatrixChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemNegativeZStacksBehindParent: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemOpacityChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemOpacityHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemParentChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemParentHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemPositionChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemPositionHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemRotationChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemRotationHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemScaleChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemScaleHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemSceneChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemSceneHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemScenePositionHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemSelectedChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemSelectedHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemSendsGeometryChanges: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemSendsScenePositionChanges: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemStacksBehindParent: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemStopsClickFocusPropagation: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemStopsFocusHandling: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemToolTipChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemToolTipHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemTransformChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemTransformHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemTransformOriginPointChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemTransformOriginPointHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemUsesExtendedStyleOption: ClassVar[QGraphicsItem.GraphicsItemFlag] = ...
    ItemVisibleChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemVisibleHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemZValueChange: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    ItemZValueHasChanged: ClassVar[QGraphicsItem.GraphicsItemChange] = ...
    NoCache: ClassVar[QGraphicsItem.CacheMode] = ...
    NonModal: ClassVar[QGraphicsItem.PanelModality] = ...
    PanelModal: ClassVar[QGraphicsItem.PanelModality] = ...
    SceneModal: ClassVar[QGraphicsItem.PanelModality] = ...
    UserExtension: ClassVar[QGraphicsItem.Extension] = ...
    UserType: ClassVar[int] = ...
    def __init__(self, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    def acceptDrops(self) -> bool: ...
    def acceptHoverEvents(self) -> bool: ...
    def acceptTouchEvents(self) -> bool: ...
    def acceptedMouseButtons(self) -> typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]: ...
    def addToIndex(self) -> None: ...
    def advance(self, phase: int) -> None: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def boundingRegion(self, itemToDeviceTransform: PySide2.QtGui.QTransform) -> PySide2.QtGui.QRegion: ...
    def boundingRegionGranularity(self) -> float: ...
    def cacheMode(self) -> QGraphicsItem.CacheMode: ...
    def childItems(self) -> typing.List[QGraphicsItem]: ...
    def childrenBoundingRect(self) -> PySide2.QtCore.QRectF: ...
    def clearFocus(self) -> None: ...
    def clipPath(self) -> PySide2.QtGui.QPainterPath: ...
    def collidesWithItem(self, other: QGraphicsItem, mode: PySide2.QtCore.Qt.ItemSelectionMode = ...) -> bool: ...
    def collidesWithPath(self, path: PySide2.QtGui.QPainterPath, mode: PySide2.QtCore.Qt.ItemSelectionMode = ...) -> bool: ...
    def collidingItems(self, mode: PySide2.QtCore.Qt.ItemSelectionMode = ...) -> typing.List[QGraphicsItem]: ...
    def commonAncestorItem(self, other: QGraphicsItem) -> QGraphicsItem: ...
    def contains(self, point: PySide2.QtCore.QPointF) -> bool: ...
    def contextMenuEvent(self, event: QGraphicsSceneContextMenuEvent) -> None: ...
    def cursor(self) -> PySide2.QtGui.QCursor: ...
    def data(self, key: int) -> typing.Any: ...
    def deviceTransform(self, viewportTransform: PySide2.QtGui.QTransform) -> PySide2.QtGui.QTransform: ...
    def dragEnterEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def dragLeaveEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def dragMoveEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def dropEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def effectiveOpacity(self) -> float: ...
    @overload
    def ensureVisible(self, rect: PySide2.QtCore.QRectF = ..., xmargin: int = ..., ymargin: int = ...) -> None: ...
    @overload
    def ensureVisible(self, x: float, y: float, w: float, h: float, xmargin: int = ..., ymargin: int = ...) -> None: ...
    def extension(self, variant: typing.Any) -> typing.Any: ...
    def filtersChildEvents(self) -> bool: ...
    def flags(self) -> typing.Union[QGraphicsItem.GraphicsItemFlags,QGraphicsItem.GraphicsItemFlag]: ...
    def focusInEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusItem(self) -> QGraphicsItem: ...
    def focusOutEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusProxy(self) -> QGraphicsItem: ...
    def focusScopeItem(self) -> QGraphicsItem: ...
    def grabKeyboard(self) -> None: ...
    def grabMouse(self) -> None: ...
    def graphicsEffect(self) -> QGraphicsEffect: ...
    def group(self) -> QGraphicsItemGroup: ...
    def handlesChildEvents(self) -> bool: ...
    def hasCursor(self) -> bool: ...
    def hasFocus(self) -> bool: ...
    def hide(self) -> None: ...
    def hoverEnterEvent(self, event: QGraphicsSceneHoverEvent) -> None: ...
    def hoverLeaveEvent(self, event: QGraphicsSceneHoverEvent) -> None: ...
    def hoverMoveEvent(self, event: QGraphicsSceneHoverEvent) -> None: ...
    def inputMethodEvent(self, event: PySide2.QtGui.QInputMethodEvent) -> None: ...
    def inputMethodHints(self) -> typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint]: ...
    def inputMethodQuery(self, query: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    def installSceneEventFilter(self, filterItem: QGraphicsItem) -> None: ...
    def isActive(self) -> bool: ...
    def isAncestorOf(self, child: QGraphicsItem) -> bool: ...
    def isBlockedByModalPanel(self, blockingPanel: typing.Union[QGraphicsItem,None] = ...) -> bool: ...
    def isClipped(self) -> bool: ...
    def isEnabled(self) -> bool: ...
    @overload
    def isObscured(self, rect: PySide2.QtCore.QRectF = ...) -> bool: ...
    @overload
    def isObscured(self, x: float, y: float, w: float, h: float) -> bool: ...
    def isObscuredBy(self, item: QGraphicsItem) -> bool: ...
    def isPanel(self) -> bool: ...
    def isSelected(self) -> bool: ...
    def isUnderMouse(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def isVisibleTo(self, parent: QGraphicsItem) -> bool: ...
    def isWidget(self) -> bool: ...
    def isWindow(self) -> bool: ...
    def itemChange(self, change: QGraphicsItem.GraphicsItemChange, value: typing.Any) -> typing.Any: ...
    def itemTransform(self, other: QGraphicsItem) -> typing.Tuple[PySide2.QtGui.QTransform,bool]: ...
    def keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    @overload
    def mapFromItem(self, item: QGraphicsItem, path: PySide2.QtGui.QPainterPath) -> PySide2.QtGui.QPainterPath: ...
    @overload
    def mapFromItem(self, item: QGraphicsItem, point: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    @overload
    def mapFromItem(self, item: QGraphicsItem, polygon: PySide2.QtGui.QPolygonF) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapFromItem(self, item: QGraphicsItem, rect: PySide2.QtCore.QRectF) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapFromItem(self, item: QGraphicsItem, x: float, y: float) -> PySide2.QtCore.QPointF: ...
    @overload
    def mapFromItem(self, item: QGraphicsItem, x: float, y: float, w: float, h: float) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapFromParent(self, path: PySide2.QtGui.QPainterPath) -> PySide2.QtGui.QPainterPath: ...
    @overload
    def mapFromParent(self, point: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    @overload
    def mapFromParent(self, polygon: PySide2.QtGui.QPolygonF) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapFromParent(self, rect: PySide2.QtCore.QRectF) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapFromParent(self, x: float, y: float) -> PySide2.QtCore.QPointF: ...
    @overload
    def mapFromParent(self, x: float, y: float, w: float, h: float) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapFromScene(self, path: PySide2.QtGui.QPainterPath) -> PySide2.QtGui.QPainterPath: ...
    @overload
    def mapFromScene(self, point: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    @overload
    def mapFromScene(self, polygon: PySide2.QtGui.QPolygonF) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapFromScene(self, rect: PySide2.QtCore.QRectF) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapFromScene(self, x: float, y: float) -> PySide2.QtCore.QPointF: ...
    @overload
    def mapFromScene(self, x: float, y: float, w: float, h: float) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapRectFromItem(self, item: QGraphicsItem, rect: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    @overload
    def mapRectFromItem(self, item: QGraphicsItem, x: float, y: float, w: float, h: float) -> PySide2.QtCore.QRectF: ...
    @overload
    def mapRectFromParent(self, rect: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    @overload
    def mapRectFromParent(self, x: float, y: float, w: float, h: float) -> PySide2.QtCore.QRectF: ...
    @overload
    def mapRectFromScene(self, rect: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    @overload
    def mapRectFromScene(self, x: float, y: float, w: float, h: float) -> PySide2.QtCore.QRectF: ...
    @overload
    def mapRectToItem(self, item: QGraphicsItem, rect: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    @overload
    def mapRectToItem(self, item: QGraphicsItem, x: float, y: float, w: float, h: float) -> PySide2.QtCore.QRectF: ...
    @overload
    def mapRectToParent(self, rect: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    @overload
    def mapRectToParent(self, x: float, y: float, w: float, h: float) -> PySide2.QtCore.QRectF: ...
    @overload
    def mapRectToScene(self, rect: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    @overload
    def mapRectToScene(self, x: float, y: float, w: float, h: float) -> PySide2.QtCore.QRectF: ...
    @overload
    def mapToItem(self, item: QGraphicsItem, path: PySide2.QtGui.QPainterPath) -> PySide2.QtGui.QPainterPath: ...
    @overload
    def mapToItem(self, item: QGraphicsItem, point: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    @overload
    def mapToItem(self, item: QGraphicsItem, polygon: PySide2.QtGui.QPolygonF) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapToItem(self, item: QGraphicsItem, rect: PySide2.QtCore.QRectF) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapToItem(self, item: QGraphicsItem, x: float, y: float) -> PySide2.QtCore.QPointF: ...
    @overload
    def mapToItem(self, item: QGraphicsItem, x: float, y: float, w: float, h: float) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapToParent(self, path: PySide2.QtGui.QPainterPath) -> PySide2.QtGui.QPainterPath: ...
    @overload
    def mapToParent(self, point: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    @overload
    def mapToParent(self, polygon: PySide2.QtGui.QPolygonF) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapToParent(self, rect: PySide2.QtCore.QRectF) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapToParent(self, x: float, y: float) -> PySide2.QtCore.QPointF: ...
    @overload
    def mapToParent(self, x: float, y: float, w: float, h: float) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapToScene(self, path: PySide2.QtGui.QPainterPath) -> PySide2.QtGui.QPainterPath: ...
    @overload
    def mapToScene(self, point: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    @overload
    def mapToScene(self, polygon: PySide2.QtGui.QPolygonF) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapToScene(self, rect: PySide2.QtCore.QRectF) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapToScene(self, x: float, y: float) -> PySide2.QtCore.QPointF: ...
    @overload
    def mapToScene(self, x: float, y: float, w: float, h: float) -> PySide2.QtGui.QPolygonF: ...
    def matrix(self) -> PySide2.QtGui.QMatrix: ...
    def mouseDoubleClickEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def mouseMoveEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def mousePressEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def mouseReleaseEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def moveBy(self, dx: float, dy: float) -> None: ...
    def opacity(self) -> float: ...
    def opaqueArea(self) -> PySide2.QtGui.QPainterPath: ...
    def paint(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionGraphicsItem, widget: typing.Union[QWidget,None] = ...) -> None: ...
    def panel(self) -> QGraphicsItem: ...
    def panelModality(self) -> QGraphicsItem.PanelModality: ...
    def parentItem(self) -> QGraphicsItem: ...
    def parentObject(self) -> QGraphicsObject: ...
    def parentWidget(self) -> QGraphicsWidget: ...
    def pos(self) -> PySide2.QtCore.QPointF: ...
    def prepareGeometryChange(self) -> None: ...
    def removeFromIndex(self) -> None: ...
    def removeSceneEventFilter(self, filterItem: QGraphicsItem) -> None: ...
    def resetMatrix(self) -> None: ...
    def resetTransform(self) -> None: ...
    def rotation(self) -> float: ...
    def scale(self) -> float: ...
    def scene(self) -> QGraphicsScene: ...
    def sceneBoundingRect(self) -> PySide2.QtCore.QRectF: ...
    def sceneEvent(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def sceneEventFilter(self, watched: QGraphicsItem, event: PySide2.QtCore.QEvent) -> bool: ...
    def sceneMatrix(self) -> PySide2.QtGui.QMatrix: ...
    def scenePos(self) -> PySide2.QtCore.QPointF: ...
    def sceneTransform(self) -> PySide2.QtGui.QTransform: ...
    def scroll(self, dx: float, dy: float, rect: PySide2.QtCore.QRectF = ...) -> None: ...
    def setAcceptDrops(self, on: bool) -> None: ...
    def setAcceptHoverEvents(self, enabled: bool) -> None: ...
    def setAcceptTouchEvents(self, enabled: bool) -> None: ...
    def setAcceptedMouseButtons(self, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]) -> None: ...
    def setActive(self, active: bool) -> None: ...
    def setBoundingRegionGranularity(self, granularity: float) -> None: ...
    def setCacheMode(self, mode: QGraphicsItem.CacheMode, cacheSize: PySide2.QtCore.QSize = ...) -> None: ...
    def setCursor(self, cursor: PySide2.QtGui.QCursor) -> None: ...
    def setData(self, key: int, value: typing.Any) -> None: ...
    def setEnabled(self, enabled: bool) -> None: ...
    def setFiltersChildEvents(self, enabled: bool) -> None: ...
    def setFlag(self, flag: QGraphicsItem.GraphicsItemFlag, enabled: bool = ...) -> None: ...
    def setFlags(self, flags: typing.Union[QGraphicsItem.GraphicsItemFlags,QGraphicsItem.GraphicsItemFlag]) -> None: ...
    def setFocus(self, focusReason: PySide2.QtCore.Qt.FocusReason = ...) -> None: ...
    def setFocusProxy(self, item: QGraphicsItem) -> None: ...
    def setGraphicsEffect(self, effect: QGraphicsEffect) -> None: ...
    def setGroup(self, group: QGraphicsItemGroup) -> None: ...
    def setHandlesChildEvents(self, enabled: bool) -> None: ...
    def setInputMethodHints(self, hints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint]) -> None: ...
    def setMatrix(self, matrix: PySide2.QtGui.QMatrix, combine: bool = ...) -> None: ...
    def setOpacity(self, opacity: float) -> None: ...
    def setPanelModality(self, panelModality: QGraphicsItem.PanelModality) -> None: ...
    def setParentItem(self, parent: QGraphicsItem) -> None: ...
    @overload
    def setPos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def setPos(self, x: float, y: float) -> None: ...
    def setRotation(self, angle: float) -> None: ...
    def setScale(self, scale: float) -> None: ...
    def setSelected(self, selected: bool) -> None: ...
    def setToolTip(self, toolTip: str) -> None: ...
    def setTransform(self, matrix: PySide2.QtGui.QTransform, combine: bool = ...) -> None: ...
    @overload
    def setTransformOriginPoint(self, ax: float, ay: float) -> None: ...
    @overload
    def setTransformOriginPoint(self, origin: PySide2.QtCore.QPointF) -> None: ...
    def setTransformations(self, transformations: typing.Sequence[QGraphicsTransform]) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def setX(self, x: float) -> None: ...
    def setY(self, y: float) -> None: ...
    def setZValue(self, z: float) -> None: ...
    def shape(self) -> PySide2.QtGui.QPainterPath: ...
    def show(self) -> None: ...
    def stackBefore(self, sibling: QGraphicsItem) -> None: ...
    def toGraphicsObject(self) -> QGraphicsObject: ...
    def toolTip(self) -> str: ...
    def topLevelItem(self) -> QGraphicsItem: ...
    def topLevelWidget(self) -> QGraphicsWidget: ...
    def transform(self) -> PySide2.QtGui.QTransform: ...
    def transformOriginPoint(self) -> PySide2.QtCore.QPointF: ...
    def transformations(self) -> typing.List[QGraphicsTransform]: ...
    def type(self) -> int: ...
    def ungrabKeyboard(self) -> None: ...
    def ungrabMouse(self) -> None: ...
    def unsetCursor(self) -> None: ...
    @overload
    def update(self, rect: PySide2.QtCore.QRectF = ...) -> None: ...
    @overload
    def update(self, x: float, y: float, width: float, height: float) -> None: ...
    def updateMicroFocus(self) -> None: ...
    def wheelEvent(self, event: QGraphicsSceneWheelEvent) -> None: ...
    def window(self) -> QGraphicsWidget: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def zValue(self) -> float: ...

class QGraphicsItemAnimation(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def afterAnimationStep(self, step: float) -> None: ...
    def beforeAnimationStep(self, step: float) -> None: ...
    def clear(self) -> None: ...
    def horizontalScaleAt(self, step: float) -> float: ...
    def horizontalShearAt(self, step: float) -> float: ...
    def item(self) -> QGraphicsItem: ...
    def matrixAt(self, step: float) -> PySide2.QtGui.QMatrix: ...
    def posAt(self, step: float) -> PySide2.QtCore.QPointF: ...
    def posList(self) -> typing.List[typing.Tuple[float,PySide2.QtCore.QPointF]]: ...
    def reset(self) -> None: ...
    def rotationAt(self, step: float) -> float: ...
    def rotationList(self) -> typing.List[typing.Tuple[float,float]]: ...
    def scaleList(self) -> typing.List[typing.Tuple[float,PySide2.QtCore.QPointF]]: ...
    def setItem(self, item: QGraphicsItem) -> None: ...
    def setPosAt(self, step: float, pos: PySide2.QtCore.QPointF) -> None: ...
    def setRotationAt(self, step: float, angle: float) -> None: ...
    def setScaleAt(self, step: float, sx: float, sy: float) -> None: ...
    def setShearAt(self, step: float, sh: float, sv: float) -> None: ...
    def setStep(self, x: float) -> None: ...
    def setTimeLine(self, timeLine: PySide2.QtCore.QTimeLine) -> None: ...
    def setTranslationAt(self, step: float, dx: float, dy: float) -> None: ...
    def shearList(self) -> typing.List[typing.Tuple[float,PySide2.QtCore.QPointF]]: ...
    def timeLine(self) -> PySide2.QtCore.QTimeLine: ...
    def transformAt(self, step: float) -> PySide2.QtGui.QTransform: ...
    def translationList(self) -> typing.List[typing.Tuple[float,PySide2.QtCore.QPointF]]: ...
    def verticalScaleAt(self, step: float) -> float: ...
    def verticalShearAt(self, step: float) -> float: ...
    def xTranslationAt(self, step: float) -> float: ...
    def yTranslationAt(self, step: float) -> float: ...

class QGraphicsItemGroup(QGraphicsItem):
    def __init__(self, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    def addToGroup(self, item: QGraphicsItem) -> None: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def isObscuredBy(self, item: QGraphicsItem) -> bool: ...
    def opaqueArea(self) -> PySide2.QtGui.QPainterPath: ...
    def paint(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionGraphicsItem, widget: typing.Union[QWidget,None] = ...) -> None: ...
    def removeFromGroup(self, item: QGraphicsItem) -> None: ...
    def type(self) -> int: ...

class QGraphicsLayout(QGraphicsLayoutItem):
    def __init__(self, parent: typing.Union[QGraphicsLayoutItem,None] = ...) -> None: ...
    def activate(self) -> None: ...
    def addChildLayoutItem(self, layoutItem: QGraphicsLayoutItem) -> None: ...
    def count(self) -> int: ...
    def getContentsMargins(self) -> typing.Tuple[float,float,float,float]: ...
    @classmethod
    def instantInvalidatePropagation(cls) -> bool: ...
    def invalidate(self) -> None: ...
    def isActivated(self) -> bool: ...
    def itemAt(self, i: int) -> QGraphicsLayoutItem: ...
    def removeAt(self, index: int) -> None: ...
    def setContentsMargins(self, left: float, top: float, right: float, bottom: float) -> None: ...
    @classmethod
    def setInstantInvalidatePropagation(cls, enable: bool) -> None: ...
    def updateGeometry(self) -> None: ...
    def widgetEvent(self, e: PySide2.QtCore.QEvent) -> None: ...

class QGraphicsLayoutItem(shiboken2.Object):
    def __init__(self, parent: typing.Union[QGraphicsLayoutItem,None] = ..., isLayout: bool = ...) -> None: ...
    def contentsRect(self) -> PySide2.QtCore.QRectF: ...
    def effectiveSizeHint(self, which: PySide2.QtCore.Qt.SizeHint, constraint: PySide2.QtCore.QSizeF = ...) -> PySide2.QtCore.QSizeF: ...
    def geometry(self) -> PySide2.QtCore.QRectF: ...
    def getContentsMargins(self) -> typing.Tuple[float,float,float,float]: ...
    def graphicsItem(self) -> QGraphicsItem: ...
    def isLayout(self) -> bool: ...
    def maximumHeight(self) -> float: ...
    def maximumSize(self) -> PySide2.QtCore.QSizeF: ...
    def maximumWidth(self) -> float: ...
    def minimumHeight(self) -> float: ...
    def minimumSize(self) -> PySide2.QtCore.QSizeF: ...
    def minimumWidth(self) -> float: ...
    def ownedByLayout(self) -> bool: ...
    def parentLayoutItem(self) -> QGraphicsLayoutItem: ...
    def preferredHeight(self) -> float: ...
    def preferredSize(self) -> PySide2.QtCore.QSizeF: ...
    def preferredWidth(self) -> float: ...
    def setGeometry(self, rect: PySide2.QtCore.QRectF) -> None: ...
    def setGraphicsItem(self, item: QGraphicsItem) -> None: ...
    def setMaximumHeight(self, height: float) -> None: ...
    @overload
    def setMaximumSize(self, size: PySide2.QtCore.QSizeF) -> None: ...
    @overload
    def setMaximumSize(self, w: float, h: float) -> None: ...
    def setMaximumWidth(self, width: float) -> None: ...
    def setMinimumHeight(self, height: float) -> None: ...
    @overload
    def setMinimumSize(self, size: PySide2.QtCore.QSizeF) -> None: ...
    @overload
    def setMinimumSize(self, w: float, h: float) -> None: ...
    def setMinimumWidth(self, width: float) -> None: ...
    def setOwnedByLayout(self, ownedByLayout: bool) -> None: ...
    def setParentLayoutItem(self, parent: QGraphicsLayoutItem) -> None: ...
    def setPreferredHeight(self, height: float) -> None: ...
    @overload
    def setPreferredSize(self, size: PySide2.QtCore.QSizeF) -> None: ...
    @overload
    def setPreferredSize(self, w: float, h: float) -> None: ...
    def setPreferredWidth(self, width: float) -> None: ...
    @overload
    def setSizePolicy(self, hPolicy: QSizePolicy.Policy, vPolicy: QSizePolicy.Policy, controlType: QSizePolicy.ControlType = ...) -> None: ...
    @overload
    def setSizePolicy(self, policy: QSizePolicy) -> None: ...
    def sizeHint(self, which: PySide2.QtCore.Qt.SizeHint, constraint: PySide2.QtCore.QSizeF = ...) -> PySide2.QtCore.QSizeF: ...
    def sizePolicy(self) -> QSizePolicy: ...
    def updateGeometry(self) -> None: ...

class QGraphicsLineItem(QGraphicsItem):
    @overload
    def __init__(self, line: PySide2.QtCore.QLineF, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    @overload
    def __init__(self, x1: float, y1: float, x2: float, y2: float, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def contains(self, point: PySide2.QtCore.QPointF) -> bool: ...
    def extension(self, variant: typing.Any) -> typing.Any: ...
    def isObscuredBy(self, item: QGraphicsItem) -> bool: ...
    def line(self) -> PySide2.QtCore.QLineF: ...
    def opaqueArea(self) -> PySide2.QtGui.QPainterPath: ...
    def paint(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionGraphicsItem, widget: typing.Union[QWidget,None] = ...) -> None: ...
    def pen(self) -> PySide2.QtGui.QPen: ...
    @overload
    def setLine(self, line: PySide2.QtCore.QLineF) -> None: ...
    @overload
    def setLine(self, x1: float, y1: float, x2: float, y2: float) -> None: ...
    def setPen(self, pen: PySide2.QtGui.QPen) -> None: ...
    def shape(self) -> PySide2.QtGui.QPainterPath: ...
    def type(self) -> int: ...

class QGraphicsLinearLayout(QGraphicsLayout):
    @overload
    def __init__(self, orientation: PySide2.QtCore.Qt.Orientation, parent: typing.Union[QGraphicsLayoutItem,None] = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QGraphicsLayoutItem,None] = ...) -> None: ...
    def addItem(self, item: QGraphicsLayoutItem) -> None: ...
    def addStretch(self, stretch: int = ...) -> None: ...
    def alignment(self, item: QGraphicsLayoutItem) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def count(self) -> int: ...
    def dump(self, indent: int = ...) -> None: ...
    def insertItem(self, index: int, item: QGraphicsLayoutItem) -> None: ...
    def insertStretch(self, index: int, stretch: int = ...) -> None: ...
    def invalidate(self) -> None: ...
    def itemAt(self, index: int) -> QGraphicsLayoutItem: ...
    def itemSpacing(self, index: int) -> float: ...
    def orientation(self) -> PySide2.QtCore.Qt.Orientation: ...
    def removeAt(self, index: int) -> None: ...
    def removeItem(self, item: QGraphicsLayoutItem) -> None: ...
    def setAlignment(self, item: QGraphicsLayoutItem, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setGeometry(self, rect: PySide2.QtCore.QRectF) -> None: ...
    def setItemSpacing(self, index: int, spacing: float) -> None: ...
    def setOrientation(self, orientation: PySide2.QtCore.Qt.Orientation) -> None: ...
    def setSpacing(self, spacing: float) -> None: ...
    def setStretchFactor(self, item: QGraphicsLayoutItem, stretch: int) -> None: ...
    def sizeHint(self, which: PySide2.QtCore.Qt.SizeHint, constraint: PySide2.QtCore.QSizeF = ...) -> PySide2.QtCore.QSizeF: ...
    def spacing(self) -> float: ...
    def stretchFactor(self, item: QGraphicsLayoutItem) -> int: ...

class QGraphicsObject(QGraphicsItem, PySide2.QtCore.QObject):
    childrenChanged: ClassVar[PySide2.QtCore.Signal] = ...
    enabledChanged: ClassVar[PySide2.QtCore.Signal] = ...
    heightChanged: ClassVar[PySide2.QtCore.Signal] = ...
    opacityChanged: ClassVar[PySide2.QtCore.Signal] = ...
    parentChanged: ClassVar[PySide2.QtCore.Signal] = ...
    rotationChanged: ClassVar[PySide2.QtCore.Signal] = ...
    scaleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    visibleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    widthChanged: ClassVar[PySide2.QtCore.Signal] = ...
    xChanged: ClassVar[PySide2.QtCore.Signal] = ...
    yChanged: ClassVar[PySide2.QtCore.Signal] = ...
    zChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    def event(self, ev: PySide2.QtCore.QEvent) -> bool: ...
    def grabGesture(self, type: PySide2.QtCore.Qt.GestureType, flags: typing.Union[PySide2.QtCore.Qt.GestureFlags,PySide2.QtCore.Qt.GestureFlag] = ...) -> None: ...
    def ungrabGesture(self, type: PySide2.QtCore.Qt.GestureType) -> None: ...
    def updateMicroFocus(self) -> None: ...

class QGraphicsOpacityEffect(QGraphicsEffect):
    opacityChanged: ClassVar[PySide2.QtCore.Signal] = ...
    opacityMaskChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., enabled: bool = ..., enabledChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., opacityMask: PySide2.QtGui.QBrush = ..., opacityMaskChanged: typing.Callable = ...) -> None: ...
    def draw(self, painter: PySide2.QtGui.QPainter) -> None: ...
    def opacity(self) -> float: ...
    def opacityMask(self) -> PySide2.QtGui.QBrush: ...
    def setOpacity(self, opacity: float) -> None: ...
    def setOpacityMask(self, mask: PySide2.QtGui.QBrush) -> None: ...

class QGraphicsPathItem(QAbstractGraphicsShapeItem):
    @overload
    def __init__(self, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    @overload
    def __init__(self, path: PySide2.QtGui.QPainterPath, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def contains(self, point: PySide2.QtCore.QPointF) -> bool: ...
    def extension(self, variant: typing.Any) -> typing.Any: ...
    def isObscuredBy(self, item: QGraphicsItem) -> bool: ...
    def opaqueArea(self) -> PySide2.QtGui.QPainterPath: ...
    def paint(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionGraphicsItem, widget: typing.Union[QWidget,None] = ...) -> None: ...
    def path(self) -> PySide2.QtGui.QPainterPath: ...
    def setPath(self, path: PySide2.QtGui.QPainterPath) -> None: ...
    def shape(self) -> PySide2.QtGui.QPainterPath: ...
    def type(self) -> int: ...

class QGraphicsPixmapItem(QGraphicsItem):
    class ShapeMode:
        BoundingRectShape: ClassVar[QGraphicsPixmapItem.ShapeMode] = ...
        HeuristicMaskShape: ClassVar[QGraphicsPixmapItem.ShapeMode] = ...
        MaskShape: ClassVar[QGraphicsPixmapItem.ShapeMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGraphicsPixmapItem.ShapeMode: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsPixmapItem.ShapeMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGraphicsPixmapItem.ShapeMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsPixmapItem.ShapeMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGraphicsPixmapItem.ShapeMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsPixmapItem.ShapeMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGraphicsPixmapItem.ShapeMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsPixmapItem.ShapeMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGraphicsPixmapItem.ShapeMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsPixmapItem.ShapeMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QGraphicsPixmapItem.ShapeMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsPixmapItem.ShapeMode: ...
    BoundingRectShape: ClassVar[QGraphicsPixmapItem.ShapeMode] = ...
    HeuristicMaskShape: ClassVar[QGraphicsPixmapItem.ShapeMode] = ...
    MaskShape: ClassVar[QGraphicsPixmapItem.ShapeMode] = ...
    @overload
    def __init__(self, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    @overload
    def __init__(self, pixmap: PySide2.QtGui.QPixmap, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def contains(self, point: PySide2.QtCore.QPointF) -> bool: ...
    def extension(self, variant: typing.Any) -> typing.Any: ...
    def isObscuredBy(self, item: QGraphicsItem) -> bool: ...
    def offset(self) -> PySide2.QtCore.QPointF: ...
    def opaqueArea(self) -> PySide2.QtGui.QPainterPath: ...
    def paint(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionGraphicsItem, widget: QWidget) -> None: ...
    def pixmap(self) -> PySide2.QtGui.QPixmap: ...
    @overload
    def setOffset(self, offset: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def setOffset(self, x: float, y: float) -> None: ...
    def setPixmap(self, pixmap: PySide2.QtGui.QPixmap) -> None: ...
    def setShapeMode(self, mode: QGraphicsPixmapItem.ShapeMode) -> None: ...
    def setTransformationMode(self, mode: PySide2.QtCore.Qt.TransformationMode) -> None: ...
    def shape(self) -> PySide2.QtGui.QPainterPath: ...
    def shapeMode(self) -> QGraphicsPixmapItem.ShapeMode: ...
    def transformationMode(self) -> PySide2.QtCore.Qt.TransformationMode: ...
    def type(self) -> int: ...

class QGraphicsPolygonItem(QAbstractGraphicsShapeItem):
    @overload
    def __init__(self, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    @overload
    def __init__(self, polygon: PySide2.QtGui.QPolygonF, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def contains(self, point: PySide2.QtCore.QPointF) -> bool: ...
    def extension(self, variant: typing.Any) -> typing.Any: ...
    def fillRule(self) -> PySide2.QtCore.Qt.FillRule: ...
    def isObscuredBy(self, item: QGraphicsItem) -> bool: ...
    def opaqueArea(self) -> PySide2.QtGui.QPainterPath: ...
    def paint(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionGraphicsItem, widget: typing.Union[QWidget,None] = ...) -> None: ...
    def polygon(self) -> PySide2.QtGui.QPolygonF: ...
    def setFillRule(self, rule: PySide2.QtCore.Qt.FillRule) -> None: ...
    def setPolygon(self, polygon: PySide2.QtGui.QPolygonF) -> None: ...
    def shape(self) -> PySide2.QtGui.QPainterPath: ...
    def type(self) -> int: ...

class QGraphicsProxyWidget(QGraphicsWidget):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QGraphicsItem,None] = ..., wFlags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., autoFillBackground: bool = ..., children: typing.Any = ..., childrenChanged: typing.Callable = ..., destroyed: typing.Callable = ..., effect: typing.Any = ..., enabled: bool = ..., enabledChanged: typing.Callable = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., geometry: PySide2.QtCore.QRectF = ..., geometryChanged: typing.Callable = ..., height: float = ..., heightChanged: typing.Callable = ..., layout: typing.Any = ..., layoutChanged: typing.Callable = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., maximumSize: PySide2.QtCore.QSizeF = ..., minimumSize: PySide2.QtCore.QSizeF = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., parentChanged: typing.Callable = ..., pos: PySide2.QtCore.QPointF = ..., preferredSize: PySide2.QtCore.QSizeF = ..., rotation: float = ..., rotationChanged: typing.Callable = ..., scale: float = ..., scaleChanged: typing.Callable = ..., size: PySide2.QtCore.QSizeF = ..., sizePolicy: QSizePolicy = ..., transformOriginPoint: PySide2.QtCore.QPointF = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., width: float = ..., widthChanged: typing.Callable = ..., windowFlags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., windowTitle: str = ..., x: float = ..., xChanged: typing.Callable = ..., y: float = ..., yChanged: typing.Callable = ..., z: float = ..., zChanged: typing.Callable = ...) -> None: ...
    def contextMenuEvent(self, event: QGraphicsSceneContextMenuEvent) -> None: ...
    def createProxyForChildWidget(self, child: QWidget) -> QGraphicsProxyWidget: ...
    def dragEnterEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def dragLeaveEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def dragMoveEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def dropEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def eventFilter(self, object: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool: ...
    def focusInEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def focusOutEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def grabMouseEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def hideEvent(self, event: PySide2.QtGui.QHideEvent) -> None: ...
    def hoverEnterEvent(self, event: QGraphicsSceneHoverEvent) -> None: ...
    def hoverLeaveEvent(self, event: QGraphicsSceneHoverEvent) -> None: ...
    def hoverMoveEvent(self, event: QGraphicsSceneHoverEvent) -> None: ...
    def inputMethodEvent(self, event: PySide2.QtGui.QInputMethodEvent) -> None: ...
    def inputMethodQuery(self, query: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    def itemChange(self, change: QGraphicsItem.GraphicsItemChange, value: typing.Any) -> typing.Any: ...
    def keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def mouseDoubleClickEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def mouseMoveEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def mousePressEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def mouseReleaseEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def newProxyWidget(self, arg__1: QWidget) -> QGraphicsProxyWidget: ...
    def paint(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionGraphicsItem, widget: QWidget) -> None: ...
    def resizeEvent(self, event: QGraphicsSceneResizeEvent) -> None: ...
    def setGeometry(self, rect: PySide2.QtCore.QRectF) -> None: ...
    def setWidget(self, widget: QWidget) -> None: ...
    def showEvent(self, event: PySide2.QtGui.QShowEvent) -> None: ...
    def sizeHint(self, which: PySide2.QtCore.Qt.SizeHint, constraint: PySide2.QtCore.QSizeF = ...) -> PySide2.QtCore.QSizeF: ...
    def subWidgetRect(self, widget: QWidget) -> PySide2.QtCore.QRectF: ...
    def type(self) -> int: ...
    def ungrabMouseEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def wheelEvent(self, event: QGraphicsSceneWheelEvent) -> None: ...
    def widget(self) -> QWidget: ...

class QGraphicsRectItem(QAbstractGraphicsShapeItem):
    @overload
    def __init__(self, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    @overload
    def __init__(self, rect: PySide2.QtCore.QRectF, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    @overload
    def __init__(self, x: float, y: float, w: float, h: float, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def contains(self, point: PySide2.QtCore.QPointF) -> bool: ...
    def extension(self, variant: typing.Any) -> typing.Any: ...
    def isObscuredBy(self, item: QGraphicsItem) -> bool: ...
    def opaqueArea(self) -> PySide2.QtGui.QPainterPath: ...
    def paint(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionGraphicsItem, widget: typing.Union[QWidget,None] = ...) -> None: ...
    def rect(self) -> PySide2.QtCore.QRectF: ...
    @overload
    def setRect(self, rect: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def setRect(self, x: float, y: float, w: float, h: float) -> None: ...
    def shape(self) -> PySide2.QtGui.QPainterPath: ...
    def type(self) -> int: ...

class QGraphicsRotation(QGraphicsTransform):
    angleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    axisChanged: ClassVar[PySide2.QtCore.Signal] = ...
    originChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., angle: float = ..., angleChanged: typing.Callable = ..., axis: PySide2.QtGui.QVector3D = ..., axisChanged: typing.Callable = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., origin: PySide2.QtGui.QVector3D = ..., originChanged: typing.Callable = ...) -> None: ...
    def angle(self) -> float: ...
    def applyTo(self, matrix: PySide2.QtGui.QMatrix4x4) -> None: ...
    def axis(self) -> PySide2.QtGui.QVector3D: ...
    def origin(self) -> PySide2.QtGui.QVector3D: ...
    def setAngle(self, arg__1: float) -> None: ...
    @overload
    def setAxis(self, axis: PySide2.QtCore.Qt.Axis) -> None: ...
    @overload
    def setAxis(self, axis: PySide2.QtGui.QVector3D) -> None: ...
    def setOrigin(self, point: PySide2.QtGui.QVector3D) -> None: ...

class QGraphicsScale(QGraphicsTransform):
    originChanged: ClassVar[PySide2.QtCore.Signal] = ...
    scaleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    xScaleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    yScaleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    zScaleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., origin: PySide2.QtGui.QVector3D = ..., originChanged: typing.Callable = ..., scaleChanged: typing.Callable = ..., xScale: float = ..., xScaleChanged: typing.Callable = ..., yScale: float = ..., yScaleChanged: typing.Callable = ..., zScale: float = ..., zScaleChanged: typing.Callable = ...) -> None: ...
    def applyTo(self, matrix: PySide2.QtGui.QMatrix4x4) -> None: ...
    def origin(self) -> PySide2.QtGui.QVector3D: ...
    def setOrigin(self, point: PySide2.QtGui.QVector3D) -> None: ...
    def setXScale(self, arg__1: float) -> None: ...
    def setYScale(self, arg__1: float) -> None: ...
    def setZScale(self, arg__1: float) -> None: ...
    def xScale(self) -> float: ...
    def yScale(self) -> float: ...
    def zScale(self) -> float: ...

class QGraphicsScene(PySide2.QtCore.QObject):
    class ItemIndexMethod:
        BspTreeIndex: ClassVar[QGraphicsScene.ItemIndexMethod] = ...
        NoIndex: ClassVar[QGraphicsScene.ItemIndexMethod] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGraphicsScene.ItemIndexMethod: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsScene.ItemIndexMethod: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGraphicsScene.ItemIndexMethod: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsScene.ItemIndexMethod: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGraphicsScene.ItemIndexMethod: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsScene.ItemIndexMethod: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGraphicsScene.ItemIndexMethod: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsScene.ItemIndexMethod: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGraphicsScene.ItemIndexMethod: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsScene.ItemIndexMethod: ...
        def __sub__(self, other: typing.SupportsInt) -> QGraphicsScene.ItemIndexMethod: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsScene.ItemIndexMethod: ...

    class SceneLayer:
        AllLayers: ClassVar[QGraphicsScene.SceneLayer] = ...
        BackgroundLayer: ClassVar[QGraphicsScene.SceneLayer] = ...
        ForegroundLayer: ClassVar[QGraphicsScene.SceneLayer] = ...
        ItemLayer: ClassVar[QGraphicsScene.SceneLayer] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsScene.SceneLayers: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QGraphicsScene.SceneLayer: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsScene.SceneLayers: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsScene.SceneLayers: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsScene.SceneLayers: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsScene.SceneLayers: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsScene.SceneLayers: ...

    class SceneLayers:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsScene.SceneLayers: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QGraphicsScene.SceneLayers: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsScene.SceneLayers: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsScene.SceneLayers: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsScene.SceneLayers: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsScene.SceneLayers: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsScene.SceneLayers: ...
    AllLayers: ClassVar[QGraphicsScene.SceneLayer] = ...
    BackgroundLayer: ClassVar[QGraphicsScene.SceneLayer] = ...
    BspTreeIndex: ClassVar[QGraphicsScene.ItemIndexMethod] = ...
    ForegroundLayer: ClassVar[QGraphicsScene.SceneLayer] = ...
    ItemLayer: ClassVar[QGraphicsScene.SceneLayer] = ...
    NoIndex: ClassVar[QGraphicsScene.ItemIndexMethod] = ...
    changed: ClassVar[PySide2.QtCore.Signal] = ...
    focusItemChanged: ClassVar[PySide2.QtCore.Signal] = ...
    sceneRectChanged: ClassVar[PySide2.QtCore.Signal] = ...
    selectionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., backgroundBrush: PySide2.QtGui.QBrush = ..., bspTreeDepth: int = ..., changed: typing.Callable = ..., destroyed: typing.Callable = ..., focusItemChanged: typing.Callable = ..., focusOnTouch: bool = ..., font: PySide2.QtGui.QFont = ..., foregroundBrush: PySide2.QtGui.QBrush = ..., itemIndexMethod: QGraphicsScene.ItemIndexMethod = ..., minimumRenderSize: float = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., sceneRect: PySide2.QtCore.QRectF = ..., sceneRectChanged: typing.Callable = ..., selectionChanged: typing.Callable = ..., sortCacheEnabled: bool = ..., stickyFocus: bool = ...) -> None: ...
    @overload
    def __init__(self, sceneRect: PySide2.QtCore.QRectF, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., backgroundBrush: PySide2.QtGui.QBrush = ..., bspTreeDepth: int = ..., changed: typing.Callable = ..., destroyed: typing.Callable = ..., focusItemChanged: typing.Callable = ..., focusOnTouch: bool = ..., font: PySide2.QtGui.QFont = ..., foregroundBrush: PySide2.QtGui.QBrush = ..., itemIndexMethod: QGraphicsScene.ItemIndexMethod = ..., minimumRenderSize: float = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., sceneRectChanged: typing.Callable = ..., selectionChanged: typing.Callable = ..., sortCacheEnabled: bool = ..., stickyFocus: bool = ...) -> None: ...
    @overload
    def __init__(self, x: float, y: float, width: float, height: float, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., backgroundBrush: PySide2.QtGui.QBrush = ..., bspTreeDepth: int = ..., changed: typing.Callable = ..., destroyed: typing.Callable = ..., focusItemChanged: typing.Callable = ..., focusOnTouch: bool = ..., font: PySide2.QtGui.QFont = ..., foregroundBrush: PySide2.QtGui.QBrush = ..., itemIndexMethod: QGraphicsScene.ItemIndexMethod = ..., minimumRenderSize: float = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., sceneRect: PySide2.QtCore.QRectF = ..., sceneRectChanged: typing.Callable = ..., selectionChanged: typing.Callable = ..., sortCacheEnabled: bool = ..., stickyFocus: bool = ...) -> None: ...
    def activePanel(self) -> QGraphicsItem: ...
    def activeWindow(self) -> QGraphicsWidget: ...
    @overload
    def addEllipse(self, rect: PySide2.QtCore.QRectF, pen: PySide2.QtGui.QPen = ..., brush: PySide2.QtGui.QBrush = ...) -> QGraphicsEllipseItem: ...
    @overload
    def addEllipse(self, x: float, y: float, w: float, h: float, pen: PySide2.QtGui.QPen = ..., brush: PySide2.QtGui.QBrush = ...) -> QGraphicsEllipseItem: ...
    def addItem(self, item: QGraphicsItem) -> None: ...
    @overload
    def addLine(self, line: PySide2.QtCore.QLineF, pen: PySide2.QtGui.QPen = ...) -> QGraphicsLineItem: ...
    @overload
    def addLine(self, x1: float, y1: float, x2: float, y2: float, pen: PySide2.QtGui.QPen = ...) -> QGraphicsLineItem: ...
    def addPath(self, path: PySide2.QtGui.QPainterPath, pen: PySide2.QtGui.QPen = ..., brush: PySide2.QtGui.QBrush = ...) -> QGraphicsPathItem: ...
    def addPixmap(self, pixmap: PySide2.QtGui.QPixmap) -> QGraphicsPixmapItem: ...
    def addPolygon(self, polygon: PySide2.QtGui.QPolygonF, pen: PySide2.QtGui.QPen = ..., brush: PySide2.QtGui.QBrush = ...) -> QGraphicsPolygonItem: ...
    @overload
    def addRect(self, rect: PySide2.QtCore.QRectF, pen: PySide2.QtGui.QPen = ..., brush: PySide2.QtGui.QBrush = ...) -> QGraphicsRectItem: ...
    @overload
    def addRect(self, x: float, y: float, w: float, h: float, pen: PySide2.QtGui.QPen = ..., brush: PySide2.QtGui.QBrush = ...) -> QGraphicsRectItem: ...
    def addSimpleText(self, text: str, font: PySide2.QtGui.QFont = ...) -> QGraphicsSimpleTextItem: ...
    def addText(self, text: str, font: PySide2.QtGui.QFont = ...) -> QGraphicsTextItem: ...
    def addWidget(self, widget: QWidget, wFlags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ...) -> QGraphicsProxyWidget: ...
    def advance(self) -> None: ...
    def backgroundBrush(self) -> PySide2.QtGui.QBrush: ...
    def bspTreeDepth(self) -> int: ...
    def clear(self) -> None: ...
    def clearFocus(self) -> None: ...
    def clearSelection(self) -> None: ...
    def collidingItems(self, item: QGraphicsItem, mode: PySide2.QtCore.Qt.ItemSelectionMode = ...) -> typing.List[QGraphicsItem]: ...
    def contextMenuEvent(self, event: QGraphicsSceneContextMenuEvent) -> None: ...
    def createItemGroup(self, items: typing.Sequence[QGraphicsItem]) -> QGraphicsItemGroup: ...
    def destroyItemGroup(self, group: QGraphicsItemGroup) -> None: ...
    def dragEnterEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def dragLeaveEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def dragMoveEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def drawBackground(self, painter: PySide2.QtGui.QPainter, rect: PySide2.QtCore.QRectF) -> None: ...
    def drawForeground(self, painter: PySide2.QtGui.QPainter, rect: PySide2.QtCore.QRectF) -> None: ...
    def dropEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def eventFilter(self, watched: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool: ...
    def focusInEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusItem(self) -> QGraphicsItem: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def focusOnTouch(self) -> bool: ...
    def focusOutEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def font(self) -> PySide2.QtGui.QFont: ...
    def foregroundBrush(self) -> PySide2.QtGui.QBrush: ...
    def hasFocus(self) -> bool: ...
    def height(self) -> float: ...
    def helpEvent(self, event: QGraphicsSceneHelpEvent) -> None: ...
    def inputMethodEvent(self, event: PySide2.QtGui.QInputMethodEvent) -> None: ...
    def inputMethodQuery(self, query: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    @overload
    def invalidate(self, rect: PySide2.QtCore.QRectF = ..., layers: typing.Union[QGraphicsScene.SceneLayers,QGraphicsScene.SceneLayer] = ...) -> None: ...
    @overload
    def invalidate(self, x: float, y: float, w: float, h: float, layers: typing.Union[QGraphicsScene.SceneLayers,QGraphicsScene.SceneLayer] = ...) -> None: ...
    def isActive(self) -> bool: ...
    def isSortCacheEnabled(self) -> bool: ...
    @overload
    def itemAt(self, pos: PySide2.QtCore.QPointF, deviceTransform: PySide2.QtGui.QTransform) -> QGraphicsItem: ...
    @overload
    def itemAt(self, x: float, y: float, deviceTransform: PySide2.QtGui.QTransform) -> QGraphicsItem: ...
    def itemIndexMethod(self) -> QGraphicsScene.ItemIndexMethod: ...
    @overload
    def items(self, order: PySide2.QtCore.Qt.SortOrder = ...) -> typing.List[QGraphicsItem]: ...
    @overload
    def items(self, path: PySide2.QtGui.QPainterPath, mode: PySide2.QtCore.Qt.ItemSelectionMode = ..., order: PySide2.QtCore.Qt.SortOrder = ..., deviceTransform: PySide2.QtGui.QTransform = ...) -> typing.List[QGraphicsItem]: ...
    @overload
    def items(self, polygon: PySide2.QtGui.QPolygonF, mode: PySide2.QtCore.Qt.ItemSelectionMode = ..., order: PySide2.QtCore.Qt.SortOrder = ..., deviceTransform: PySide2.QtGui.QTransform = ...) -> typing.List[QGraphicsItem]: ...
    @overload
    def items(self, pos: PySide2.QtCore.QPointF, mode: PySide2.QtCore.Qt.ItemSelectionMode = ..., order: PySide2.QtCore.Qt.SortOrder = ..., deviceTransform: PySide2.QtGui.QTransform = ...) -> typing.List[QGraphicsItem]: ...
    @overload
    def items(self, rect: PySide2.QtCore.QRectF, mode: PySide2.QtCore.Qt.ItemSelectionMode = ..., order: PySide2.QtCore.Qt.SortOrder = ..., deviceTransform: PySide2.QtGui.QTransform = ...) -> typing.List[QGraphicsItem]: ...
    @overload
    def items(self, x: float, y: float, w: float, h: float, mode: PySide2.QtCore.Qt.ItemSelectionMode, order: PySide2.QtCore.Qt.SortOrder, deviceTransform: PySide2.QtGui.QTransform = ...) -> typing.List[QGraphicsItem]: ...
    def itemsBoundingRect(self) -> PySide2.QtCore.QRectF: ...
    def keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def minimumRenderSize(self) -> float: ...
    def mouseDoubleClickEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def mouseGrabberItem(self) -> QGraphicsItem: ...
    def mouseMoveEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def mousePressEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def mouseReleaseEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def palette(self) -> PySide2.QtGui.QPalette: ...
    def removeItem(self, item: QGraphicsItem) -> None: ...
    def render(self, painter: PySide2.QtGui.QPainter, target: PySide2.QtCore.QRectF = ..., source: PySide2.QtCore.QRectF = ..., aspectRatioMode: PySide2.QtCore.Qt.AspectRatioMode = ...) -> None: ...
    def sceneRect(self) -> PySide2.QtCore.QRectF: ...
    def selectedItems(self) -> typing.List[QGraphicsItem]: ...
    def selectionArea(self) -> PySide2.QtGui.QPainterPath: ...
    def sendEvent(self, item: QGraphicsItem, event: PySide2.QtCore.QEvent) -> bool: ...
    def setActivePanel(self, item: QGraphicsItem) -> None: ...
    def setActiveWindow(self, widget: QGraphicsWidget) -> None: ...
    def setBackgroundBrush(self, brush: PySide2.QtGui.QBrush) -> None: ...
    def setBspTreeDepth(self, depth: int) -> None: ...
    def setFocus(self, focusReason: PySide2.QtCore.Qt.FocusReason = ...) -> None: ...
    def setFocusItem(self, item: QGraphicsItem, focusReason: PySide2.QtCore.Qt.FocusReason = ...) -> None: ...
    def setFocusOnTouch(self, enabled: bool) -> None: ...
    def setFont(self, font: PySide2.QtGui.QFont) -> None: ...
    def setForegroundBrush(self, brush: PySide2.QtGui.QBrush) -> None: ...
    def setItemIndexMethod(self, method: QGraphicsScene.ItemIndexMethod) -> None: ...
    def setMinimumRenderSize(self, minSize: float) -> None: ...
    def setPalette(self, palette: PySide2.QtGui.QPalette) -> None: ...
    @overload
    def setSceneRect(self, rect: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def setSceneRect(self, x: float, y: float, w: float, h: float) -> None: ...
    @overload
    def setSelectionArea(self, path: PySide2.QtGui.QPainterPath, deviceTransform: PySide2.QtGui.QTransform) -> None: ...
    @overload
    def setSelectionArea(self, path: PySide2.QtGui.QPainterPath, mode: PySide2.QtCore.Qt.ItemSelectionMode = ..., deviceTransform: PySide2.QtGui.QTransform = ...) -> None: ...
    @overload
    def setSelectionArea(self, path: PySide2.QtGui.QPainterPath, selectionOperation: PySide2.QtCore.Qt.ItemSelectionOperation, mode: PySide2.QtCore.Qt.ItemSelectionMode = ..., deviceTransform: PySide2.QtGui.QTransform = ...) -> None: ...
    def setSortCacheEnabled(self, enabled: bool) -> None: ...
    def setStickyFocus(self, enabled: bool) -> None: ...
    def setStyle(self, style: QStyle) -> None: ...
    def stickyFocus(self) -> bool: ...
    def style(self) -> QStyle: ...
    @overload
    def update(self, rect: PySide2.QtCore.QRectF = ...) -> None: ...
    @overload
    def update(self, x: float, y: float, w: float, h: float) -> None: ...
    def views(self) -> typing.List[QGraphicsView]: ...
    def wheelEvent(self, event: QGraphicsSceneWheelEvent) -> None: ...
    def width(self) -> float: ...

class QGraphicsSceneContextMenuEvent(QGraphicsSceneEvent):
    class Reason:
        Keyboard: ClassVar[QGraphicsSceneContextMenuEvent.Reason] = ...
        Mouse: ClassVar[QGraphicsSceneContextMenuEvent.Reason] = ...
        Other: ClassVar[QGraphicsSceneContextMenuEvent.Reason] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGraphicsSceneContextMenuEvent.Reason: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsSceneContextMenuEvent.Reason: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGraphicsSceneContextMenuEvent.Reason: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsSceneContextMenuEvent.Reason: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGraphicsSceneContextMenuEvent.Reason: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsSceneContextMenuEvent.Reason: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGraphicsSceneContextMenuEvent.Reason: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsSceneContextMenuEvent.Reason: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGraphicsSceneContextMenuEvent.Reason: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsSceneContextMenuEvent.Reason: ...
        def __sub__(self, other: typing.SupportsInt) -> QGraphicsSceneContextMenuEvent.Reason: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsSceneContextMenuEvent.Reason: ...
    Keyboard: ClassVar[QGraphicsSceneContextMenuEvent.Reason] = ...
    Mouse: ClassVar[QGraphicsSceneContextMenuEvent.Reason] = ...
    Other: ClassVar[QGraphicsSceneContextMenuEvent.Reason] = ...
    def __init__(self, type: typing.Union[PySide2.QtCore.QEvent.Type,None] = ...) -> None: ...
    def modifiers(self) -> typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]: ...
    def pos(self) -> PySide2.QtCore.QPointF: ...
    def reason(self) -> QGraphicsSceneContextMenuEvent.Reason: ...
    def scenePos(self) -> PySide2.QtCore.QPointF: ...
    def screenPos(self) -> PySide2.QtCore.QPoint: ...
    def setModifiers(self, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> None: ...
    def setPos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setReason(self, reason: QGraphicsSceneContextMenuEvent.Reason) -> None: ...
    def setScenePos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setScreenPos(self, pos: PySide2.QtCore.QPoint) -> None: ...

class QGraphicsSceneDragDropEvent(QGraphicsSceneEvent):
    def __init__(self, type: typing.Union[PySide2.QtCore.QEvent.Type,None] = ...) -> None: ...
    def acceptProposedAction(self) -> None: ...
    def buttons(self) -> typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]: ...
    def dropAction(self) -> PySide2.QtCore.Qt.DropAction: ...
    def mimeData(self) -> PySide2.QtCore.QMimeData: ...
    def modifiers(self) -> typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]: ...
    def pos(self) -> PySide2.QtCore.QPointF: ...
    def possibleActions(self) -> typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction]: ...
    def proposedAction(self) -> PySide2.QtCore.Qt.DropAction: ...
    def scenePos(self) -> PySide2.QtCore.QPointF: ...
    def screenPos(self) -> PySide2.QtCore.QPoint: ...
    def setButtons(self, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]) -> None: ...
    def setDropAction(self, action: PySide2.QtCore.Qt.DropAction) -> None: ...
    def setModifiers(self, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> None: ...
    def setPos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setPossibleActions(self, actions: typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction]) -> None: ...
    def setProposedAction(self, action: PySide2.QtCore.Qt.DropAction) -> None: ...
    def setScenePos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setScreenPos(self, pos: PySide2.QtCore.QPoint) -> None: ...
    def source(self) -> QWidget: ...

class QGraphicsSceneEvent(PySide2.QtCore.QEvent):
    def __init__(self, type: PySide2.QtCore.QEvent.Type) -> None: ...
    def widget(self) -> QWidget: ...

class QGraphicsSceneHelpEvent(QGraphicsSceneEvent):
    def __init__(self, type: typing.Union[PySide2.QtCore.QEvent.Type,None] = ...) -> None: ...
    def scenePos(self) -> PySide2.QtCore.QPointF: ...
    def screenPos(self) -> PySide2.QtCore.QPoint: ...
    def setScenePos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setScreenPos(self, pos: PySide2.QtCore.QPoint) -> None: ...

class QGraphicsSceneHoverEvent(QGraphicsSceneEvent):
    def __init__(self, type: typing.Union[PySide2.QtCore.QEvent.Type,None] = ...) -> None: ...
    def lastPos(self) -> PySide2.QtCore.QPointF: ...
    def lastScenePos(self) -> PySide2.QtCore.QPointF: ...
    def lastScreenPos(self) -> PySide2.QtCore.QPoint: ...
    def modifiers(self) -> typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]: ...
    def pos(self) -> PySide2.QtCore.QPointF: ...
    def scenePos(self) -> PySide2.QtCore.QPointF: ...
    def screenPos(self) -> PySide2.QtCore.QPoint: ...
    def setLastPos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setLastScenePos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setLastScreenPos(self, pos: PySide2.QtCore.QPoint) -> None: ...
    def setModifiers(self, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> None: ...
    def setPos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setScenePos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setScreenPos(self, pos: PySide2.QtCore.QPoint) -> None: ...

class QGraphicsSceneMouseEvent(QGraphicsSceneEvent):
    def __init__(self, type: typing.Union[PySide2.QtCore.QEvent.Type,None] = ...) -> None: ...
    def button(self) -> PySide2.QtCore.Qt.MouseButton: ...
    def buttonDownPos(self, button: PySide2.QtCore.Qt.MouseButton) -> PySide2.QtCore.QPointF: ...
    def buttonDownScenePos(self, button: PySide2.QtCore.Qt.MouseButton) -> PySide2.QtCore.QPointF: ...
    def buttonDownScreenPos(self, button: PySide2.QtCore.Qt.MouseButton) -> PySide2.QtCore.QPoint: ...
    def buttons(self) -> typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]: ...
    def flags(self) -> typing.Union[PySide2.QtCore.Qt.MouseEventFlags,PySide2.QtCore.Qt.MouseEventFlag]: ...
    def lastPos(self) -> PySide2.QtCore.QPointF: ...
    def lastScenePos(self) -> PySide2.QtCore.QPointF: ...
    def lastScreenPos(self) -> PySide2.QtCore.QPoint: ...
    def modifiers(self) -> typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]: ...
    def pos(self) -> PySide2.QtCore.QPointF: ...
    def scenePos(self) -> PySide2.QtCore.QPointF: ...
    def screenPos(self) -> PySide2.QtCore.QPoint: ...
    def setButton(self, button: PySide2.QtCore.Qt.MouseButton) -> None: ...
    def setButtonDownPos(self, button: PySide2.QtCore.Qt.MouseButton, pos: PySide2.QtCore.QPointF) -> None: ...
    def setButtonDownScenePos(self, button: PySide2.QtCore.Qt.MouseButton, pos: PySide2.QtCore.QPointF) -> None: ...
    def setButtonDownScreenPos(self, button: PySide2.QtCore.Qt.MouseButton, pos: PySide2.QtCore.QPoint) -> None: ...
    def setButtons(self, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]) -> None: ...
    def setFlags(self, arg__1: typing.Union[PySide2.QtCore.Qt.MouseEventFlags,PySide2.QtCore.Qt.MouseEventFlag]) -> None: ...
    def setLastPos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setLastScenePos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setLastScreenPos(self, pos: PySide2.QtCore.QPoint) -> None: ...
    def setModifiers(self, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> None: ...
    def setPos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setScenePos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setScreenPos(self, pos: PySide2.QtCore.QPoint) -> None: ...
    def setSource(self, source: PySide2.QtCore.Qt.MouseEventSource) -> None: ...
    def source(self) -> PySide2.QtCore.Qt.MouseEventSource: ...

class QGraphicsSceneMoveEvent(QGraphicsSceneEvent):
    def __init__(self) -> None: ...
    def newPos(self) -> PySide2.QtCore.QPointF: ...
    def oldPos(self) -> PySide2.QtCore.QPointF: ...
    def setNewPos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setOldPos(self, pos: PySide2.QtCore.QPointF) -> None: ...

class QGraphicsSceneResizeEvent(QGraphicsSceneEvent):
    def __init__(self) -> None: ...
    def newSize(self) -> PySide2.QtCore.QSizeF: ...
    def oldSize(self) -> PySide2.QtCore.QSizeF: ...
    def setNewSize(self, size: PySide2.QtCore.QSizeF) -> None: ...
    def setOldSize(self, size: PySide2.QtCore.QSizeF) -> None: ...

class QGraphicsSceneWheelEvent(QGraphicsSceneEvent):
    def __init__(self, type: typing.Union[PySide2.QtCore.QEvent.Type,None] = ...) -> None: ...
    def buttons(self) -> typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]: ...
    def delta(self) -> int: ...
    def modifiers(self) -> typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]: ...
    def orientation(self) -> PySide2.QtCore.Qt.Orientation: ...
    def pos(self) -> PySide2.QtCore.QPointF: ...
    def scenePos(self) -> PySide2.QtCore.QPointF: ...
    def screenPos(self) -> PySide2.QtCore.QPoint: ...
    def setButtons(self, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]) -> None: ...
    def setDelta(self, delta: int) -> None: ...
    def setModifiers(self, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> None: ...
    def setOrientation(self, orientation: PySide2.QtCore.Qt.Orientation) -> None: ...
    def setPos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setScenePos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setScreenPos(self, pos: PySide2.QtCore.QPoint) -> None: ...

class QGraphicsSimpleTextItem(QAbstractGraphicsShapeItem):
    @overload
    def __init__(self, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    @overload
    def __init__(self, text: str, parent: typing.Union[QGraphicsItem,None] = ...) -> None: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def contains(self, point: PySide2.QtCore.QPointF) -> bool: ...
    def extension(self, variant: typing.Any) -> typing.Any: ...
    def font(self) -> PySide2.QtGui.QFont: ...
    def isObscuredBy(self, item: QGraphicsItem) -> bool: ...
    def opaqueArea(self) -> PySide2.QtGui.QPainterPath: ...
    def paint(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionGraphicsItem, widget: QWidget) -> None: ...
    def setFont(self, font: PySide2.QtGui.QFont) -> None: ...
    def setText(self, text: str) -> None: ...
    def shape(self) -> PySide2.QtGui.QPainterPath: ...
    def text(self) -> str: ...
    def type(self) -> int: ...

class QGraphicsTextItem(QGraphicsObject):
    linkActivated: ClassVar[PySide2.QtCore.Signal] = ...
    linkHovered: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, parent: typing.Union[QGraphicsItem,None] = ..., children: typing.Any = ..., childrenChanged: typing.Callable = ..., destroyed: typing.Callable = ..., effect: typing.Any = ..., enabled: bool = ..., enabledChanged: typing.Callable = ..., height: float = ..., heightChanged: typing.Callable = ..., linkActivated: typing.Callable = ..., linkHovered: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., parentChanged: typing.Callable = ..., pos: PySide2.QtCore.QPointF = ..., rotation: float = ..., rotationChanged: typing.Callable = ..., scale: float = ..., scaleChanged: typing.Callable = ..., transformOriginPoint: PySide2.QtCore.QPointF = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., width: float = ..., widthChanged: typing.Callable = ..., x: float = ..., xChanged: typing.Callable = ..., y: float = ..., yChanged: typing.Callable = ..., z: float = ..., zChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, text: str, parent: typing.Union[QGraphicsItem,None] = ..., children: typing.Any = ..., childrenChanged: typing.Callable = ..., destroyed: typing.Callable = ..., effect: typing.Any = ..., enabled: bool = ..., enabledChanged: typing.Callable = ..., height: float = ..., heightChanged: typing.Callable = ..., linkActivated: typing.Callable = ..., linkHovered: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., parentChanged: typing.Callable = ..., pos: PySide2.QtCore.QPointF = ..., rotation: float = ..., rotationChanged: typing.Callable = ..., scale: float = ..., scaleChanged: typing.Callable = ..., transformOriginPoint: PySide2.QtCore.QPointF = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., width: float = ..., widthChanged: typing.Callable = ..., x: float = ..., xChanged: typing.Callable = ..., y: float = ..., yChanged: typing.Callable = ..., z: float = ..., zChanged: typing.Callable = ...) -> None: ...
    def adjustSize(self) -> None: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def contains(self, point: PySide2.QtCore.QPointF) -> bool: ...
    def contextMenuEvent(self, event: QGraphicsSceneContextMenuEvent) -> None: ...
    def defaultTextColor(self) -> PySide2.QtGui.QColor: ...
    def document(self) -> PySide2.QtGui.QTextDocument: ...
    def dragEnterEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def dragLeaveEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def dragMoveEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def dropEvent(self, event: QGraphicsSceneDragDropEvent) -> None: ...
    def extension(self, variant: typing.Any) -> typing.Any: ...
    def focusInEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusOutEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def font(self) -> PySide2.QtGui.QFont: ...
    def hoverEnterEvent(self, event: QGraphicsSceneHoverEvent) -> None: ...
    def hoverLeaveEvent(self, event: QGraphicsSceneHoverEvent) -> None: ...
    def hoverMoveEvent(self, event: QGraphicsSceneHoverEvent) -> None: ...
    def inputMethodEvent(self, event: PySide2.QtGui.QInputMethodEvent) -> None: ...
    def inputMethodQuery(self, query: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    def isObscuredBy(self, item: QGraphicsItem) -> bool: ...
    def keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def mouseDoubleClickEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def mouseMoveEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def mousePressEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def mouseReleaseEvent(self, event: QGraphicsSceneMouseEvent) -> None: ...
    def opaqueArea(self) -> PySide2.QtGui.QPainterPath: ...
    def openExternalLinks(self) -> bool: ...
    def paint(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionGraphicsItem, widget: QWidget) -> None: ...
    def sceneEvent(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def setDefaultTextColor(self, c: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setDocument(self, document: PySide2.QtGui.QTextDocument) -> None: ...
    def setExtension(self, extension: QGraphicsItem.Extension, variant: typing.Any) -> None: ...
    def setFont(self, font: PySide2.QtGui.QFont) -> None: ...
    def setHtml(self, html: str) -> None: ...
    def setOpenExternalLinks(self, open: bool) -> None: ...
    def setPlainText(self, text: str) -> None: ...
    def setTabChangesFocus(self, b: bool) -> None: ...
    def setTextCursor(self, cursor: PySide2.QtGui.QTextCursor) -> None: ...
    def setTextInteractionFlags(self, flags: typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag]) -> None: ...
    def setTextWidth(self, width: float) -> None: ...
    def shape(self) -> PySide2.QtGui.QPainterPath: ...
    def supportsExtension(self, extension: QGraphicsItem.Extension) -> bool: ...
    def tabChangesFocus(self) -> bool: ...
    def textCursor(self) -> PySide2.QtGui.QTextCursor: ...
    def textInteractionFlags(self) -> typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag]: ...
    def textWidth(self) -> float: ...
    def toHtml(self) -> str: ...
    def toPlainText(self) -> str: ...
    def type(self) -> int: ...

class QGraphicsTransform(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def applyTo(self, matrix: PySide2.QtGui.QMatrix4x4) -> None: ...
    def update(self) -> None: ...

class QGraphicsView(QAbstractScrollArea):
    class CacheMode:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsView.CacheMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QGraphicsView.CacheMode: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsView.CacheMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsView.CacheMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsView.CacheMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsView.CacheMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsView.CacheMode: ...

    class CacheModeFlag:
        CacheBackground: ClassVar[QGraphicsView.CacheModeFlag] = ...
        CacheNone: ClassVar[QGraphicsView.CacheModeFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsView.CacheMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QGraphicsView.CacheModeFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsView.CacheMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsView.CacheMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsView.CacheMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsView.CacheMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsView.CacheMode: ...

    class DragMode:
        NoDrag: ClassVar[QGraphicsView.DragMode] = ...
        RubberBandDrag: ClassVar[QGraphicsView.DragMode] = ...
        ScrollHandDrag: ClassVar[QGraphicsView.DragMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGraphicsView.DragMode: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsView.DragMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGraphicsView.DragMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsView.DragMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGraphicsView.DragMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsView.DragMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGraphicsView.DragMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsView.DragMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGraphicsView.DragMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsView.DragMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QGraphicsView.DragMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsView.DragMode: ...

    class OptimizationFlag:
        DontAdjustForAntialiasing: ClassVar[QGraphicsView.OptimizationFlag] = ...
        DontClipPainter: ClassVar[QGraphicsView.OptimizationFlag] = ...
        DontSavePainterState: ClassVar[QGraphicsView.OptimizationFlag] = ...
        IndirectPainting: ClassVar[QGraphicsView.OptimizationFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsView.OptimizationFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QGraphicsView.OptimizationFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsView.OptimizationFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsView.OptimizationFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsView.OptimizationFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsView.OptimizationFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsView.OptimizationFlags: ...

    class OptimizationFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsView.OptimizationFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QGraphicsView.OptimizationFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsView.OptimizationFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsView.OptimizationFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsView.OptimizationFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsView.OptimizationFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsView.OptimizationFlags: ...

    class ViewportAnchor:
        AnchorUnderMouse: ClassVar[QGraphicsView.ViewportAnchor] = ...
        AnchorViewCenter: ClassVar[QGraphicsView.ViewportAnchor] = ...
        NoAnchor: ClassVar[QGraphicsView.ViewportAnchor] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportAnchor: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportAnchor: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportAnchor: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportAnchor: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportAnchor: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportAnchor: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportAnchor: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportAnchor: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportAnchor: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportAnchor: ...
        def __sub__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportAnchor: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportAnchor: ...

    class ViewportUpdateMode:
        BoundingRectViewportUpdate: ClassVar[QGraphicsView.ViewportUpdateMode] = ...
        FullViewportUpdate: ClassVar[QGraphicsView.ViewportUpdateMode] = ...
        MinimalViewportUpdate: ClassVar[QGraphicsView.ViewportUpdateMode] = ...
        NoViewportUpdate: ClassVar[QGraphicsView.ViewportUpdateMode] = ...
        SmartViewportUpdate: ClassVar[QGraphicsView.ViewportUpdateMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportUpdateMode: ...
        def __and__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportUpdateMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportUpdateMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportUpdateMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportUpdateMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportUpdateMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportUpdateMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportUpdateMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportUpdateMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportUpdateMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportUpdateMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QGraphicsView.ViewportUpdateMode: ...
    AnchorUnderMouse: ClassVar[QGraphicsView.ViewportAnchor] = ...
    AnchorViewCenter: ClassVar[QGraphicsView.ViewportAnchor] = ...
    BoundingRectViewportUpdate: ClassVar[QGraphicsView.ViewportUpdateMode] = ...
    CacheBackground: ClassVar[QGraphicsView.CacheModeFlag] = ...
    CacheNone: ClassVar[QGraphicsView.CacheModeFlag] = ...
    DontAdjustForAntialiasing: ClassVar[QGraphicsView.OptimizationFlag] = ...
    DontClipPainter: ClassVar[QGraphicsView.OptimizationFlag] = ...
    DontSavePainterState: ClassVar[QGraphicsView.OptimizationFlag] = ...
    FullViewportUpdate: ClassVar[QGraphicsView.ViewportUpdateMode] = ...
    IndirectPainting: ClassVar[QGraphicsView.OptimizationFlag] = ...
    MinimalViewportUpdate: ClassVar[QGraphicsView.ViewportUpdateMode] = ...
    NoAnchor: ClassVar[QGraphicsView.ViewportAnchor] = ...
    NoDrag: ClassVar[QGraphicsView.DragMode] = ...
    NoViewportUpdate: ClassVar[QGraphicsView.ViewportUpdateMode] = ...
    RubberBandDrag: ClassVar[QGraphicsView.DragMode] = ...
    ScrollHandDrag: ClassVar[QGraphicsView.DragMode] = ...
    SmartViewportUpdate: ClassVar[QGraphicsView.ViewportUpdateMode] = ...
    rubberBandChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., backgroundBrush: PySide2.QtGui.QBrush = ..., baseSize: PySide2.QtCore.QSize = ..., cacheMode: typing.Union[QGraphicsView.CacheMode,QGraphicsView.CacheModeFlag] = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., dragMode: QGraphicsView.DragMode = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., foregroundBrush: PySide2.QtGui.QBrush = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QGraphicsView.Shadow = ..., frameShape: QGraphicsView.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., interactive: bool = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., optimizationFlags: typing.Union[QGraphicsView.OptimizationFlags,QGraphicsView.OptimizationFlag] = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., renderHints: typing.Union[PySide2.QtGui.QPainter.RenderHints,PySide2.QtGui.QPainter.RenderHint] = ..., resizeAnchor: QGraphicsView.ViewportAnchor = ..., rubberBandChanged: typing.Callable = ..., rubberBandSelectionMode: PySide2.QtCore.Qt.ItemSelectionMode = ..., sceneRect: PySide2.QtCore.QRectF = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QGraphicsView.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., transformationAnchor: QGraphicsView.ViewportAnchor = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., viewportUpdateMode: QGraphicsView.ViewportUpdateMode = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, scene: QGraphicsScene, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., backgroundBrush: PySide2.QtGui.QBrush = ..., baseSize: PySide2.QtCore.QSize = ..., cacheMode: typing.Union[QGraphicsView.CacheMode,QGraphicsView.CacheModeFlag] = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., dragMode: QGraphicsView.DragMode = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., foregroundBrush: PySide2.QtGui.QBrush = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QGraphicsView.Shadow = ..., frameShape: QGraphicsView.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., interactive: bool = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., optimizationFlags: typing.Union[QGraphicsView.OptimizationFlags,QGraphicsView.OptimizationFlag] = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., renderHints: typing.Union[PySide2.QtGui.QPainter.RenderHints,PySide2.QtGui.QPainter.RenderHint] = ..., resizeAnchor: QGraphicsView.ViewportAnchor = ..., rubberBandChanged: typing.Callable = ..., rubberBandSelectionMode: PySide2.QtCore.Qt.ItemSelectionMode = ..., sceneRect: PySide2.QtCore.QRectF = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QGraphicsView.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., transformationAnchor: QGraphicsView.ViewportAnchor = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., viewportUpdateMode: QGraphicsView.ViewportUpdateMode = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def alignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def backgroundBrush(self) -> PySide2.QtGui.QBrush: ...
    def cacheMode(self) -> typing.Union[QGraphicsView.CacheMode,QGraphicsView.CacheModeFlag]: ...
    @overload
    def centerOn(self, item: QGraphicsItem) -> None: ...
    @overload
    def centerOn(self, pos: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def centerOn(self, x: float, y: float) -> None: ...
    def contextMenuEvent(self, event: PySide2.QtGui.QContextMenuEvent) -> None: ...
    def dragEnterEvent(self, event: PySide2.QtGui.QDragEnterEvent) -> None: ...
    def dragLeaveEvent(self, event: PySide2.QtGui.QDragLeaveEvent) -> None: ...
    def dragMode(self) -> QGraphicsView.DragMode: ...
    def dragMoveEvent(self, event: PySide2.QtGui.QDragMoveEvent) -> None: ...
    def drawBackground(self, painter: PySide2.QtGui.QPainter, rect: PySide2.QtCore.QRectF) -> None: ...
    def drawForeground(self, painter: PySide2.QtGui.QPainter, rect: PySide2.QtCore.QRectF) -> None: ...
    def drawItems(self, painter: PySide2.QtGui.QPainter, numItems: int, items: typing.Sequence[QGraphicsItem], options: typing.Sequence[QStyleOptionGraphicsItem]) -> None: ...
    def dropEvent(self, event: PySide2.QtGui.QDropEvent) -> None: ...
    @overload
    def ensureVisible(self, item: QGraphicsItem, xmargin: int = ..., ymargin: int = ...) -> None: ...
    @overload
    def ensureVisible(self, rect: PySide2.QtCore.QRectF, xmargin: int = ..., ymargin: int = ...) -> None: ...
    @overload
    def ensureVisible(self, x: float, y: float, w: float, h: float, xmargin: int = ..., ymargin: int = ...) -> None: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    @overload
    def fitInView(self, item: QGraphicsItem, aspectRadioMode: PySide2.QtCore.Qt.AspectRatioMode = ...) -> None: ...
    @overload
    def fitInView(self, rect: PySide2.QtCore.QRectF, aspectRadioMode: PySide2.QtCore.Qt.AspectRatioMode = ...) -> None: ...
    @overload
    def fitInView(self, x: float, y: float, w: float, h: float, aspectRadioMode: PySide2.QtCore.Qt.AspectRatioMode = ...) -> None: ...
    def focusInEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def focusOutEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def foregroundBrush(self) -> PySide2.QtGui.QBrush: ...
    def inputMethodEvent(self, event: PySide2.QtGui.QInputMethodEvent) -> None: ...
    def inputMethodQuery(self, query: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    def invalidateScene(self, rect: PySide2.QtCore.QRectF = ..., layers: typing.Union[QGraphicsScene.SceneLayers,QGraphicsScene.SceneLayer] = ...) -> None: ...
    def isInteractive(self) -> bool: ...
    def isTransformed(self) -> bool: ...
    @overload
    def itemAt(self, pos: PySide2.QtCore.QPoint) -> QGraphicsItem: ...
    @overload
    def itemAt(self, x: int, y: int) -> QGraphicsItem: ...
    @overload
    def items(self) -> typing.List[QGraphicsItem]: ...
    @overload
    def items(self, path: PySide2.QtGui.QPainterPath, mode: PySide2.QtCore.Qt.ItemSelectionMode = ...) -> typing.List[QGraphicsItem]: ...
    @overload
    def items(self, polygon: PySide2.QtGui.QPolygon, mode: PySide2.QtCore.Qt.ItemSelectionMode = ...) -> typing.List[QGraphicsItem]: ...
    @overload
    def items(self, pos: PySide2.QtCore.QPoint) -> typing.List[QGraphicsItem]: ...
    @overload
    def items(self, rect: PySide2.QtCore.QRect, mode: PySide2.QtCore.Qt.ItemSelectionMode = ...) -> typing.List[QGraphicsItem]: ...
    @overload
    def items(self, x: int, y: int) -> typing.List[QGraphicsItem]: ...
    @overload
    def items(self, x: int, y: int, w: int, h: int, mode: PySide2.QtCore.Qt.ItemSelectionMode = ...) -> typing.List[QGraphicsItem]: ...
    def keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    @overload
    def mapFromScene(self, path: PySide2.QtGui.QPainterPath) -> PySide2.QtGui.QPainterPath: ...
    @overload
    def mapFromScene(self, point: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPoint: ...
    @overload
    def mapFromScene(self, polygon: PySide2.QtGui.QPolygonF) -> PySide2.QtGui.QPolygon: ...
    @overload
    def mapFromScene(self, rect: PySide2.QtCore.QRectF) -> PySide2.QtGui.QPolygon: ...
    @overload
    def mapFromScene(self, x: float, y: float) -> PySide2.QtCore.QPoint: ...
    @overload
    def mapFromScene(self, x: float, y: float, w: float, h: float) -> PySide2.QtGui.QPolygon: ...
    @overload
    def mapToScene(self, path: PySide2.QtGui.QPainterPath) -> PySide2.QtGui.QPainterPath: ...
    @overload
    def mapToScene(self, point: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPointF: ...
    @overload
    def mapToScene(self, polygon: PySide2.QtGui.QPolygon) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapToScene(self, rect: PySide2.QtCore.QRect) -> PySide2.QtGui.QPolygonF: ...
    @overload
    def mapToScene(self, x: int, y: int) -> PySide2.QtCore.QPointF: ...
    @overload
    def mapToScene(self, x: int, y: int, w: int, h: int) -> PySide2.QtGui.QPolygonF: ...
    def matrix(self) -> PySide2.QtGui.QMatrix: ...
    def mouseDoubleClickEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseMoveEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def optimizationFlags(self) -> typing.Union[QGraphicsView.OptimizationFlags,QGraphicsView.OptimizationFlag]: ...
    def paintEvent(self, event: PySide2.QtGui.QPaintEvent) -> None: ...
    @overload
    def render(self, painter: PySide2.QtGui.QPainter, target: PySide2.QtCore.QRectF = ..., source: PySide2.QtCore.QRect = ..., aspectRatioMode: PySide2.QtCore.Qt.AspectRatioMode = ...) -> None: ...
    @overload
    def render(self, target: PySide2.QtGui.QPaintDevice, targetOffset: PySide2.QtCore.QPoint = ..., sourceRegion: PySide2.QtGui.QRegion = ..., renderFlags: typing.Union[QWidget.RenderFlags,QWidget.RenderFlag] = ...) -> None: ...
    def renderHints(self) -> typing.Union[PySide2.QtGui.QPainter.RenderHints,PySide2.QtGui.QPainter.RenderHint]: ...
    def resetCachedContent(self) -> None: ...
    def resetMatrix(self) -> None: ...
    def resetTransform(self) -> None: ...
    def resizeAnchor(self) -> QGraphicsView.ViewportAnchor: ...
    def resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None: ...
    def rotate(self, angle: float) -> None: ...
    def rubberBandRect(self) -> PySide2.QtCore.QRect: ...
    def rubberBandSelectionMode(self) -> PySide2.QtCore.Qt.ItemSelectionMode: ...
    def scale(self, sx: float, sy: float) -> None: ...
    def scene(self) -> QGraphicsScene: ...
    def sceneRect(self) -> PySide2.QtCore.QRectF: ...
    def scrollContentsBy(self, dx: int, dy: int) -> None: ...
    def setAlignment(self, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setBackgroundBrush(self, brush: PySide2.QtGui.QBrush) -> None: ...
    def setCacheMode(self, mode: typing.Union[QGraphicsView.CacheMode,QGraphicsView.CacheModeFlag]) -> None: ...
    def setDragMode(self, mode: QGraphicsView.DragMode) -> None: ...
    def setForegroundBrush(self, brush: PySide2.QtGui.QBrush) -> None: ...
    def setInteractive(self, allowed: bool) -> None: ...
    def setMatrix(self, matrix: PySide2.QtGui.QMatrix, combine: bool = ...) -> None: ...
    def setOptimizationFlag(self, flag: QGraphicsView.OptimizationFlag, enabled: bool = ...) -> None: ...
    def setOptimizationFlags(self, flags: typing.Union[QGraphicsView.OptimizationFlags,QGraphicsView.OptimizationFlag]) -> None: ...
    def setRenderHint(self, hint: PySide2.QtGui.QPainter.RenderHint, enabled: bool = ...) -> None: ...
    def setRenderHints(self, hints: typing.Union[PySide2.QtGui.QPainter.RenderHints,PySide2.QtGui.QPainter.RenderHint]) -> None: ...
    def setResizeAnchor(self, anchor: QGraphicsView.ViewportAnchor) -> None: ...
    def setRubberBandSelectionMode(self, mode: PySide2.QtCore.Qt.ItemSelectionMode) -> None: ...
    def setScene(self, scene: QGraphicsScene) -> None: ...
    @overload
    def setSceneRect(self, rect: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def setSceneRect(self, x: float, y: float, w: float, h: float) -> None: ...
    def setTransform(self, matrix: PySide2.QtGui.QTransform, combine: bool = ...) -> None: ...
    def setTransformationAnchor(self, anchor: QGraphicsView.ViewportAnchor) -> None: ...
    def setViewportUpdateMode(self, mode: QGraphicsView.ViewportUpdateMode) -> None: ...
    def setupViewport(self, widget: QWidget) -> None: ...
    def shear(self, sh: float, sv: float) -> None: ...
    def showEvent(self, event: PySide2.QtGui.QShowEvent) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def transform(self) -> PySide2.QtGui.QTransform: ...
    def transformationAnchor(self) -> QGraphicsView.ViewportAnchor: ...
    def translate(self, dx: float, dy: float) -> None: ...
    def updateScene(self, rects: typing.Sequence[PySide2.QtCore.QRectF]) -> None: ...
    def updateSceneRect(self, rect: PySide2.QtCore.QRectF) -> None: ...
    def viewportEvent(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def viewportTransform(self) -> PySide2.QtGui.QTransform: ...
    def viewportUpdateMode(self) -> QGraphicsView.ViewportUpdateMode: ...
    def wheelEvent(self, event: PySide2.QtGui.QWheelEvent) -> None: ...

class QGraphicsWidget(QGraphicsObject, QGraphicsLayoutItem):
    geometryChanged: ClassVar[PySide2.QtCore.Signal] = ...
    layoutChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QGraphicsItem,None] = ..., wFlags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., autoFillBackground: bool = ..., children: typing.Any = ..., childrenChanged: typing.Callable = ..., destroyed: typing.Callable = ..., effect: typing.Any = ..., enabled: bool = ..., enabledChanged: typing.Callable = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., geometry: PySide2.QtCore.QRectF = ..., geometryChanged: typing.Callable = ..., height: float = ..., heightChanged: typing.Callable = ..., layout: QGraphicsLayout = ..., layoutChanged: typing.Callable = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., maximumSize: PySide2.QtCore.QSizeF = ..., minimumSize: PySide2.QtCore.QSizeF = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., parentChanged: typing.Callable = ..., pos: PySide2.QtCore.QPointF = ..., preferredSize: PySide2.QtCore.QSizeF = ..., rotation: float = ..., rotationChanged: typing.Callable = ..., scale: float = ..., scaleChanged: typing.Callable = ..., size: PySide2.QtCore.QSizeF = ..., sizePolicy: QSizePolicy = ..., transformOriginPoint: PySide2.QtCore.QPointF = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., width: float = ..., widthChanged: typing.Callable = ..., windowFlags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., windowTitle: str = ..., x: float = ..., xChanged: typing.Callable = ..., y: float = ..., yChanged: typing.Callable = ..., z: float = ..., zChanged: typing.Callable = ...) -> None: ...
    def actions(self) -> typing.List[QAction]: ...
    def addAction(self, action: QAction) -> None: ...
    def addActions(self, actions: typing.Sequence[QAction]) -> None: ...
    def adjustSize(self) -> None: ...
    def autoFillBackground(self) -> bool: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def changeEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def close(self) -> bool: ...
    def closeEvent(self, event: PySide2.QtGui.QCloseEvent) -> None: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def focusInEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def focusOutEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusPolicy(self) -> PySide2.QtCore.Qt.FocusPolicy: ...
    def focusWidget(self) -> QGraphicsWidget: ...
    def font(self) -> PySide2.QtGui.QFont: ...
    def getContentsMargins(self) -> typing.Tuple[float,float,float,float]: ...
    def getWindowFrameMargins(self) -> typing.Tuple[float,float,float,float]: ...
    def grabKeyboardEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def grabMouseEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def grabShortcut(self, sequence: typing.Union[PySide2.QtGui.QKeySequence,str], context: PySide2.QtCore.Qt.ShortcutContext = ...) -> int: ...
    def hideEvent(self, event: PySide2.QtGui.QHideEvent) -> None: ...
    def hoverLeaveEvent(self, event: QGraphicsSceneHoverEvent) -> None: ...
    def hoverMoveEvent(self, event: QGraphicsSceneHoverEvent) -> None: ...
    def initStyleOption(self, option: QStyleOption) -> None: ...
    def insertAction(self, before: QAction, action: QAction) -> None: ...
    def insertActions(self, before: QAction, actions: typing.Sequence[QAction]) -> None: ...
    def isActiveWindow(self) -> bool: ...
    def itemChange(self, change: QGraphicsItem.GraphicsItemChange, value: typing.Any) -> typing.Any: ...
    def layout(self) -> QGraphicsLayout: ...
    def layoutDirection(self) -> PySide2.QtCore.Qt.LayoutDirection: ...
    def moveEvent(self, event: QGraphicsSceneMoveEvent) -> None: ...
    def paint(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionGraphicsItem, widget: typing.Union[QWidget,None] = ...) -> None: ...
    def paintWindowFrame(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionGraphicsItem, widget: typing.Union[QWidget,None] = ...) -> None: ...
    def palette(self) -> PySide2.QtGui.QPalette: ...
    def polishEvent(self) -> None: ...
    def propertyChange(self, propertyName: str, value: typing.Any) -> typing.Any: ...
    def rect(self) -> PySide2.QtCore.QRectF: ...
    def releaseShortcut(self, id: int) -> None: ...
    def removeAction(self, action: QAction) -> None: ...
    @overload
    def resize(self, size: PySide2.QtCore.QSizeF) -> None: ...
    @overload
    def resize(self, w: float, h: float) -> None: ...
    def resizeEvent(self, event: QGraphicsSceneResizeEvent) -> None: ...
    def sceneEvent(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def setAttribute(self, attribute: PySide2.QtCore.Qt.WidgetAttribute, on: bool = ...) -> None: ...
    def setAutoFillBackground(self, enabled: bool) -> None: ...
    @overload
    def setContentsMargins(self, left: float, top: float, right: float, bottom: float) -> None: ...
    @overload
    def setContentsMargins(self, margins: PySide2.QtCore.QMarginsF) -> None: ...
    def setFocusPolicy(self, policy: PySide2.QtCore.Qt.FocusPolicy) -> None: ...
    def setFont(self, font: PySide2.QtGui.QFont) -> None: ...
    @overload
    def setGeometry(self, rect: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def setGeometry(self, x: float, y: float, w: float, h: float) -> None: ...
    def setLayout(self, layout: QGraphicsLayout) -> None: ...
    def setLayoutDirection(self, direction: PySide2.QtCore.Qt.LayoutDirection) -> None: ...
    def setPalette(self, palette: PySide2.QtGui.QPalette) -> None: ...
    def setShortcutAutoRepeat(self, id: int, enabled: bool = ...) -> None: ...
    def setShortcutEnabled(self, id: int, enabled: bool = ...) -> None: ...
    def setStyle(self, style: QStyle) -> None: ...
    @classmethod
    def setTabOrder(cls, first: QGraphicsWidget, second: QGraphicsWidget) -> None: ...
    def setWindowFlags(self, wFlags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType]) -> None: ...
    @overload
    def setWindowFrameMargins(self, left: float, top: float, right: float, bottom: float) -> None: ...
    @overload
    def setWindowFrameMargins(self, margins: PySide2.QtCore.QMarginsF) -> None: ...
    def setWindowTitle(self, title: str) -> None: ...
    def shape(self) -> PySide2.QtGui.QPainterPath: ...
    def showEvent(self, event: PySide2.QtGui.QShowEvent) -> None: ...
    def size(self) -> PySide2.QtCore.QSizeF: ...
    def sizeHint(self, which: PySide2.QtCore.Qt.SizeHint, constraint: PySide2.QtCore.QSizeF = ...) -> PySide2.QtCore.QSizeF: ...
    def style(self) -> QStyle: ...
    def testAttribute(self, attribute: PySide2.QtCore.Qt.WidgetAttribute) -> bool: ...
    def type(self) -> int: ...
    def ungrabKeyboardEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def ungrabMouseEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def unsetLayoutDirection(self) -> None: ...
    def unsetWindowFrameMargins(self) -> None: ...
    def updateGeometry(self) -> None: ...
    def windowFlags(self) -> typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType]: ...
    def windowFrameEvent(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def windowFrameGeometry(self) -> PySide2.QtCore.QRectF: ...
    def windowFrameRect(self) -> PySide2.QtCore.QRectF: ...
    def windowFrameSectionAt(self, pos: PySide2.QtCore.QPointF) -> PySide2.QtCore.Qt.WindowFrameSection: ...
    def windowTitle(self) -> str: ...
    def windowType(self) -> PySide2.QtCore.Qt.WindowType: ...

class QGridLayout(QLayout):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, destroyed: typing.Callable = ..., margin: int = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., sizeConstraint: QGridLayout.SizeConstraint = ..., spacing: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Optional[QWidget], destroyed: typing.Callable = ..., margin: int = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., sizeConstraint: QGridLayout.SizeConstraint = ..., spacing: int = ...) -> None: ...
    @overload
    def addItem(self, arg__1: QLayoutItem) -> None: ...
    @overload
    def addItem(self, item: QLayoutItem, row: int, column: int, rowSpan: int = ..., columnSpan: int = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ...) -> None: ...
    @overload
    def addLayout(self, arg__1: QLayout, row: int, column: int, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ...) -> None: ...
    @overload
    def addLayout(self, arg__1: QLayout, row: int, column: int, rowSpan: int, columnSpan: int, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ...) -> None: ...
    @overload
    def addWidget(self, arg__1: QWidget, row: int, column: int, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ...) -> None: ...
    @overload
    def addWidget(self, arg__1: QWidget, row: int, column: int, rowSpan: int, columnSpan: int, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ...) -> None: ...
    @overload
    def addWidget(self, w: QWidget) -> None: ...
    def cellRect(self, row: int, column: int) -> PySide2.QtCore.QRect: ...
    def columnCount(self) -> int: ...
    def columnMinimumWidth(self, column: int) -> int: ...
    def columnStretch(self, column: int) -> int: ...
    def count(self) -> int: ...
    def expandingDirections(self) -> typing.Union[PySide2.QtCore.Qt.Orientations,PySide2.QtCore.Qt.Orientation]: ...
    def getItemPosition(self, idx: int) -> typing.Tuple[int,int,int,int]: ...
    def hasHeightForWidth(self) -> bool: ...
    def heightForWidth(self, arg__1: int) -> int: ...
    def horizontalSpacing(self) -> int: ...
    def invalidate(self) -> None: ...
    def itemAt(self, index: int) -> QLayoutItem: ...
    def itemAtPosition(self, row: int, column: int) -> QLayoutItem: ...
    def maximumSize(self) -> PySide2.QtCore.QSize: ...
    def minimumHeightForWidth(self, arg__1: int) -> int: ...
    def minimumSize(self) -> PySide2.QtCore.QSize: ...
    def originCorner(self) -> PySide2.QtCore.Qt.Corner: ...
    def rowCount(self) -> int: ...
    def rowMinimumHeight(self, row: int) -> int: ...
    def rowStretch(self, row: int) -> int: ...
    def setColumnMinimumWidth(self, column: int, minSize: int) -> None: ...
    def setColumnStretch(self, column: int, stretch: int) -> None: ...
    def setDefaultPositioning(self, n: int, orient: PySide2.QtCore.Qt.Orientation) -> None: ...
    def setGeometry(self, arg__1: PySide2.QtCore.QRect) -> None: ...
    def setHorizontalSpacing(self, spacing: int) -> None: ...
    def setOriginCorner(self, arg__1: PySide2.QtCore.Qt.Corner) -> None: ...
    def setRowMinimumHeight(self, row: int, minSize: int) -> None: ...
    def setRowStretch(self, row: int, stretch: int) -> None: ...
    def setSpacing(self, spacing: int) -> None: ...
    def setVerticalSpacing(self, spacing: int) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def spacing(self) -> int: ...
    def takeAt(self, index: int) -> QLayoutItem: ...
    def verticalSpacing(self) -> int: ...

class QGroupBox(QWidget):
    clicked: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    toggled: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., checkable: bool = ..., checked: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., flat: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., title: str = ..., toggled: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, title: str, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., checkable: bool = ..., checked: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., flat: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toggled: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def alignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def changeEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def childEvent(self, event: PySide2.QtCore.QChildEvent) -> None: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def focusInEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def initStyleOption(self, option: QStyleOptionGroupBox) -> None: ...
    def isCheckable(self) -> bool: ...
    def isChecked(self) -> bool: ...
    def isFlat(self) -> bool: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def mouseMoveEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def paintEvent(self, event: PySide2.QtGui.QPaintEvent) -> None: ...
    def resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None: ...
    def setAlignment(self, alignment: int) -> None: ...
    def setCheckable(self, checkable: bool) -> None: ...
    def setChecked(self, checked: bool) -> None: ...
    def setFlat(self, flat: bool) -> None: ...
    def setTitle(self, title: str) -> None: ...
    def title(self) -> str: ...

class QHBoxLayout(QBoxLayout):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, destroyed: typing.Callable = ..., margin: int = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., sizeConstraint: QHBoxLayout.SizeConstraint = ..., spacing: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Optional[QWidget], destroyed: typing.Callable = ..., margin: int = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., sizeConstraint: QHBoxLayout.SizeConstraint = ..., spacing: int = ...) -> None: ...

class QHeaderView(QAbstractItemView):
    class ResizeMode:
        Custom: ClassVar[QHeaderView.ResizeMode] = ...
        Fixed: ClassVar[QHeaderView.ResizeMode] = ...
        Interactive: ClassVar[QHeaderView.ResizeMode] = ...
        ResizeToContents: ClassVar[QHeaderView.ResizeMode] = ...
        Stretch: ClassVar[QHeaderView.ResizeMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QHeaderView.ResizeMode: ...
        def __and__(self, other: typing.SupportsInt) -> QHeaderView.ResizeMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QHeaderView.ResizeMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QHeaderView.ResizeMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QHeaderView.ResizeMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QHeaderView.ResizeMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QHeaderView.ResizeMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QHeaderView.ResizeMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QHeaderView.ResizeMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QHeaderView.ResizeMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QHeaderView.ResizeMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QHeaderView.ResizeMode: ...
    Custom: ClassVar[QHeaderView.ResizeMode] = ...
    Fixed: ClassVar[QHeaderView.ResizeMode] = ...
    Interactive: ClassVar[QHeaderView.ResizeMode] = ...
    ResizeToContents: ClassVar[QHeaderView.ResizeMode] = ...
    Stretch: ClassVar[QHeaderView.ResizeMode] = ...
    geometriesChanged: ClassVar[PySide2.QtCore.Signal] = ...
    sectionClicked: ClassVar[PySide2.QtCore.Signal] = ...
    sectionCountChanged: ClassVar[PySide2.QtCore.Signal] = ...
    sectionDoubleClicked: ClassVar[PySide2.QtCore.Signal] = ...
    sectionEntered: ClassVar[PySide2.QtCore.Signal] = ...
    sectionHandleDoubleClicked: ClassVar[PySide2.QtCore.Signal] = ...
    sectionMoved: ClassVar[PySide2.QtCore.Signal] = ...
    sectionPressed: ClassVar[PySide2.QtCore.Signal] = ...
    sectionResized: ClassVar[PySide2.QtCore.Signal] = ...
    sortIndicatorChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, orientation: PySide2.QtCore.Qt.Orientation, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QAbstractScrollArea.Shadow = ..., frameShape: QAbstractScrollArea.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QAbstractScrollArea.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def cascadingSectionResizes(self) -> bool: ...
    def count(self) -> int: ...
    def currentChanged(self, current: PySide2.QtCore.QModelIndex, old: PySide2.QtCore.QModelIndex) -> None: ...
    def dataChanged(self, topLeft: PySide2.QtCore.QModelIndex, bottomRight: PySide2.QtCore.QModelIndex, roles: typing.List[int] = ...) -> None: ...
    def defaultAlignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def defaultSectionSize(self) -> int: ...
    def doItemsLayout(self) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def headerDataChanged(self, orientation: PySide2.QtCore.Qt.Orientation, logicalFirst: int, logicalLast: int) -> None: ...
    def hiddenSectionCount(self) -> int: ...
    def hideSection(self, logicalIndex: int) -> None: ...
    def highlightSections(self) -> bool: ...
    def horizontalOffset(self) -> int: ...
    def indexAt(self, p: PySide2.QtCore.QPoint) -> PySide2.QtCore.QModelIndex: ...
    @overload
    def initStyleOption(self, option: QStyleOptionFrame) -> None: ...
    @overload
    def initStyleOption(self, option: QStyleOptionHeader) -> None: ...
    def initialize(self) -> None: ...
    @overload
    def initializeSections(self) -> None: ...
    @overload
    def initializeSections(self, start: int, end: int) -> None: ...
    def isFirstSectionMovable(self) -> bool: ...
    def isIndexHidden(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def isSectionHidden(self, logicalIndex: int) -> bool: ...
    def isSortIndicatorShown(self) -> bool: ...
    def length(self) -> int: ...
    def logicalIndex(self, visualIndex: int) -> int: ...
    @overload
    def logicalIndexAt(self, pos: PySide2.QtCore.QPoint) -> int: ...
    @overload
    def logicalIndexAt(self, position: int) -> int: ...
    @overload
    def logicalIndexAt(self, x: int, y: int) -> int: ...
    def maximumSectionSize(self) -> int: ...
    def minimumSectionSize(self) -> int: ...
    def mouseDoubleClickEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseMoveEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def moveCursor(self, arg__1: QAbstractItemView.CursorAction, arg__2: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> PySide2.QtCore.QModelIndex: ...
    def moveSection(self, from_: int, to: int) -> None: ...
    def offset(self) -> int: ...
    def orientation(self) -> PySide2.QtCore.Qt.Orientation: ...
    def paintEvent(self, e: PySide2.QtGui.QPaintEvent) -> None: ...
    def paintSection(self, painter: PySide2.QtGui.QPainter, rect: PySide2.QtCore.QRect, logicalIndex: int) -> None: ...
    def reset(self) -> None: ...
    def resetDefaultSectionSize(self) -> None: ...
    def resizeContentsPrecision(self) -> int: ...
    def resizeSection(self, logicalIndex: int, size: int) -> None: ...
    @overload
    def resizeSections(self) -> None: ...
    @overload
    def resizeSections(self, mode: QHeaderView.ResizeMode) -> None: ...
    def restoreState(self, state: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> bool: ...
    def rowsInserted(self, parent: PySide2.QtCore.QModelIndex, start: int, end: int) -> None: ...
    def saveState(self) -> PySide2.QtCore.QByteArray: ...
    def scrollContentsBy(self, dx: int, dy: int) -> None: ...
    def scrollTo(self, index: PySide2.QtCore.QModelIndex, hint: QAbstractItemView.ScrollHint) -> None: ...
    def sectionPosition(self, logicalIndex: int) -> int: ...
    def sectionResizeMode(self, logicalIndex: int) -> QHeaderView.ResizeMode: ...
    def sectionSize(self, logicalIndex: int) -> int: ...
    def sectionSizeFromContents(self, logicalIndex: int) -> PySide2.QtCore.QSize: ...
    def sectionSizeHint(self, logicalIndex: int) -> int: ...
    def sectionViewportPosition(self, logicalIndex: int) -> int: ...
    def sectionsAboutToBeRemoved(self, parent: PySide2.QtCore.QModelIndex, logicalFirst: int, logicalLast: int) -> None: ...
    def sectionsClickable(self) -> bool: ...
    def sectionsHidden(self) -> bool: ...
    def sectionsInserted(self, parent: PySide2.QtCore.QModelIndex, logicalFirst: int, logicalLast: int) -> None: ...
    def sectionsMovable(self) -> bool: ...
    def sectionsMoved(self) -> bool: ...
    def setCascadingSectionResizes(self, enable: bool) -> None: ...
    def setDefaultAlignment(self, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setDefaultSectionSize(self, size: int) -> None: ...
    def setFirstSectionMovable(self, movable: bool) -> None: ...
    def setHighlightSections(self, highlight: bool) -> None: ...
    def setMaximumSectionSize(self, size: int) -> None: ...
    def setMinimumSectionSize(self, size: int) -> None: ...
    def setModel(self, model: typing.Optional[PySide2.QtCore.QAbstractItemModel]) -> None: ...
    def setOffset(self, offset: int) -> None: ...
    def setOffsetToLastSection(self) -> None: ...
    def setOffsetToSectionPosition(self, visualIndex: int) -> None: ...
    def setResizeContentsPrecision(self, precision: int) -> None: ...
    def setSectionHidden(self, logicalIndex: int, hide: bool) -> None: ...
    @overload
    def setSectionResizeMode(self, logicalIndex: int, mode: QHeaderView.ResizeMode) -> None: ...
    @overload
    def setSectionResizeMode(self, mode: QHeaderView.ResizeMode) -> None: ...
    def setSectionsClickable(self, clickable: bool) -> None: ...
    def setSectionsMovable(self, movable: bool) -> None: ...
    def setSelection(self, rect: PySide2.QtCore.QRect, flags: typing.Union[PySide2.QtCore.QItemSelectionModel.SelectionFlags,PySide2.QtCore.QItemSelectionModel.SelectionFlag]) -> None: ...
    def setSortIndicator(self, logicalIndex: int, order: PySide2.QtCore.Qt.SortOrder) -> None: ...
    def setSortIndicatorShown(self, show: bool) -> None: ...
    def setStretchLastSection(self, stretch: bool) -> None: ...
    def setVisible(self, v: bool) -> None: ...
    def showSection(self, logicalIndex: int) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def sortIndicatorOrder(self) -> PySide2.QtCore.Qt.SortOrder: ...
    def sortIndicatorSection(self) -> int: ...
    def stretchLastSection(self) -> bool: ...
    def stretchSectionCount(self) -> int: ...
    def swapSections(self, first: int, second: int) -> None: ...
    def updateGeometries(self) -> None: ...
    def updateSection(self, logicalIndex: int) -> None: ...
    def verticalOffset(self) -> int: ...
    def viewportEvent(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def visualIndex(self, logicalIndex: int) -> int: ...
    def visualIndexAt(self, position: int) -> int: ...
    def visualRect(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QRect: ...
    def visualRegionForSelection(self, selection: PySide2.QtCore.QItemSelection) -> PySide2.QtGui.QRegion: ...

class QInputDialog(QDialog):
    class InputDialogOption:
        NoButtons: ClassVar[QInputDialog.InputDialogOption] = ...
        UseListViewForComboBoxItems: ClassVar[QInputDialog.InputDialogOption] = ...
        UsePlainTextEditForTextInput: ClassVar[QInputDialog.InputDialogOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QInputDialog.InputDialogOption: ...
        def __and__(self, other: typing.SupportsInt) -> QInputDialog.InputDialogOption: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QInputDialog.InputDialogOption: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QInputDialog.InputDialogOption: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QInputDialog.InputDialogOption: ...
        def __rand__(self, other: typing.SupportsInt) -> QInputDialog.InputDialogOption: ...
        def __rmul__(self, other: typing.SupportsInt) -> QInputDialog.InputDialogOption: ...
        def __ror__(self, other: typing.SupportsInt) -> QInputDialog.InputDialogOption: ...
        def __rsub__(self, other: typing.SupportsInt) -> QInputDialog.InputDialogOption: ...
        def __rxor__(self, other: typing.SupportsInt) -> QInputDialog.InputDialogOption: ...
        def __sub__(self, other: typing.SupportsInt) -> QInputDialog.InputDialogOption: ...
        def __xor__(self, other: typing.SupportsInt) -> QInputDialog.InputDialogOption: ...

    class InputMode:
        DoubleInput: ClassVar[QInputDialog.InputMode] = ...
        IntInput: ClassVar[QInputDialog.InputMode] = ...
        TextInput: ClassVar[QInputDialog.InputMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QInputDialog.InputMode: ...
        def __and__(self, other: typing.SupportsInt) -> QInputDialog.InputMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QInputDialog.InputMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QInputDialog.InputMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QInputDialog.InputMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QInputDialog.InputMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QInputDialog.InputMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QInputDialog.InputMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QInputDialog.InputMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QInputDialog.InputMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QInputDialog.InputMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QInputDialog.InputMode: ...
    DoubleInput: ClassVar[QInputDialog.InputMode] = ...
    IntInput: ClassVar[QInputDialog.InputMode] = ...
    NoButtons: ClassVar[QInputDialog.InputDialogOption] = ...
    TextInput: ClassVar[QInputDialog.InputMode] = ...
    UseListViewForComboBoxItems: ClassVar[QInputDialog.InputDialogOption] = ...
    UsePlainTextEditForTextInput: ClassVar[QInputDialog.InputDialogOption] = ...
    doubleValueChanged: ClassVar[PySide2.QtCore.Signal] = ...
    doubleValueSelected: ClassVar[PySide2.QtCore.Signal] = ...
    intValueChanged: ClassVar[PySide2.QtCore.Signal] = ...
    intValueSelected: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    textValueChanged: ClassVar[PySide2.QtCore.Signal] = ...
    textValueSelected: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., doubleValueChanged: typing.Callable = ..., doubleValueSelected: typing.Callable = ..., enabled: bool = ..., finished: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., intValueChanged: typing.Callable = ..., intValueSelected: typing.Callable = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeGripEnabled: bool = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., textValueChanged: typing.Callable = ..., textValueSelected: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def cancelButtonText(self) -> str: ...
    def comboBoxItems(self) -> typing.List[str]: ...
    def done(self, result: int) -> None: ...
    def doubleDecimals(self) -> int: ...
    def doubleMaximum(self) -> float: ...
    def doubleMinimum(self) -> float: ...
    def doubleStep(self) -> float: ...
    def doubleValue(self) -> float: ...
    @classmethod
    @overload
    def getDouble(cls, parent: typing.Optional[QWidget], title: str, label: str, value: float, minValue: float, maxValue: float, decimals: int, flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType], step: float) -> typing.Tuple[float,bool]: ...
    @classmethod
    @overload
    def getDouble(cls, parent: typing.Optional[QWidget], title: str, label: str, value: float, minValue: float = ..., maxValue: float = ..., decimals: int = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ...) -> typing.Tuple[float,bool]: ...
    @classmethod
    def getInt(cls, parent: typing.Optional[QWidget], title: str, label: str, value: int, minValue: int = ..., maxValue: int = ..., step: int = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ...) -> typing.Tuple[int,bool]: ...
    @classmethod
    def getItem(cls, parent: typing.Optional[QWidget], title: str, label: str, items: typing.Sequence[str], current: int, editable: bool = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ...) -> typing.Tuple[str,bool]: ...
    @classmethod
    def getMultiLineText(cls, parent: typing.Optional[QWidget], title: str, label: str, text: str, flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ...) -> typing.Tuple[str,bool]: ...
    @classmethod
    def getText(cls, parent: typing.Optional[QWidget], title: str, label: str, echo: QLineEdit.EchoMode, text: str = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ...) -> typing.Tuple[str,bool]: ...
    def inputMode(self) -> QInputDialog.InputMode: ...
    def intMaximum(self) -> int: ...
    def intMinimum(self) -> int: ...
    def intStep(self) -> int: ...
    def intValue(self) -> int: ...
    def isComboBoxEditable(self) -> bool: ...
    def labelText(self) -> str: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def okButtonText(self) -> str: ...
    @overload
    def open(self) -> None: ...
    @overload
    def open(self, receiver: PySide2.QtCore.QObject, member: bytes) -> None: ...
    def setCancelButtonText(self, text: str) -> None: ...
    def setComboBoxEditable(self, editable: bool) -> None: ...
    def setComboBoxItems(self, items: typing.Sequence[str]) -> None: ...
    def setDoubleDecimals(self, decimals: int) -> None: ...
    def setDoubleMaximum(self, max: float) -> None: ...
    def setDoubleMinimum(self, min: float) -> None: ...
    def setDoubleRange(self, min: float, max: float) -> None: ...
    def setDoubleStep(self, step: float) -> None: ...
    def setDoubleValue(self, value: float) -> None: ...
    def setInputMode(self, mode: QInputDialog.InputMode) -> None: ...
    def setIntMaximum(self, max: int) -> None: ...
    def setIntMinimum(self, min: int) -> None: ...
    def setIntRange(self, min: int, max: int) -> None: ...
    def setIntStep(self, step: int) -> None: ...
    def setIntValue(self, value: int) -> None: ...
    def setLabelText(self, text: str) -> None: ...
    def setOkButtonText(self, text: str) -> None: ...
    def setOption(self, option: QInputDialog.InputDialogOption, on: bool = ...) -> None: ...
    def setTextEchoMode(self, mode: QLineEdit.EchoMode) -> None: ...
    def setTextValue(self, text: str) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def testOption(self, option: QInputDialog.InputDialogOption) -> bool: ...
    def textEchoMode(self) -> QLineEdit.EchoMode: ...
    def textValue(self) -> str: ...

class QItemDelegate(QAbstractItemDelegate):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., clipping: bool = ..., closeEditor: typing.Callable = ..., commitData: typing.Callable = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., sizeHintChanged: typing.Callable = ...) -> None: ...
    def createEditor(self, parent: typing.Optional[QWidget], option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> QWidget: ...
    def decoration(self, option: QStyleOptionViewItem, variant: typing.Any) -> PySide2.QtGui.QPixmap: ...
    def doCheck(self, option: QStyleOptionViewItem, bounding: PySide2.QtCore.QRect, variant: typing.Any) -> PySide2.QtCore.QRect: ...
    def drawBackground(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> None: ...
    def drawCheck(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionViewItem, rect: PySide2.QtCore.QRect, state: PySide2.QtCore.Qt.CheckState) -> None: ...
    def drawDecoration(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionViewItem, rect: PySide2.QtCore.QRect, pixmap: PySide2.QtGui.QPixmap) -> None: ...
    def drawDisplay(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionViewItem, rect: PySide2.QtCore.QRect, text: str) -> None: ...
    def drawFocus(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionViewItem, rect: PySide2.QtCore.QRect) -> None: ...
    def editorEvent(self, event: PySide2.QtCore.QEvent, model: PySide2.QtCore.QAbstractItemModel, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def eventFilter(self, object: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool: ...
    def hasClipping(self) -> bool: ...
    def itemEditorFactory(self) -> QItemEditorFactory: ...
    def paint(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> None: ...
    def rect(self, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex, role: PySide2.QtCore.Qt.ItemDataRole) -> PySide2.QtCore.QRect: ...
    @classmethod
    def selectedPixmap(cls, pixmap: PySide2.QtGui.QPixmap, palette: PySide2.QtGui.QPalette, enabled: bool) -> PySide2.QtGui.QPixmap: ...
    def setClipping(self, clip: bool) -> None: ...
    def setEditorData(self, editor: QWidget, index: PySide2.QtCore.QModelIndex) -> None: ...
    def setItemEditorFactory(self, factory: QItemEditorFactory) -> None: ...
    def setModelData(self, editor: QWidget, model: PySide2.QtCore.QAbstractItemModel, index: PySide2.QtCore.QModelIndex) -> None: ...
    def setOptions(self, index: PySide2.QtCore.QModelIndex, option: QStyleOptionViewItem) -> QStyleOptionViewItem: ...
    def sizeHint(self, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QSize: ...
    def textRectangle(self, painter: PySide2.QtGui.QPainter, rect: PySide2.QtCore.QRect, font: PySide2.QtGui.QFont, text: str) -> PySide2.QtCore.QRect: ...
    def updateEditorGeometry(self, editor: QWidget, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> None: ...

class QItemEditorCreatorBase(shiboken2.Object):
    def __init__(self) -> None: ...
    def createWidget(self, parent: typing.Optional[QWidget]) -> QWidget: ...
    def valuePropertyName(self) -> PySide2.QtCore.QByteArray: ...

class QItemEditorFactory(shiboken2.Object):
    def __init__(self) -> None: ...
    def createEditor(self, userType: int, parent: typing.Optional[QWidget]) -> QWidget: ...
    @classmethod
    def defaultFactory(cls) -> QItemEditorFactory: ...
    def registerEditor(self, userType: int, creator: QItemEditorCreatorBase) -> None: ...
    @classmethod
    def setDefaultFactory(cls, factory: QItemEditorFactory) -> None: ...
    def valuePropertyName(self, userType: int) -> PySide2.QtCore.QByteArray: ...

class QKeyEventTransition(PySide2.QtCore.QEventTransition):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, object: PySide2.QtCore.QObject, type: PySide2.QtCore.QEvent.Type, key: int, sourceState: typing.Union[PySide2.QtCore.QState,None] = ..., destroyed: typing.Callable = ..., eventSource: PySide2.QtCore.QObject = ..., eventType: typing.Any = ..., modifierMask: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier] = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., targetState: typing.Any = ..., targetStateChanged: typing.Callable = ..., targetStates: typing.Any = ..., targetStatesChanged: typing.Callable = ..., transitionType: QKeyEventTransition.TransitionType = ..., triggered: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, sourceState: typing.Union[PySide2.QtCore.QState,None] = ..., destroyed: typing.Callable = ..., eventSource: PySide2.QtCore.QObject = ..., eventType: typing.Any = ..., key: int = ..., modifierMask: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier] = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., targetState: typing.Any = ..., targetStateChanged: typing.Callable = ..., targetStates: typing.Any = ..., targetStatesChanged: typing.Callable = ..., transitionType: QKeyEventTransition.TransitionType = ..., triggered: typing.Callable = ...) -> None: ...
    def eventTest(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def key(self) -> int: ...
    def modifierMask(self) -> typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]: ...
    def onTransition(self, event: PySide2.QtCore.QEvent) -> None: ...
    def setKey(self, key: int) -> None: ...
    def setModifierMask(self, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> None: ...

class QKeySequenceEdit(QWidget):
    editingFinished: ClassVar[PySide2.QtCore.Signal] = ...
    keySequenceChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, keySequence: typing.Union[PySide2.QtGui.QKeySequence,str], parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., keySequenceChanged: typing.Callable = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., keySequence: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., keySequenceChanged: typing.Callable = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def clear(self) -> None: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def keyPressEvent(self, arg__1: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, arg__1: PySide2.QtGui.QKeyEvent) -> None: ...
    def keySequence(self) -> PySide2.QtGui.QKeySequence: ...
    def setKeySequence(self, keySequence: typing.Union[PySide2.QtGui.QKeySequence,str]) -> None: ...
    def timerEvent(self, arg__1: PySide2.QtCore.QTimerEvent) -> None: ...

class QLCDNumber(QFrame):
    class Mode:
        Bin: ClassVar[QLCDNumber.Mode] = ...
        Dec: ClassVar[QLCDNumber.Mode] = ...
        Hex: ClassVar[QLCDNumber.Mode] = ...
        Oct: ClassVar[QLCDNumber.Mode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QLCDNumber.Mode: ...
        def __and__(self, other: typing.SupportsInt) -> QLCDNumber.Mode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QLCDNumber.Mode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QLCDNumber.Mode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QLCDNumber.Mode: ...
        def __rand__(self, other: typing.SupportsInt) -> QLCDNumber.Mode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QLCDNumber.Mode: ...
        def __ror__(self, other: typing.SupportsInt) -> QLCDNumber.Mode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QLCDNumber.Mode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QLCDNumber.Mode: ...
        def __sub__(self, other: typing.SupportsInt) -> QLCDNumber.Mode: ...
        def __xor__(self, other: typing.SupportsInt) -> QLCDNumber.Mode: ...

    class SegmentStyle:
        Filled: ClassVar[QLCDNumber.SegmentStyle] = ...
        Flat: ClassVar[QLCDNumber.SegmentStyle] = ...
        Outline: ClassVar[QLCDNumber.SegmentStyle] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QLCDNumber.SegmentStyle: ...
        def __and__(self, other: typing.SupportsInt) -> QLCDNumber.SegmentStyle: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QLCDNumber.SegmentStyle: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QLCDNumber.SegmentStyle: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QLCDNumber.SegmentStyle: ...
        def __rand__(self, other: typing.SupportsInt) -> QLCDNumber.SegmentStyle: ...
        def __rmul__(self, other: typing.SupportsInt) -> QLCDNumber.SegmentStyle: ...
        def __ror__(self, other: typing.SupportsInt) -> QLCDNumber.SegmentStyle: ...
        def __rsub__(self, other: typing.SupportsInt) -> QLCDNumber.SegmentStyle: ...
        def __rxor__(self, other: typing.SupportsInt) -> QLCDNumber.SegmentStyle: ...
        def __sub__(self, other: typing.SupportsInt) -> QLCDNumber.SegmentStyle: ...
        def __xor__(self, other: typing.SupportsInt) -> QLCDNumber.SegmentStyle: ...
    Bin: ClassVar[QLCDNumber.Mode] = ...
    Dec: ClassVar[QLCDNumber.Mode] = ...
    Filled: ClassVar[QLCDNumber.SegmentStyle] = ...
    Flat: ClassVar[QLCDNumber.SegmentStyle] = ...
    Hex: ClassVar[QLCDNumber.Mode] = ...
    Oct: ClassVar[QLCDNumber.Mode] = ...
    Outline: ClassVar[QLCDNumber.SegmentStyle] = ...
    overflow: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, numDigits: int, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., digitCount: int = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QLCDNumber.Shadow = ..., frameShape: QLCDNumber.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., intValue: int = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mode: QLCDNumber.Mode = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., overflow: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., segmentStyle: QLCDNumber.SegmentStyle = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., smallDecimalPoint: bool = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., value: float = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., digitCount: int = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QLCDNumber.Shadow = ..., frameShape: QLCDNumber.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., intValue: int = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mode: QLCDNumber.Mode = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., overflow: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., segmentStyle: QLCDNumber.SegmentStyle = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., smallDecimalPoint: bool = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., value: float = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def checkOverflow(self, num: float) -> bool: ...
    @overload
    def checkOverflow(self, num: int) -> bool: ...
    def digitCount(self) -> int: ...
    @overload
    def display(self, num: float) -> None: ...
    @overload
    def display(self, num: int) -> None: ...
    @overload
    def display(self, str: str) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def intValue(self) -> int: ...
    def mode(self) -> QLCDNumber.Mode: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def segmentStyle(self) -> QLCDNumber.SegmentStyle: ...
    def setBinMode(self) -> None: ...
    def setDecMode(self) -> None: ...
    def setDigitCount(self, nDigits: int) -> None: ...
    def setHexMode(self) -> None: ...
    def setMode(self, arg__1: QLCDNumber.Mode) -> None: ...
    def setOctMode(self) -> None: ...
    def setSegmentStyle(self, arg__1: QLCDNumber.SegmentStyle) -> None: ...
    def setSmallDecimalPoint(self, arg__1: bool) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def smallDecimalPoint(self) -> bool: ...
    def value(self) -> float: ...

class QLabel(QFrame):
    linkActivated: ClassVar[PySide2.QtCore.Signal] = ...
    linkHovered: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., f: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QLabel.Shadow = ..., frameShape: QLabel.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., hasSelectedText: bool = ..., height: int = ..., indent: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., linkActivated: typing.Callable = ..., linkHovered: typing.Callable = ..., locale: PySide2.QtCore.QLocale = ..., margin: int = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., openExternalLinks: bool = ..., palette: PySide2.QtGui.QPalette = ..., pixmap: PySide2.QtGui.QPixmap = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., scaledContents: bool = ..., selectedText: str = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., textFormat: PySide2.QtCore.Qt.TextFormat = ..., textInteractionFlags: typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag] = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wordWrap: bool = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, text: str, parent: typing.Union[QWidget,None] = ..., f: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QLabel.Shadow = ..., frameShape: QLabel.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., hasSelectedText: bool = ..., height: int = ..., indent: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., linkActivated: typing.Callable = ..., linkHovered: typing.Callable = ..., locale: PySide2.QtCore.QLocale = ..., margin: int = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., openExternalLinks: bool = ..., palette: PySide2.QtGui.QPalette = ..., pixmap: PySide2.QtGui.QPixmap = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., scaledContents: bool = ..., selectedText: str = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., textFormat: PySide2.QtCore.Qt.TextFormat = ..., textInteractionFlags: typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag] = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wordWrap: bool = ..., x: int = ..., y: int = ...) -> None: ...
    def alignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def buddy(self) -> QWidget: ...
    def changeEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def clear(self) -> None: ...
    def contextMenuEvent(self, ev: PySide2.QtGui.QContextMenuEvent) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def focusInEvent(self, ev: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def focusOutEvent(self, ev: PySide2.QtGui.QFocusEvent) -> None: ...
    def hasScaledContents(self) -> bool: ...
    def hasSelectedText(self) -> bool: ...
    def heightForWidth(self, arg__1: int) -> int: ...
    def indent(self) -> int: ...
    def keyPressEvent(self, ev: PySide2.QtGui.QKeyEvent) -> None: ...
    def margin(self) -> int: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def mouseMoveEvent(self, ev: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, ev: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, ev: PySide2.QtGui.QMouseEvent) -> None: ...
    def movie(self) -> PySide2.QtGui.QMovie: ...
    def openExternalLinks(self) -> bool: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def picture(self) -> PySide2.QtGui.QPicture: ...
    def pixmap(self) -> PySide2.QtGui.QPixmap: ...
    def selectedText(self) -> str: ...
    def selectionStart(self) -> int: ...
    def setAlignment(self, arg__1: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setBuddy(self, arg__1: QWidget) -> None: ...
    def setIndent(self, arg__1: int) -> None: ...
    def setMargin(self, arg__1: int) -> None: ...
    def setMovie(self, movie: PySide2.QtGui.QMovie) -> None: ...
    @overload
    def setNum(self, arg__1: float) -> None: ...
    @overload
    def setNum(self, arg__1: int) -> None: ...
    def setOpenExternalLinks(self, open: bool) -> None: ...
    def setPicture(self, arg__1: PySide2.QtGui.QPicture) -> None: ...
    def setPixmap(self, arg__1: typing.Optional[PySide2.QtGui.QPixmap]) -> None: ...
    def setScaledContents(self, arg__1: bool) -> None: ...
    def setSelection(self, arg__1: int, arg__2: int) -> None: ...
    def setText(self, arg__1: str) -> None: ...
    def setTextFormat(self, arg__1: PySide2.QtCore.Qt.TextFormat) -> None: ...
    def setTextInteractionFlags(self, flags: typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag]) -> None: ...
    def setWordWrap(self, on: bool) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def text(self) -> str: ...
    def textFormat(self) -> PySide2.QtCore.Qt.TextFormat: ...
    def textInteractionFlags(self) -> typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag]: ...
    def wordWrap(self) -> bool: ...

class QLayout(PySide2.QtCore.QObject, QLayoutItem):
    class SizeConstraint:
        SetDefaultConstraint: ClassVar[QLayout.SizeConstraint] = ...
        SetFixedSize: ClassVar[QLayout.SizeConstraint] = ...
        SetMaximumSize: ClassVar[QLayout.SizeConstraint] = ...
        SetMinAndMaxSize: ClassVar[QLayout.SizeConstraint] = ...
        SetMinimumSize: ClassVar[QLayout.SizeConstraint] = ...
        SetNoConstraint: ClassVar[QLayout.SizeConstraint] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QLayout.SizeConstraint: ...
        def __and__(self, other: typing.SupportsInt) -> QLayout.SizeConstraint: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QLayout.SizeConstraint: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QLayout.SizeConstraint: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QLayout.SizeConstraint: ...
        def __rand__(self, other: typing.SupportsInt) -> QLayout.SizeConstraint: ...
        def __rmul__(self, other: typing.SupportsInt) -> QLayout.SizeConstraint: ...
        def __ror__(self, other: typing.SupportsInt) -> QLayout.SizeConstraint: ...
        def __rsub__(self, other: typing.SupportsInt) -> QLayout.SizeConstraint: ...
        def __rxor__(self, other: typing.SupportsInt) -> QLayout.SizeConstraint: ...
        def __sub__(self, other: typing.SupportsInt) -> QLayout.SizeConstraint: ...
        def __xor__(self, other: typing.SupportsInt) -> QLayout.SizeConstraint: ...
    SetDefaultConstraint: ClassVar[QLayout.SizeConstraint] = ...
    SetFixedSize: ClassVar[QLayout.SizeConstraint] = ...
    SetMaximumSize: ClassVar[QLayout.SizeConstraint] = ...
    SetMinAndMaxSize: ClassVar[QLayout.SizeConstraint] = ...
    SetMinimumSize: ClassVar[QLayout.SizeConstraint] = ...
    SetNoConstraint: ClassVar[QLayout.SizeConstraint] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Optional[QWidget], destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def activate(self) -> bool: ...
    def addChildLayout(self, l: QLayout) -> None: ...
    def addChildWidget(self, w: QWidget) -> None: ...
    def addItem(self, arg__1: QLayoutItem) -> None: ...
    def addWidget(self, w: QWidget) -> None: ...
    def adoptLayout(self, layout: QLayout) -> bool: ...
    def alignmentRect(self, arg__1: PySide2.QtCore.QRect) -> PySide2.QtCore.QRect: ...
    def childEvent(self, e: PySide2.QtCore.QChildEvent) -> None: ...
    @classmethod
    def closestAcceptableSize(cls, w: QWidget, s: PySide2.QtCore.QSize) -> PySide2.QtCore.QSize: ...
    def contentsMargins(self) -> PySide2.QtCore.QMargins: ...
    def contentsRect(self) -> PySide2.QtCore.QRect: ...
    def controlTypes(self) -> typing.Union[QSizePolicy.ControlTypes,QSizePolicy.ControlType]: ...
    def count(self) -> int: ...
    def expandingDirections(self) -> typing.Union[PySide2.QtCore.Qt.Orientations,PySide2.QtCore.Qt.Orientation]: ...
    def geometry(self) -> PySide2.QtCore.QRect: ...
    def getContentsMargins(self) -> typing.Tuple[int,int,int,int]: ...
    @overload
    def indexOf(self, arg__1: QLayoutItem) -> int: ...
    @overload
    def indexOf(self, arg__1: QWidget) -> int: ...
    def invalidate(self) -> None: ...
    def isEmpty(self) -> bool: ...
    def isEnabled(self) -> bool: ...
    def itemAt(self, index: int) -> typing.Optional[QLayoutItem]: ...
    def layout(self) -> QLayout: ...
    def margin(self) -> int: ...
    def maximumSize(self) -> PySide2.QtCore.QSize: ...
    def menuBar(self) -> QWidget: ...
    def minimumSize(self) -> PySide2.QtCore.QSize: ...
    def parentWidget(self) -> QWidget: ...
    def removeItem(self, arg__1: QLayoutItem) -> None: ...
    def removeWidget(self, w: QWidget) -> None: ...
    def replaceWidget(self, from_: QWidget, to: QWidget, options: typing.Union[PySide2.QtCore.Qt.FindChildOptions,PySide2.QtCore.Qt.FindChildOption] = ...) -> QLayoutItem: ...
    @overload
    def setAlignment(self, arg__1: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    @overload
    def setAlignment(self, l: QLayout, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> bool: ...
    @overload
    def setAlignment(self, w: QWidget, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> bool: ...
    @overload
    def setContentsMargins(self, left: int, top: int, right: int, bottom: int) -> None: ...
    @overload
    def setContentsMargins(self, margins: PySide2.QtCore.QMargins) -> None: ...
    def setEnabled(self, arg__1: bool) -> None: ...
    def setGeometry(self, arg__1: PySide2.QtCore.QRect) -> None: ...
    def setMargin(self, arg__1: int) -> None: ...
    def setMenuBar(self, w: QWidget) -> None: ...
    def setSizeConstraint(self, arg__1: QLayout.SizeConstraint) -> None: ...
    def setSpacing(self, arg__1: int) -> None: ...
    def sizeConstraint(self) -> QLayout.SizeConstraint: ...
    def spacing(self) -> int: ...
    def takeAt(self, index: int) -> typing.Optional[QLayoutItem]: ...
    def totalHeightForWidth(self, w: int) -> int: ...
    def totalMaximumSize(self) -> PySide2.QtCore.QSize: ...
    def totalMinimumSize(self) -> PySide2.QtCore.QSize: ...
    def totalSizeHint(self) -> PySide2.QtCore.QSize: ...
    def update(self) -> None: ...
    def widgetEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...

class QLayoutItem(shiboken2.Object):
    align: Any
    def __init__(self, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ...) -> None: ...
    def alignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def controlTypes(self) -> typing.Union[QSizePolicy.ControlTypes,QSizePolicy.ControlType]: ...
    def expandingDirections(self) -> typing.Union[PySide2.QtCore.Qt.Orientations,PySide2.QtCore.Qt.Orientation]: ...
    def geometry(self) -> PySide2.QtCore.QRect: ...
    def hasHeightForWidth(self) -> bool: ...
    def heightForWidth(self, arg__1: int) -> int: ...
    def invalidate(self) -> None: ...
    def isEmpty(self) -> bool: ...
    def layout(self) -> QLayout: ...
    def maximumSize(self) -> PySide2.QtCore.QSize: ...
    def minimumHeightForWidth(self, arg__1: int) -> int: ...
    def minimumSize(self) -> PySide2.QtCore.QSize: ...
    def setAlignment(self, a: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setGeometry(self, arg__1: PySide2.QtCore.QRect) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def spacerItem(self) -> QSpacerItem: ...
    def widget(self) -> QWidget: ...

class QLineEdit(QWidget):
    class ActionPosition:
        LeadingPosition: ClassVar[QLineEdit.ActionPosition] = ...
        TrailingPosition: ClassVar[QLineEdit.ActionPosition] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QLineEdit.ActionPosition: ...
        def __and__(self, other: typing.SupportsInt) -> QLineEdit.ActionPosition: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QLineEdit.ActionPosition: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QLineEdit.ActionPosition: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QLineEdit.ActionPosition: ...
        def __rand__(self, other: typing.SupportsInt) -> QLineEdit.ActionPosition: ...
        def __rmul__(self, other: typing.SupportsInt) -> QLineEdit.ActionPosition: ...
        def __ror__(self, other: typing.SupportsInt) -> QLineEdit.ActionPosition: ...
        def __rsub__(self, other: typing.SupportsInt) -> QLineEdit.ActionPosition: ...
        def __rxor__(self, other: typing.SupportsInt) -> QLineEdit.ActionPosition: ...
        def __sub__(self, other: typing.SupportsInt) -> QLineEdit.ActionPosition: ...
        def __xor__(self, other: typing.SupportsInt) -> QLineEdit.ActionPosition: ...

    class EchoMode:
        NoEcho: ClassVar[QLineEdit.EchoMode] = ...
        Normal: ClassVar[QLineEdit.EchoMode] = ...
        Password: ClassVar[QLineEdit.EchoMode] = ...
        PasswordEchoOnEdit: ClassVar[QLineEdit.EchoMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QLineEdit.EchoMode: ...
        def __and__(self, other: typing.SupportsInt) -> QLineEdit.EchoMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QLineEdit.EchoMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QLineEdit.EchoMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QLineEdit.EchoMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QLineEdit.EchoMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QLineEdit.EchoMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QLineEdit.EchoMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QLineEdit.EchoMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QLineEdit.EchoMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QLineEdit.EchoMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QLineEdit.EchoMode: ...
    LeadingPosition: ClassVar[QLineEdit.ActionPosition] = ...
    NoEcho: ClassVar[QLineEdit.EchoMode] = ...
    Normal: ClassVar[QLineEdit.EchoMode] = ...
    Password: ClassVar[QLineEdit.EchoMode] = ...
    PasswordEchoOnEdit: ClassVar[QLineEdit.EchoMode] = ...
    TrailingPosition: ClassVar[QLineEdit.ActionPosition] = ...
    cursorPositionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    editingFinished: ClassVar[PySide2.QtCore.Signal] = ...
    inputRejected: ClassVar[PySide2.QtCore.Signal] = ...
    returnPressed: ClassVar[PySide2.QtCore.Signal] = ...
    selectionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    textChanged: ClassVar[PySide2.QtCore.Signal] = ...
    textEdited: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, arg__1: str, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., acceptableInput: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clearButtonEnabled: bool = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., cursorMoveStyle: PySide2.QtCore.Qt.CursorMoveStyle = ..., cursorPosition: int = ..., cursorPositionChanged: typing.Callable = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., displayText: str = ..., dragEnabled: bool = ..., echoMode: QLineEdit.EchoMode = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., hasSelectedText: bool = ..., height: int = ..., inputMask: str = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., inputRejected: typing.Callable = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maxLength: int = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., modified: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., placeholderText: str = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., redoAvailable: bool = ..., returnPressed: typing.Callable = ..., selectedText: str = ..., selectionChanged: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., textChanged: typing.Callable = ..., textEdited: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., undoAvailable: bool = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., acceptableInput: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clearButtonEnabled: bool = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., cursorMoveStyle: PySide2.QtCore.Qt.CursorMoveStyle = ..., cursorPosition: int = ..., cursorPositionChanged: typing.Callable = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., displayText: str = ..., dragEnabled: bool = ..., echoMode: QLineEdit.EchoMode = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., hasSelectedText: bool = ..., height: int = ..., inputMask: str = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., inputRejected: typing.Callable = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maxLength: int = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., modified: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., placeholderText: str = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., redoAvailable: bool = ..., returnPressed: typing.Callable = ..., selectedText: str = ..., selectionChanged: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., textChanged: typing.Callable = ..., textEdited: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., undoAvailable: bool = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def addAction(self, action: QAction) -> None: ...
    @overload
    def addAction(self, action: QAction, position: QLineEdit.ActionPosition) -> None: ...
    @overload
    def addAction(self, arg__1: QAction) -> None: ...
    @overload
    def addAction(self, icon: PySide2.QtGui.QIcon, position: QLineEdit.ActionPosition) -> QAction: ...
    def alignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def backspace(self) -> None: ...
    def changeEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def clear(self) -> None: ...
    def completer(self) -> QCompleter: ...
    def contextMenuEvent(self, arg__1: PySide2.QtGui.QContextMenuEvent) -> None: ...
    def copy(self) -> None: ...
    def createStandardContextMenu(self) -> QMenu: ...
    def cursorBackward(self, mark: bool, steps: int = ...) -> None: ...
    def cursorForward(self, mark: bool, steps: int = ...) -> None: ...
    def cursorMoveStyle(self) -> PySide2.QtCore.Qt.CursorMoveStyle: ...
    def cursorPosition(self) -> int: ...
    def cursorPositionAt(self, pos: PySide2.QtCore.QPoint) -> int: ...
    def cursorRect(self) -> PySide2.QtCore.QRect: ...
    def cursorWordBackward(self, mark: bool) -> None: ...
    def cursorWordForward(self, mark: bool) -> None: ...
    def cut(self) -> None: ...
    def del_(self) -> None: ...
    def deselect(self) -> None: ...
    def displayText(self) -> str: ...
    def dragEnabled(self) -> bool: ...
    def dragEnterEvent(self, arg__1: PySide2.QtGui.QDragEnterEvent) -> None: ...
    def dragLeaveEvent(self, e: PySide2.QtGui.QDragLeaveEvent) -> None: ...
    def dragMoveEvent(self, e: PySide2.QtGui.QDragMoveEvent) -> None: ...
    def dropEvent(self, arg__1: PySide2.QtGui.QDropEvent) -> None: ...
    def echoMode(self) -> QLineEdit.EchoMode: ...
    def end(self, mark: bool) -> None: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def focusInEvent(self, arg__1: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusOutEvent(self, arg__1: PySide2.QtGui.QFocusEvent) -> None: ...
    def getTextMargins(self) -> typing.Tuple[int,int,int,int]: ...
    def hasAcceptableInput(self) -> bool: ...
    def hasFrame(self) -> bool: ...
    def hasSelectedText(self) -> bool: ...
    def home(self, mark: bool) -> None: ...
    def initStyleOption(self, option: QStyleOptionFrame) -> None: ...
    def inputMask(self) -> str: ...
    def inputMethodEvent(self, arg__1: PySide2.QtGui.QInputMethodEvent) -> None: ...
    @overload
    def inputMethodQuery(self, arg__1: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    @overload
    def inputMethodQuery(self, property: PySide2.QtCore.Qt.InputMethodQuery, argument: typing.Any) -> typing.Any: ...
    def insert(self, arg__1: str) -> None: ...
    def isClearButtonEnabled(self) -> bool: ...
    def isModified(self) -> bool: ...
    def isReadOnly(self) -> bool: ...
    def isRedoAvailable(self) -> bool: ...
    def isUndoAvailable(self) -> bool: ...
    def keyPressEvent(self, arg__1: PySide2.QtGui.QKeyEvent) -> None: ...
    def maxLength(self) -> int: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def mouseDoubleClickEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseMoveEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def paste(self) -> None: ...
    def placeholderText(self) -> str: ...
    def redo(self) -> None: ...
    def selectAll(self) -> None: ...
    def selectedText(self) -> str: ...
    def selectionEnd(self) -> int: ...
    def selectionLength(self) -> int: ...
    def selectionStart(self) -> int: ...
    def setAlignment(self, flag: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setClearButtonEnabled(self, enable: bool) -> None: ...
    def setCompleter(self, completer: QCompleter) -> None: ...
    def setCursorMoveStyle(self, style: PySide2.QtCore.Qt.CursorMoveStyle) -> None: ...
    def setCursorPosition(self, arg__1: int) -> None: ...
    def setDragEnabled(self, b: bool) -> None: ...
    def setEchoMode(self, arg__1: QLineEdit.EchoMode) -> None: ...
    def setFrame(self, arg__1: bool) -> None: ...
    def setInputMask(self, inputMask: str) -> None: ...
    def setMaxLength(self, arg__1: int) -> None: ...
    def setModified(self, arg__1: bool) -> None: ...
    def setPlaceholderText(self, arg__1: str) -> None: ...
    def setReadOnly(self, arg__1: bool) -> None: ...
    def setSelection(self, arg__1: int, arg__2: int) -> None: ...
    def setText(self, arg__1: str) -> None: ...
    @overload
    def setTextMargins(self, left: int, top: int, right: int, bottom: int) -> None: ...
    @overload
    def setTextMargins(self, margins: PySide2.QtCore.QMargins) -> None: ...
    def setValidator(self, arg__1: PySide2.QtGui.QValidator) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def text(self) -> str: ...
    def textMargins(self) -> PySide2.QtCore.QMargins: ...
    def undo(self) -> None: ...
    def validator(self) -> PySide2.QtGui.QValidator: ...

class QListView(QAbstractItemView):
    class Flow:
        LeftToRight: ClassVar[QListView.Flow] = ...
        TopToBottom: ClassVar[QListView.Flow] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QListView.Flow: ...
        def __and__(self, other: typing.SupportsInt) -> QListView.Flow: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QListView.Flow: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QListView.Flow: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QListView.Flow: ...
        def __rand__(self, other: typing.SupportsInt) -> QListView.Flow: ...
        def __rmul__(self, other: typing.SupportsInt) -> QListView.Flow: ...
        def __ror__(self, other: typing.SupportsInt) -> QListView.Flow: ...
        def __rsub__(self, other: typing.SupportsInt) -> QListView.Flow: ...
        def __rxor__(self, other: typing.SupportsInt) -> QListView.Flow: ...
        def __sub__(self, other: typing.SupportsInt) -> QListView.Flow: ...
        def __xor__(self, other: typing.SupportsInt) -> QListView.Flow: ...

    class LayoutMode:
        Batched: ClassVar[QListView.LayoutMode] = ...
        SinglePass: ClassVar[QListView.LayoutMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QListView.LayoutMode: ...
        def __and__(self, other: typing.SupportsInt) -> QListView.LayoutMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QListView.LayoutMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QListView.LayoutMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QListView.LayoutMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QListView.LayoutMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QListView.LayoutMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QListView.LayoutMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QListView.LayoutMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QListView.LayoutMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QListView.LayoutMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QListView.LayoutMode: ...

    class Movement:
        Free: ClassVar[QListView.Movement] = ...
        Snap: ClassVar[QListView.Movement] = ...
        Static: ClassVar[QListView.Movement] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QListView.Movement: ...
        def __and__(self, other: typing.SupportsInt) -> QListView.Movement: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QListView.Movement: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QListView.Movement: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QListView.Movement: ...
        def __rand__(self, other: typing.SupportsInt) -> QListView.Movement: ...
        def __rmul__(self, other: typing.SupportsInt) -> QListView.Movement: ...
        def __ror__(self, other: typing.SupportsInt) -> QListView.Movement: ...
        def __rsub__(self, other: typing.SupportsInt) -> QListView.Movement: ...
        def __rxor__(self, other: typing.SupportsInt) -> QListView.Movement: ...
        def __sub__(self, other: typing.SupportsInt) -> QListView.Movement: ...
        def __xor__(self, other: typing.SupportsInt) -> QListView.Movement: ...

    class ResizeMode:
        Adjust: ClassVar[QListView.ResizeMode] = ...
        Fixed: ClassVar[QListView.ResizeMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QListView.ResizeMode: ...
        def __and__(self, other: typing.SupportsInt) -> QListView.ResizeMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QListView.ResizeMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QListView.ResizeMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QListView.ResizeMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QListView.ResizeMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QListView.ResizeMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QListView.ResizeMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QListView.ResizeMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QListView.ResizeMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QListView.ResizeMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QListView.ResizeMode: ...

    class ViewMode:
        IconMode: ClassVar[QListView.ViewMode] = ...
        ListMode: ClassVar[QListView.ViewMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QListView.ViewMode: ...
        def __and__(self, other: typing.SupportsInt) -> QListView.ViewMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QListView.ViewMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QListView.ViewMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QListView.ViewMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QListView.ViewMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QListView.ViewMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QListView.ViewMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QListView.ViewMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QListView.ViewMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QListView.ViewMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QListView.ViewMode: ...
    Adjust: ClassVar[QListView.ResizeMode] = ...
    Batched: ClassVar[QListView.LayoutMode] = ...
    Fixed: ClassVar[QListView.ResizeMode] = ...
    Free: ClassVar[QListView.Movement] = ...
    IconMode: ClassVar[QListView.ViewMode] = ...
    LeftToRight: ClassVar[QListView.Flow] = ...
    ListMode: ClassVar[QListView.ViewMode] = ...
    SinglePass: ClassVar[QListView.LayoutMode] = ...
    Snap: ClassVar[QListView.Movement] = ...
    Static: ClassVar[QListView.Movement] = ...
    TopToBottom: ClassVar[QListView.Flow] = ...
    indexesMoved: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., activated: typing.Callable = ..., alternatingRowColors: bool = ..., autoFillBackground: bool = ..., autoScroll: bool = ..., autoScrollMargin: int = ..., baseSize: PySide2.QtCore.QSize = ..., batchSize: int = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., defaultDropAction: PySide2.QtCore.Qt.DropAction = ..., destroyed: typing.Callable = ..., doubleClicked: typing.Callable = ..., dragDropMode: QListView.DragDropMode = ..., dragDropOverwriteMode: bool = ..., dragEnabled: bool = ..., editTriggers: QListView.EditTriggers = ..., enabled: bool = ..., entered: typing.Callable = ..., flow: QListView.Flow = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QListView.Shadow = ..., frameShape: QListView.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., gridSize: PySide2.QtCore.QSize = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., horizontalScrollMode: QListView.ScrollMode = ..., iconSize: PySide2.QtCore.QSize = ..., iconSizeChanged: typing.Callable = ..., indexesMoved: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., isWrapping: bool = ..., itemAlignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., layoutMode: QListView.LayoutMode = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., modelColumn: int = ..., mouseTracking: bool = ..., movement: QListView.Movement = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., resizeMode: QListView.ResizeMode = ..., selectionBehavior: QListView.SelectionBehavior = ..., selectionMode: QListView.SelectionMode = ..., selectionRectVisible: bool = ..., showDropIndicator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QListView.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., spacing: int = ..., statusTip: str = ..., styleSheet: str = ..., tabKeyNavigation: bool = ..., tabletTracking: bool = ..., textElideMode: PySide2.QtCore.Qt.TextElideMode = ..., toolTip: str = ..., toolTipDuration: int = ..., uniformItemSizes: bool = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., verticalScrollMode: QListView.ScrollMode = ..., viewMode: QListView.ViewMode = ..., viewportEntered: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wordWrap: bool = ..., x: int = ..., y: int = ...) -> None: ...
    def batchSize(self) -> int: ...
    def clearPropertyFlags(self) -> None: ...
    def contentsSize(self) -> PySide2.QtCore.QSize: ...
    def currentChanged(self, current: PySide2.QtCore.QModelIndex, previous: PySide2.QtCore.QModelIndex) -> None: ...
    def dataChanged(self, topLeft: PySide2.QtCore.QModelIndex, bottomRight: PySide2.QtCore.QModelIndex, roles: typing.List[int] = ...) -> None: ...
    def doItemsLayout(self) -> None: ...
    def dragLeaveEvent(self, e: PySide2.QtGui.QDragLeaveEvent) -> None: ...
    def dragMoveEvent(self, e: PySide2.QtGui.QDragMoveEvent) -> None: ...
    def dropEvent(self, e: PySide2.QtGui.QDropEvent) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def flow(self) -> QListView.Flow: ...
    def gridSize(self) -> PySide2.QtCore.QSize: ...
    def horizontalOffset(self) -> int: ...
    def indexAt(self, p: PySide2.QtCore.QPoint) -> PySide2.QtCore.QModelIndex: ...
    def isIndexHidden(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def isRowHidden(self, row: int) -> bool: ...
    def isSelectionRectVisible(self) -> bool: ...
    def isWrapping(self) -> bool: ...
    def itemAlignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def layoutMode(self) -> QListView.LayoutMode: ...
    def modelColumn(self) -> int: ...
    def mouseMoveEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def moveCursor(self, cursorAction: QAbstractItemView.CursorAction, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> PySide2.QtCore.QModelIndex: ...
    def movement(self) -> QListView.Movement: ...
    def paintEvent(self, e: PySide2.QtGui.QPaintEvent) -> None: ...
    def rectForIndex(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QRect: ...
    def reset(self) -> None: ...
    def resizeContents(self, width: int, height: int) -> None: ...
    def resizeEvent(self, e: PySide2.QtGui.QResizeEvent) -> None: ...
    def resizeMode(self) -> QListView.ResizeMode: ...
    def rowsAboutToBeRemoved(self, parent: PySide2.QtCore.QModelIndex, start: int, end: int) -> None: ...
    def rowsInserted(self, parent: PySide2.QtCore.QModelIndex, start: int, end: int) -> None: ...
    def scrollContentsBy(self, dx: int, dy: int) -> None: ...
    def scrollTo(self, index: PySide2.QtCore.QModelIndex, hint: QAbstractItemView.ScrollHint = ...) -> None: ...
    def selectedIndexes(self) -> typing.List[QModelIndex]: ...
    def selectionChanged(self, selected: PySide2.QtCore.QItemSelection, deselected: PySide2.QtCore.QItemSelection) -> None: ...
    def setBatchSize(self, batchSize: int) -> None: ...
    def setFlow(self, flow: QListView.Flow) -> None: ...
    def setGridSize(self, size: PySide2.QtCore.QSize) -> None: ...
    def setItemAlignment(self, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setLayoutMode(self, mode: QListView.LayoutMode) -> None: ...
    def setModelColumn(self, column: int) -> None: ...
    def setMovement(self, movement: QListView.Movement) -> None: ...
    def setPositionForIndex(self, position: PySide2.QtCore.QPoint, index: PySide2.QtCore.QModelIndex) -> None: ...
    def setResizeMode(self, mode: QListView.ResizeMode) -> None: ...
    def setRootIndex(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    def setRowHidden(self, row: int, hide: bool) -> None: ...
    def setSelection(self, rect: PySide2.QtCore.QRect, command: typing.Union[PySide2.QtCore.QItemSelectionModel.SelectionFlags,PySide2.QtCore.QItemSelectionModel.SelectionFlag]) -> None: ...
    def setSelectionRectVisible(self, show: bool) -> None: ...
    def setSpacing(self, space: int) -> None: ...
    def setUniformItemSizes(self, enable: bool) -> None: ...
    def setViewMode(self, mode: QListView.ViewMode) -> None: ...
    def setWordWrap(self, on: bool) -> None: ...
    def setWrapping(self, enable: bool) -> None: ...
    def spacing(self) -> int: ...
    def startDrag(self, supportedActions: typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction]) -> None: ...
    def timerEvent(self, e: PySide2.QtCore.QTimerEvent) -> None: ...
    def uniformItemSizes(self) -> bool: ...
    def updateGeometries(self) -> None: ...
    def verticalOffset(self) -> int: ...
    def viewMode(self) -> QListView.ViewMode: ...
    def viewOptions(self) -> QStyleOptionViewItem: ...
    def viewportSizeHint(self) -> PySide2.QtCore.QSize: ...
    def visualRect(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QRect: ...
    def visualRegionForSelection(self, selection: PySide2.QtCore.QItemSelection) -> PySide2.QtGui.QRegion: ...
    def wheelEvent(self, e: PySide2.QtGui.QWheelEvent) -> None: ...
    def wordWrap(self) -> bool: ...

class QListWidget(QListView):
    currentItemChanged: ClassVar[PySide2.QtCore.Signal] = ...
    currentRowChanged: ClassVar[PySide2.QtCore.Signal] = ...
    currentTextChanged: ClassVar[PySide2.QtCore.Signal] = ...
    itemActivated: ClassVar[PySide2.QtCore.Signal] = ...
    itemChanged: ClassVar[PySide2.QtCore.Signal] = ...
    itemClicked: ClassVar[PySide2.QtCore.Signal] = ...
    itemDoubleClicked: ClassVar[PySide2.QtCore.Signal] = ...
    itemEntered: ClassVar[PySide2.QtCore.Signal] = ...
    itemPressed: ClassVar[PySide2.QtCore.Signal] = ...
    itemSelectionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., activated: typing.Callable = ..., alternatingRowColors: bool = ..., autoFillBackground: bool = ..., autoScroll: bool = ..., autoScrollMargin: int = ..., baseSize: PySide2.QtCore.QSize = ..., batchSize: int = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., count: int = ..., currentItemChanged: typing.Callable = ..., currentRow: int = ..., currentRowChanged: typing.Callable = ..., currentTextChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., defaultDropAction: PySide2.QtCore.Qt.DropAction = ..., destroyed: typing.Callable = ..., doubleClicked: typing.Callable = ..., dragDropMode: QListWidget.DragDropMode = ..., dragDropOverwriteMode: bool = ..., dragEnabled: bool = ..., editTriggers: QListWidget.EditTriggers = ..., enabled: bool = ..., entered: typing.Callable = ..., flow: QListWidget.Flow = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QListWidget.Shadow = ..., frameShape: QListWidget.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., gridSize: PySide2.QtCore.QSize = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., horizontalScrollMode: QListWidget.ScrollMode = ..., iconSize: PySide2.QtCore.QSize = ..., iconSizeChanged: typing.Callable = ..., indexesMoved: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., isWrapping: bool = ..., itemActivated: typing.Callable = ..., itemAlignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., itemChanged: typing.Callable = ..., itemClicked: typing.Callable = ..., itemDoubleClicked: typing.Callable = ..., itemEntered: typing.Callable = ..., itemPressed: typing.Callable = ..., itemSelectionChanged: typing.Callable = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., layoutMode: QListWidget.LayoutMode = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., modelColumn: int = ..., mouseTracking: bool = ..., movement: QListWidget.Movement = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., resizeMode: QListWidget.ResizeMode = ..., selectionBehavior: QListWidget.SelectionBehavior = ..., selectionMode: QListWidget.SelectionMode = ..., selectionRectVisible: bool = ..., showDropIndicator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QListWidget.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., sortingEnabled: bool = ..., spacing: int = ..., statusTip: str = ..., styleSheet: str = ..., tabKeyNavigation: bool = ..., tabletTracking: bool = ..., textElideMode: PySide2.QtCore.Qt.TextElideMode = ..., toolTip: str = ..., toolTipDuration: int = ..., uniformItemSizes: bool = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., verticalScrollMode: QListWidget.ScrollMode = ..., viewMode: QListWidget.ViewMode = ..., viewportEntered: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wordWrap: bool = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def addItem(self, item: QListWidgetItem) -> None: ...
    @overload
    def addItem(self, label: str) -> None: ...
    def addItems(self, labels: typing.Sequence[str]) -> None: ...
    def clear(self) -> None: ...
    @overload
    def closePersistentEditor(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    @overload
    def closePersistentEditor(self, item: QListWidgetItem) -> None: ...
    def count(self) -> int: ...
    def currentItem(self) -> QListWidgetItem: ...
    def currentRow(self) -> int: ...
    def dropEvent(self, event: PySide2.QtGui.QDropEvent) -> None: ...
    def dropMimeData(self, index: int, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction) -> bool: ...
    def editItem(self, item: QListWidgetItem) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def findItems(self, text: str, flags: typing.Union[PySide2.QtCore.Qt.MatchFlags,PySide2.QtCore.Qt.MatchFlag]) -> typing.List[QListWidgetItem]: ...
    def indexFromItem(self, item: QListWidgetItem) -> PySide2.QtCore.QModelIndex: ...
    @overload
    def insertItem(self, row: int, item: QListWidgetItem) -> None: ...
    @overload
    def insertItem(self, row: int, label: str) -> None: ...
    def insertItems(self, row: int, labels: typing.Sequence[str]) -> None: ...
    def isItemHidden(self, item: QListWidgetItem) -> bool: ...
    def isItemSelected(self, item: QListWidgetItem) -> bool: ...
    @overload
    def isPersistentEditorOpen(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    @overload
    def isPersistentEditorOpen(self, item: QListWidgetItem) -> bool: ...
    def isSortingEnabled(self) -> bool: ...
    def item(self, row: int) -> QListWidgetItem: ...
    @overload
    def itemAt(self, p: PySide2.QtCore.QPoint) -> QListWidgetItem: ...
    @overload
    def itemAt(self, x: int, y: int) -> QListWidgetItem: ...
    def itemFromIndex(self, index: PySide2.QtCore.QModelIndex) -> QListWidgetItem: ...
    def itemWidget(self, item: QListWidgetItem) -> QWidget: ...
    def items(self, data: PySide2.QtCore.QMimeData) -> typing.List[QListWidgetItem]: ...
    def mimeData(self, items: typing.Sequence[QListWidgetItem]) -> PySide2.QtCore.QMimeData: ...
    def mimeTypes(self) -> typing.List[str]: ...
    @overload
    def openPersistentEditor(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    @overload
    def openPersistentEditor(self, item: QListWidgetItem) -> None: ...
    def removeItemWidget(self, item: QListWidgetItem) -> None: ...
    def row(self, item: QListWidgetItem) -> int: ...
    def scrollToItem(self, item: QListWidgetItem, hint: QAbstractItemView.ScrollHint = ...) -> None: ...
    def selectedItems(self) -> typing.List[QListWidgetItem]: ...
    @overload
    def setCurrentItem(self, item: QListWidgetItem) -> None: ...
    @overload
    def setCurrentItem(self, item: QListWidgetItem, command: typing.Union[PySide2.QtCore.QItemSelectionModel.SelectionFlags,PySide2.QtCore.QItemSelectionModel.SelectionFlag]) -> None: ...
    @overload
    def setCurrentRow(self, row: int) -> None: ...
    @overload
    def setCurrentRow(self, row: int, command: typing.Union[PySide2.QtCore.QItemSelectionModel.SelectionFlags,PySide2.QtCore.QItemSelectionModel.SelectionFlag]) -> None: ...
    def setItemHidden(self, item: QListWidgetItem, hide: bool) -> None: ...
    def setItemSelected(self, item: QListWidgetItem, select: bool) -> None: ...
    def setItemWidget(self, item: QListWidgetItem, widget: QWidget) -> None: ...
    def setModel(self, model: typing.Optional[PySide2.QtCore.QAbstractItemModel]) -> None: ...
    def setSelectionModel(self, selectionModel: PySide2.QtCore.QItemSelectionModel) -> None: ...
    def setSortingEnabled(self, enable: bool) -> None: ...
    def sortItems(self, order: PySide2.QtCore.Qt.SortOrder = ...) -> None: ...
    def supportedDropActions(self) -> typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction]: ...
    def takeItem(self, row: int) -> QListWidgetItem: ...
    def visualItemRect(self, item: QListWidgetItem) -> PySide2.QtCore.QRect: ...

class QListWidgetItem(shiboken2.Object):
    class ItemType:
        Type: ClassVar[QListWidgetItem.ItemType] = ...
        UserType: ClassVar[QListWidgetItem.ItemType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QListWidgetItem.ItemType: ...
        def __and__(self, other: typing.SupportsInt) -> QListWidgetItem.ItemType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QListWidgetItem.ItemType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QListWidgetItem.ItemType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QListWidgetItem.ItemType: ...
        def __rand__(self, other: typing.SupportsInt) -> QListWidgetItem.ItemType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QListWidgetItem.ItemType: ...
        def __ror__(self, other: typing.SupportsInt) -> QListWidgetItem.ItemType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QListWidgetItem.ItemType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QListWidgetItem.ItemType: ...
        def __sub__(self, other: typing.SupportsInt) -> QListWidgetItem.ItemType: ...
        def __xor__(self, other: typing.SupportsInt) -> QListWidgetItem.ItemType: ...
    Type: ClassVar[QListWidgetItem.ItemType] = ...
    UserType: ClassVar[QListWidgetItem.ItemType] = ...
    @overload
    def __init__(self, icon: PySide2.QtGui.QIcon, text: str, listview: typing.Union[QListWidget,None] = ..., type: int = ...) -> None: ...
    @overload
    def __init__(self, listview: typing.Union[QListWidget,None] = ..., type: int = ...) -> None: ...
    @overload
    def __init__(self, other: QListWidgetItem) -> None: ...
    @overload
    def __init__(self, text: str, listview: typing.Union[QListWidget,None] = ..., type: int = ...) -> None: ...
    def background(self) -> PySide2.QtGui.QBrush: ...
    def backgroundColor(self) -> PySide2.QtGui.QColor: ...
    def checkState(self) -> PySide2.QtCore.Qt.CheckState: ...
    def clone(self) -> QListWidgetItem: ...
    def data(self, role: PySide2.QtCore.Qt.ItemDataRole) -> typing.Any: ...
    def flags(self) -> typing.Union[PySide2.QtCore.Qt.ItemFlags,PySide2.QtCore.Qt.ItemFlag]: ...
    def font(self) -> PySide2.QtGui.QFont: ...
    def foreground(self) -> PySide2.QtGui.QBrush: ...
    def icon(self) -> PySide2.QtGui.QIcon: ...
    def isHidden(self) -> bool: ...
    def isSelected(self) -> bool: ...
    def listWidget(self) -> QListWidget: ...
    def read(self, in_: PySide2.QtCore.QDataStream) -> None: ...
    def setBackground(self, brush: PySide2.QtGui.QBrush) -> None: ...
    def setBackgroundColor(self, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setCheckState(self, state: PySide2.QtCore.Qt.CheckState) -> None: ...
    def setData(self, role: PySide2.QtCore.Qt.ItemDataRole, value: typing.Any) -> None: ...
    def setFlags(self, flags: typing.Union[PySide2.QtCore.Qt.ItemFlags,PySide2.QtCore.Qt.ItemFlag]) -> None: ...
    def setFont(self, font: PySide2.QtGui.QFont) -> None: ...
    def setForeground(self, brush: PySide2.QtGui.QBrush) -> None: ...
    def setHidden(self, hide: bool) -> None: ...
    def setIcon(self, icon: PySide2.QtGui.QIcon) -> None: ...
    def setSelected(self, select: bool) -> None: ...
    def setSizeHint(self, size: PySide2.QtCore.QSize) -> None: ...
    def setStatusTip(self, statusTip: str) -> None: ...
    def setText(self, text: str) -> None: ...
    def setTextAlignment(self, alignment: int) -> None: ...
    def setTextColor(self, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setToolTip(self, toolTip: str) -> None: ...
    def setWhatsThis(self, whatsThis: str) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def statusTip(self) -> str: ...
    def text(self) -> str: ...
    def textAlignment(self) -> int: ...
    def textColor(self) -> PySide2.QtGui.QColor: ...
    def toolTip(self) -> str: ...
    def type(self) -> int: ...
    def whatsThis(self) -> str: ...
    def write(self, out: PySide2.QtCore.QDataStream) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, out: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, in_: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QMainWindow(QWidget):
    class DockOption:
        AllowNestedDocks: ClassVar[QMainWindow.DockOption] = ...
        AllowTabbedDocks: ClassVar[QMainWindow.DockOption] = ...
        AnimatedDocks: ClassVar[QMainWindow.DockOption] = ...
        ForceTabbedDocks: ClassVar[QMainWindow.DockOption] = ...
        GroupedDragging: ClassVar[QMainWindow.DockOption] = ...
        VerticalTabs: ClassVar[QMainWindow.DockOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QMainWindow.DockOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QMainWindow.DockOption: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QMainWindow.DockOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QMainWindow.DockOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QMainWindow.DockOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QMainWindow.DockOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QMainWindow.DockOptions: ...

    class DockOptions:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QMainWindow.DockOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QMainWindow.DockOptions: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QMainWindow.DockOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QMainWindow.DockOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QMainWindow.DockOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QMainWindow.DockOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QMainWindow.DockOptions: ...
    AllowNestedDocks: ClassVar[QMainWindow.DockOption] = ...
    AllowTabbedDocks: ClassVar[QMainWindow.DockOption] = ...
    AnimatedDocks: ClassVar[QMainWindow.DockOption] = ...
    ForceTabbedDocks: ClassVar[QMainWindow.DockOption] = ...
    GroupedDragging: ClassVar[QMainWindow.DockOption] = ...
    VerticalTabs: ClassVar[QMainWindow.DockOption] = ...
    iconSizeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    tabifiedDockWidgetActivated: ClassVar[PySide2.QtCore.Signal] = ...
    toolButtonStyleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., animated: bool = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., dockNestingEnabled: bool = ..., dockOptions: typing.Union[QMainWindow.DockOptions,QMainWindow.DockOption] = ..., documentMode: bool = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., iconSize: PySide2.QtCore.QSize = ..., iconSizeChanged: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabShape: typing.Any = ..., tabifiedDockWidgetActivated: typing.Callable = ..., tabletTracking: bool = ..., toolButtonStyle: PySide2.QtCore.Qt.ToolButtonStyle = ..., toolButtonStyleChanged: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., unifiedTitleAndToolBarOnMac: bool = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def addDockWidget(self, area: PySide2.QtCore.Qt.DockWidgetArea, dockwidget: QDockWidget) -> None: ...
    @overload
    def addDockWidget(self, area: PySide2.QtCore.Qt.DockWidgetArea, dockwidget: QDockWidget, orientation: PySide2.QtCore.Qt.Orientation) -> None: ...
    @overload
    def addToolBar(self, area: PySide2.QtCore.Qt.ToolBarArea, toolbar: QToolBar) -> None: ...
    @overload
    def addToolBar(self, title: str) -> QToolBar: ...
    @overload
    def addToolBar(self, toolbar: QToolBar) -> None: ...
    def addToolBarBreak(self, area: PySide2.QtCore.Qt.ToolBarArea = ...) -> None: ...
    def centralWidget(self) -> QWidget: ...
    def contextMenuEvent(self, event: PySide2.QtGui.QContextMenuEvent) -> None: ...
    def corner(self, corner: PySide2.QtCore.Qt.Corner) -> PySide2.QtCore.Qt.DockWidgetArea: ...
    def createPopupMenu(self) -> QMenu: ...
    def dockOptions(self) -> typing.Union[QMainWindow.DockOptions,QMainWindow.DockOption]: ...
    def dockWidgetArea(self, dockwidget: QDockWidget) -> PySide2.QtCore.Qt.DockWidgetArea: ...
    def documentMode(self) -> bool: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def iconSize(self) -> PySide2.QtCore.QSize: ...
    def insertToolBar(self, before: QToolBar, toolbar: QToolBar) -> None: ...
    def insertToolBarBreak(self, before: QToolBar) -> None: ...
    def isAnimated(self) -> bool: ...
    def isDockNestingEnabled(self) -> bool: ...
    def isSeparator(self, pos: PySide2.QtCore.QPoint) -> bool: ...
    def menuBar(self) -> QMenuBar: ...
    def menuWidget(self) -> QWidget: ...
    def removeDockWidget(self, dockwidget: QDockWidget) -> None: ...
    def removeToolBar(self, toolbar: QToolBar) -> None: ...
    def removeToolBarBreak(self, before: QToolBar) -> None: ...
    def resizeDocks(self, docks: typing.Sequence[QDockWidget], sizes: typing.Sequence[int], orientation: PySide2.QtCore.Qt.Orientation) -> None: ...
    def restoreDockWidget(self, dockwidget: QDockWidget) -> bool: ...
    def restoreState(self, state: typing.Union[PySide2.QtCore.QByteArray,bytes], version: int = ...) -> bool: ...
    def saveState(self, version: int = ...) -> PySide2.QtCore.QByteArray: ...
    def setAnimated(self, enabled: bool) -> None: ...
    def setCentralWidget(self, widget: QWidget) -> None: ...
    def setCorner(self, corner: PySide2.QtCore.Qt.Corner, area: PySide2.QtCore.Qt.DockWidgetArea) -> None: ...
    def setDockNestingEnabled(self, enabled: bool) -> None: ...
    def setDockOptions(self, options: typing.Union[QMainWindow.DockOptions,QMainWindow.DockOption]) -> None: ...
    def setDocumentMode(self, enabled: bool) -> None: ...
    def setIconSize(self, iconSize: PySide2.QtCore.QSize) -> None: ...
    def setMenuBar(self, menubar: QMenuBar) -> None: ...
    def setMenuWidget(self, menubar: QWidget) -> None: ...
    def setStatusBar(self, statusbar: QStatusBar) -> None: ...
    def setTabPosition(self, areas: typing.Union[PySide2.QtCore.Qt.DockWidgetAreas,PySide2.QtCore.Qt.DockWidgetArea], tabPosition: QTabWidget.TabPosition) -> None: ...
    def setTabShape(self, tabShape: QTabWidget.TabShape) -> None: ...
    def setToolButtonStyle(self, toolButtonStyle: PySide2.QtCore.Qt.ToolButtonStyle) -> None: ...
    def setUnifiedTitleAndToolBarOnMac(self, set: bool) -> None: ...
    def splitDockWidget(self, after: QDockWidget, dockwidget: QDockWidget, orientation: PySide2.QtCore.Qt.Orientation) -> None: ...
    def statusBar(self) -> QStatusBar: ...
    def tabPosition(self, area: PySide2.QtCore.Qt.DockWidgetArea) -> QTabWidget.TabPosition: ...
    def tabShape(self) -> QTabWidget.TabShape: ...
    def tabifiedDockWidgets(self, dockwidget: QDockWidget) -> typing.List[QDockWidget]: ...
    def tabifyDockWidget(self, first: QDockWidget, second: QDockWidget) -> None: ...
    def takeCentralWidget(self) -> QWidget: ...
    def toolBarArea(self, toolbar: QToolBar) -> PySide2.QtCore.Qt.ToolBarArea: ...
    def toolBarBreak(self, toolbar: QToolBar) -> bool: ...
    def toolButtonStyle(self) -> PySide2.QtCore.Qt.ToolButtonStyle: ...
    def unifiedTitleAndToolBarOnMac(self) -> bool: ...

class QMdiArea(QAbstractScrollArea):
    class AreaOption:
        DontMaximizeSubWindowOnActivation: ClassVar[QMdiArea.AreaOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QMdiArea.AreaOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QMdiArea.AreaOption: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QMdiArea.AreaOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QMdiArea.AreaOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QMdiArea.AreaOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QMdiArea.AreaOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QMdiArea.AreaOptions: ...

    class AreaOptions:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QMdiArea.AreaOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QMdiArea.AreaOptions: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QMdiArea.AreaOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QMdiArea.AreaOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QMdiArea.AreaOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QMdiArea.AreaOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QMdiArea.AreaOptions: ...

    class ViewMode:
        SubWindowView: ClassVar[QMdiArea.ViewMode] = ...
        TabbedView: ClassVar[QMdiArea.ViewMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QMdiArea.ViewMode: ...
        def __and__(self, other: typing.SupportsInt) -> QMdiArea.ViewMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QMdiArea.ViewMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QMdiArea.ViewMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QMdiArea.ViewMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QMdiArea.ViewMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QMdiArea.ViewMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QMdiArea.ViewMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QMdiArea.ViewMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QMdiArea.ViewMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QMdiArea.ViewMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QMdiArea.ViewMode: ...

    class WindowOrder:
        ActivationHistoryOrder: ClassVar[QMdiArea.WindowOrder] = ...
        CreationOrder: ClassVar[QMdiArea.WindowOrder] = ...
        StackingOrder: ClassVar[QMdiArea.WindowOrder] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QMdiArea.WindowOrder: ...
        def __and__(self, other: typing.SupportsInt) -> QMdiArea.WindowOrder: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QMdiArea.WindowOrder: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QMdiArea.WindowOrder: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QMdiArea.WindowOrder: ...
        def __rand__(self, other: typing.SupportsInt) -> QMdiArea.WindowOrder: ...
        def __rmul__(self, other: typing.SupportsInt) -> QMdiArea.WindowOrder: ...
        def __ror__(self, other: typing.SupportsInt) -> QMdiArea.WindowOrder: ...
        def __rsub__(self, other: typing.SupportsInt) -> QMdiArea.WindowOrder: ...
        def __rxor__(self, other: typing.SupportsInt) -> QMdiArea.WindowOrder: ...
        def __sub__(self, other: typing.SupportsInt) -> QMdiArea.WindowOrder: ...
        def __xor__(self, other: typing.SupportsInt) -> QMdiArea.WindowOrder: ...
    ActivationHistoryOrder: ClassVar[QMdiArea.WindowOrder] = ...
    CreationOrder: ClassVar[QMdiArea.WindowOrder] = ...
    DontMaximizeSubWindowOnActivation: ClassVar[QMdiArea.AreaOption] = ...
    StackingOrder: ClassVar[QMdiArea.WindowOrder] = ...
    SubWindowView: ClassVar[QMdiArea.ViewMode] = ...
    TabbedView: ClassVar[QMdiArea.ViewMode] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    subWindowActivated: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., activationOrder: QMdiArea.WindowOrder = ..., autoFillBackground: bool = ..., background: PySide2.QtGui.QBrush = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., documentMode: bool = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QMdiArea.Shadow = ..., frameShape: QMdiArea.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QMdiArea.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., subWindowActivated: typing.Callable = ..., tabPosition: typing.Any = ..., tabShape: typing.Any = ..., tabletTracking: bool = ..., tabsClosable: bool = ..., tabsMovable: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., viewMode: QMdiArea.ViewMode = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def activateNextSubWindow(self) -> None: ...
    def activatePreviousSubWindow(self) -> None: ...
    def activationOrder(self) -> QMdiArea.WindowOrder: ...
    def activeSubWindow(self) -> QMdiSubWindow: ...
    def addSubWindow(self, widget: QWidget, flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ...) -> QMdiSubWindow: ...
    def background(self) -> PySide2.QtGui.QBrush: ...
    def cascadeSubWindows(self) -> None: ...
    def childEvent(self, childEvent: PySide2.QtCore.QChildEvent) -> None: ...
    def closeActiveSubWindow(self) -> None: ...
    def closeAllSubWindows(self) -> None: ...
    def currentSubWindow(self) -> QMdiSubWindow: ...
    def documentMode(self) -> bool: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def eventFilter(self, object: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def paintEvent(self, paintEvent: PySide2.QtGui.QPaintEvent) -> None: ...
    def removeSubWindow(self, widget: QWidget) -> None: ...
    def resizeEvent(self, resizeEvent: PySide2.QtGui.QResizeEvent) -> None: ...
    def scrollContentsBy(self, dx: int, dy: int) -> None: ...
    def setActivationOrder(self, order: QMdiArea.WindowOrder) -> None: ...
    def setActiveSubWindow(self, window: QMdiSubWindow) -> None: ...
    def setBackground(self, background: PySide2.QtGui.QBrush) -> None: ...
    def setDocumentMode(self, enabled: bool) -> None: ...
    def setOption(self, option: QMdiArea.AreaOption, on: bool = ...) -> None: ...
    def setTabPosition(self, position: QTabWidget.TabPosition) -> None: ...
    def setTabShape(self, shape: QTabWidget.TabShape) -> None: ...
    def setTabsClosable(self, closable: bool) -> None: ...
    def setTabsMovable(self, movable: bool) -> None: ...
    def setViewMode(self, mode: QMdiArea.ViewMode) -> None: ...
    def setupViewport(self, viewport: QWidget) -> None: ...
    def showEvent(self, showEvent: PySide2.QtGui.QShowEvent) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def subWindowList(self, order: QMdiArea.WindowOrder = ...) -> typing.List[QMdiSubWindow]: ...
    def tabPosition(self) -> QTabWidget.TabPosition: ...
    def tabShape(self) -> QTabWidget.TabShape: ...
    def tabsClosable(self) -> bool: ...
    def tabsMovable(self) -> bool: ...
    def testOption(self, opton: QMdiArea.AreaOption) -> bool: ...
    def tileSubWindows(self) -> None: ...
    def timerEvent(self, timerEvent: PySide2.QtCore.QTimerEvent) -> None: ...
    def viewMode(self) -> QMdiArea.ViewMode: ...
    def viewportEvent(self, event: PySide2.QtCore.QEvent) -> bool: ...

class QMdiSubWindow(QWidget):
    class SubWindowOption:
        AllowOutsideAreaHorizontally: ClassVar[QMdiSubWindow.SubWindowOption] = ...
        AllowOutsideAreaVertically: ClassVar[QMdiSubWindow.SubWindowOption] = ...
        RubberBandMove: ClassVar[QMdiSubWindow.SubWindowOption] = ...
        RubberBandResize: ClassVar[QMdiSubWindow.SubWindowOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QMdiSubWindow.SubWindowOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QMdiSubWindow.SubWindowOption: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QMdiSubWindow.SubWindowOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QMdiSubWindow.SubWindowOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QMdiSubWindow.SubWindowOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QMdiSubWindow.SubWindowOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QMdiSubWindow.SubWindowOptions: ...

    class SubWindowOptions:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QMdiSubWindow.SubWindowOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QMdiSubWindow.SubWindowOptions: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QMdiSubWindow.SubWindowOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QMdiSubWindow.SubWindowOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QMdiSubWindow.SubWindowOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QMdiSubWindow.SubWindowOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QMdiSubWindow.SubWindowOptions: ...
    AllowOutsideAreaHorizontally: ClassVar[QMdiSubWindow.SubWindowOption] = ...
    AllowOutsideAreaVertically: ClassVar[QMdiSubWindow.SubWindowOption] = ...
    RubberBandMove: ClassVar[QMdiSubWindow.SubWindowOption] = ...
    RubberBandResize: ClassVar[QMdiSubWindow.SubWindowOption] = ...
    aboutToActivate: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    windowStateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., aboutToActivate: typing.Callable = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., keyboardPageStep: int = ..., keyboardSingleStep: int = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowStateChanged: typing.Callable = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def changeEvent(self, changeEvent: PySide2.QtCore.QEvent) -> None: ...
    def childEvent(self, childEvent: PySide2.QtCore.QChildEvent) -> None: ...
    def closeEvent(self, closeEvent: PySide2.QtGui.QCloseEvent) -> None: ...
    def contextMenuEvent(self, contextMenuEvent: PySide2.QtGui.QContextMenuEvent) -> None: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def eventFilter(self, object: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool: ...
    def focusInEvent(self, focusInEvent: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusOutEvent(self, focusOutEvent: PySide2.QtGui.QFocusEvent) -> None: ...
    def hideEvent(self, hideEvent: PySide2.QtGui.QHideEvent) -> None: ...
    def isShaded(self) -> bool: ...
    def keyPressEvent(self, keyEvent: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyboardPageStep(self) -> int: ...
    def keyboardSingleStep(self) -> int: ...
    def leaveEvent(self, leaveEvent: PySide2.QtCore.QEvent) -> None: ...
    def maximizedButtonsWidget(self) -> QWidget: ...
    def maximizedSystemMenuIconWidget(self) -> QWidget: ...
    def mdiArea(self) -> QMdiArea: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def mouseDoubleClickEvent(self, mouseEvent: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseMoveEvent(self, mouseEvent: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, mouseEvent: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, mouseEvent: PySide2.QtGui.QMouseEvent) -> None: ...
    def moveEvent(self, moveEvent: PySide2.QtGui.QMoveEvent) -> None: ...
    def paintEvent(self, paintEvent: PySide2.QtGui.QPaintEvent) -> None: ...
    def resizeEvent(self, resizeEvent: PySide2.QtGui.QResizeEvent) -> None: ...
    def setKeyboardPageStep(self, step: int) -> None: ...
    def setKeyboardSingleStep(self, step: int) -> None: ...
    def setOption(self, option: QMdiSubWindow.SubWindowOption, on: bool = ...) -> None: ...
    def setSystemMenu(self, systemMenu: QMenu) -> None: ...
    def setWidget(self, widget: QWidget) -> None: ...
    def showEvent(self, showEvent: PySide2.QtGui.QShowEvent) -> None: ...
    def showShaded(self) -> None: ...
    def showSystemMenu(self) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def systemMenu(self) -> QMenu: ...
    def testOption(self, arg__1: QMdiSubWindow.SubWindowOption) -> bool: ...
    def timerEvent(self, timerEvent: PySide2.QtCore.QTimerEvent) -> None: ...
    def widget(self) -> QWidget: ...

class QMenu(QWidget):
    aboutToHide: ClassVar[PySide2.QtCore.Signal] = ...
    aboutToShow: ClassVar[PySide2.QtCore.Signal] = ...
    hovered: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    triggered: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., aboutToHide: typing.Callable = ..., aboutToShow: typing.Callable = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., hovered: typing.Callable = ..., icon: PySide2.QtGui.QIcon = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., separatorsCollapsible: bool = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., tearOffEnabled: bool = ..., title: str = ..., toolTip: str = ..., toolTipDuration: int = ..., toolTipsVisible: bool = ..., triggered: typing.Callable = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, title: str, parent: typing.Union[QWidget,None] = ..., aboutToHide: typing.Callable = ..., aboutToShow: typing.Callable = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., hovered: typing.Callable = ..., icon: PySide2.QtGui.QIcon = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., separatorsCollapsible: bool = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., tearOffEnabled: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., toolTipsVisible: bool = ..., triggered: typing.Callable = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def actionAt(self, arg__1: PySide2.QtCore.QPoint) -> QAction: ...
    def actionEvent(self, arg__1: PySide2.QtGui.QActionEvent) -> None: ...
    def actionGeometry(self, arg__1: QAction) -> PySide2.QtCore.QRect: ...
    def activeAction(self) -> QAction: ...
    @overload
    def addAction(self, arg__1: PySide2.QtGui.QIcon, arg__2: str, arg__3: typing.Callable[[],typing.Any], arg__4: typing.Union[PySide2.QtGui.QKeySequence,str,None] = ...) -> None: ...
    @overload
    def addAction(self, arg__1: QAction) -> None: ...
    @overload
    def addAction(self, arg__1: str, arg__2: typing.Callable[[],typing.Any], arg__3: typing.Union[PySide2.QtGui.QKeySequence,str,None] = ...) -> None: ...
    @overload
    def addAction(self, icon: PySide2.QtGui.QIcon, text: str) -> QAction: ...
    @overload
    def addAction(self, icon: PySide2.QtGui.QIcon, text: str, receiver: PySide2.QtCore.QObject, member: bytes, shortcut: typing.Union[PySide2.QtGui.QKeySequence,str,None] = ...) -> QAction: ...
    @overload
    def addAction(self, text: str) -> QAction: ...
    @overload
    def addAction(self, text: str, receiver: PySide2.QtCore.QObject, member: bytes, shortcut: typing.Union[PySide2.QtGui.QKeySequence,str,None] = ...) -> QAction: ...
    @overload
    def addMenu(self, icon: PySide2.QtGui.QIcon, title: str) -> QMenu: ...
    @overload
    def addMenu(self, menu: QMenu) -> QAction: ...
    @overload
    def addMenu(self, title: str) -> QMenu: ...
    @overload
    def addSection(self, icon: PySide2.QtGui.QIcon, text: str) -> QAction: ...
    @overload
    def addSection(self, text: str) -> QAction: ...
    def addSeparator(self) -> QAction: ...
    def changeEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def clear(self) -> None: ...
    def columnCount(self) -> int: ...
    def defaultAction(self) -> QAction: ...
    def enterEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    @classmethod
    @overload
    def exec_(cls, actions: typing.Sequence[QAction], pos: PySide2.QtCore.QPoint, at: typing.Union[QAction,None] = ..., parent: typing.Union[QWidget,None] = ...) -> QAction: ...
    @classmethod
    @overload
    def exec_(cls, self) -> QAction: ...
    @classmethod
    @overload
    def exec_(cls, self, pos: PySide2.QtCore.QPoint, at: typing.Union[QAction,None] = ...) -> QAction: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def hideEvent(self, arg__1: PySide2.QtGui.QHideEvent) -> None: ...
    def hideTearOffMenu(self) -> None: ...
    def icon(self) -> PySide2.QtGui.QIcon: ...
    def initStyleOption(self, option: QStyleOptionMenuItem, action: QAction) -> None: ...
    def insertMenu(self, before: QAction, menu: QMenu) -> QAction: ...
    @overload
    def insertSection(self, before: QAction, icon: PySide2.QtGui.QIcon, text: str) -> QAction: ...
    @overload
    def insertSection(self, before: QAction, text: str) -> QAction: ...
    def insertSeparator(self, before: QAction) -> QAction: ...
    def isEmpty(self) -> bool: ...
    def isTearOffEnabled(self) -> bool: ...
    def isTearOffMenuVisible(self) -> bool: ...
    def keyPressEvent(self, arg__1: PySide2.QtGui.QKeyEvent) -> None: ...
    def leaveEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def menuAction(self) -> QAction: ...
    def mouseMoveEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def popup(self, pos: PySide2.QtCore.QPoint, at: typing.Union[QAction,None] = ...) -> None: ...
    def separatorsCollapsible(self) -> bool: ...
    def setActiveAction(self, act: QAction) -> None: ...
    def setAsDockMenu(self) -> None: ...
    def setDefaultAction(self, arg__1: QAction) -> None: ...
    def setIcon(self, icon: PySide2.QtGui.QIcon) -> None: ...
    def setSeparatorsCollapsible(self, collapse: bool) -> None: ...
    def setTearOffEnabled(self, arg__1: bool) -> None: ...
    def setTitle(self, title: str) -> None: ...
    def setToolTipsVisible(self, visible: bool) -> None: ...
    @overload
    def showTearOffMenu(self) -> None: ...
    @overload
    def showTearOffMenu(self, pos: PySide2.QtCore.QPoint) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def timerEvent(self, arg__1: PySide2.QtCore.QTimerEvent) -> None: ...
    def title(self) -> str: ...
    def toolTipsVisible(self) -> bool: ...
    def wheelEvent(self, arg__1: PySide2.QtGui.QWheelEvent) -> None: ...

class QMenuBar(QWidget):
    hovered: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    triggered: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., defaultUp: bool = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., hovered: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., nativeMenuBar: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., triggered: typing.Callable = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def actionAt(self, arg__1: PySide2.QtCore.QPoint) -> QAction: ...
    def actionEvent(self, arg__1: PySide2.QtGui.QActionEvent) -> None: ...
    def actionGeometry(self, arg__1: QAction) -> PySide2.QtCore.QRect: ...
    def activeAction(self) -> QAction: ...
    @overload
    def addAction(self, arg__1: QAction) -> None: ...
    @overload
    def addAction(self, arg__1: str, arg__2: typing.Callable[[],typing.Any]) -> None: ...
    @overload
    def addAction(self, text: str) -> QAction: ...
    @overload
    def addAction(self, text: str, receiver: PySide2.QtCore.QObject, member: bytes) -> QAction: ...
    @overload
    def addMenu(self, icon: PySide2.QtGui.QIcon, title: str) -> QMenu: ...
    @overload
    def addMenu(self, menu: QMenu) -> QAction: ...
    @overload
    def addMenu(self, title: str) -> QMenu: ...
    def addSeparator(self) -> QAction: ...
    def changeEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def clear(self) -> None: ...
    def cornerWidget(self, corner: PySide2.QtCore.Qt.Corner = ...) -> QWidget: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def eventFilter(self, arg__1: PySide2.QtCore.QObject, arg__2: PySide2.QtCore.QEvent) -> bool: ...
    def focusInEvent(self, arg__1: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusOutEvent(self, arg__1: PySide2.QtGui.QFocusEvent) -> None: ...
    def heightForWidth(self, arg__1: int) -> int: ...
    def initStyleOption(self, option: QStyleOptionMenuItem, action: QAction) -> None: ...
    def insertMenu(self, before: QAction, menu: QMenu) -> QAction: ...
    def insertSeparator(self, before: QAction) -> QAction: ...
    def isDefaultUp(self) -> bool: ...
    def isNativeMenuBar(self) -> bool: ...
    def keyPressEvent(self, arg__1: PySide2.QtGui.QKeyEvent) -> None: ...
    def leaveEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def mouseMoveEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def resizeEvent(self, arg__1: PySide2.QtGui.QResizeEvent) -> None: ...
    def setActiveAction(self, action: QAction) -> None: ...
    def setCornerWidget(self, w: QWidget, corner: PySide2.QtCore.Qt.Corner = ...) -> None: ...
    def setDefaultUp(self, arg__1: bool) -> None: ...
    def setNativeMenuBar(self, nativeMenuBar: bool) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def timerEvent(self, arg__1: PySide2.QtCore.QTimerEvent) -> None: ...

class QMessageBox(QDialog):
    class ButtonRole:
        AcceptRole: ClassVar[QMessageBox.ButtonRole] = ...
        ActionRole: ClassVar[QMessageBox.ButtonRole] = ...
        ApplyRole: ClassVar[QMessageBox.ButtonRole] = ...
        DestructiveRole: ClassVar[QMessageBox.ButtonRole] = ...
        HelpRole: ClassVar[QMessageBox.ButtonRole] = ...
        InvalidRole: ClassVar[QMessageBox.ButtonRole] = ...
        NRoles: ClassVar[QMessageBox.ButtonRole] = ...
        NoRole: ClassVar[QMessageBox.ButtonRole] = ...
        RejectRole: ClassVar[QMessageBox.ButtonRole] = ...
        ResetRole: ClassVar[QMessageBox.ButtonRole] = ...
        YesRole: ClassVar[QMessageBox.ButtonRole] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QMessageBox.ButtonRole: ...
        def __and__(self, other: typing.SupportsInt) -> QMessageBox.ButtonRole: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QMessageBox.ButtonRole: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QMessageBox.ButtonRole: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QMessageBox.ButtonRole: ...
        def __rand__(self, other: typing.SupportsInt) -> QMessageBox.ButtonRole: ...
        def __rmul__(self, other: typing.SupportsInt) -> QMessageBox.ButtonRole: ...
        def __ror__(self, other: typing.SupportsInt) -> QMessageBox.ButtonRole: ...
        def __rsub__(self, other: typing.SupportsInt) -> QMessageBox.ButtonRole: ...
        def __rxor__(self, other: typing.SupportsInt) -> QMessageBox.ButtonRole: ...
        def __sub__(self, other: typing.SupportsInt) -> QMessageBox.ButtonRole: ...
        def __xor__(self, other: typing.SupportsInt) -> QMessageBox.ButtonRole: ...

    class Icon:
        Critical: ClassVar[QMessageBox.Icon] = ...
        Information: ClassVar[QMessageBox.Icon] = ...
        NoIcon: ClassVar[QMessageBox.Icon] = ...
        Question: ClassVar[QMessageBox.Icon] = ...
        Warning: ClassVar[QMessageBox.Icon] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QMessageBox.Icon: ...
        def __and__(self, other: typing.SupportsInt) -> QMessageBox.Icon: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QMessageBox.Icon: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QMessageBox.Icon: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QMessageBox.Icon: ...
        def __rand__(self, other: typing.SupportsInt) -> QMessageBox.Icon: ...
        def __rmul__(self, other: typing.SupportsInt) -> QMessageBox.Icon: ...
        def __ror__(self, other: typing.SupportsInt) -> QMessageBox.Icon: ...
        def __rsub__(self, other: typing.SupportsInt) -> QMessageBox.Icon: ...
        def __rxor__(self, other: typing.SupportsInt) -> QMessageBox.Icon: ...
        def __sub__(self, other: typing.SupportsInt) -> QMessageBox.Icon: ...
        def __xor__(self, other: typing.SupportsInt) -> QMessageBox.Icon: ...

    class StandardButton:
        Abort: ClassVar[QMessageBox.StandardButton] = ...
        Apply: ClassVar[QMessageBox.StandardButton] = ...
        ButtonMask: ClassVar[QMessageBox.StandardButton] = ...
        Cancel: ClassVar[QMessageBox.StandardButton] = ...
        Close: ClassVar[QMessageBox.StandardButton] = ...
        Default: ClassVar[QMessageBox.StandardButton] = ...
        Discard: ClassVar[QMessageBox.StandardButton] = ...
        Escape: ClassVar[QMessageBox.StandardButton] = ...
        FirstButton: ClassVar[QMessageBox.StandardButton] = ...
        FlagMask: ClassVar[QMessageBox.StandardButton] = ...
        Help: ClassVar[QMessageBox.StandardButton] = ...
        Ignore: ClassVar[QMessageBox.StandardButton] = ...
        LastButton: ClassVar[QMessageBox.StandardButton] = ...
        No: ClassVar[QMessageBox.StandardButton] = ...
        NoAll: ClassVar[QMessageBox.StandardButton] = ...
        NoButton: ClassVar[QMessageBox.StandardButton] = ...
        NoToAll: ClassVar[QMessageBox.StandardButton] = ...
        Ok: ClassVar[QMessageBox.StandardButton] = ...
        Open: ClassVar[QMessageBox.StandardButton] = ...
        Reset: ClassVar[QMessageBox.StandardButton] = ...
        RestoreDefaults: ClassVar[QMessageBox.StandardButton] = ...
        Retry: ClassVar[QMessageBox.StandardButton] = ...
        Save: ClassVar[QMessageBox.StandardButton] = ...
        SaveAll: ClassVar[QMessageBox.StandardButton] = ...
        Yes: ClassVar[QMessageBox.StandardButton] = ...
        YesAll: ClassVar[QMessageBox.StandardButton] = ...
        YesToAll: ClassVar[QMessageBox.StandardButton] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QMessageBox.StandardButtons: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QMessageBox.StandardButton: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QMessageBox.StandardButtons: ...
        def __rand__(self, other: typing.SupportsInt) -> QMessageBox.StandardButtons: ...
        def __ror__(self, other: typing.SupportsInt) -> QMessageBox.StandardButtons: ...
        def __rxor__(self, other: typing.SupportsInt) -> QMessageBox.StandardButtons: ...
        def __xor__(self, other: typing.SupportsInt) -> QMessageBox.StandardButtons: ...

    class StandardButtons:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QMessageBox.StandardButtons: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QMessageBox.StandardButtons: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QMessageBox.StandardButtons: ...
        def __rand__(self, other: typing.SupportsInt) -> QMessageBox.StandardButtons: ...
        def __ror__(self, other: typing.SupportsInt) -> QMessageBox.StandardButtons: ...
        def __rxor__(self, other: typing.SupportsInt) -> QMessageBox.StandardButtons: ...
        def __xor__(self, other: typing.SupportsInt) -> QMessageBox.StandardButtons: ...
    Abort: ClassVar[QMessageBox.StandardButton] = ...
    AcceptRole: ClassVar[QMessageBox.ButtonRole] = ...
    ActionRole: ClassVar[QMessageBox.ButtonRole] = ...
    Apply: ClassVar[QMessageBox.StandardButton] = ...
    ApplyRole: ClassVar[QMessageBox.ButtonRole] = ...
    ButtonMask: ClassVar[QMessageBox.StandardButton] = ...
    Cancel: ClassVar[QMessageBox.StandardButton] = ...
    Close: ClassVar[QMessageBox.StandardButton] = ...
    Critical: ClassVar[QMessageBox.Icon] = ...
    Default: ClassVar[QMessageBox.StandardButton] = ...
    DestructiveRole: ClassVar[QMessageBox.ButtonRole] = ...
    Discard: ClassVar[QMessageBox.StandardButton] = ...
    Escape: ClassVar[QMessageBox.StandardButton] = ...
    FirstButton: ClassVar[QMessageBox.StandardButton] = ...
    FlagMask: ClassVar[QMessageBox.StandardButton] = ...
    Help: ClassVar[QMessageBox.StandardButton] = ...
    HelpRole: ClassVar[QMessageBox.ButtonRole] = ...
    Ignore: ClassVar[QMessageBox.StandardButton] = ...
    Information: ClassVar[QMessageBox.Icon] = ...
    InvalidRole: ClassVar[QMessageBox.ButtonRole] = ...
    LastButton: ClassVar[QMessageBox.StandardButton] = ...
    NRoles: ClassVar[QMessageBox.ButtonRole] = ...
    No: ClassVar[QMessageBox.StandardButton] = ...
    NoAll: ClassVar[QMessageBox.StandardButton] = ...
    NoButton: ClassVar[QMessageBox.StandardButton] = ...
    NoIcon: ClassVar[QMessageBox.Icon] = ...
    NoRole: ClassVar[QMessageBox.ButtonRole] = ...
    NoToAll: ClassVar[QMessageBox.StandardButton] = ...
    Ok: ClassVar[QMessageBox.StandardButton] = ...
    Open: ClassVar[QMessageBox.StandardButton] = ...
    Question: ClassVar[QMessageBox.Icon] = ...
    RejectRole: ClassVar[QMessageBox.ButtonRole] = ...
    Reset: ClassVar[QMessageBox.StandardButton] = ...
    ResetRole: ClassVar[QMessageBox.ButtonRole] = ...
    RestoreDefaults: ClassVar[QMessageBox.StandardButton] = ...
    Retry: ClassVar[QMessageBox.StandardButton] = ...
    Save: ClassVar[QMessageBox.StandardButton] = ...
    SaveAll: ClassVar[QMessageBox.StandardButton] = ...
    Warning: ClassVar[QMessageBox.Icon] = ...
    Yes: ClassVar[QMessageBox.StandardButton] = ...
    YesAll: ClassVar[QMessageBox.StandardButton] = ...
    YesRole: ClassVar[QMessageBox.ButtonRole] = ...
    YesToAll: ClassVar[QMessageBox.StandardButton] = ...
    buttonClicked: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, icon: QMessageBox.Icon, title: str, text: str, buttons: typing.Union[QMessageBox.StandardButtons,QMessageBox.StandardButton] = ..., parent: typing.Union[QWidget,None] = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., buttonClicked: typing.Callable = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., detailedText: str = ..., enabled: bool = ..., finished: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., iconPixmap: PySide2.QtGui.QPixmap = ..., informativeText: str = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeGripEnabled: bool = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., standardButtons: typing.Union[QMessageBox.StandardButtons,QMessageBox.StandardButton] = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., textFormat: PySide2.QtCore.Qt.TextFormat = ..., textInteractionFlags: typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag] = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., buttonClicked: typing.Callable = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., detailedText: str = ..., enabled: bool = ..., finished: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., icon: QMessageBox.Icon = ..., iconPixmap: PySide2.QtGui.QPixmap = ..., informativeText: str = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeGripEnabled: bool = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., standardButtons: typing.Union[QMessageBox.StandardButtons,QMessageBox.StandardButton] = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., textFormat: PySide2.QtCore.Qt.TextFormat = ..., textInteractionFlags: typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag] = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @classmethod
    def about(cls, parent: typing.Optional[QWidget], title: str, text: str) -> None: ...
    @classmethod
    def aboutQt(cls, parent: typing.Optional[QWidget], title: str = ...) -> None: ...
    @overload
    def addButton(self, button: QAbstractButton, role: QMessageBox.ButtonRole) -> None: ...
    @overload
    def addButton(self, button: QMessageBox.StandardButton) -> QPushButton: ...
    @overload
    def addButton(self, text: str, role: QMessageBox.ButtonRole) -> QPushButton: ...
    def button(self, which: QMessageBox.StandardButton) -> QAbstractButton: ...
    def buttonRole(self, button: QAbstractButton) -> QMessageBox.ButtonRole: ...
    def buttonText(self, button: int) -> str: ...
    def buttons(self) -> typing.List[QAbstractButton]: ...
    def changeEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def checkBox(self) -> QCheckBox: ...
    def clickedButton(self) -> QAbstractButton: ...
    def closeEvent(self, event: PySide2.QtGui.QCloseEvent) -> None: ...
    @classmethod
    @overload
    def critical(cls, parent: typing.Optional[QWidget], title: str, text: str, button0: QMessageBox.StandardButton, button1: QMessageBox.StandardButton) -> int: ...
    @classmethod
    @overload
    def critical(cls, parent: typing.Optional[QWidget], title: str, text: str, buttons: typing.Union[QMessageBox.StandardButtons,QMessageBox.StandardButton] = ..., defaultButton: QMessageBox.StandardButton = ...) -> QMessageBox.StandardButton: ...
    def defaultButton(self) -> QPushButton: ...
    def detailedText(self) -> str: ...
    def escapeButton(self) -> QAbstractButton: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def icon(self) -> QMessageBox.Icon: ...
    def iconPixmap(self) -> PySide2.QtGui.QPixmap: ...
    @classmethod
    @overload
    def information(cls, parent: typing.Optional[QWidget], title: str, text: str, button0: QMessageBox.StandardButton, button1: QMessageBox.StandardButton = ...) -> QMessageBox.StandardButton: ...
    @classmethod
    @overload
    def information(cls, parent: typing.Optional[QWidget], title: str, text: str, buttons: typing.Union[QMessageBox.StandardButtons,QMessageBox.StandardButton] = ..., defaultButton: QMessageBox.StandardButton = ...) -> QMessageBox.StandardButton: ...
    def informativeText(self) -> str: ...
    def keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    @overload
    def open(self) -> None: ...
    @overload
    def open(self, receiver: PySide2.QtCore.QObject, member: bytes) -> None: ...
    @classmethod
    @overload
    def question(cls, parent: typing.Optional[QWidget], title: str, text: str, button0: QMessageBox.StandardButton, button1: QMessageBox.StandardButton) -> int: ...
    @classmethod
    @overload
    def question(cls, parent: typing.Optional[QWidget], title: str, text: str, buttons: typing.Union[QMessageBox.StandardButtons,QMessageBox.StandardButton] = ..., defaultButton: QMessageBox.StandardButton = ...) -> QMessageBox.StandardButton: ...
    def removeButton(self, button: QAbstractButton) -> None: ...
    def resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None: ...
    def setButtonText(self, button: int, text: str) -> None: ...
    def setCheckBox(self, cb: QCheckBox) -> None: ...
    @overload
    def setDefaultButton(self, button: QMessageBox.StandardButton) -> None: ...
    @overload
    def setDefaultButton(self, button: QPushButton) -> None: ...
    def setDetailedText(self, text: str) -> None: ...
    @overload
    def setEscapeButton(self, button: QAbstractButton) -> None: ...
    @overload
    def setEscapeButton(self, button: QMessageBox.StandardButton) -> None: ...
    def setIcon(self, arg__1: QMessageBox.Icon) -> None: ...
    def setIconPixmap(self, pixmap: PySide2.QtGui.QPixmap) -> None: ...
    def setInformativeText(self, text: str) -> None: ...
    def setStandardButtons(self, buttons: typing.Union[QMessageBox.StandardButtons,QMessageBox.StandardButton]) -> None: ...
    def setText(self, text: str) -> None: ...
    def setTextFormat(self, format: PySide2.QtCore.Qt.TextFormat) -> None: ...
    def setTextInteractionFlags(self, flags: typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag]) -> None: ...
    def setWindowModality(self, windowModality: PySide2.QtCore.Qt.WindowModality) -> None: ...
    def setWindowTitle(self, title: str) -> None: ...
    def showEvent(self, event: PySide2.QtGui.QShowEvent) -> None: ...
    def standardButton(self, button: QAbstractButton) -> QMessageBox.StandardButton: ...
    def standardButtons(self) -> typing.Union[QMessageBox.StandardButtons,QMessageBox.StandardButton]: ...
    @classmethod
    def standardIcon(cls, icon: QMessageBox.Icon) -> PySide2.QtGui.QPixmap: ...
    def text(self) -> str: ...
    def textFormat(self) -> PySide2.QtCore.Qt.TextFormat: ...
    def textInteractionFlags(self) -> typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag]: ...
    @classmethod
    @overload
    def warning(cls, parent: typing.Optional[QWidget], title: str, text: str, button0: QMessageBox.StandardButton, button1: QMessageBox.StandardButton) -> int: ...
    @classmethod
    @overload
    def warning(cls, parent: typing.Optional[QWidget], title: str, text: str, buttons: typing.Union[QMessageBox.StandardButtons,QMessageBox.StandardButton] = ..., defaultButton: QMessageBox.StandardButton = ...) -> QMessageBox.StandardButton: ...

class QMouseEventTransition(PySide2.QtCore.QEventTransition):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, object: PySide2.QtCore.QObject, type: PySide2.QtCore.QEvent.Type, button: PySide2.QtCore.Qt.MouseButton, sourceState: typing.Union[PySide2.QtCore.QState,None] = ..., destroyed: typing.Callable = ..., eventSource: PySide2.QtCore.QObject = ..., eventType: typing.Any = ..., modifierMask: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier] = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., targetState: typing.Any = ..., targetStateChanged: typing.Callable = ..., targetStates: typing.Any = ..., targetStatesChanged: typing.Callable = ..., transitionType: QMouseEventTransition.TransitionType = ..., triggered: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, sourceState: typing.Union[PySide2.QtCore.QState,None] = ..., button: PySide2.QtCore.Qt.MouseButton = ..., destroyed: typing.Callable = ..., eventSource: PySide2.QtCore.QObject = ..., eventType: typing.Any = ..., modifierMask: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier] = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., targetState: typing.Any = ..., targetStateChanged: typing.Callable = ..., targetStates: typing.Any = ..., targetStatesChanged: typing.Callable = ..., transitionType: QMouseEventTransition.TransitionType = ..., triggered: typing.Callable = ...) -> None: ...
    def button(self) -> PySide2.QtCore.Qt.MouseButton: ...
    def eventTest(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def hitTestPath(self) -> PySide2.QtGui.QPainterPath: ...
    def modifierMask(self) -> typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]: ...
    def onTransition(self, event: PySide2.QtCore.QEvent) -> None: ...
    def setButton(self, button: PySide2.QtCore.Qt.MouseButton) -> None: ...
    def setHitTestPath(self, path: PySide2.QtGui.QPainterPath) -> None: ...
    def setModifierMask(self, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> None: ...

class QOpenGLWidget(QWidget):
    class UpdateBehavior:
        NoPartialUpdate: ClassVar[QOpenGLWidget.UpdateBehavior] = ...
        PartialUpdate: ClassVar[QOpenGLWidget.UpdateBehavior] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLWidget.UpdateBehavior: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLWidget.UpdateBehavior: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLWidget.UpdateBehavior: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLWidget.UpdateBehavior: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLWidget.UpdateBehavior: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLWidget.UpdateBehavior: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLWidget.UpdateBehavior: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLWidget.UpdateBehavior: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLWidget.UpdateBehavior: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLWidget.UpdateBehavior: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLWidget.UpdateBehavior: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLWidget.UpdateBehavior: ...
    NoPartialUpdate: ClassVar[QOpenGLWidget.UpdateBehavior] = ...
    PartialUpdate: ClassVar[QOpenGLWidget.UpdateBehavior] = ...
    aboutToCompose: ClassVar[PySide2.QtCore.Signal] = ...
    aboutToResize: ClassVar[PySide2.QtCore.Signal] = ...
    frameSwapped: ClassVar[PySide2.QtCore.Signal] = ...
    resized: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., f: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., aboutToCompose: typing.Callable = ..., aboutToResize: typing.Callable = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., frameSwapped: typing.Callable = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., resized: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def context(self) -> PySide2.QtGui.QOpenGLContext: ...
    def defaultFramebufferObject(self) -> int: ...
    def doneCurrent(self) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def format(self) -> PySide2.QtGui.QSurfaceFormat: ...
    def grabFramebuffer(self) -> PySide2.QtGui.QImage: ...
    def initializeGL(self) -> None: ...
    def isValid(self) -> bool: ...
    def makeCurrent(self) -> None: ...
    def metric(self, metric: PySide2.QtGui.QPaintDevice.PaintDeviceMetric) -> int: ...
    def paintEngine(self) -> PySide2.QtGui.QPaintEngine: ...
    def paintEvent(self, e: PySide2.QtGui.QPaintEvent) -> None: ...
    def paintGL(self) -> None: ...
    def redirected(self, p: PySide2.QtCore.QPoint) -> PySide2.QtGui.QPaintDevice: ...
    def resizeEvent(self, e: PySide2.QtGui.QResizeEvent) -> None: ...
    def resizeGL(self, w: int, h: int) -> None: ...
    def setFormat(self, format: PySide2.QtGui.QSurfaceFormat) -> None: ...
    def setTextureFormat(self, texFormat: int) -> None: ...
    def setUpdateBehavior(self, updateBehavior: QOpenGLWidget.UpdateBehavior) -> None: ...
    def textureFormat(self) -> int: ...
    def updateBehavior(self) -> QOpenGLWidget.UpdateBehavior: ...

class QPanGesture(QGesture):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., acceleration: float = ..., delta: PySide2.QtCore.QPointF = ..., destroyed: typing.Callable = ..., gestureCancelPolicy: typing.Any = ..., gestureType: PySide2.QtCore.Qt.GestureType = ..., hasHotSpot: bool = ..., horizontalVelocity: float = ..., hotSpot: PySide2.QtCore.QPointF = ..., lastOffset: PySide2.QtCore.QPointF = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., offset: PySide2.QtCore.QPointF = ..., state: PySide2.QtCore.Qt.GestureState = ..., verticalVelocity: float = ...) -> None: ...
    def acceleration(self) -> float: ...
    def delta(self) -> PySide2.QtCore.QPointF: ...
    def lastOffset(self) -> PySide2.QtCore.QPointF: ...
    def offset(self) -> PySide2.QtCore.QPointF: ...
    def setAcceleration(self, value: float) -> None: ...
    def setLastOffset(self, value: PySide2.QtCore.QPointF) -> None: ...
    def setOffset(self, value: PySide2.QtCore.QPointF) -> None: ...

class QPinchGesture(QGesture):
    class ChangeFlag:
        CenterPointChanged: ClassVar[QPinchGesture.ChangeFlag] = ...
        RotationAngleChanged: ClassVar[QPinchGesture.ChangeFlag] = ...
        ScaleFactorChanged: ClassVar[QPinchGesture.ChangeFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QPinchGesture.ChangeFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QPinchGesture.ChangeFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPinchGesture.ChangeFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QPinchGesture.ChangeFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QPinchGesture.ChangeFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPinchGesture.ChangeFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QPinchGesture.ChangeFlags: ...

    class ChangeFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QPinchGesture.ChangeFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QPinchGesture.ChangeFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPinchGesture.ChangeFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QPinchGesture.ChangeFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QPinchGesture.ChangeFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPinchGesture.ChangeFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QPinchGesture.ChangeFlags: ...
    CenterPointChanged: ClassVar[QPinchGesture.ChangeFlag] = ...
    RotationAngleChanged: ClassVar[QPinchGesture.ChangeFlag] = ...
    ScaleFactorChanged: ClassVar[QPinchGesture.ChangeFlag] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., centerPoint: PySide2.QtCore.QPointF = ..., changeFlags: typing.Union[QPinchGesture.ChangeFlags,QPinchGesture.ChangeFlag] = ..., destroyed: typing.Callable = ..., gestureCancelPolicy: typing.Any = ..., gestureType: PySide2.QtCore.Qt.GestureType = ..., hasHotSpot: bool = ..., hotSpot: PySide2.QtCore.QPointF = ..., lastCenterPoint: PySide2.QtCore.QPointF = ..., lastRotationAngle: float = ..., lastScaleFactor: float = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., rotationAngle: float = ..., scaleFactor: float = ..., startCenterPoint: PySide2.QtCore.QPointF = ..., state: PySide2.QtCore.Qt.GestureState = ..., totalChangeFlags: typing.Union[QPinchGesture.ChangeFlags,QPinchGesture.ChangeFlag] = ..., totalRotationAngle: float = ..., totalScaleFactor: float = ...) -> None: ...
    def centerPoint(self) -> PySide2.QtCore.QPointF: ...
    def changeFlags(self) -> typing.Union[QPinchGesture.ChangeFlags,QPinchGesture.ChangeFlag]: ...
    def lastCenterPoint(self) -> PySide2.QtCore.QPointF: ...
    def lastRotationAngle(self) -> float: ...
    def lastScaleFactor(self) -> float: ...
    def rotationAngle(self) -> float: ...
    def scaleFactor(self) -> float: ...
    def setCenterPoint(self, value: PySide2.QtCore.QPointF) -> None: ...
    def setChangeFlags(self, value: typing.Union[QPinchGesture.ChangeFlags,QPinchGesture.ChangeFlag]) -> None: ...
    def setLastCenterPoint(self, value: PySide2.QtCore.QPointF) -> None: ...
    def setLastRotationAngle(self, value: float) -> None: ...
    def setLastScaleFactor(self, value: float) -> None: ...
    def setRotationAngle(self, value: float) -> None: ...
    def setScaleFactor(self, value: float) -> None: ...
    def setStartCenterPoint(self, value: PySide2.QtCore.QPointF) -> None: ...
    def setTotalChangeFlags(self, value: typing.Union[QPinchGesture.ChangeFlags,QPinchGesture.ChangeFlag]) -> None: ...
    def setTotalRotationAngle(self, value: float) -> None: ...
    def setTotalScaleFactor(self, value: float) -> None: ...
    def startCenterPoint(self) -> PySide2.QtCore.QPointF: ...
    def totalChangeFlags(self) -> typing.Union[QPinchGesture.ChangeFlags,QPinchGesture.ChangeFlag]: ...
    def totalRotationAngle(self) -> float: ...
    def totalScaleFactor(self) -> float: ...

class QPlainTextDocumentLayout(PySide2.QtGui.QAbstractTextDocumentLayout):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, document: PySide2.QtGui.QTextDocument, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def blockBoundingRect(self, block: PySide2.QtGui.QTextBlock) -> PySide2.QtCore.QRectF: ...
    def cursorWidth(self) -> int: ...
    def documentChanged(self, from_: int, arg__2: int, charsAdded: int) -> None: ...
    def documentSize(self) -> PySide2.QtCore.QSizeF: ...
    def draw(self, arg__1: PySide2.QtGui.QPainter, arg__2: PySide2.QtGui.QAbstractTextDocumentLayout.PaintContext) -> None: ...
    def ensureBlockLayout(self, block: PySide2.QtGui.QTextBlock) -> None: ...
    def frameBoundingRect(self, arg__1: PySide2.QtGui.QTextFrame) -> PySide2.QtCore.QRectF: ...
    def hitTest(self, arg__1: PySide2.QtCore.QPointF, arg__2: PySide2.QtCore.Qt.HitTestAccuracy) -> int: ...
    def pageCount(self) -> int: ...
    def requestUpdate(self) -> None: ...
    def setCursorWidth(self, width: int) -> None: ...

class QPlainTextEdit(QAbstractScrollArea):
    class LineWrapMode:
        NoWrap: ClassVar[QPlainTextEdit.LineWrapMode] = ...
        WidgetWidth: ClassVar[QPlainTextEdit.LineWrapMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPlainTextEdit.LineWrapMode: ...
        def __and__(self, other: typing.SupportsInt) -> QPlainTextEdit.LineWrapMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPlainTextEdit.LineWrapMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPlainTextEdit.LineWrapMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPlainTextEdit.LineWrapMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QPlainTextEdit.LineWrapMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPlainTextEdit.LineWrapMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QPlainTextEdit.LineWrapMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPlainTextEdit.LineWrapMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPlainTextEdit.LineWrapMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QPlainTextEdit.LineWrapMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QPlainTextEdit.LineWrapMode: ...
    NoWrap: ClassVar[QPlainTextEdit.LineWrapMode] = ...
    WidgetWidth: ClassVar[QPlainTextEdit.LineWrapMode] = ...
    blockCountChanged: ClassVar[PySide2.QtCore.Signal] = ...
    copyAvailable: ClassVar[PySide2.QtCore.Signal] = ...
    cursorPositionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    modificationChanged: ClassVar[PySide2.QtCore.Signal] = ...
    redoAvailable: ClassVar[PySide2.QtCore.Signal] = ...
    selectionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    textChanged: ClassVar[PySide2.QtCore.Signal] = ...
    undoAvailable: ClassVar[PySide2.QtCore.Signal] = ...
    updateRequest: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., backgroundVisible: bool = ..., baseSize: PySide2.QtCore.QSize = ..., blockCount: int = ..., blockCountChanged: typing.Callable = ..., centerOnScroll: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., copyAvailable: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., cursorPositionChanged: typing.Callable = ..., cursorWidth: int = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., documentTitle: str = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QPlainTextEdit.Shadow = ..., frameShape: QPlainTextEdit.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., lineWrapMode: QPlainTextEdit.LineWrapMode = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumBlockCount: int = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., modificationChanged: typing.Callable = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., overwriteMode: bool = ..., palette: PySide2.QtGui.QPalette = ..., placeholderText: str = ..., plainText: str = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., redoAvailable: typing.Callable = ..., selectionChanged: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QPlainTextEdit.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabChangesFocus: bool = ..., tabStopDistance: float = ..., tabStopWidth: int = ..., tabletTracking: bool = ..., textChanged: typing.Callable = ..., textInteractionFlags: typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag] = ..., toolTip: str = ..., toolTipDuration: int = ..., undoAvailable: typing.Callable = ..., undoRedoEnabled: bool = ..., updateRequest: typing.Callable = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, text: str, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., backgroundVisible: bool = ..., baseSize: PySide2.QtCore.QSize = ..., blockCount: int = ..., blockCountChanged: typing.Callable = ..., centerOnScroll: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., copyAvailable: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., cursorPositionChanged: typing.Callable = ..., cursorWidth: int = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., documentTitle: str = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QPlainTextEdit.Shadow = ..., frameShape: QPlainTextEdit.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., lineWrapMode: QPlainTextEdit.LineWrapMode = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumBlockCount: int = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., modificationChanged: typing.Callable = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., overwriteMode: bool = ..., palette: PySide2.QtGui.QPalette = ..., placeholderText: str = ..., plainText: str = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., redoAvailable: typing.Callable = ..., selectionChanged: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QPlainTextEdit.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabChangesFocus: bool = ..., tabStopDistance: float = ..., tabStopWidth: int = ..., tabletTracking: bool = ..., textChanged: typing.Callable = ..., textInteractionFlags: typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag] = ..., toolTip: str = ..., toolTipDuration: int = ..., undoAvailable: typing.Callable = ..., undoRedoEnabled: bool = ..., updateRequest: typing.Callable = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def anchorAt(self, pos: PySide2.QtCore.QPoint) -> str: ...
    def appendHtml(self, html: str) -> None: ...
    def appendPlainText(self, text: str) -> None: ...
    def backgroundVisible(self) -> bool: ...
    def blockBoundingGeometry(self, block: PySide2.QtGui.QTextBlock) -> PySide2.QtCore.QRectF: ...
    def blockBoundingRect(self, block: PySide2.QtGui.QTextBlock) -> PySide2.QtCore.QRectF: ...
    def blockCount(self) -> int: ...
    def canInsertFromMimeData(self, source: PySide2.QtCore.QMimeData) -> bool: ...
    def canPaste(self) -> bool: ...
    def centerCursor(self) -> None: ...
    def centerOnScroll(self) -> bool: ...
    def changeEvent(self, e: PySide2.QtCore.QEvent) -> None: ...
    def clear(self) -> None: ...
    def contentOffset(self) -> PySide2.QtCore.QPointF: ...
    def contextMenuEvent(self, e: PySide2.QtGui.QContextMenuEvent) -> None: ...
    def copy(self) -> None: ...
    def createMimeDataFromSelection(self) -> PySide2.QtCore.QMimeData: ...
    @overload
    def createStandardContextMenu(self) -> QMenu: ...
    @overload
    def createStandardContextMenu(self, position: PySide2.QtCore.QPoint) -> QMenu: ...
    def currentCharFormat(self) -> PySide2.QtGui.QTextCharFormat: ...
    def cursorForPosition(self, pos: PySide2.QtCore.QPoint) -> PySide2.QtGui.QTextCursor: ...
    @overload
    def cursorRect(self) -> PySide2.QtCore.QRect: ...
    @overload
    def cursorRect(self, cursor: PySide2.QtGui.QTextCursor) -> PySide2.QtCore.QRect: ...
    def cursorWidth(self) -> int: ...
    def cut(self) -> None: ...
    def doSetTextCursor(self, cursor: PySide2.QtGui.QTextCursor) -> None: ...
    def document(self) -> PySide2.QtGui.QTextDocument: ...
    def documentTitle(self) -> str: ...
    def dragEnterEvent(self, e: PySide2.QtGui.QDragEnterEvent) -> None: ...
    def dragLeaveEvent(self, e: PySide2.QtGui.QDragLeaveEvent) -> None: ...
    def dragMoveEvent(self, e: PySide2.QtGui.QDragMoveEvent) -> None: ...
    def dropEvent(self, e: PySide2.QtGui.QDropEvent) -> None: ...
    def ensureCursorVisible(self) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def extraSelections(self) -> typing.List[QTextEdit.ExtraSelection]: ...
    @overload
    def find(self, exp: PySide2.QtCore.QRegExp, options: typing.Union[PySide2.QtGui.QTextDocument.FindFlags,PySide2.QtGui.QTextDocument.FindFlag] = ...) -> bool: ...
    @overload
    def find(self, exp: PySide2.QtCore.QRegularExpression, options: typing.Union[PySide2.QtGui.QTextDocument.FindFlags,PySide2.QtGui.QTextDocument.FindFlag] = ...) -> bool: ...
    @overload
    def find(self, exp: str, options: typing.Union[PySide2.QtGui.QTextDocument.FindFlags,PySide2.QtGui.QTextDocument.FindFlag] = ...) -> bool: ...
    def firstVisibleBlock(self) -> PySide2.QtGui.QTextBlock: ...
    def focusInEvent(self, e: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def focusOutEvent(self, e: PySide2.QtGui.QFocusEvent) -> None: ...
    def getPaintContext(self) -> PySide2.QtGui.QAbstractTextDocumentLayout.PaintContext: ...
    def inputMethodEvent(self, arg__1: PySide2.QtGui.QInputMethodEvent) -> None: ...
    @overload
    def inputMethodQuery(self, property: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    @overload
    def inputMethodQuery(self, query: PySide2.QtCore.Qt.InputMethodQuery, argument: typing.Any) -> typing.Any: ...
    def insertFromMimeData(self, source: PySide2.QtCore.QMimeData) -> None: ...
    def insertPlainText(self, text: str) -> None: ...
    def isReadOnly(self) -> bool: ...
    def isUndoRedoEnabled(self) -> bool: ...
    def keyPressEvent(self, e: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, e: PySide2.QtGui.QKeyEvent) -> None: ...
    def lineWrapMode(self) -> QPlainTextEdit.LineWrapMode: ...
    def loadResource(self, type: int, name: PySide2.QtCore.QUrl) -> typing.Any: ...
    def maximumBlockCount(self) -> int: ...
    def mergeCurrentCharFormat(self, modifier: PySide2.QtGui.QTextCharFormat) -> None: ...
    def mouseDoubleClickEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseMoveEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def moveCursor(self, operation: PySide2.QtGui.QTextCursor.MoveOperation, mode: PySide2.QtGui.QTextCursor.MoveMode = ...) -> None: ...
    def overwriteMode(self) -> bool: ...
    def paintEvent(self, e: PySide2.QtGui.QPaintEvent) -> None: ...
    def paste(self) -> None: ...
    def placeholderText(self) -> str: ...
    def print_(self, printer: PySide2.QtGui.QPagedPaintDevice) -> None: ...
    def redo(self) -> None: ...
    def resizeEvent(self, e: PySide2.QtGui.QResizeEvent) -> None: ...
    def scrollContentsBy(self, dx: int, dy: int) -> None: ...
    def selectAll(self) -> None: ...
    def setBackgroundVisible(self, visible: bool) -> None: ...
    def setCenterOnScroll(self, enabled: bool) -> None: ...
    def setCurrentCharFormat(self, format: PySide2.QtGui.QTextCharFormat) -> None: ...
    def setCursorWidth(self, width: int) -> None: ...
    def setDocument(self, document: PySide2.QtGui.QTextDocument) -> None: ...
    def setDocumentTitle(self, title: str) -> None: ...
    def setExtraSelections(self, selections: typing.Sequence[QTextEdit.ExtraSelection]) -> None: ...
    def setLineWrapMode(self, mode: QPlainTextEdit.LineWrapMode) -> None: ...
    def setMaximumBlockCount(self, maximum: int) -> None: ...
    def setOverwriteMode(self, overwrite: bool) -> None: ...
    def setPlaceholderText(self, placeholderText: str) -> None: ...
    def setPlainText(self, text: str) -> None: ...
    def setReadOnly(self, ro: bool) -> None: ...
    def setTabChangesFocus(self, b: bool) -> None: ...
    def setTabStopDistance(self, distance: float) -> None: ...
    def setTabStopWidth(self, width: int) -> None: ...
    def setTextCursor(self, cursor: PySide2.QtGui.QTextCursor) -> None: ...
    def setTextInteractionFlags(self, flags: typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag]) -> None: ...
    def setUndoRedoEnabled(self, enable: bool) -> None: ...
    def setWordWrapMode(self, policy: PySide2.QtGui.QTextOption.WrapMode) -> None: ...
    def showEvent(self, arg__1: PySide2.QtGui.QShowEvent) -> None: ...
    def tabChangesFocus(self) -> bool: ...
    def tabStopDistance(self) -> float: ...
    def tabStopWidth(self) -> int: ...
    def textCursor(self) -> PySide2.QtGui.QTextCursor: ...
    def textInteractionFlags(self) -> typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag]: ...
    def timerEvent(self, e: PySide2.QtCore.QTimerEvent) -> None: ...
    def toPlainText(self) -> str: ...
    def undo(self) -> None: ...
    def wheelEvent(self, e: PySide2.QtGui.QWheelEvent) -> None: ...
    def wordWrapMode(self) -> PySide2.QtGui.QTextOption.WrapMode: ...
    def zoomIn(self, range: int = ...) -> None: ...
    def zoomInF(self, range: float) -> None: ...
    def zoomOut(self, range: int = ...) -> None: ...

class QProgressBar(QWidget):
    class Direction:
        BottomToTop: ClassVar[QProgressBar.Direction] = ...
        TopToBottom: ClassVar[QProgressBar.Direction] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QProgressBar.Direction: ...
        def __and__(self, other: typing.SupportsInt) -> QProgressBar.Direction: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QProgressBar.Direction: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QProgressBar.Direction: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QProgressBar.Direction: ...
        def __rand__(self, other: typing.SupportsInt) -> QProgressBar.Direction: ...
        def __rmul__(self, other: typing.SupportsInt) -> QProgressBar.Direction: ...
        def __ror__(self, other: typing.SupportsInt) -> QProgressBar.Direction: ...
        def __rsub__(self, other: typing.SupportsInt) -> QProgressBar.Direction: ...
        def __rxor__(self, other: typing.SupportsInt) -> QProgressBar.Direction: ...
        def __sub__(self, other: typing.SupportsInt) -> QProgressBar.Direction: ...
        def __xor__(self, other: typing.SupportsInt) -> QProgressBar.Direction: ...
    BottomToTop: ClassVar[QProgressBar.Direction] = ...
    TopToBottom: ClassVar[QProgressBar.Direction] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    valueChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., format: str = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., invertedAppearance: bool = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximum: int = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimum: int = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., orientation: PySide2.QtCore.Qt.Orientation = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., textDirection: QProgressBar.Direction = ..., textVisible: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., value: int = ..., valueChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def alignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def format(self) -> str: ...
    def initStyleOption(self, option: QStyleOptionProgressBar) -> None: ...
    def invertedAppearance(self) -> bool: ...
    def isTextVisible(self) -> bool: ...
    def maximum(self) -> int: ...
    def minimum(self) -> int: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def orientation(self) -> PySide2.QtCore.Qt.Orientation: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def reset(self) -> None: ...
    def resetFormat(self) -> None: ...
    def setAlignment(self, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setFormat(self, format: str) -> None: ...
    def setInvertedAppearance(self, invert: bool) -> None: ...
    def setMaximum(self, maximum: int) -> None: ...
    def setMinimum(self, minimum: int) -> None: ...
    def setOrientation(self, arg__1: PySide2.QtCore.Qt.Orientation) -> None: ...
    def setRange(self, minimum: int, maximum: int) -> None: ...
    def setTextDirection(self, textDirection: QProgressBar.Direction) -> None: ...
    def setTextVisible(self, visible: bool) -> None: ...
    def setValue(self, value: int) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def text(self) -> str: ...
    def textDirection(self) -> QProgressBar.Direction: ...
    def value(self) -> int: ...

class QProgressDialog(QDialog):
    canceled: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, labelText: str, cancelButtonText: str, minimum: int, maximum: int, parent: typing.Union[QWidget,None] = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoClose: bool = ..., autoFillBackground: bool = ..., autoReset: bool = ..., baseSize: PySide2.QtCore.QSize = ..., canceled: typing.Callable = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., finished: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumDuration: int = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeGripEnabled: bool = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., value: int = ..., visible: bool = ..., wasCanceled: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoClose: bool = ..., autoFillBackground: bool = ..., autoReset: bool = ..., baseSize: PySide2.QtCore.QSize = ..., canceled: typing.Callable = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., finished: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., labelText: str = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximum: int = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimum: int = ..., minimumDuration: int = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeGripEnabled: bool = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., value: int = ..., visible: bool = ..., wasCanceled: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def autoClose(self) -> bool: ...
    def autoReset(self) -> bool: ...
    def cancel(self) -> None: ...
    def changeEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def closeEvent(self, event: PySide2.QtGui.QCloseEvent) -> None: ...
    def forceShow(self) -> None: ...
    def labelText(self) -> str: ...
    def maximum(self) -> int: ...
    def minimum(self) -> int: ...
    def minimumDuration(self) -> int: ...
    @overload
    def open(self) -> None: ...
    @overload
    def open(self, receiver: PySide2.QtCore.QObject, member: bytes) -> None: ...
    def reset(self) -> None: ...
    def resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None: ...
    def setAutoClose(self, close: bool) -> None: ...
    def setAutoReset(self, reset: bool) -> None: ...
    def setBar(self, bar: QProgressBar) -> None: ...
    def setCancelButton(self, button: QPushButton) -> None: ...
    def setCancelButtonText(self, text: str) -> None: ...
    def setLabel(self, label: QLabel) -> None: ...
    def setLabelText(self, text: str) -> None: ...
    def setMaximum(self, maximum: int) -> None: ...
    def setMinimum(self, minimum: int) -> None: ...
    def setMinimumDuration(self, ms: int) -> None: ...
    def setRange(self, minimum: int, maximum: int) -> None: ...
    def setValue(self, progress: int) -> None: ...
    def showEvent(self, event: PySide2.QtGui.QShowEvent) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def value(self) -> int: ...
    def wasCanceled(self) -> bool: ...

class QProxyStyle(QCommonStyle):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, key: str, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, style: typing.Union[QStyle,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def baseStyle(self) -> QStyle: ...
    def drawComplexControl(self, control: QStyle.ComplexControl, option: QStyleOptionComplex, painter: PySide2.QtGui.QPainter, widget: typing.Union[QWidget,None] = ...) -> None: ...
    def drawControl(self, element: QStyle.ControlElement, option: QStyleOption, painter: PySide2.QtGui.QPainter, widget: typing.Union[QWidget,None] = ...) -> None: ...
    def drawItemPixmap(self, painter: PySide2.QtGui.QPainter, rect: PySide2.QtCore.QRect, alignment: int, pixmap: PySide2.QtGui.QPixmap) -> None: ...
    def drawItemText(self, painter: PySide2.QtGui.QPainter, rect: PySide2.QtCore.QRect, flags: typing.SupportsInt, pal: PySide2.QtGui.QPalette, enabled: bool, text: str, textRole: PySide2.QtGui.QPalette.ColorRole = ...) -> None: ...
    def drawPrimitive(self, element: QStyle.PrimitiveElement, option: QStyleOption, painter: PySide2.QtGui.QPainter, widget: typing.Union[QWidget,None] = ...) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def generatedIconPixmap(self, iconMode: PySide2.QtGui.QIcon.Mode, pixmap: PySide2.QtGui.QPixmap, opt: QStyleOption) -> PySide2.QtGui.QPixmap: ...
    def hitTestComplexControl(self, control: QStyle.ComplexControl, option: QStyleOptionComplex, pos: PySide2.QtCore.QPoint, widget: typing.Union[QWidget,None] = ...) -> QStyle.SubControl: ...
    def itemPixmapRect(self, r: PySide2.QtCore.QRect, flags: typing.SupportsInt, pixmap: PySide2.QtGui.QPixmap) -> PySide2.QtCore.QRect: ...
    def itemTextRect(self, fm: PySide2.QtGui.QFontMetrics, r: PySide2.QtCore.QRect, flags: typing.SupportsInt, enabled: bool, text: str) -> PySide2.QtCore.QRect: ...
    def layoutSpacing(self, control1: QSizePolicy.ControlType, control2: QSizePolicy.ControlType, orientation: PySide2.QtCore.Qt.Orientation, option: typing.Union[QStyleOption,None] = ..., widget: typing.Union[QWidget,None] = ...) -> int: ...
    def pixelMetric(self, metric: QStyle.PixelMetric, option: typing.Union[QStyleOption,None] = ..., widget: typing.Union[QWidget,None] = ...) -> int: ...
    @overload
    def polish(self, app: QApplication) -> None: ...
    @overload
    def polish(self, pal: PySide2.QtGui.QPalette) -> None: ...
    @overload
    def polish(self, widget: QWidget) -> None: ...
    def setBaseStyle(self, style: QStyle) -> None: ...
    def sizeFromContents(self, type: QStyle.ContentsType, option: QStyleOption, size: PySide2.QtCore.QSize, widget: QWidget) -> PySide2.QtCore.QSize: ...
    def standardIcon(self, standardIcon: QStyle.StandardPixmap, option: typing.Union[QStyleOption,None] = ..., widget: typing.Union[QWidget,None] = ...) -> PySide2.QtGui.QIcon: ...
    def standardPalette(self) -> PySide2.QtGui.QPalette: ...
    def standardPixmap(self, standardPixmap: QStyle.StandardPixmap, opt: QStyleOption, widget: typing.Union[QWidget,None] = ...) -> PySide2.QtGui.QPixmap: ...
    def styleHint(self, hint: QStyle.StyleHint, option: typing.Union[QStyleOption,None] = ..., widget: typing.Union[QWidget,None] = ..., returnData: typing.Union[QStyleHintReturn,None] = ...) -> int: ...
    def subControlRect(self, cc: QStyle.ComplexControl, opt: QStyleOptionComplex, sc: QStyle.SubControl, widget: QWidget) -> PySide2.QtCore.QRect: ...
    def subElementRect(self, element: QStyle.SubElement, option: QStyleOption, widget: QWidget) -> PySide2.QtCore.QRect: ...
    @overload
    def unpolish(self, app: QApplication) -> None: ...
    @overload
    def unpolish(self, application: QApplication) -> None: ...
    @overload
    def unpolish(self, widget: QWidget) -> None: ...

class QPushButton(QAbstractButton):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, icon: PySide2.QtGui.QIcon, text: str, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoDefault: bool = ..., autoExclusive: bool = ..., autoFillBackground: bool = ..., autoRepeat: bool = ..., autoRepeatDelay: int = ..., autoRepeatInterval: int = ..., baseSize: PySide2.QtCore.QSize = ..., checkable: bool = ..., checked: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., default: bool = ..., destroyed: typing.Callable = ..., down: bool = ..., enabled: bool = ..., flat: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., iconSize: PySide2.QtCore.QSize = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., released: typing.Callable = ..., shortcut: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toggled: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoDefault: bool = ..., autoExclusive: bool = ..., autoFillBackground: bool = ..., autoRepeat: bool = ..., autoRepeatDelay: int = ..., autoRepeatInterval: int = ..., baseSize: PySide2.QtCore.QSize = ..., checkable: bool = ..., checked: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., default: bool = ..., destroyed: typing.Callable = ..., down: bool = ..., enabled: bool = ..., flat: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., icon: PySide2.QtGui.QIcon = ..., iconSize: PySide2.QtCore.QSize = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., released: typing.Callable = ..., shortcut: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., toggled: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, text: str, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoDefault: bool = ..., autoExclusive: bool = ..., autoFillBackground: bool = ..., autoRepeat: bool = ..., autoRepeatDelay: int = ..., autoRepeatInterval: int = ..., baseSize: PySide2.QtCore.QSize = ..., checkable: bool = ..., checked: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., default: bool = ..., destroyed: typing.Callable = ..., down: bool = ..., enabled: bool = ..., flat: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., icon: PySide2.QtGui.QIcon = ..., iconSize: PySide2.QtCore.QSize = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., released: typing.Callable = ..., shortcut: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toggled: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def autoDefault(self) -> bool: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def focusInEvent(self, arg__1: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusOutEvent(self, arg__1: PySide2.QtGui.QFocusEvent) -> None: ...
    def hitButton(self, pos: PySide2.QtCore.QPoint) -> bool: ...
    def initStyleOption(self, option: QStyleOptionButton) -> None: ...
    def isDefault(self) -> bool: ...
    def isFlat(self) -> bool: ...
    def keyPressEvent(self, arg__1: PySide2.QtGui.QKeyEvent) -> None: ...
    def menu(self) -> QMenu: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def setAutoDefault(self, arg__1: bool) -> None: ...
    def setDefault(self, arg__1: bool) -> None: ...
    def setFlat(self, arg__1: bool) -> None: ...
    def setMenu(self, menu: QMenu) -> None: ...
    def showMenu(self) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...

class QRadioButton(QAbstractButton):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoExclusive: bool = ..., autoFillBackground: bool = ..., autoRepeat: bool = ..., autoRepeatDelay: int = ..., autoRepeatInterval: int = ..., baseSize: PySide2.QtCore.QSize = ..., checkable: bool = ..., checked: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., down: bool = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., icon: PySide2.QtGui.QIcon = ..., iconSize: PySide2.QtCore.QSize = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., released: typing.Callable = ..., shortcut: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., toggled: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, text: str, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoExclusive: bool = ..., autoFillBackground: bool = ..., autoRepeat: bool = ..., autoRepeatDelay: int = ..., autoRepeatInterval: int = ..., baseSize: PySide2.QtCore.QSize = ..., checkable: bool = ..., checked: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., down: bool = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., icon: PySide2.QtGui.QIcon = ..., iconSize: PySide2.QtCore.QSize = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., released: typing.Callable = ..., shortcut: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toggled: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def hitButton(self, arg__1: PySide2.QtCore.QPoint) -> bool: ...
    def initStyleOption(self, button: QStyleOptionButton) -> None: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def mouseMoveEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...

class QRubberBand(QWidget):
    class Shape:
        Line: ClassVar[QRubberBand.Shape] = ...
        Rectangle: ClassVar[QRubberBand.Shape] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QRubberBand.Shape: ...
        def __and__(self, other: typing.SupportsInt) -> QRubberBand.Shape: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QRubberBand.Shape: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QRubberBand.Shape: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QRubberBand.Shape: ...
        def __rand__(self, other: typing.SupportsInt) -> QRubberBand.Shape: ...
        def __rmul__(self, other: typing.SupportsInt) -> QRubberBand.Shape: ...
        def __ror__(self, other: typing.SupportsInt) -> QRubberBand.Shape: ...
        def __rsub__(self, other: typing.SupportsInt) -> QRubberBand.Shape: ...
        def __rxor__(self, other: typing.SupportsInt) -> QRubberBand.Shape: ...
        def __sub__(self, other: typing.SupportsInt) -> QRubberBand.Shape: ...
        def __xor__(self, other: typing.SupportsInt) -> QRubberBand.Shape: ...
    Line: ClassVar[QRubberBand.Shape] = ...
    Rectangle: ClassVar[QRubberBand.Shape] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, arg__1: QRubberBand.Shape, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def changeEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def initStyleOption(self, option: QStyleOptionRubberBand) -> None: ...
    @overload
    def move(self, p: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def move(self, x: int, y: int) -> None: ...
    def moveEvent(self, arg__1: PySide2.QtGui.QMoveEvent) -> None: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    @overload
    def resize(self, s: PySide2.QtCore.QSize) -> None: ...
    @overload
    def resize(self, w: int, h: int) -> None: ...
    def resizeEvent(self, arg__1: PySide2.QtGui.QResizeEvent) -> None: ...
    @overload
    def setGeometry(self, r: PySide2.QtCore.QRect) -> None: ...
    @overload
    def setGeometry(self, x: int, y: int, w: int, h: int) -> None: ...
    def shape(self) -> QRubberBand.Shape: ...
    def showEvent(self, arg__1: PySide2.QtGui.QShowEvent) -> None: ...

class QScrollArea(QAbstractScrollArea):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QScrollArea.Shadow = ..., frameShape: QScrollArea.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QScrollArea.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., visible: bool = ..., whatsThis: str = ..., widgetResizable: bool = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def alignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def ensureVisible(self, x: int, y: int, xmargin: int = ..., ymargin: int = ...) -> None: ...
    def ensureWidgetVisible(self, childWidget: QWidget, xmargin: int = ..., ymargin: int = ...) -> None: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def eventFilter(self, arg__1: PySide2.QtCore.QObject, arg__2: PySide2.QtCore.QEvent) -> bool: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def resizeEvent(self, arg__1: PySide2.QtGui.QResizeEvent) -> None: ...
    def scrollContentsBy(self, dx: int, dy: int) -> None: ...
    def setAlignment(self, arg__1: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setWidget(self, widget: QWidget) -> None: ...
    def setWidgetResizable(self, resizable: bool) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def takeWidget(self) -> QWidget: ...
    def viewportSizeHint(self) -> PySide2.QtCore.QSize: ...
    def widget(self) -> QWidget: ...
    def widgetResizable(self) -> bool: ...

class QScrollBar(QAbstractSlider):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, arg__1: PySide2.QtCore.Qt.Orientation, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., actionTriggered: typing.Callable = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., invertedAppearance: bool = ..., invertedControls: bool = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximum: int = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimum: int = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., orientation: PySide2.QtCore.Qt.Orientation = ..., pageStep: int = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rangeChanged: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., singleStep: int = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., sliderDown: bool = ..., sliderMoved: typing.Callable = ..., sliderPosition: int = ..., sliderPressed: typing.Callable = ..., sliderReleased: typing.Callable = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., tracking: bool = ..., updatesEnabled: bool = ..., value: int = ..., valueChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., actionTriggered: typing.Callable = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., invertedAppearance: bool = ..., invertedControls: bool = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximum: int = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimum: int = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., orientation: PySide2.QtCore.Qt.Orientation = ..., pageStep: int = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rangeChanged: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., singleStep: int = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., sliderDown: bool = ..., sliderMoved: typing.Callable = ..., sliderPosition: int = ..., sliderPressed: typing.Callable = ..., sliderReleased: typing.Callable = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., tracking: bool = ..., updatesEnabled: bool = ..., value: int = ..., valueChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def contextMenuEvent(self, arg__1: PySide2.QtGui.QContextMenuEvent) -> None: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def hideEvent(self, arg__1: PySide2.QtGui.QHideEvent) -> None: ...
    def initStyleOption(self, option: QStyleOptionSlider) -> None: ...
    def mouseMoveEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def sliderChange(self, change: QAbstractSlider.SliderChange) -> None: ...
    def wheelEvent(self, arg__1: PySide2.QtGui.QWheelEvent) -> None: ...

class QScroller(PySide2.QtCore.QObject):
    class Input:
        InputMove: ClassVar[QScroller.Input] = ...
        InputPress: ClassVar[QScroller.Input] = ...
        InputRelease: ClassVar[QScroller.Input] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QScroller.Input: ...
        def __and__(self, other: typing.SupportsInt) -> QScroller.Input: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QScroller.Input: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QScroller.Input: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QScroller.Input: ...
        def __rand__(self, other: typing.SupportsInt) -> QScroller.Input: ...
        def __rmul__(self, other: typing.SupportsInt) -> QScroller.Input: ...
        def __ror__(self, other: typing.SupportsInt) -> QScroller.Input: ...
        def __rsub__(self, other: typing.SupportsInt) -> QScroller.Input: ...
        def __rxor__(self, other: typing.SupportsInt) -> QScroller.Input: ...
        def __sub__(self, other: typing.SupportsInt) -> QScroller.Input: ...
        def __xor__(self, other: typing.SupportsInt) -> QScroller.Input: ...

    class ScrollerGestureType:
        LeftMouseButtonGesture: ClassVar[QScroller.ScrollerGestureType] = ...
        MiddleMouseButtonGesture: ClassVar[QScroller.ScrollerGestureType] = ...
        RightMouseButtonGesture: ClassVar[QScroller.ScrollerGestureType] = ...
        TouchGesture: ClassVar[QScroller.ScrollerGestureType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QScroller.ScrollerGestureType: ...
        def __and__(self, other: typing.SupportsInt) -> QScroller.ScrollerGestureType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QScroller.ScrollerGestureType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QScroller.ScrollerGestureType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QScroller.ScrollerGestureType: ...
        def __rand__(self, other: typing.SupportsInt) -> QScroller.ScrollerGestureType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QScroller.ScrollerGestureType: ...
        def __ror__(self, other: typing.SupportsInt) -> QScroller.ScrollerGestureType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QScroller.ScrollerGestureType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QScroller.ScrollerGestureType: ...
        def __sub__(self, other: typing.SupportsInt) -> QScroller.ScrollerGestureType: ...
        def __xor__(self, other: typing.SupportsInt) -> QScroller.ScrollerGestureType: ...

    class State:
        Dragging: ClassVar[QScroller.State] = ...
        Inactive: ClassVar[QScroller.State] = ...
        Pressed: ClassVar[QScroller.State] = ...
        Scrolling: ClassVar[QScroller.State] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QScroller.State: ...
        def __and__(self, other: typing.SupportsInt) -> QScroller.State: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QScroller.State: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QScroller.State: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QScroller.State: ...
        def __rand__(self, other: typing.SupportsInt) -> QScroller.State: ...
        def __rmul__(self, other: typing.SupportsInt) -> QScroller.State: ...
        def __ror__(self, other: typing.SupportsInt) -> QScroller.State: ...
        def __rsub__(self, other: typing.SupportsInt) -> QScroller.State: ...
        def __rxor__(self, other: typing.SupportsInt) -> QScroller.State: ...
        def __sub__(self, other: typing.SupportsInt) -> QScroller.State: ...
        def __xor__(self, other: typing.SupportsInt) -> QScroller.State: ...
    Dragging: ClassVar[QScroller.State] = ...
    Inactive: ClassVar[QScroller.State] = ...
    InputMove: ClassVar[QScroller.Input] = ...
    InputPress: ClassVar[QScroller.Input] = ...
    InputRelease: ClassVar[QScroller.Input] = ...
    LeftMouseButtonGesture: ClassVar[QScroller.ScrollerGestureType] = ...
    MiddleMouseButtonGesture: ClassVar[QScroller.ScrollerGestureType] = ...
    Pressed: ClassVar[QScroller.State] = ...
    RightMouseButtonGesture: ClassVar[QScroller.ScrollerGestureType] = ...
    Scrolling: ClassVar[QScroller.State] = ...
    TouchGesture: ClassVar[QScroller.ScrollerGestureType] = ...
    scrollerPropertiesChanged: ClassVar[PySide2.QtCore.Signal] = ...
    stateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def activeScrollers(cls) -> typing.List[QScroller]: ...
    @overload
    def ensureVisible(self, rect: PySide2.QtCore.QRectF, xmargin: float, ymargin: float) -> None: ...
    @overload
    def ensureVisible(self, rect: PySide2.QtCore.QRectF, xmargin: float, ymargin: float, scrollTime: int) -> None: ...
    def finalPosition(self) -> PySide2.QtCore.QPointF: ...
    @classmethod
    def grabGesture(cls, target: PySide2.QtCore.QObject, gestureType: QScroller.ScrollerGestureType = ...) -> PySide2.QtCore.Qt.GestureType: ...
    @classmethod
    def grabbedGesture(cls, target: PySide2.QtCore.QObject) -> PySide2.QtCore.Qt.GestureType: ...
    def handleInput(self, input: QScroller.Input, position: PySide2.QtCore.QPointF, timestamp: int = ...) -> bool: ...
    @classmethod
    def hasScroller(cls, target: PySide2.QtCore.QObject) -> bool: ...
    def pixelPerMeter(self) -> PySide2.QtCore.QPointF: ...
    def resendPrepareEvent(self) -> None: ...
    @overload
    def scrollTo(self, pos: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def scrollTo(self, pos: PySide2.QtCore.QPointF, scrollTime: int) -> None: ...
    @classmethod
    def scroller(cls, target: PySide2.QtCore.QObject) -> QScroller: ...
    def scrollerProperties(self) -> QScrollerProperties: ...
    def setScrollerProperties(self, prop: QScrollerProperties) -> None: ...
    @overload
    def setSnapPositionsX(self, first: float, interval: float) -> None: ...
    @overload
    def setSnapPositionsX(self, positions: typing.Sequence[float]) -> None: ...
    @overload
    def setSnapPositionsY(self, first: float, interval: float) -> None: ...
    @overload
    def setSnapPositionsY(self, positions: typing.Sequence[float]) -> None: ...
    def state(self) -> QScroller.State: ...
    def stop(self) -> None: ...
    def target(self) -> PySide2.QtCore.QObject: ...
    @classmethod
    def ungrabGesture(cls, target: PySide2.QtCore.QObject) -> None: ...
    def velocity(self) -> PySide2.QtCore.QPointF: ...

class QScrollerProperties(shiboken2.Object):
    class FrameRates:
        Fps20: ClassVar[QScrollerProperties.FrameRates] = ...
        Fps30: ClassVar[QScrollerProperties.FrameRates] = ...
        Fps60: ClassVar[QScrollerProperties.FrameRates] = ...
        Standard: ClassVar[QScrollerProperties.FrameRates] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QScrollerProperties.FrameRates: ...
        def __and__(self, other: typing.SupportsInt) -> QScrollerProperties.FrameRates: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QScrollerProperties.FrameRates: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QScrollerProperties.FrameRates: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QScrollerProperties.FrameRates: ...
        def __rand__(self, other: typing.SupportsInt) -> QScrollerProperties.FrameRates: ...
        def __rmul__(self, other: typing.SupportsInt) -> QScrollerProperties.FrameRates: ...
        def __ror__(self, other: typing.SupportsInt) -> QScrollerProperties.FrameRates: ...
        def __rsub__(self, other: typing.SupportsInt) -> QScrollerProperties.FrameRates: ...
        def __rxor__(self, other: typing.SupportsInt) -> QScrollerProperties.FrameRates: ...
        def __sub__(self, other: typing.SupportsInt) -> QScrollerProperties.FrameRates: ...
        def __xor__(self, other: typing.SupportsInt) -> QScrollerProperties.FrameRates: ...

    class OvershootPolicy:
        OvershootAlwaysOff: ClassVar[QScrollerProperties.OvershootPolicy] = ...
        OvershootAlwaysOn: ClassVar[QScrollerProperties.OvershootPolicy] = ...
        OvershootWhenScrollable: ClassVar[QScrollerProperties.OvershootPolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QScrollerProperties.OvershootPolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QScrollerProperties.OvershootPolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QScrollerProperties.OvershootPolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QScrollerProperties.OvershootPolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QScrollerProperties.OvershootPolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QScrollerProperties.OvershootPolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QScrollerProperties.OvershootPolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QScrollerProperties.OvershootPolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QScrollerProperties.OvershootPolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QScrollerProperties.OvershootPolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QScrollerProperties.OvershootPolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QScrollerProperties.OvershootPolicy: ...

    class ScrollMetric:
        AcceleratingFlickMaximumTime: ClassVar[QScrollerProperties.ScrollMetric] = ...
        AcceleratingFlickSpeedupFactor: ClassVar[QScrollerProperties.ScrollMetric] = ...
        AxisLockThreshold: ClassVar[QScrollerProperties.ScrollMetric] = ...
        DecelerationFactor: ClassVar[QScrollerProperties.ScrollMetric] = ...
        DragStartDistance: ClassVar[QScrollerProperties.ScrollMetric] = ...
        DragVelocitySmoothingFactor: ClassVar[QScrollerProperties.ScrollMetric] = ...
        FrameRate: ClassVar[QScrollerProperties.ScrollMetric] = ...
        HorizontalOvershootPolicy: ClassVar[QScrollerProperties.ScrollMetric] = ...
        MaximumClickThroughVelocity: ClassVar[QScrollerProperties.ScrollMetric] = ...
        MaximumVelocity: ClassVar[QScrollerProperties.ScrollMetric] = ...
        MinimumVelocity: ClassVar[QScrollerProperties.ScrollMetric] = ...
        MousePressEventDelay: ClassVar[QScrollerProperties.ScrollMetric] = ...
        OvershootDragDistanceFactor: ClassVar[QScrollerProperties.ScrollMetric] = ...
        OvershootDragResistanceFactor: ClassVar[QScrollerProperties.ScrollMetric] = ...
        OvershootScrollDistanceFactor: ClassVar[QScrollerProperties.ScrollMetric] = ...
        OvershootScrollTime: ClassVar[QScrollerProperties.ScrollMetric] = ...
        ScrollMetricCount: ClassVar[QScrollerProperties.ScrollMetric] = ...
        ScrollingCurve: ClassVar[QScrollerProperties.ScrollMetric] = ...
        SnapPositionRatio: ClassVar[QScrollerProperties.ScrollMetric] = ...
        SnapTime: ClassVar[QScrollerProperties.ScrollMetric] = ...
        VerticalOvershootPolicy: ClassVar[QScrollerProperties.ScrollMetric] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QScrollerProperties.ScrollMetric: ...
        def __and__(self, other: typing.SupportsInt) -> QScrollerProperties.ScrollMetric: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QScrollerProperties.ScrollMetric: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QScrollerProperties.ScrollMetric: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QScrollerProperties.ScrollMetric: ...
        def __rand__(self, other: typing.SupportsInt) -> QScrollerProperties.ScrollMetric: ...
        def __rmul__(self, other: typing.SupportsInt) -> QScrollerProperties.ScrollMetric: ...
        def __ror__(self, other: typing.SupportsInt) -> QScrollerProperties.ScrollMetric: ...
        def __rsub__(self, other: typing.SupportsInt) -> QScrollerProperties.ScrollMetric: ...
        def __rxor__(self, other: typing.SupportsInt) -> QScrollerProperties.ScrollMetric: ...
        def __sub__(self, other: typing.SupportsInt) -> QScrollerProperties.ScrollMetric: ...
        def __xor__(self, other: typing.SupportsInt) -> QScrollerProperties.ScrollMetric: ...
    AcceleratingFlickMaximumTime: ClassVar[QScrollerProperties.ScrollMetric] = ...
    AcceleratingFlickSpeedupFactor: ClassVar[QScrollerProperties.ScrollMetric] = ...
    AxisLockThreshold: ClassVar[QScrollerProperties.ScrollMetric] = ...
    DecelerationFactor: ClassVar[QScrollerProperties.ScrollMetric] = ...
    DragStartDistance: ClassVar[QScrollerProperties.ScrollMetric] = ...
    DragVelocitySmoothingFactor: ClassVar[QScrollerProperties.ScrollMetric] = ...
    Fps20: ClassVar[QScrollerProperties.FrameRates] = ...
    Fps30: ClassVar[QScrollerProperties.FrameRates] = ...
    Fps60: ClassVar[QScrollerProperties.FrameRates] = ...
    FrameRate: ClassVar[QScrollerProperties.ScrollMetric] = ...
    HorizontalOvershootPolicy: ClassVar[QScrollerProperties.ScrollMetric] = ...
    MaximumClickThroughVelocity: ClassVar[QScrollerProperties.ScrollMetric] = ...
    MaximumVelocity: ClassVar[QScrollerProperties.ScrollMetric] = ...
    MinimumVelocity: ClassVar[QScrollerProperties.ScrollMetric] = ...
    MousePressEventDelay: ClassVar[QScrollerProperties.ScrollMetric] = ...
    OvershootAlwaysOff: ClassVar[QScrollerProperties.OvershootPolicy] = ...
    OvershootAlwaysOn: ClassVar[QScrollerProperties.OvershootPolicy] = ...
    OvershootDragDistanceFactor: ClassVar[QScrollerProperties.ScrollMetric] = ...
    OvershootDragResistanceFactor: ClassVar[QScrollerProperties.ScrollMetric] = ...
    OvershootScrollDistanceFactor: ClassVar[QScrollerProperties.ScrollMetric] = ...
    OvershootScrollTime: ClassVar[QScrollerProperties.ScrollMetric] = ...
    OvershootWhenScrollable: ClassVar[QScrollerProperties.OvershootPolicy] = ...
    ScrollMetricCount: ClassVar[QScrollerProperties.ScrollMetric] = ...
    ScrollingCurve: ClassVar[QScrollerProperties.ScrollMetric] = ...
    SnapPositionRatio: ClassVar[QScrollerProperties.ScrollMetric] = ...
    SnapTime: ClassVar[QScrollerProperties.ScrollMetric] = ...
    Standard: ClassVar[QScrollerProperties.FrameRates] = ...
    VerticalOvershootPolicy: ClassVar[QScrollerProperties.ScrollMetric] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, sp: QScrollerProperties) -> None: ...
    def scrollMetric(self, metric: QScrollerProperties.ScrollMetric) -> typing.Any: ...
    @classmethod
    def setDefaultScrollerProperties(cls, sp: QScrollerProperties) -> None: ...
    def setScrollMetric(self, metric: QScrollerProperties.ScrollMetric, value: typing.Any) -> None: ...
    @classmethod
    def unsetDefaultScrollerProperties(cls) -> None: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QShortcut(PySide2.QtCore.QObject):
    activated: ClassVar[PySide2.QtCore.Signal] = ...
    activatedAmbiguously: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, arg__1: typing.Union[PySide2.QtGui.QKeySequence,str], arg__2: QWidget, arg__3: typing.Callable, arg__4: PySide2.QtCore.Qt.ShortcutContext = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, key: typing.Union[PySide2.QtGui.QKeySequence,str], parent: typing.Optional[QWidget], member: typing.Union[bytes,None] = ..., ambiguousMember: typing.Union[bytes,None] = ..., shortcutContext: PySide2.QtCore.Qt.ShortcutContext = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Optional[QWidget], destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def autoRepeat(self) -> bool: ...
    def context(self) -> PySide2.QtCore.Qt.ShortcutContext: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def id(self) -> int: ...
    def isEnabled(self) -> bool: ...
    def key(self) -> PySide2.QtGui.QKeySequence: ...
    def parentWidget(self) -> QWidget: ...
    def setAutoRepeat(self, on: bool) -> None: ...
    def setContext(self, context: PySide2.QtCore.Qt.ShortcutContext) -> None: ...
    def setEnabled(self, enable: bool) -> None: ...
    def setKey(self, key: typing.Union[PySide2.QtGui.QKeySequence,str]) -> None: ...
    def setWhatsThis(self, text: str) -> None: ...
    def whatsThis(self) -> str: ...

class QSizeGrip(QWidget):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Optional[QWidget], acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def eventFilter(self, arg__1: PySide2.QtCore.QObject, arg__2: PySide2.QtCore.QEvent) -> bool: ...
    def hideEvent(self, hideEvent: PySide2.QtGui.QHideEvent) -> None: ...
    def mouseMoveEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, mouseEvent: PySide2.QtGui.QMouseEvent) -> None: ...
    def moveEvent(self, moveEvent: PySide2.QtGui.QMoveEvent) -> None: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def setVisible(self, arg__1: bool) -> None: ...
    def showEvent(self, showEvent: PySide2.QtGui.QShowEvent) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...

class QSizePolicy(shiboken2.Object):
    class ControlType:
        ButtonBox: ClassVar[QSizePolicy.ControlType] = ...
        CheckBox: ClassVar[QSizePolicy.ControlType] = ...
        ComboBox: ClassVar[QSizePolicy.ControlType] = ...
        DefaultType: ClassVar[QSizePolicy.ControlType] = ...
        Frame: ClassVar[QSizePolicy.ControlType] = ...
        GroupBox: ClassVar[QSizePolicy.ControlType] = ...
        Label: ClassVar[QSizePolicy.ControlType] = ...
        Line: ClassVar[QSizePolicy.ControlType] = ...
        LineEdit: ClassVar[QSizePolicy.ControlType] = ...
        PushButton: ClassVar[QSizePolicy.ControlType] = ...
        RadioButton: ClassVar[QSizePolicy.ControlType] = ...
        Slider: ClassVar[QSizePolicy.ControlType] = ...
        SpinBox: ClassVar[QSizePolicy.ControlType] = ...
        TabWidget: ClassVar[QSizePolicy.ControlType] = ...
        ToolButton: ClassVar[QSizePolicy.ControlType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSizePolicy.ControlTypes: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSizePolicy.ControlType: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSizePolicy.ControlTypes: ...
        def __rand__(self, other: typing.SupportsInt) -> QSizePolicy.ControlTypes: ...
        def __ror__(self, other: typing.SupportsInt) -> QSizePolicy.ControlTypes: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSizePolicy.ControlTypes: ...
        def __xor__(self, other: typing.SupportsInt) -> QSizePolicy.ControlTypes: ...

    class ControlTypes:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSizePolicy.ControlTypes: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSizePolicy.ControlTypes: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSizePolicy.ControlTypes: ...
        def __rand__(self, other: typing.SupportsInt) -> QSizePolicy.ControlTypes: ...
        def __ror__(self, other: typing.SupportsInt) -> QSizePolicy.ControlTypes: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSizePolicy.ControlTypes: ...
        def __xor__(self, other: typing.SupportsInt) -> QSizePolicy.ControlTypes: ...

    class Policy:
        Expanding: ClassVar[QSizePolicy.Policy] = ...
        Fixed: ClassVar[QSizePolicy.Policy] = ...
        Ignored: ClassVar[QSizePolicy.Policy] = ...
        Maximum: ClassVar[QSizePolicy.Policy] = ...
        Minimum: ClassVar[QSizePolicy.Policy] = ...
        MinimumExpanding: ClassVar[QSizePolicy.Policy] = ...
        Preferred: ClassVar[QSizePolicy.Policy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSizePolicy.Policy: ...
        def __and__(self, other: typing.SupportsInt) -> QSizePolicy.Policy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSizePolicy.Policy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSizePolicy.Policy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSizePolicy.Policy: ...
        def __rand__(self, other: typing.SupportsInt) -> QSizePolicy.Policy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSizePolicy.Policy: ...
        def __ror__(self, other: typing.SupportsInt) -> QSizePolicy.Policy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSizePolicy.Policy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSizePolicy.Policy: ...
        def __sub__(self, other: typing.SupportsInt) -> QSizePolicy.Policy: ...
        def __xor__(self, other: typing.SupportsInt) -> QSizePolicy.Policy: ...

    class PolicyFlag:
        ExpandFlag: ClassVar[QSizePolicy.PolicyFlag] = ...
        GrowFlag: ClassVar[QSizePolicy.PolicyFlag] = ...
        IgnoreFlag: ClassVar[QSizePolicy.PolicyFlag] = ...
        ShrinkFlag: ClassVar[QSizePolicy.PolicyFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSizePolicy.PolicyFlag: ...
        def __and__(self, other: typing.SupportsInt) -> QSizePolicy.PolicyFlag: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSizePolicy.PolicyFlag: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSizePolicy.PolicyFlag: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSizePolicy.PolicyFlag: ...
        def __rand__(self, other: typing.SupportsInt) -> QSizePolicy.PolicyFlag: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSizePolicy.PolicyFlag: ...
        def __ror__(self, other: typing.SupportsInt) -> QSizePolicy.PolicyFlag: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSizePolicy.PolicyFlag: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSizePolicy.PolicyFlag: ...
        def __sub__(self, other: typing.SupportsInt) -> QSizePolicy.PolicyFlag: ...
        def __xor__(self, other: typing.SupportsInt) -> QSizePolicy.PolicyFlag: ...
    ButtonBox: ClassVar[QSizePolicy.ControlType] = ...
    CheckBox: ClassVar[QSizePolicy.ControlType] = ...
    ComboBox: ClassVar[QSizePolicy.ControlType] = ...
    DefaultType: ClassVar[QSizePolicy.ControlType] = ...
    ExpandFlag: ClassVar[QSizePolicy.PolicyFlag] = ...
    Expanding: ClassVar[QSizePolicy.Policy] = ...
    Fixed: ClassVar[QSizePolicy.Policy] = ...
    Frame: ClassVar[QSizePolicy.ControlType] = ...
    GroupBox: ClassVar[QSizePolicy.ControlType] = ...
    GrowFlag: ClassVar[QSizePolicy.PolicyFlag] = ...
    IgnoreFlag: ClassVar[QSizePolicy.PolicyFlag] = ...
    Ignored: ClassVar[QSizePolicy.Policy] = ...
    Label: ClassVar[QSizePolicy.ControlType] = ...
    Line: ClassVar[QSizePolicy.ControlType] = ...
    LineEdit: ClassVar[QSizePolicy.ControlType] = ...
    Maximum: ClassVar[QSizePolicy.Policy] = ...
    Minimum: ClassVar[QSizePolicy.Policy] = ...
    MinimumExpanding: ClassVar[QSizePolicy.Policy] = ...
    Preferred: ClassVar[QSizePolicy.Policy] = ...
    PushButton: ClassVar[QSizePolicy.ControlType] = ...
    RadioButton: ClassVar[QSizePolicy.ControlType] = ...
    ShrinkFlag: ClassVar[QSizePolicy.PolicyFlag] = ...
    Slider: ClassVar[QSizePolicy.ControlType] = ...
    SpinBox: ClassVar[QSizePolicy.ControlType] = ...
    TabWidget: ClassVar[QSizePolicy.ControlType] = ...
    ToolButton: ClassVar[QSizePolicy.ControlType] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, horizontal: QSizePolicy.Policy, vertical: QSizePolicy.Policy, type: QSizePolicy.ControlType = ...) -> None: ...
    def controlType(self) -> QSizePolicy.ControlType: ...
    def expandingDirections(self) -> typing.Union[PySide2.QtCore.Qt.Orientations,PySide2.QtCore.Qt.Orientation]: ...
    def hasHeightForWidth(self) -> bool: ...
    def hasWidthForHeight(self) -> bool: ...
    def horizontalPolicy(self) -> QSizePolicy.Policy: ...
    def horizontalStretch(self) -> int: ...
    def retainSizeWhenHidden(self) -> bool: ...
    def setControlType(self, type: QSizePolicy.ControlType) -> None: ...
    def setHeightForWidth(self, b: bool) -> None: ...
    def setHorizontalPolicy(self, d: QSizePolicy.Policy) -> None: ...
    def setHorizontalStretch(self, stretchFactor: int) -> None: ...
    def setRetainSizeWhenHidden(self, retainSize: bool) -> None: ...
    def setVerticalPolicy(self, d: QSizePolicy.Policy) -> None: ...
    def setVerticalStretch(self, stretchFactor: int) -> None: ...
    def setWidthForHeight(self, b: bool) -> None: ...
    def transpose(self) -> None: ...
    def transposed(self) -> QSizePolicy: ...
    def verticalPolicy(self) -> QSizePolicy.Policy: ...
    def verticalStretch(self) -> int: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QSlider(QAbstractSlider):
    class TickPosition:
        NoTicks: ClassVar[QSlider.TickPosition] = ...
        TicksAbove: ClassVar[QSlider.TickPosition] = ...
        TicksBelow: ClassVar[QSlider.TickPosition] = ...
        TicksBothSides: ClassVar[QSlider.TickPosition] = ...
        TicksLeft: ClassVar[QSlider.TickPosition] = ...
        TicksRight: ClassVar[QSlider.TickPosition] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSlider.TickPosition: ...
        def __and__(self, other: typing.SupportsInt) -> QSlider.TickPosition: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSlider.TickPosition: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSlider.TickPosition: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSlider.TickPosition: ...
        def __rand__(self, other: typing.SupportsInt) -> QSlider.TickPosition: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSlider.TickPosition: ...
        def __ror__(self, other: typing.SupportsInt) -> QSlider.TickPosition: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSlider.TickPosition: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSlider.TickPosition: ...
        def __sub__(self, other: typing.SupportsInt) -> QSlider.TickPosition: ...
        def __xor__(self, other: typing.SupportsInt) -> QSlider.TickPosition: ...
    NoTicks: ClassVar[QSlider.TickPosition] = ...
    TicksAbove: ClassVar[QSlider.TickPosition] = ...
    TicksBelow: ClassVar[QSlider.TickPosition] = ...
    TicksBothSides: ClassVar[QSlider.TickPosition] = ...
    TicksLeft: ClassVar[QSlider.TickPosition] = ...
    TicksRight: ClassVar[QSlider.TickPosition] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, orientation: PySide2.QtCore.Qt.Orientation, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., actionTriggered: typing.Callable = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., invertedAppearance: bool = ..., invertedControls: bool = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximum: int = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimum: int = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., pageStep: int = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rangeChanged: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., singleStep: int = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., sliderDown: bool = ..., sliderMoved: typing.Callable = ..., sliderPosition: int = ..., sliderPressed: typing.Callable = ..., sliderReleased: typing.Callable = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., tickInterval: int = ..., tickPosition: QSlider.TickPosition = ..., toolTip: str = ..., toolTipDuration: int = ..., tracking: bool = ..., updatesEnabled: bool = ..., value: int = ..., valueChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., actionTriggered: typing.Callable = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., invertedAppearance: bool = ..., invertedControls: bool = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximum: int = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimum: int = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., orientation: PySide2.QtCore.Qt.Orientation = ..., pageStep: int = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rangeChanged: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., singleStep: int = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., sliderDown: bool = ..., sliderMoved: typing.Callable = ..., sliderPosition: int = ..., sliderPressed: typing.Callable = ..., sliderReleased: typing.Callable = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., tickInterval: int = ..., tickPosition: QSlider.TickPosition = ..., toolTip: str = ..., toolTipDuration: int = ..., tracking: bool = ..., updatesEnabled: bool = ..., value: int = ..., valueChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def initStyleOption(self, option: QStyleOptionSlider) -> None: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def mouseMoveEvent(self, ev: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, ev: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, ev: PySide2.QtGui.QMouseEvent) -> None: ...
    def paintEvent(self, ev: PySide2.QtGui.QPaintEvent) -> None: ...
    def setTickInterval(self, ti: int) -> None: ...
    def setTickPosition(self, position: QSlider.TickPosition) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def tickInterval(self) -> int: ...
    def tickPosition(self) -> QSlider.TickPosition: ...

class QSpacerItem(QLayoutItem):
    def __init__(self, w: int, h: int, hData: QSizePolicy.Policy = ..., vData: QSizePolicy.Policy = ...) -> None: ...
    def changeSize(self, w: int, h: int, hData: QSizePolicy.Policy = ..., vData: QSizePolicy.Policy = ...) -> None: ...
    def expandingDirections(self) -> typing.Union[PySide2.QtCore.Qt.Orientations,PySide2.QtCore.Qt.Orientation]: ...
    def geometry(self) -> PySide2.QtCore.QRect: ...
    def isEmpty(self) -> bool: ...
    def maximumSize(self) -> PySide2.QtCore.QSize: ...
    def minimumSize(self) -> PySide2.QtCore.QSize: ...
    def setGeometry(self, arg__1: PySide2.QtCore.QRect) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def sizePolicy(self) -> QSizePolicy: ...
    def spacerItem(self) -> QSpacerItem: ...

class QSpinBox(QAbstractSpinBox):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    textChanged: ClassVar[PySide2.QtCore.Signal] = ...
    valueChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., accelerated: bool = ..., acceptDrops: bool = ..., acceptableInput: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., buttonSymbols: QSpinBox.ButtonSymbols = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., cleanText: str = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., correctionMode: QSpinBox.CorrectionMode = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., displayIntegerBase: int = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., keyboardTracking: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximum: int = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimum: int = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., prefix: str = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., showGroupSeparator: bool = ..., singleStep: int = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., specialValueText: str = ..., statusTip: str = ..., stepType: QSpinBox.StepType = ..., styleSheet: str = ..., suffix: str = ..., tabletTracking: bool = ..., text: str = ..., textChanged: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., value: int = ..., valueChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wrapping: bool = ..., x: int = ..., y: int = ...) -> None: ...
    def cleanText(self) -> str: ...
    def displayIntegerBase(self) -> int: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def fixup(self, str: str) -> None: ...
    def maximum(self) -> int: ...
    def minimum(self) -> int: ...
    def prefix(self) -> str: ...
    def setDisplayIntegerBase(self, base: int) -> None: ...
    def setMaximum(self, max: int) -> None: ...
    def setMinimum(self, min: int) -> None: ...
    def setPrefix(self, prefix: str) -> None: ...
    def setRange(self, min: int, max: int) -> None: ...
    def setSingleStep(self, val: int) -> None: ...
    def setStepType(self, stepType: QAbstractSpinBox.StepType) -> None: ...
    def setSuffix(self, suffix: str) -> None: ...
    def setValue(self, val: int) -> None: ...
    def singleStep(self) -> int: ...
    def stepType(self) -> QAbstractSpinBox.StepType: ...
    def suffix(self) -> str: ...
    def textFromValue(self, val: int) -> str: ...
    def validate(self, input: str, pos: int) -> PySide2.QtGui.QValidator.State: ...
    def value(self) -> int: ...
    def valueFromText(self, text: str) -> int: ...

class QSplashScreen(QWidget):
    messageChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, parent: typing.Optional[QWidget], pixmap: PySide2.QtGui.QPixmap = ..., f: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., messageChanged: typing.Callable = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, pixmap: PySide2.QtGui.QPixmap = ..., f: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., messageChanged: typing.Callable = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, screen: PySide2.QtGui.QScreen, pixmap: PySide2.QtGui.QPixmap = ..., f: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., messageChanged: typing.Callable = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def clearMessage(self) -> None: ...
    def drawContents(self, painter: PySide2.QtGui.QPainter) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def finish(self, w: QWidget) -> None: ...
    def message(self) -> str: ...
    def mousePressEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def pixmap(self) -> PySide2.QtGui.QPixmap: ...
    def setPixmap(self, pixmap: PySide2.QtGui.QPixmap) -> None: ...
    def showMessage(self, message: str, alignment: int = ..., color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor] = ...) -> None: ...

class QSplitter(QFrame):
    splitterMoved: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, arg__1: PySide2.QtCore.Qt.Orientation, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenCollapsible: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QSplitter.Shadow = ..., frameShape: QSplitter.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., handleWidth: int = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opaqueResize: bool = ..., orientation: PySide2.QtCore.Qt.Orientation = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., splitterMoved: typing.Callable = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenCollapsible: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QSplitter.Shadow = ..., frameShape: QSplitter.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., handleWidth: int = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opaqueResize: bool = ..., orientation: PySide2.QtCore.Qt.Orientation = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., splitterMoved: typing.Callable = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def addWidget(self, widget: QWidget) -> None: ...
    def changeEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def childEvent(self, arg__1: PySide2.QtCore.QChildEvent) -> None: ...
    def childrenCollapsible(self) -> bool: ...
    def closestLegalPosition(self, arg__1: int, arg__2: int) -> int: ...
    def count(self) -> int: ...
    def createHandle(self) -> QSplitterHandle: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def getRange(self, index: int) -> typing.Tuple[int,int]: ...
    def handle(self, index: int) -> QSplitterHandle: ...
    def handleWidth(self) -> int: ...
    def indexOf(self, w: QWidget) -> int: ...
    def insertWidget(self, index: int, widget: QWidget) -> None: ...
    def isCollapsible(self, index: int) -> bool: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def moveSplitter(self, pos: int, index: int) -> None: ...
    def opaqueResize(self) -> bool: ...
    def orientation(self) -> PySide2.QtCore.Qt.Orientation: ...
    def refresh(self) -> None: ...
    def replaceWidget(self, index: int, widget: QWidget) -> QWidget: ...
    def resizeEvent(self, arg__1: PySide2.QtGui.QResizeEvent) -> None: ...
    def restoreState(self, state: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> bool: ...
    def saveState(self) -> PySide2.QtCore.QByteArray: ...
    def setChildrenCollapsible(self, arg__1: bool) -> None: ...
    def setCollapsible(self, index: int, arg__2: bool) -> None: ...
    def setHandleWidth(self, arg__1: int) -> None: ...
    def setOpaqueResize(self, opaque: bool = ...) -> None: ...
    def setOrientation(self, arg__1: PySide2.QtCore.Qt.Orientation) -> None: ...
    def setRubberBand(self, position: int) -> None: ...
    def setSizes(self, list: typing.Sequence[int]) -> None: ...
    def setStretchFactor(self, index: int, stretch: int) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def sizes(self) -> typing.List[int]: ...
    def widget(self, index: int) -> QWidget: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QTextStream) -> PySide2.QtCore.QTextStream: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QTextStream) -> PySide2.QtCore.QTextStream: ...

class QSplitterHandle(QWidget):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, o: PySide2.QtCore.Qt.Orientation, parent: QSplitter, acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def closestLegalPosition(self, p: int) -> int: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def mouseMoveEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def moveSplitter(self, p: int) -> None: ...
    def opaqueResize(self) -> bool: ...
    def orientation(self) -> PySide2.QtCore.Qt.Orientation: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def resizeEvent(self, arg__1: PySide2.QtGui.QResizeEvent) -> None: ...
    def setOrientation(self, o: PySide2.QtCore.Qt.Orientation) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def splitter(self) -> QSplitter: ...

class QStackedLayout(QLayout):
    class StackingMode:
        StackAll: ClassVar[QStackedLayout.StackingMode] = ...
        StackOne: ClassVar[QStackedLayout.StackingMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStackedLayout.StackingMode: ...
        def __and__(self, other: typing.SupportsInt) -> QStackedLayout.StackingMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStackedLayout.StackingMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStackedLayout.StackingMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStackedLayout.StackingMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QStackedLayout.StackingMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStackedLayout.StackingMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QStackedLayout.StackingMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStackedLayout.StackingMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStackedLayout.StackingMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QStackedLayout.StackingMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QStackedLayout.StackingMode: ...
    StackAll: ClassVar[QStackedLayout.StackingMode] = ...
    StackOne: ClassVar[QStackedLayout.StackingMode] = ...
    currentChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    widgetRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, currentChanged: typing.Callable = ..., currentIndex: int = ..., destroyed: typing.Callable = ..., margin: int = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., sizeConstraint: QStackedLayout.SizeConstraint = ..., spacing: int = ..., stackingMode: QStackedLayout.StackingMode = ..., widgetRemoved: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Optional[QWidget], currentChanged: typing.Callable = ..., currentIndex: int = ..., destroyed: typing.Callable = ..., margin: int = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., sizeConstraint: QStackedLayout.SizeConstraint = ..., spacing: int = ..., stackingMode: QStackedLayout.StackingMode = ..., widgetRemoved: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, parentLayout: QLayout, currentChanged: typing.Callable = ..., currentIndex: int = ..., destroyed: typing.Callable = ..., margin: int = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., sizeConstraint: QStackedLayout.SizeConstraint = ..., spacing: int = ..., stackingMode: QStackedLayout.StackingMode = ..., widgetRemoved: typing.Callable = ...) -> None: ...
    def addItem(self, item: QLayoutItem) -> None: ...
    def addWidget(self, w: QWidget) -> int: ...
    def count(self) -> int: ...
    def currentIndex(self) -> int: ...
    def currentWidget(self) -> QWidget: ...
    def hasHeightForWidth(self) -> bool: ...
    def heightForWidth(self, width: int) -> int: ...
    def insertWidget(self, index: int, w: QWidget) -> int: ...
    def itemAt(self, arg__1: int) -> QLayoutItem: ...
    def minimumSize(self) -> PySide2.QtCore.QSize: ...
    def setCurrentIndex(self, index: int) -> None: ...
    def setCurrentWidget(self, w: QWidget) -> None: ...
    def setGeometry(self, rect: PySide2.QtCore.QRect) -> None: ...
    def setStackingMode(self, stackingMode: QStackedLayout.StackingMode) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def stackingMode(self) -> QStackedLayout.StackingMode: ...
    def takeAt(self, arg__1: int) -> QLayoutItem: ...
    @overload
    def widget(self) -> QWidget: ...
    @overload
    def widget(self, arg__1: int) -> QWidget: ...

class QStackedWidget(QFrame):
    currentChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    widgetRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., count: int = ..., currentChanged: typing.Callable = ..., currentIndex: int = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QStackedWidget.Shadow = ..., frameShape: QStackedWidget.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., widgetRemoved: typing.Callable = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def addWidget(self, w: QWidget) -> int: ...
    def count(self) -> int: ...
    def currentIndex(self) -> int: ...
    def currentWidget(self) -> QWidget: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def indexOf(self, arg__1: QWidget) -> int: ...
    def insertWidget(self, index: int, w: QWidget) -> int: ...
    def removeWidget(self, w: QWidget) -> None: ...
    def setCurrentIndex(self, index: int) -> None: ...
    def setCurrentWidget(self, w: QWidget) -> None: ...
    def widget(self, arg__1: int) -> QWidget: ...

class QStatusBar(QWidget):
    messageChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., messageChanged: typing.Callable = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeGripEnabled: bool = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def addPermanentWidget(self, widget: QWidget, stretch: int = ...) -> None: ...
    def addWidget(self, widget: QWidget, stretch: int = ...) -> None: ...
    def clearMessage(self) -> None: ...
    def currentMessage(self) -> str: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def hideOrShow(self) -> None: ...
    def insertPermanentWidget(self, index: int, widget: QWidget, stretch: int = ...) -> int: ...
    def insertWidget(self, index: int, widget: QWidget, stretch: int = ...) -> int: ...
    def isSizeGripEnabled(self) -> bool: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def reformat(self) -> None: ...
    def removeWidget(self, widget: QWidget) -> None: ...
    def resizeEvent(self, arg__1: PySide2.QtGui.QResizeEvent) -> None: ...
    def setSizeGripEnabled(self, arg__1: bool) -> None: ...
    def showEvent(self, arg__1: PySide2.QtGui.QShowEvent) -> None: ...
    def showMessage(self, text: str, timeout: int = ...) -> None: ...

class QStyle(PySide2.QtCore.QObject):
    class ComplexControl:
        CC_ComboBox: ClassVar[QStyle.ComplexControl] = ...
        CC_CustomBase: ClassVar[QStyle.ComplexControl] = ...
        CC_Dial: ClassVar[QStyle.ComplexControl] = ...
        CC_GroupBox: ClassVar[QStyle.ComplexControl] = ...
        CC_MdiControls: ClassVar[QStyle.ComplexControl] = ...
        CC_ScrollBar: ClassVar[QStyle.ComplexControl] = ...
        CC_Slider: ClassVar[QStyle.ComplexControl] = ...
        CC_SpinBox: ClassVar[QStyle.ComplexControl] = ...
        CC_TitleBar: ClassVar[QStyle.ComplexControl] = ...
        CC_ToolButton: ClassVar[QStyle.ComplexControl] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyle.ComplexControl: ...
        def __and__(self, other: typing.SupportsInt) -> QStyle.ComplexControl: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyle.ComplexControl: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyle.ComplexControl: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyle.ComplexControl: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyle.ComplexControl: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyle.ComplexControl: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyle.ComplexControl: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyle.ComplexControl: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyle.ComplexControl: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyle.ComplexControl: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyle.ComplexControl: ...

    class ContentsType:
        CT_CheckBox: ClassVar[QStyle.ContentsType] = ...
        CT_ComboBox: ClassVar[QStyle.ContentsType] = ...
        CT_CustomBase: ClassVar[QStyle.ContentsType] = ...
        CT_DialogButtons: ClassVar[QStyle.ContentsType] = ...
        CT_GroupBox: ClassVar[QStyle.ContentsType] = ...
        CT_HeaderSection: ClassVar[QStyle.ContentsType] = ...
        CT_ItemViewItem: ClassVar[QStyle.ContentsType] = ...
        CT_LineEdit: ClassVar[QStyle.ContentsType] = ...
        CT_MdiControls: ClassVar[QStyle.ContentsType] = ...
        CT_Menu: ClassVar[QStyle.ContentsType] = ...
        CT_MenuBar: ClassVar[QStyle.ContentsType] = ...
        CT_MenuBarItem: ClassVar[QStyle.ContentsType] = ...
        CT_MenuItem: ClassVar[QStyle.ContentsType] = ...
        CT_ProgressBar: ClassVar[QStyle.ContentsType] = ...
        CT_PushButton: ClassVar[QStyle.ContentsType] = ...
        CT_RadioButton: ClassVar[QStyle.ContentsType] = ...
        CT_ScrollBar: ClassVar[QStyle.ContentsType] = ...
        CT_SizeGrip: ClassVar[QStyle.ContentsType] = ...
        CT_Slider: ClassVar[QStyle.ContentsType] = ...
        CT_SpinBox: ClassVar[QStyle.ContentsType] = ...
        CT_Splitter: ClassVar[QStyle.ContentsType] = ...
        CT_TabBarTab: ClassVar[QStyle.ContentsType] = ...
        CT_TabWidget: ClassVar[QStyle.ContentsType] = ...
        CT_ToolButton: ClassVar[QStyle.ContentsType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyle.ContentsType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyle.ContentsType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyle.ContentsType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyle.ContentsType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyle.ContentsType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyle.ContentsType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyle.ContentsType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyle.ContentsType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyle.ContentsType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyle.ContentsType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyle.ContentsType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyle.ContentsType: ...

    class ControlElement:
        CE_CheckBox: ClassVar[QStyle.ControlElement] = ...
        CE_CheckBoxLabel: ClassVar[QStyle.ControlElement] = ...
        CE_ColumnViewGrip: ClassVar[QStyle.ControlElement] = ...
        CE_ComboBoxLabel: ClassVar[QStyle.ControlElement] = ...
        CE_CustomBase: ClassVar[QStyle.ControlElement] = ...
        CE_DockWidgetTitle: ClassVar[QStyle.ControlElement] = ...
        CE_FocusFrame: ClassVar[QStyle.ControlElement] = ...
        CE_Header: ClassVar[QStyle.ControlElement] = ...
        CE_HeaderEmptyArea: ClassVar[QStyle.ControlElement] = ...
        CE_HeaderLabel: ClassVar[QStyle.ControlElement] = ...
        CE_HeaderSection: ClassVar[QStyle.ControlElement] = ...
        CE_ItemViewItem: ClassVar[QStyle.ControlElement] = ...
        CE_MenuBarEmptyArea: ClassVar[QStyle.ControlElement] = ...
        CE_MenuBarItem: ClassVar[QStyle.ControlElement] = ...
        CE_MenuEmptyArea: ClassVar[QStyle.ControlElement] = ...
        CE_MenuHMargin: ClassVar[QStyle.ControlElement] = ...
        CE_MenuItem: ClassVar[QStyle.ControlElement] = ...
        CE_MenuScroller: ClassVar[QStyle.ControlElement] = ...
        CE_MenuTearoff: ClassVar[QStyle.ControlElement] = ...
        CE_MenuVMargin: ClassVar[QStyle.ControlElement] = ...
        CE_ProgressBar: ClassVar[QStyle.ControlElement] = ...
        CE_ProgressBarContents: ClassVar[QStyle.ControlElement] = ...
        CE_ProgressBarGroove: ClassVar[QStyle.ControlElement] = ...
        CE_ProgressBarLabel: ClassVar[QStyle.ControlElement] = ...
        CE_PushButton: ClassVar[QStyle.ControlElement] = ...
        CE_PushButtonBevel: ClassVar[QStyle.ControlElement] = ...
        CE_PushButtonLabel: ClassVar[QStyle.ControlElement] = ...
        CE_RadioButton: ClassVar[QStyle.ControlElement] = ...
        CE_RadioButtonLabel: ClassVar[QStyle.ControlElement] = ...
        CE_RubberBand: ClassVar[QStyle.ControlElement] = ...
        CE_ScrollBarAddLine: ClassVar[QStyle.ControlElement] = ...
        CE_ScrollBarAddPage: ClassVar[QStyle.ControlElement] = ...
        CE_ScrollBarFirst: ClassVar[QStyle.ControlElement] = ...
        CE_ScrollBarLast: ClassVar[QStyle.ControlElement] = ...
        CE_ScrollBarSlider: ClassVar[QStyle.ControlElement] = ...
        CE_ScrollBarSubLine: ClassVar[QStyle.ControlElement] = ...
        CE_ScrollBarSubPage: ClassVar[QStyle.ControlElement] = ...
        CE_ShapedFrame: ClassVar[QStyle.ControlElement] = ...
        CE_SizeGrip: ClassVar[QStyle.ControlElement] = ...
        CE_Splitter: ClassVar[QStyle.ControlElement] = ...
        CE_TabBarTab: ClassVar[QStyle.ControlElement] = ...
        CE_TabBarTabLabel: ClassVar[QStyle.ControlElement] = ...
        CE_TabBarTabShape: ClassVar[QStyle.ControlElement] = ...
        CE_ToolBar: ClassVar[QStyle.ControlElement] = ...
        CE_ToolBoxTab: ClassVar[QStyle.ControlElement] = ...
        CE_ToolBoxTabLabel: ClassVar[QStyle.ControlElement] = ...
        CE_ToolBoxTabShape: ClassVar[QStyle.ControlElement] = ...
        CE_ToolButtonLabel: ClassVar[QStyle.ControlElement] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyle.ControlElement: ...
        def __and__(self, other: typing.SupportsInt) -> QStyle.ControlElement: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyle.ControlElement: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyle.ControlElement: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyle.ControlElement: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyle.ControlElement: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyle.ControlElement: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyle.ControlElement: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyle.ControlElement: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyle.ControlElement: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyle.ControlElement: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyle.ControlElement: ...

    class PixelMetric:
        PM_ButtonDefaultIndicator: ClassVar[QStyle.PixelMetric] = ...
        PM_ButtonIconSize: ClassVar[QStyle.PixelMetric] = ...
        PM_ButtonMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_ButtonShiftHorizontal: ClassVar[QStyle.PixelMetric] = ...
        PM_ButtonShiftVertical: ClassVar[QStyle.PixelMetric] = ...
        PM_CheckBoxLabelSpacing: ClassVar[QStyle.PixelMetric] = ...
        PM_ComboBoxFrameWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_CustomBase: ClassVar[QStyle.PixelMetric] = ...
        PM_DefaultChildMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_DefaultFrameWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_DefaultLayoutSpacing: ClassVar[QStyle.PixelMetric] = ...
        PM_DefaultTopLevelMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_DialogButtonsButtonHeight: ClassVar[QStyle.PixelMetric] = ...
        PM_DialogButtonsButtonWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_DialogButtonsSeparator: ClassVar[QStyle.PixelMetric] = ...
        PM_DockWidgetFrameWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_DockWidgetHandleExtent: ClassVar[QStyle.PixelMetric] = ...
        PM_DockWidgetSeparatorExtent: ClassVar[QStyle.PixelMetric] = ...
        PM_DockWidgetTitleBarButtonMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_DockWidgetTitleMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_ExclusiveIndicatorHeight: ClassVar[QStyle.PixelMetric] = ...
        PM_ExclusiveIndicatorWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_FocusFrameHMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_FocusFrameVMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_HeaderDefaultSectionSizeHorizontal: ClassVar[QStyle.PixelMetric] = ...
        PM_HeaderDefaultSectionSizeVertical: ClassVar[QStyle.PixelMetric] = ...
        PM_HeaderGripMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_HeaderMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_HeaderMarkSize: ClassVar[QStyle.PixelMetric] = ...
        PM_IconViewIconSize: ClassVar[QStyle.PixelMetric] = ...
        PM_IndicatorHeight: ClassVar[QStyle.PixelMetric] = ...
        PM_IndicatorWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_LargeIconSize: ClassVar[QStyle.PixelMetric] = ...
        PM_LayoutBottomMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_LayoutHorizontalSpacing: ClassVar[QStyle.PixelMetric] = ...
        PM_LayoutLeftMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_LayoutRightMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_LayoutTopMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_LayoutVerticalSpacing: ClassVar[QStyle.PixelMetric] = ...
        PM_ListViewIconSize: ClassVar[QStyle.PixelMetric] = ...
        PM_MDIFrameWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_MDIMinimizedWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_MaximumDragDistance: ClassVar[QStyle.PixelMetric] = ...
        PM_MdiSubWindowFrameWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_MdiSubWindowMinimizedWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_MenuBarHMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_MenuBarItemSpacing: ClassVar[QStyle.PixelMetric] = ...
        PM_MenuBarPanelWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_MenuBarVMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_MenuButtonIndicator: ClassVar[QStyle.PixelMetric] = ...
        PM_MenuDesktopFrameWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_MenuHMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_MenuPanelWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_MenuScrollerHeight: ClassVar[QStyle.PixelMetric] = ...
        PM_MenuTearoffHeight: ClassVar[QStyle.PixelMetric] = ...
        PM_MenuVMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_MessageBoxIconSize: ClassVar[QStyle.PixelMetric] = ...
        PM_ProgressBarChunkWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_RadioButtonLabelSpacing: ClassVar[QStyle.PixelMetric] = ...
        PM_ScrollBarExtent: ClassVar[QStyle.PixelMetric] = ...
        PM_ScrollBarSliderMin: ClassVar[QStyle.PixelMetric] = ...
        PM_ScrollView_ScrollBarOverlap: ClassVar[QStyle.PixelMetric] = ...
        PM_ScrollView_ScrollBarSpacing: ClassVar[QStyle.PixelMetric] = ...
        PM_SizeGripSize: ClassVar[QStyle.PixelMetric] = ...
        PM_SliderControlThickness: ClassVar[QStyle.PixelMetric] = ...
        PM_SliderLength: ClassVar[QStyle.PixelMetric] = ...
        PM_SliderSpaceAvailable: ClassVar[QStyle.PixelMetric] = ...
        PM_SliderThickness: ClassVar[QStyle.PixelMetric] = ...
        PM_SliderTickmarkOffset: ClassVar[QStyle.PixelMetric] = ...
        PM_SmallIconSize: ClassVar[QStyle.PixelMetric] = ...
        PM_SpinBoxFrameWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_SpinBoxSliderHeight: ClassVar[QStyle.PixelMetric] = ...
        PM_SplitterWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_SubMenuOverlap: ClassVar[QStyle.PixelMetric] = ...
        PM_TabBarBaseHeight: ClassVar[QStyle.PixelMetric] = ...
        PM_TabBarBaseOverlap: ClassVar[QStyle.PixelMetric] = ...
        PM_TabBarIconSize: ClassVar[QStyle.PixelMetric] = ...
        PM_TabBarScrollButtonWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_TabBarTabHSpace: ClassVar[QStyle.PixelMetric] = ...
        PM_TabBarTabOverlap: ClassVar[QStyle.PixelMetric] = ...
        PM_TabBarTabShiftHorizontal: ClassVar[QStyle.PixelMetric] = ...
        PM_TabBarTabShiftVertical: ClassVar[QStyle.PixelMetric] = ...
        PM_TabBarTabVSpace: ClassVar[QStyle.PixelMetric] = ...
        PM_TabBar_ScrollButtonOverlap: ClassVar[QStyle.PixelMetric] = ...
        PM_TabCloseIndicatorHeight: ClassVar[QStyle.PixelMetric] = ...
        PM_TabCloseIndicatorWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_TextCursorWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_TitleBarButtonIconSize: ClassVar[QStyle.PixelMetric] = ...
        PM_TitleBarButtonSize: ClassVar[QStyle.PixelMetric] = ...
        PM_TitleBarHeight: ClassVar[QStyle.PixelMetric] = ...
        PM_ToolBarExtensionExtent: ClassVar[QStyle.PixelMetric] = ...
        PM_ToolBarFrameWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_ToolBarHandleExtent: ClassVar[QStyle.PixelMetric] = ...
        PM_ToolBarIconSize: ClassVar[QStyle.PixelMetric] = ...
        PM_ToolBarItemMargin: ClassVar[QStyle.PixelMetric] = ...
        PM_ToolBarItemSpacing: ClassVar[QStyle.PixelMetric] = ...
        PM_ToolBarSeparatorExtent: ClassVar[QStyle.PixelMetric] = ...
        PM_ToolTipLabelFrameWidth: ClassVar[QStyle.PixelMetric] = ...
        PM_TreeViewIndentation: ClassVar[QStyle.PixelMetric] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyle.PixelMetric: ...
        def __and__(self, other: typing.SupportsInt) -> QStyle.PixelMetric: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyle.PixelMetric: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyle.PixelMetric: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyle.PixelMetric: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyle.PixelMetric: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyle.PixelMetric: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyle.PixelMetric: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyle.PixelMetric: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyle.PixelMetric: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyle.PixelMetric: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyle.PixelMetric: ...

    class PrimitiveElement:
        PE_CustomBase: ClassVar[QStyle.PrimitiveElement] = ...
        PE_Frame: ClassVar[QStyle.PrimitiveElement] = ...
        PE_FrameButtonBevel: ClassVar[QStyle.PrimitiveElement] = ...
        PE_FrameButtonTool: ClassVar[QStyle.PrimitiveElement] = ...
        PE_FrameDefaultButton: ClassVar[QStyle.PrimitiveElement] = ...
        PE_FrameDockWidget: ClassVar[QStyle.PrimitiveElement] = ...
        PE_FrameFocusRect: ClassVar[QStyle.PrimitiveElement] = ...
        PE_FrameGroupBox: ClassVar[QStyle.PrimitiveElement] = ...
        PE_FrameLineEdit: ClassVar[QStyle.PrimitiveElement] = ...
        PE_FrameMenu: ClassVar[QStyle.PrimitiveElement] = ...
        PE_FrameStatusBar: ClassVar[QStyle.PrimitiveElement] = ...
        PE_FrameStatusBarItem: ClassVar[QStyle.PrimitiveElement] = ...
        PE_FrameTabBarBase: ClassVar[QStyle.PrimitiveElement] = ...
        PE_FrameTabWidget: ClassVar[QStyle.PrimitiveElement] = ...
        PE_FrameWindow: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorArrowDown: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorArrowLeft: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorArrowRight: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorArrowUp: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorBranch: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorButtonDropDown: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorCheckBox: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorColumnViewArrow: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorDockWidgetResizeHandle: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorHeaderArrow: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorItemViewItemCheck: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorItemViewItemDrop: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorMenuCheckMark: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorProgressChunk: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorRadioButton: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorSpinDown: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorSpinMinus: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorSpinPlus: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorSpinUp: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorTabClose: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorTabTear: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorTabTearLeft: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorTabTearRight: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorToolBarHandle: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorToolBarSeparator: ClassVar[QStyle.PrimitiveElement] = ...
        PE_IndicatorViewItemCheck: ClassVar[QStyle.PrimitiveElement] = ...
        PE_PanelButtonBevel: ClassVar[QStyle.PrimitiveElement] = ...
        PE_PanelButtonCommand: ClassVar[QStyle.PrimitiveElement] = ...
        PE_PanelButtonTool: ClassVar[QStyle.PrimitiveElement] = ...
        PE_PanelItemViewItem: ClassVar[QStyle.PrimitiveElement] = ...
        PE_PanelItemViewRow: ClassVar[QStyle.PrimitiveElement] = ...
        PE_PanelLineEdit: ClassVar[QStyle.PrimitiveElement] = ...
        PE_PanelMenu: ClassVar[QStyle.PrimitiveElement] = ...
        PE_PanelMenuBar: ClassVar[QStyle.PrimitiveElement] = ...
        PE_PanelScrollAreaCorner: ClassVar[QStyle.PrimitiveElement] = ...
        PE_PanelStatusBar: ClassVar[QStyle.PrimitiveElement] = ...
        PE_PanelTipLabel: ClassVar[QStyle.PrimitiveElement] = ...
        PE_PanelToolBar: ClassVar[QStyle.PrimitiveElement] = ...
        PE_Widget: ClassVar[QStyle.PrimitiveElement] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyle.PrimitiveElement: ...
        def __and__(self, other: typing.SupportsInt) -> QStyle.PrimitiveElement: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyle.PrimitiveElement: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyle.PrimitiveElement: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyle.PrimitiveElement: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyle.PrimitiveElement: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyle.PrimitiveElement: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyle.PrimitiveElement: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyle.PrimitiveElement: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyle.PrimitiveElement: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyle.PrimitiveElement: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyle.PrimitiveElement: ...

    class RequestSoftwareInputPanel:
        RSIP_OnMouseClick: ClassVar[QStyle.RequestSoftwareInputPanel] = ...
        RSIP_OnMouseClickAndAlreadyFocused: ClassVar[QStyle.RequestSoftwareInputPanel] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyle.RequestSoftwareInputPanel: ...
        def __and__(self, other: typing.SupportsInt) -> QStyle.RequestSoftwareInputPanel: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyle.RequestSoftwareInputPanel: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyle.RequestSoftwareInputPanel: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyle.RequestSoftwareInputPanel: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyle.RequestSoftwareInputPanel: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyle.RequestSoftwareInputPanel: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyle.RequestSoftwareInputPanel: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyle.RequestSoftwareInputPanel: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyle.RequestSoftwareInputPanel: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyle.RequestSoftwareInputPanel: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyle.RequestSoftwareInputPanel: ...

    class StandardPixmap:
        SP_ArrowBack: ClassVar[QStyle.StandardPixmap] = ...
        SP_ArrowDown: ClassVar[QStyle.StandardPixmap] = ...
        SP_ArrowForward: ClassVar[QStyle.StandardPixmap] = ...
        SP_ArrowLeft: ClassVar[QStyle.StandardPixmap] = ...
        SP_ArrowRight: ClassVar[QStyle.StandardPixmap] = ...
        SP_ArrowUp: ClassVar[QStyle.StandardPixmap] = ...
        SP_BrowserReload: ClassVar[QStyle.StandardPixmap] = ...
        SP_BrowserStop: ClassVar[QStyle.StandardPixmap] = ...
        SP_CommandLink: ClassVar[QStyle.StandardPixmap] = ...
        SP_ComputerIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_CustomBase: ClassVar[QStyle.StandardPixmap] = ...
        SP_DesktopIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogAbortButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogApplyButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogCancelButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogCloseButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogDiscardButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogHelpButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogIgnoreButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogNoButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogNoToAllButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogOkButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogOpenButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogResetButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogRetryButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogSaveAllButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogSaveButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogYesButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DialogYesToAllButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DirClosedIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_DirHomeIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_DirIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_DirLinkIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_DirLinkOpenIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_DirOpenIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_DockWidgetCloseButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_DriveCDIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_DriveDVDIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_DriveFDIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_DriveHDIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_DriveNetIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_FileDialogBack: ClassVar[QStyle.StandardPixmap] = ...
        SP_FileDialogContentsView: ClassVar[QStyle.StandardPixmap] = ...
        SP_FileDialogDetailedView: ClassVar[QStyle.StandardPixmap] = ...
        SP_FileDialogEnd: ClassVar[QStyle.StandardPixmap] = ...
        SP_FileDialogInfoView: ClassVar[QStyle.StandardPixmap] = ...
        SP_FileDialogListView: ClassVar[QStyle.StandardPixmap] = ...
        SP_FileDialogNewFolder: ClassVar[QStyle.StandardPixmap] = ...
        SP_FileDialogStart: ClassVar[QStyle.StandardPixmap] = ...
        SP_FileDialogToParent: ClassVar[QStyle.StandardPixmap] = ...
        SP_FileIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_FileLinkIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_LineEditClearButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_MediaPause: ClassVar[QStyle.StandardPixmap] = ...
        SP_MediaPlay: ClassVar[QStyle.StandardPixmap] = ...
        SP_MediaSeekBackward: ClassVar[QStyle.StandardPixmap] = ...
        SP_MediaSeekForward: ClassVar[QStyle.StandardPixmap] = ...
        SP_MediaSkipBackward: ClassVar[QStyle.StandardPixmap] = ...
        SP_MediaSkipForward: ClassVar[QStyle.StandardPixmap] = ...
        SP_MediaStop: ClassVar[QStyle.StandardPixmap] = ...
        SP_MediaVolume: ClassVar[QStyle.StandardPixmap] = ...
        SP_MediaVolumeMuted: ClassVar[QStyle.StandardPixmap] = ...
        SP_MessageBoxCritical: ClassVar[QStyle.StandardPixmap] = ...
        SP_MessageBoxInformation: ClassVar[QStyle.StandardPixmap] = ...
        SP_MessageBoxQuestion: ClassVar[QStyle.StandardPixmap] = ...
        SP_MessageBoxWarning: ClassVar[QStyle.StandardPixmap] = ...
        SP_RestoreDefaultsButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_TitleBarCloseButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_TitleBarContextHelpButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_TitleBarMaxButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_TitleBarMenuButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_TitleBarMinButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_TitleBarNormalButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_TitleBarShadeButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_TitleBarUnshadeButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_ToolBarHorizontalExtensionButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_ToolBarVerticalExtensionButton: ClassVar[QStyle.StandardPixmap] = ...
        SP_TrashIcon: ClassVar[QStyle.StandardPixmap] = ...
        SP_VistaShield: ClassVar[QStyle.StandardPixmap] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyle.StandardPixmap: ...
        def __and__(self, other: typing.SupportsInt) -> QStyle.StandardPixmap: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyle.StandardPixmap: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyle.StandardPixmap: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyle.StandardPixmap: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyle.StandardPixmap: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyle.StandardPixmap: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyle.StandardPixmap: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyle.StandardPixmap: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyle.StandardPixmap: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyle.StandardPixmap: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyle.StandardPixmap: ...

    class State:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyle.State: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyle.State: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyle.State: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyle.State: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyle.State: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyle.State: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyle.State: ...

    class StateFlag:
        State_Active: ClassVar[QStyle.StateFlag] = ...
        State_AutoRaise: ClassVar[QStyle.StateFlag] = ...
        State_Bottom: ClassVar[QStyle.StateFlag] = ...
        State_Children: ClassVar[QStyle.StateFlag] = ...
        State_DownArrow: ClassVar[QStyle.StateFlag] = ...
        State_Editing: ClassVar[QStyle.StateFlag] = ...
        State_Enabled: ClassVar[QStyle.StateFlag] = ...
        State_FocusAtBorder: ClassVar[QStyle.StateFlag] = ...
        State_HasFocus: ClassVar[QStyle.StateFlag] = ...
        State_Horizontal: ClassVar[QStyle.StateFlag] = ...
        State_Item: ClassVar[QStyle.StateFlag] = ...
        State_KeyboardFocusChange: ClassVar[QStyle.StateFlag] = ...
        State_Mini: ClassVar[QStyle.StateFlag] = ...
        State_MouseOver: ClassVar[QStyle.StateFlag] = ...
        State_NoChange: ClassVar[QStyle.StateFlag] = ...
        State_None: ClassVar[QStyle.StateFlag] = ...
        State_Off: ClassVar[QStyle.StateFlag] = ...
        State_On: ClassVar[QStyle.StateFlag] = ...
        State_Open: ClassVar[QStyle.StateFlag] = ...
        State_Raised: ClassVar[QStyle.StateFlag] = ...
        State_ReadOnly: ClassVar[QStyle.StateFlag] = ...
        State_Selected: ClassVar[QStyle.StateFlag] = ...
        State_Sibling: ClassVar[QStyle.StateFlag] = ...
        State_Small: ClassVar[QStyle.StateFlag] = ...
        State_Sunken: ClassVar[QStyle.StateFlag] = ...
        State_Top: ClassVar[QStyle.StateFlag] = ...
        State_UpArrow: ClassVar[QStyle.StateFlag] = ...
        State_Window: ClassVar[QStyle.StateFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyle.State: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyle.StateFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyle.State: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyle.State: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyle.State: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyle.State: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyle.State: ...

    class StyleHint:
        SH_BlinkCursorWhenTextSelected: ClassVar[QStyle.StyleHint] = ...
        SH_Button_FocusPolicy: ClassVar[QStyle.StyleHint] = ...
        SH_ComboBox_AllowWheelScrolling: ClassVar[QStyle.StyleHint] = ...
        SH_ComboBox_LayoutDirection: ClassVar[QStyle.StyleHint] = ...
        SH_ComboBox_ListMouseTracking: ClassVar[QStyle.StyleHint] = ...
        SH_ComboBox_Popup: ClassVar[QStyle.StyleHint] = ...
        SH_ComboBox_PopupFrameStyle: ClassVar[QStyle.StyleHint] = ...
        SH_ComboBox_UseNativePopup: ClassVar[QStyle.StyleHint] = ...
        SH_CustomBase: ClassVar[QStyle.StyleHint] = ...
        SH_Dial_BackgroundRole: ClassVar[QStyle.StyleHint] = ...
        SH_DialogButtonBox_ButtonsHaveIcons: ClassVar[QStyle.StyleHint] = ...
        SH_DialogButtonLayout: ClassVar[QStyle.StyleHint] = ...
        SH_DialogButtons_DefaultButton: ClassVar[QStyle.StyleHint] = ...
        SH_DitherDisabledText: ClassVar[QStyle.StyleHint] = ...
        SH_DockWidget_ButtonsHaveFrame: ClassVar[QStyle.StyleHint] = ...
        SH_DrawMenuBarSeparator: ClassVar[QStyle.StyleHint] = ...
        SH_EtchDisabledText: ClassVar[QStyle.StyleHint] = ...
        SH_FocusFrame_AboveWidget: ClassVar[QStyle.StyleHint] = ...
        SH_FocusFrame_Mask: ClassVar[QStyle.StyleHint] = ...
        SH_FontDialog_SelectAssociatedText: ClassVar[QStyle.StyleHint] = ...
        SH_FormLayoutFieldGrowthPolicy: ClassVar[QStyle.StyleHint] = ...
        SH_FormLayoutFormAlignment: ClassVar[QStyle.StyleHint] = ...
        SH_FormLayoutLabelAlignment: ClassVar[QStyle.StyleHint] = ...
        SH_FormLayoutWrapPolicy: ClassVar[QStyle.StyleHint] = ...
        SH_GroupBox_TextLabelColor: ClassVar[QStyle.StyleHint] = ...
        SH_GroupBox_TextLabelVerticalAlignment: ClassVar[QStyle.StyleHint] = ...
        SH_Header_ArrowAlignment: ClassVar[QStyle.StyleHint] = ...
        SH_ItemView_ActivateItemOnSingleClick: ClassVar[QStyle.StyleHint] = ...
        SH_ItemView_ArrowKeysNavigateIntoChildren: ClassVar[QStyle.StyleHint] = ...
        SH_ItemView_ChangeHighlightOnFocus: ClassVar[QStyle.StyleHint] = ...
        SH_ItemView_DrawDelegateFrame: ClassVar[QStyle.StyleHint] = ...
        SH_ItemView_EllipsisLocation: ClassVar[QStyle.StyleHint] = ...
        SH_ItemView_MovementWithoutUpdatingSelection: ClassVar[QStyle.StyleHint] = ...
        SH_ItemView_PaintAlternatingRowColorsForEmptyArea: ClassVar[QStyle.StyleHint] = ...
        SH_ItemView_ScrollMode: ClassVar[QStyle.StyleHint] = ...
        SH_ItemView_ShowDecorationSelected: ClassVar[QStyle.StyleHint] = ...
        SH_LineEdit_PasswordCharacter: ClassVar[QStyle.StyleHint] = ...
        SH_LineEdit_PasswordMaskDelay: ClassVar[QStyle.StyleHint] = ...
        SH_ListViewExpand_SelectMouseType: ClassVar[QStyle.StyleHint] = ...
        SH_MainWindow_SpaceBelowMenuBar: ClassVar[QStyle.StyleHint] = ...
        SH_MenuBar_AltKeyNavigation: ClassVar[QStyle.StyleHint] = ...
        SH_MenuBar_MouseTracking: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_AllowActiveAndDisabled: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_FadeOutOnHide: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_FillScreenWithScroll: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_FlashTriggeredItem: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_KeyboardSearch: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_Mask: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_MouseTracking: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_Scrollable: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_SelectionWrap: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_SloppySubMenus: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_SpaceActivatesItem: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_SubMenuDontStartSloppyOnLeave: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_SubMenuPopupDelay: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_SubMenuResetWhenReenteringParent: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_SubMenuSloppyCloseTimeout: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_SubMenuSloppySelectOtherActions: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_SubMenuUniDirection: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_SubMenuUniDirectionFailCount: ClassVar[QStyle.StyleHint] = ...
        SH_Menu_SupportsSections: ClassVar[QStyle.StyleHint] = ...
        SH_MessageBox_CenterButtons: ClassVar[QStyle.StyleHint] = ...
        SH_MessageBox_TextInteractionFlags: ClassVar[QStyle.StyleHint] = ...
        SH_MessageBox_UseBorderForButtonSpacing: ClassVar[QStyle.StyleHint] = ...
        SH_PrintDialog_RightAlignButtons: ClassVar[QStyle.StyleHint] = ...
        SH_ProgressDialog_CenterCancelButton: ClassVar[QStyle.StyleHint] = ...
        SH_ProgressDialog_TextLabelAlignment: ClassVar[QStyle.StyleHint] = ...
        SH_RequestSoftwareInputPanel: ClassVar[QStyle.StyleHint] = ...
        SH_RichText_FullWidthSelection: ClassVar[QStyle.StyleHint] = ...
        SH_RubberBand_Mask: ClassVar[QStyle.StyleHint] = ...
        SH_ScrollBar_ContextMenu: ClassVar[QStyle.StyleHint] = ...
        SH_ScrollBar_LeftClickAbsolutePosition: ClassVar[QStyle.StyleHint] = ...
        SH_ScrollBar_MiddleClickAbsolutePosition: ClassVar[QStyle.StyleHint] = ...
        SH_ScrollBar_RollBetweenButtons: ClassVar[QStyle.StyleHint] = ...
        SH_ScrollBar_ScrollWhenPointerLeavesControl: ClassVar[QStyle.StyleHint] = ...
        SH_ScrollBar_StopMouseOverSlider: ClassVar[QStyle.StyleHint] = ...
        SH_ScrollBar_Transient: ClassVar[QStyle.StyleHint] = ...
        SH_ScrollView_FrameOnlyAroundContents: ClassVar[QStyle.StyleHint] = ...
        SH_Slider_AbsoluteSetButtons: ClassVar[QStyle.StyleHint] = ...
        SH_Slider_PageSetButtons: ClassVar[QStyle.StyleHint] = ...
        SH_Slider_SloppyKeyEvents: ClassVar[QStyle.StyleHint] = ...
        SH_Slider_SnapToValue: ClassVar[QStyle.StyleHint] = ...
        SH_Slider_StopMouseOverSlider: ClassVar[QStyle.StyleHint] = ...
        SH_SpellCheckUnderlineStyle: ClassVar[QStyle.StyleHint] = ...
        SH_SpinBox_AnimateButton: ClassVar[QStyle.StyleHint] = ...
        SH_SpinBox_ButtonsInsideFrame: ClassVar[QStyle.StyleHint] = ...
        SH_SpinBox_ClickAutoRepeatRate: ClassVar[QStyle.StyleHint] = ...
        SH_SpinBox_ClickAutoRepeatThreshold: ClassVar[QStyle.StyleHint] = ...
        SH_SpinBox_KeyPressAutoRepeatRate: ClassVar[QStyle.StyleHint] = ...
        SH_SpinBox_StepModifier: ClassVar[QStyle.StyleHint] = ...
        SH_SpinControls_DisableOnBounds: ClassVar[QStyle.StyleHint] = ...
        SH_Splitter_OpaqueResize: ClassVar[QStyle.StyleHint] = ...
        SH_TabBar_Alignment: ClassVar[QStyle.StyleHint] = ...
        SH_TabBar_ChangeCurrentDelay: ClassVar[QStyle.StyleHint] = ...
        SH_TabBar_CloseButtonPosition: ClassVar[QStyle.StyleHint] = ...
        SH_TabBar_ElideMode: ClassVar[QStyle.StyleHint] = ...
        SH_TabBar_PreferNoArrows: ClassVar[QStyle.StyleHint] = ...
        SH_TabBar_SelectMouseType: ClassVar[QStyle.StyleHint] = ...
        SH_TabWidget_DefaultTabPosition: ClassVar[QStyle.StyleHint] = ...
        SH_Table_GridLineColor: ClassVar[QStyle.StyleHint] = ...
        SH_TextControl_FocusIndicatorTextCharFormat: ClassVar[QStyle.StyleHint] = ...
        SH_TitleBar_AutoRaise: ClassVar[QStyle.StyleHint] = ...
        SH_TitleBar_ModifyNotification: ClassVar[QStyle.StyleHint] = ...
        SH_TitleBar_NoBorder: ClassVar[QStyle.StyleHint] = ...
        SH_TitleBar_ShowToolTipsOnButtons: ClassVar[QStyle.StyleHint] = ...
        SH_ToolBar_Movable: ClassVar[QStyle.StyleHint] = ...
        SH_ToolBox_SelectedPageTitleBold: ClassVar[QStyle.StyleHint] = ...
        SH_ToolButtonStyle: ClassVar[QStyle.StyleHint] = ...
        SH_ToolButton_PopupDelay: ClassVar[QStyle.StyleHint] = ...
        SH_ToolTipLabel_Opacity: ClassVar[QStyle.StyleHint] = ...
        SH_ToolTip_FallAsleepDelay: ClassVar[QStyle.StyleHint] = ...
        SH_ToolTip_Mask: ClassVar[QStyle.StyleHint] = ...
        SH_ToolTip_WakeUpDelay: ClassVar[QStyle.StyleHint] = ...
        SH_UnderlineShortcut: ClassVar[QStyle.StyleHint] = ...
        SH_Widget_Animate: ClassVar[QStyle.StyleHint] = ...
        SH_Widget_Animation_Duration: ClassVar[QStyle.StyleHint] = ...
        SH_Widget_ShareActivation: ClassVar[QStyle.StyleHint] = ...
        SH_WindowFrame_Mask: ClassVar[QStyle.StyleHint] = ...
        SH_WizardStyle: ClassVar[QStyle.StyleHint] = ...
        SH_Workspace_FillSpaceOnMaximize: ClassVar[QStyle.StyleHint] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyle.StyleHint: ...
        def __and__(self, other: typing.SupportsInt) -> QStyle.StyleHint: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyle.StyleHint: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyle.StyleHint: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyle.StyleHint: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyle.StyleHint: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyle.StyleHint: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyle.StyleHint: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyle.StyleHint: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyle.StyleHint: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyle.StyleHint: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyle.StyleHint: ...

    class SubControl:
        SC_All: ClassVar[QStyle.SubControl] = ...
        SC_ComboBoxArrow: ClassVar[QStyle.SubControl] = ...
        SC_ComboBoxEditField: ClassVar[QStyle.SubControl] = ...
        SC_ComboBoxFrame: ClassVar[QStyle.SubControl] = ...
        SC_ComboBoxListBoxPopup: ClassVar[QStyle.SubControl] = ...
        SC_CustomBase: ClassVar[QStyle.SubControl] = ...
        SC_DialGroove: ClassVar[QStyle.SubControl] = ...
        SC_DialHandle: ClassVar[QStyle.SubControl] = ...
        SC_DialTickmarks: ClassVar[QStyle.SubControl] = ...
        SC_GroupBoxCheckBox: ClassVar[QStyle.SubControl] = ...
        SC_GroupBoxContents: ClassVar[QStyle.SubControl] = ...
        SC_GroupBoxFrame: ClassVar[QStyle.SubControl] = ...
        SC_GroupBoxLabel: ClassVar[QStyle.SubControl] = ...
        SC_MdiCloseButton: ClassVar[QStyle.SubControl] = ...
        SC_MdiMinButton: ClassVar[QStyle.SubControl] = ...
        SC_MdiNormalButton: ClassVar[QStyle.SubControl] = ...
        SC_None: ClassVar[QStyle.SubControl] = ...
        SC_ScrollBarAddLine: ClassVar[QStyle.SubControl] = ...
        SC_ScrollBarAddPage: ClassVar[QStyle.SubControl] = ...
        SC_ScrollBarFirst: ClassVar[QStyle.SubControl] = ...
        SC_ScrollBarGroove: ClassVar[QStyle.SubControl] = ...
        SC_ScrollBarLast: ClassVar[QStyle.SubControl] = ...
        SC_ScrollBarSlider: ClassVar[QStyle.SubControl] = ...
        SC_ScrollBarSubLine: ClassVar[QStyle.SubControl] = ...
        SC_ScrollBarSubPage: ClassVar[QStyle.SubControl] = ...
        SC_SliderGroove: ClassVar[QStyle.SubControl] = ...
        SC_SliderHandle: ClassVar[QStyle.SubControl] = ...
        SC_SliderTickmarks: ClassVar[QStyle.SubControl] = ...
        SC_SpinBoxDown: ClassVar[QStyle.SubControl] = ...
        SC_SpinBoxEditField: ClassVar[QStyle.SubControl] = ...
        SC_SpinBoxFrame: ClassVar[QStyle.SubControl] = ...
        SC_SpinBoxUp: ClassVar[QStyle.SubControl] = ...
        SC_TitleBarCloseButton: ClassVar[QStyle.SubControl] = ...
        SC_TitleBarContextHelpButton: ClassVar[QStyle.SubControl] = ...
        SC_TitleBarLabel: ClassVar[QStyle.SubControl] = ...
        SC_TitleBarMaxButton: ClassVar[QStyle.SubControl] = ...
        SC_TitleBarMinButton: ClassVar[QStyle.SubControl] = ...
        SC_TitleBarNormalButton: ClassVar[QStyle.SubControl] = ...
        SC_TitleBarShadeButton: ClassVar[QStyle.SubControl] = ...
        SC_TitleBarSysMenu: ClassVar[QStyle.SubControl] = ...
        SC_TitleBarUnshadeButton: ClassVar[QStyle.SubControl] = ...
        SC_ToolButton: ClassVar[QStyle.SubControl] = ...
        SC_ToolButtonMenu: ClassVar[QStyle.SubControl] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyle.SubControls: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyle.SubControl: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyle.SubControls: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyle.SubControls: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyle.SubControls: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyle.SubControls: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyle.SubControls: ...

    class SubControls:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyle.SubControls: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyle.SubControls: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyle.SubControls: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyle.SubControls: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyle.SubControls: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyle.SubControls: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyle.SubControls: ...

    class SubElement:
        SE_CheckBoxClickRect: ClassVar[QStyle.SubElement] = ...
        SE_CheckBoxContents: ClassVar[QStyle.SubElement] = ...
        SE_CheckBoxFocusRect: ClassVar[QStyle.SubElement] = ...
        SE_CheckBoxIndicator: ClassVar[QStyle.SubElement] = ...
        SE_CheckBoxLayoutItem: ClassVar[QStyle.SubElement] = ...
        SE_ComboBoxFocusRect: ClassVar[QStyle.SubElement] = ...
        SE_ComboBoxLayoutItem: ClassVar[QStyle.SubElement] = ...
        SE_CustomBase: ClassVar[QStyle.SubElement] = ...
        SE_DateTimeEditLayoutItem: ClassVar[QStyle.SubElement] = ...
        SE_DialogButtonBoxLayoutItem: ClassVar[QStyle.SubElement] = ...
        SE_DockWidgetCloseButton: ClassVar[QStyle.SubElement] = ...
        SE_DockWidgetFloatButton: ClassVar[QStyle.SubElement] = ...
        SE_DockWidgetIcon: ClassVar[QStyle.SubElement] = ...
        SE_DockWidgetTitleBarText: ClassVar[QStyle.SubElement] = ...
        SE_FrameContents: ClassVar[QStyle.SubElement] = ...
        SE_FrameLayoutItem: ClassVar[QStyle.SubElement] = ...
        SE_GroupBoxLayoutItem: ClassVar[QStyle.SubElement] = ...
        SE_HeaderArrow: ClassVar[QStyle.SubElement] = ...
        SE_HeaderLabel: ClassVar[QStyle.SubElement] = ...
        SE_ItemViewItemCheckIndicator: ClassVar[QStyle.SubElement] = ...
        SE_ItemViewItemDecoration: ClassVar[QStyle.SubElement] = ...
        SE_ItemViewItemFocusRect: ClassVar[QStyle.SubElement] = ...
        SE_ItemViewItemText: ClassVar[QStyle.SubElement] = ...
        SE_LabelLayoutItem: ClassVar[QStyle.SubElement] = ...
        SE_LineEditContents: ClassVar[QStyle.SubElement] = ...
        SE_ProgressBarContents: ClassVar[QStyle.SubElement] = ...
        SE_ProgressBarGroove: ClassVar[QStyle.SubElement] = ...
        SE_ProgressBarLabel: ClassVar[QStyle.SubElement] = ...
        SE_ProgressBarLayoutItem: ClassVar[QStyle.SubElement] = ...
        SE_PushButtonBevel: ClassVar[QStyle.SubElement] = ...
        SE_PushButtonContents: ClassVar[QStyle.SubElement] = ...
        SE_PushButtonFocusRect: ClassVar[QStyle.SubElement] = ...
        SE_PushButtonLayoutItem: ClassVar[QStyle.SubElement] = ...
        SE_RadioButtonClickRect: ClassVar[QStyle.SubElement] = ...
        SE_RadioButtonContents: ClassVar[QStyle.SubElement] = ...
        SE_RadioButtonFocusRect: ClassVar[QStyle.SubElement] = ...
        SE_RadioButtonIndicator: ClassVar[QStyle.SubElement] = ...
        SE_RadioButtonLayoutItem: ClassVar[QStyle.SubElement] = ...
        SE_ShapedFrameContents: ClassVar[QStyle.SubElement] = ...
        SE_SliderFocusRect: ClassVar[QStyle.SubElement] = ...
        SE_SliderLayoutItem: ClassVar[QStyle.SubElement] = ...
        SE_SpinBoxLayoutItem: ClassVar[QStyle.SubElement] = ...
        SE_TabBarScrollLeftButton: ClassVar[QStyle.SubElement] = ...
        SE_TabBarScrollRightButton: ClassVar[QStyle.SubElement] = ...
        SE_TabBarTabLeftButton: ClassVar[QStyle.SubElement] = ...
        SE_TabBarTabRightButton: ClassVar[QStyle.SubElement] = ...
        SE_TabBarTabText: ClassVar[QStyle.SubElement] = ...
        SE_TabBarTearIndicator: ClassVar[QStyle.SubElement] = ...
        SE_TabBarTearIndicatorLeft: ClassVar[QStyle.SubElement] = ...
        SE_TabBarTearIndicatorRight: ClassVar[QStyle.SubElement] = ...
        SE_TabWidgetLayoutItem: ClassVar[QStyle.SubElement] = ...
        SE_TabWidgetLeftCorner: ClassVar[QStyle.SubElement] = ...
        SE_TabWidgetRightCorner: ClassVar[QStyle.SubElement] = ...
        SE_TabWidgetTabBar: ClassVar[QStyle.SubElement] = ...
        SE_TabWidgetTabContents: ClassVar[QStyle.SubElement] = ...
        SE_TabWidgetTabPane: ClassVar[QStyle.SubElement] = ...
        SE_ToolBarHandle: ClassVar[QStyle.SubElement] = ...
        SE_ToolBoxTabContents: ClassVar[QStyle.SubElement] = ...
        SE_ToolButtonLayoutItem: ClassVar[QStyle.SubElement] = ...
        SE_TreeViewDisclosureItem: ClassVar[QStyle.SubElement] = ...
        SE_ViewItemCheckIndicator: ClassVar[QStyle.SubElement] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyle.SubElement: ...
        def __and__(self, other: typing.SupportsInt) -> QStyle.SubElement: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyle.SubElement: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyle.SubElement: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyle.SubElement: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyle.SubElement: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyle.SubElement: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyle.SubElement: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyle.SubElement: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyle.SubElement: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyle.SubElement: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyle.SubElement: ...
    CC_ComboBox: ClassVar[QStyle.ComplexControl] = ...
    CC_CustomBase: ClassVar[QStyle.ComplexControl] = ...
    CC_Dial: ClassVar[QStyle.ComplexControl] = ...
    CC_GroupBox: ClassVar[QStyle.ComplexControl] = ...
    CC_MdiControls: ClassVar[QStyle.ComplexControl] = ...
    CC_ScrollBar: ClassVar[QStyle.ComplexControl] = ...
    CC_Slider: ClassVar[QStyle.ComplexControl] = ...
    CC_SpinBox: ClassVar[QStyle.ComplexControl] = ...
    CC_TitleBar: ClassVar[QStyle.ComplexControl] = ...
    CC_ToolButton: ClassVar[QStyle.ComplexControl] = ...
    CE_CheckBox: ClassVar[QStyle.ControlElement] = ...
    CE_CheckBoxLabel: ClassVar[QStyle.ControlElement] = ...
    CE_ColumnViewGrip: ClassVar[QStyle.ControlElement] = ...
    CE_ComboBoxLabel: ClassVar[QStyle.ControlElement] = ...
    CE_CustomBase: ClassVar[QStyle.ControlElement] = ...
    CE_DockWidgetTitle: ClassVar[QStyle.ControlElement] = ...
    CE_FocusFrame: ClassVar[QStyle.ControlElement] = ...
    CE_Header: ClassVar[QStyle.ControlElement] = ...
    CE_HeaderEmptyArea: ClassVar[QStyle.ControlElement] = ...
    CE_HeaderLabel: ClassVar[QStyle.ControlElement] = ...
    CE_HeaderSection: ClassVar[QStyle.ControlElement] = ...
    CE_ItemViewItem: ClassVar[QStyle.ControlElement] = ...
    CE_MenuBarEmptyArea: ClassVar[QStyle.ControlElement] = ...
    CE_MenuBarItem: ClassVar[QStyle.ControlElement] = ...
    CE_MenuEmptyArea: ClassVar[QStyle.ControlElement] = ...
    CE_MenuHMargin: ClassVar[QStyle.ControlElement] = ...
    CE_MenuItem: ClassVar[QStyle.ControlElement] = ...
    CE_MenuScroller: ClassVar[QStyle.ControlElement] = ...
    CE_MenuTearoff: ClassVar[QStyle.ControlElement] = ...
    CE_MenuVMargin: ClassVar[QStyle.ControlElement] = ...
    CE_ProgressBar: ClassVar[QStyle.ControlElement] = ...
    CE_ProgressBarContents: ClassVar[QStyle.ControlElement] = ...
    CE_ProgressBarGroove: ClassVar[QStyle.ControlElement] = ...
    CE_ProgressBarLabel: ClassVar[QStyle.ControlElement] = ...
    CE_PushButton: ClassVar[QStyle.ControlElement] = ...
    CE_PushButtonBevel: ClassVar[QStyle.ControlElement] = ...
    CE_PushButtonLabel: ClassVar[QStyle.ControlElement] = ...
    CE_RadioButton: ClassVar[QStyle.ControlElement] = ...
    CE_RadioButtonLabel: ClassVar[QStyle.ControlElement] = ...
    CE_RubberBand: ClassVar[QStyle.ControlElement] = ...
    CE_ScrollBarAddLine: ClassVar[QStyle.ControlElement] = ...
    CE_ScrollBarAddPage: ClassVar[QStyle.ControlElement] = ...
    CE_ScrollBarFirst: ClassVar[QStyle.ControlElement] = ...
    CE_ScrollBarLast: ClassVar[QStyle.ControlElement] = ...
    CE_ScrollBarSlider: ClassVar[QStyle.ControlElement] = ...
    CE_ScrollBarSubLine: ClassVar[QStyle.ControlElement] = ...
    CE_ScrollBarSubPage: ClassVar[QStyle.ControlElement] = ...
    CE_ShapedFrame: ClassVar[QStyle.ControlElement] = ...
    CE_SizeGrip: ClassVar[QStyle.ControlElement] = ...
    CE_Splitter: ClassVar[QStyle.ControlElement] = ...
    CE_TabBarTab: ClassVar[QStyle.ControlElement] = ...
    CE_TabBarTabLabel: ClassVar[QStyle.ControlElement] = ...
    CE_TabBarTabShape: ClassVar[QStyle.ControlElement] = ...
    CE_ToolBar: ClassVar[QStyle.ControlElement] = ...
    CE_ToolBoxTab: ClassVar[QStyle.ControlElement] = ...
    CE_ToolBoxTabLabel: ClassVar[QStyle.ControlElement] = ...
    CE_ToolBoxTabShape: ClassVar[QStyle.ControlElement] = ...
    CE_ToolButtonLabel: ClassVar[QStyle.ControlElement] = ...
    CT_CheckBox: ClassVar[QStyle.ContentsType] = ...
    CT_ComboBox: ClassVar[QStyle.ContentsType] = ...
    CT_CustomBase: ClassVar[QStyle.ContentsType] = ...
    CT_DialogButtons: ClassVar[QStyle.ContentsType] = ...
    CT_GroupBox: ClassVar[QStyle.ContentsType] = ...
    CT_HeaderSection: ClassVar[QStyle.ContentsType] = ...
    CT_ItemViewItem: ClassVar[QStyle.ContentsType] = ...
    CT_LineEdit: ClassVar[QStyle.ContentsType] = ...
    CT_MdiControls: ClassVar[QStyle.ContentsType] = ...
    CT_Menu: ClassVar[QStyle.ContentsType] = ...
    CT_MenuBar: ClassVar[QStyle.ContentsType] = ...
    CT_MenuBarItem: ClassVar[QStyle.ContentsType] = ...
    CT_MenuItem: ClassVar[QStyle.ContentsType] = ...
    CT_ProgressBar: ClassVar[QStyle.ContentsType] = ...
    CT_PushButton: ClassVar[QStyle.ContentsType] = ...
    CT_RadioButton: ClassVar[QStyle.ContentsType] = ...
    CT_ScrollBar: ClassVar[QStyle.ContentsType] = ...
    CT_SizeGrip: ClassVar[QStyle.ContentsType] = ...
    CT_Slider: ClassVar[QStyle.ContentsType] = ...
    CT_SpinBox: ClassVar[QStyle.ContentsType] = ...
    CT_Splitter: ClassVar[QStyle.ContentsType] = ...
    CT_TabBarTab: ClassVar[QStyle.ContentsType] = ...
    CT_TabWidget: ClassVar[QStyle.ContentsType] = ...
    CT_ToolButton: ClassVar[QStyle.ContentsType] = ...
    PE_CustomBase: ClassVar[QStyle.PrimitiveElement] = ...
    PE_Frame: ClassVar[QStyle.PrimitiveElement] = ...
    PE_FrameButtonBevel: ClassVar[QStyle.PrimitiveElement] = ...
    PE_FrameButtonTool: ClassVar[QStyle.PrimitiveElement] = ...
    PE_FrameDefaultButton: ClassVar[QStyle.PrimitiveElement] = ...
    PE_FrameDockWidget: ClassVar[QStyle.PrimitiveElement] = ...
    PE_FrameFocusRect: ClassVar[QStyle.PrimitiveElement] = ...
    PE_FrameGroupBox: ClassVar[QStyle.PrimitiveElement] = ...
    PE_FrameLineEdit: ClassVar[QStyle.PrimitiveElement] = ...
    PE_FrameMenu: ClassVar[QStyle.PrimitiveElement] = ...
    PE_FrameStatusBar: ClassVar[QStyle.PrimitiveElement] = ...
    PE_FrameStatusBarItem: ClassVar[QStyle.PrimitiveElement] = ...
    PE_FrameTabBarBase: ClassVar[QStyle.PrimitiveElement] = ...
    PE_FrameTabWidget: ClassVar[QStyle.PrimitiveElement] = ...
    PE_FrameWindow: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorArrowDown: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorArrowLeft: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorArrowRight: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorArrowUp: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorBranch: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorButtonDropDown: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorCheckBox: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorColumnViewArrow: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorDockWidgetResizeHandle: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorHeaderArrow: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorItemViewItemCheck: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorItemViewItemDrop: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorMenuCheckMark: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorProgressChunk: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorRadioButton: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorSpinDown: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorSpinMinus: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorSpinPlus: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorSpinUp: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorTabClose: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorTabTear: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorTabTearLeft: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorTabTearRight: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorToolBarHandle: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorToolBarSeparator: ClassVar[QStyle.PrimitiveElement] = ...
    PE_IndicatorViewItemCheck: ClassVar[QStyle.PrimitiveElement] = ...
    PE_PanelButtonBevel: ClassVar[QStyle.PrimitiveElement] = ...
    PE_PanelButtonCommand: ClassVar[QStyle.PrimitiveElement] = ...
    PE_PanelButtonTool: ClassVar[QStyle.PrimitiveElement] = ...
    PE_PanelItemViewItem: ClassVar[QStyle.PrimitiveElement] = ...
    PE_PanelItemViewRow: ClassVar[QStyle.PrimitiveElement] = ...
    PE_PanelLineEdit: ClassVar[QStyle.PrimitiveElement] = ...
    PE_PanelMenu: ClassVar[QStyle.PrimitiveElement] = ...
    PE_PanelMenuBar: ClassVar[QStyle.PrimitiveElement] = ...
    PE_PanelScrollAreaCorner: ClassVar[QStyle.PrimitiveElement] = ...
    PE_PanelStatusBar: ClassVar[QStyle.PrimitiveElement] = ...
    PE_PanelTipLabel: ClassVar[QStyle.PrimitiveElement] = ...
    PE_PanelToolBar: ClassVar[QStyle.PrimitiveElement] = ...
    PE_Widget: ClassVar[QStyle.PrimitiveElement] = ...
    PM_ButtonDefaultIndicator: ClassVar[QStyle.PixelMetric] = ...
    PM_ButtonIconSize: ClassVar[QStyle.PixelMetric] = ...
    PM_ButtonMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_ButtonShiftHorizontal: ClassVar[QStyle.PixelMetric] = ...
    PM_ButtonShiftVertical: ClassVar[QStyle.PixelMetric] = ...
    PM_CheckBoxLabelSpacing: ClassVar[QStyle.PixelMetric] = ...
    PM_ComboBoxFrameWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_CustomBase: ClassVar[QStyle.PixelMetric] = ...
    PM_DefaultChildMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_DefaultFrameWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_DefaultLayoutSpacing: ClassVar[QStyle.PixelMetric] = ...
    PM_DefaultTopLevelMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_DialogButtonsButtonHeight: ClassVar[QStyle.PixelMetric] = ...
    PM_DialogButtonsButtonWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_DialogButtonsSeparator: ClassVar[QStyle.PixelMetric] = ...
    PM_DockWidgetFrameWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_DockWidgetHandleExtent: ClassVar[QStyle.PixelMetric] = ...
    PM_DockWidgetSeparatorExtent: ClassVar[QStyle.PixelMetric] = ...
    PM_DockWidgetTitleBarButtonMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_DockWidgetTitleMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_ExclusiveIndicatorHeight: ClassVar[QStyle.PixelMetric] = ...
    PM_ExclusiveIndicatorWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_FocusFrameHMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_FocusFrameVMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_HeaderDefaultSectionSizeHorizontal: ClassVar[QStyle.PixelMetric] = ...
    PM_HeaderDefaultSectionSizeVertical: ClassVar[QStyle.PixelMetric] = ...
    PM_HeaderGripMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_HeaderMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_HeaderMarkSize: ClassVar[QStyle.PixelMetric] = ...
    PM_IconViewIconSize: ClassVar[QStyle.PixelMetric] = ...
    PM_IndicatorHeight: ClassVar[QStyle.PixelMetric] = ...
    PM_IndicatorWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_LargeIconSize: ClassVar[QStyle.PixelMetric] = ...
    PM_LayoutBottomMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_LayoutHorizontalSpacing: ClassVar[QStyle.PixelMetric] = ...
    PM_LayoutLeftMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_LayoutRightMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_LayoutTopMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_LayoutVerticalSpacing: ClassVar[QStyle.PixelMetric] = ...
    PM_ListViewIconSize: ClassVar[QStyle.PixelMetric] = ...
    PM_MDIFrameWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_MDIMinimizedWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_MaximumDragDistance: ClassVar[QStyle.PixelMetric] = ...
    PM_MdiSubWindowFrameWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_MdiSubWindowMinimizedWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_MenuBarHMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_MenuBarItemSpacing: ClassVar[QStyle.PixelMetric] = ...
    PM_MenuBarPanelWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_MenuBarVMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_MenuButtonIndicator: ClassVar[QStyle.PixelMetric] = ...
    PM_MenuDesktopFrameWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_MenuHMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_MenuPanelWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_MenuScrollerHeight: ClassVar[QStyle.PixelMetric] = ...
    PM_MenuTearoffHeight: ClassVar[QStyle.PixelMetric] = ...
    PM_MenuVMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_MessageBoxIconSize: ClassVar[QStyle.PixelMetric] = ...
    PM_ProgressBarChunkWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_RadioButtonLabelSpacing: ClassVar[QStyle.PixelMetric] = ...
    PM_ScrollBarExtent: ClassVar[QStyle.PixelMetric] = ...
    PM_ScrollBarSliderMin: ClassVar[QStyle.PixelMetric] = ...
    PM_ScrollView_ScrollBarOverlap: ClassVar[QStyle.PixelMetric] = ...
    PM_ScrollView_ScrollBarSpacing: ClassVar[QStyle.PixelMetric] = ...
    PM_SizeGripSize: ClassVar[QStyle.PixelMetric] = ...
    PM_SliderControlThickness: ClassVar[QStyle.PixelMetric] = ...
    PM_SliderLength: ClassVar[QStyle.PixelMetric] = ...
    PM_SliderSpaceAvailable: ClassVar[QStyle.PixelMetric] = ...
    PM_SliderThickness: ClassVar[QStyle.PixelMetric] = ...
    PM_SliderTickmarkOffset: ClassVar[QStyle.PixelMetric] = ...
    PM_SmallIconSize: ClassVar[QStyle.PixelMetric] = ...
    PM_SpinBoxFrameWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_SpinBoxSliderHeight: ClassVar[QStyle.PixelMetric] = ...
    PM_SplitterWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_SubMenuOverlap: ClassVar[QStyle.PixelMetric] = ...
    PM_TabBarBaseHeight: ClassVar[QStyle.PixelMetric] = ...
    PM_TabBarBaseOverlap: ClassVar[QStyle.PixelMetric] = ...
    PM_TabBarIconSize: ClassVar[QStyle.PixelMetric] = ...
    PM_TabBarScrollButtonWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_TabBarTabHSpace: ClassVar[QStyle.PixelMetric] = ...
    PM_TabBarTabOverlap: ClassVar[QStyle.PixelMetric] = ...
    PM_TabBarTabShiftHorizontal: ClassVar[QStyle.PixelMetric] = ...
    PM_TabBarTabShiftVertical: ClassVar[QStyle.PixelMetric] = ...
    PM_TabBarTabVSpace: ClassVar[QStyle.PixelMetric] = ...
    PM_TabBar_ScrollButtonOverlap: ClassVar[QStyle.PixelMetric] = ...
    PM_TabCloseIndicatorHeight: ClassVar[QStyle.PixelMetric] = ...
    PM_TabCloseIndicatorWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_TextCursorWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_TitleBarButtonIconSize: ClassVar[QStyle.PixelMetric] = ...
    PM_TitleBarButtonSize: ClassVar[QStyle.PixelMetric] = ...
    PM_TitleBarHeight: ClassVar[QStyle.PixelMetric] = ...
    PM_ToolBarExtensionExtent: ClassVar[QStyle.PixelMetric] = ...
    PM_ToolBarFrameWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_ToolBarHandleExtent: ClassVar[QStyle.PixelMetric] = ...
    PM_ToolBarIconSize: ClassVar[QStyle.PixelMetric] = ...
    PM_ToolBarItemMargin: ClassVar[QStyle.PixelMetric] = ...
    PM_ToolBarItemSpacing: ClassVar[QStyle.PixelMetric] = ...
    PM_ToolBarSeparatorExtent: ClassVar[QStyle.PixelMetric] = ...
    PM_ToolTipLabelFrameWidth: ClassVar[QStyle.PixelMetric] = ...
    PM_TreeViewIndentation: ClassVar[QStyle.PixelMetric] = ...
    RSIP_OnMouseClick: ClassVar[QStyle.RequestSoftwareInputPanel] = ...
    RSIP_OnMouseClickAndAlreadyFocused: ClassVar[QStyle.RequestSoftwareInputPanel] = ...
    SC_All: ClassVar[QStyle.SubControl] = ...
    SC_ComboBoxArrow: ClassVar[QStyle.SubControl] = ...
    SC_ComboBoxEditField: ClassVar[QStyle.SubControl] = ...
    SC_ComboBoxFrame: ClassVar[QStyle.SubControl] = ...
    SC_ComboBoxListBoxPopup: ClassVar[QStyle.SubControl] = ...
    SC_CustomBase: ClassVar[QStyle.SubControl] = ...
    SC_DialGroove: ClassVar[QStyle.SubControl] = ...
    SC_DialHandle: ClassVar[QStyle.SubControl] = ...
    SC_DialTickmarks: ClassVar[QStyle.SubControl] = ...
    SC_GroupBoxCheckBox: ClassVar[QStyle.SubControl] = ...
    SC_GroupBoxContents: ClassVar[QStyle.SubControl] = ...
    SC_GroupBoxFrame: ClassVar[QStyle.SubControl] = ...
    SC_GroupBoxLabel: ClassVar[QStyle.SubControl] = ...
    SC_MdiCloseButton: ClassVar[QStyle.SubControl] = ...
    SC_MdiMinButton: ClassVar[QStyle.SubControl] = ...
    SC_MdiNormalButton: ClassVar[QStyle.SubControl] = ...
    SC_None: ClassVar[QStyle.SubControl] = ...
    SC_ScrollBarAddLine: ClassVar[QStyle.SubControl] = ...
    SC_ScrollBarAddPage: ClassVar[QStyle.SubControl] = ...
    SC_ScrollBarFirst: ClassVar[QStyle.SubControl] = ...
    SC_ScrollBarGroove: ClassVar[QStyle.SubControl] = ...
    SC_ScrollBarLast: ClassVar[QStyle.SubControl] = ...
    SC_ScrollBarSlider: ClassVar[QStyle.SubControl] = ...
    SC_ScrollBarSubLine: ClassVar[QStyle.SubControl] = ...
    SC_ScrollBarSubPage: ClassVar[QStyle.SubControl] = ...
    SC_SliderGroove: ClassVar[QStyle.SubControl] = ...
    SC_SliderHandle: ClassVar[QStyle.SubControl] = ...
    SC_SliderTickmarks: ClassVar[QStyle.SubControl] = ...
    SC_SpinBoxDown: ClassVar[QStyle.SubControl] = ...
    SC_SpinBoxEditField: ClassVar[QStyle.SubControl] = ...
    SC_SpinBoxFrame: ClassVar[QStyle.SubControl] = ...
    SC_SpinBoxUp: ClassVar[QStyle.SubControl] = ...
    SC_TitleBarCloseButton: ClassVar[QStyle.SubControl] = ...
    SC_TitleBarContextHelpButton: ClassVar[QStyle.SubControl] = ...
    SC_TitleBarLabel: ClassVar[QStyle.SubControl] = ...
    SC_TitleBarMaxButton: ClassVar[QStyle.SubControl] = ...
    SC_TitleBarMinButton: ClassVar[QStyle.SubControl] = ...
    SC_TitleBarNormalButton: ClassVar[QStyle.SubControl] = ...
    SC_TitleBarShadeButton: ClassVar[QStyle.SubControl] = ...
    SC_TitleBarSysMenu: ClassVar[QStyle.SubControl] = ...
    SC_TitleBarUnshadeButton: ClassVar[QStyle.SubControl] = ...
    SC_ToolButton: ClassVar[QStyle.SubControl] = ...
    SC_ToolButtonMenu: ClassVar[QStyle.SubControl] = ...
    SE_CheckBoxClickRect: ClassVar[QStyle.SubElement] = ...
    SE_CheckBoxContents: ClassVar[QStyle.SubElement] = ...
    SE_CheckBoxFocusRect: ClassVar[QStyle.SubElement] = ...
    SE_CheckBoxIndicator: ClassVar[QStyle.SubElement] = ...
    SE_CheckBoxLayoutItem: ClassVar[QStyle.SubElement] = ...
    SE_ComboBoxFocusRect: ClassVar[QStyle.SubElement] = ...
    SE_ComboBoxLayoutItem: ClassVar[QStyle.SubElement] = ...
    SE_CustomBase: ClassVar[QStyle.SubElement] = ...
    SE_DateTimeEditLayoutItem: ClassVar[QStyle.SubElement] = ...
    SE_DialogButtonBoxLayoutItem: ClassVar[QStyle.SubElement] = ...
    SE_DockWidgetCloseButton: ClassVar[QStyle.SubElement] = ...
    SE_DockWidgetFloatButton: ClassVar[QStyle.SubElement] = ...
    SE_DockWidgetIcon: ClassVar[QStyle.SubElement] = ...
    SE_DockWidgetTitleBarText: ClassVar[QStyle.SubElement] = ...
    SE_FrameContents: ClassVar[QStyle.SubElement] = ...
    SE_FrameLayoutItem: ClassVar[QStyle.SubElement] = ...
    SE_GroupBoxLayoutItem: ClassVar[QStyle.SubElement] = ...
    SE_HeaderArrow: ClassVar[QStyle.SubElement] = ...
    SE_HeaderLabel: ClassVar[QStyle.SubElement] = ...
    SE_ItemViewItemCheckIndicator: ClassVar[QStyle.SubElement] = ...
    SE_ItemViewItemDecoration: ClassVar[QStyle.SubElement] = ...
    SE_ItemViewItemFocusRect: ClassVar[QStyle.SubElement] = ...
    SE_ItemViewItemText: ClassVar[QStyle.SubElement] = ...
    SE_LabelLayoutItem: ClassVar[QStyle.SubElement] = ...
    SE_LineEditContents: ClassVar[QStyle.SubElement] = ...
    SE_ProgressBarContents: ClassVar[QStyle.SubElement] = ...
    SE_ProgressBarGroove: ClassVar[QStyle.SubElement] = ...
    SE_ProgressBarLabel: ClassVar[QStyle.SubElement] = ...
    SE_ProgressBarLayoutItem: ClassVar[QStyle.SubElement] = ...
    SE_PushButtonBevel: ClassVar[QStyle.SubElement] = ...
    SE_PushButtonContents: ClassVar[QStyle.SubElement] = ...
    SE_PushButtonFocusRect: ClassVar[QStyle.SubElement] = ...
    SE_PushButtonLayoutItem: ClassVar[QStyle.SubElement] = ...
    SE_RadioButtonClickRect: ClassVar[QStyle.SubElement] = ...
    SE_RadioButtonContents: ClassVar[QStyle.SubElement] = ...
    SE_RadioButtonFocusRect: ClassVar[QStyle.SubElement] = ...
    SE_RadioButtonIndicator: ClassVar[QStyle.SubElement] = ...
    SE_RadioButtonLayoutItem: ClassVar[QStyle.SubElement] = ...
    SE_ShapedFrameContents: ClassVar[QStyle.SubElement] = ...
    SE_SliderFocusRect: ClassVar[QStyle.SubElement] = ...
    SE_SliderLayoutItem: ClassVar[QStyle.SubElement] = ...
    SE_SpinBoxLayoutItem: ClassVar[QStyle.SubElement] = ...
    SE_TabBarScrollLeftButton: ClassVar[QStyle.SubElement] = ...
    SE_TabBarScrollRightButton: ClassVar[QStyle.SubElement] = ...
    SE_TabBarTabLeftButton: ClassVar[QStyle.SubElement] = ...
    SE_TabBarTabRightButton: ClassVar[QStyle.SubElement] = ...
    SE_TabBarTabText: ClassVar[QStyle.SubElement] = ...
    SE_TabBarTearIndicator: ClassVar[QStyle.SubElement] = ...
    SE_TabBarTearIndicatorLeft: ClassVar[QStyle.SubElement] = ...
    SE_TabBarTearIndicatorRight: ClassVar[QStyle.SubElement] = ...
    SE_TabWidgetLayoutItem: ClassVar[QStyle.SubElement] = ...
    SE_TabWidgetLeftCorner: ClassVar[QStyle.SubElement] = ...
    SE_TabWidgetRightCorner: ClassVar[QStyle.SubElement] = ...
    SE_TabWidgetTabBar: ClassVar[QStyle.SubElement] = ...
    SE_TabWidgetTabContents: ClassVar[QStyle.SubElement] = ...
    SE_TabWidgetTabPane: ClassVar[QStyle.SubElement] = ...
    SE_ToolBarHandle: ClassVar[QStyle.SubElement] = ...
    SE_ToolBoxTabContents: ClassVar[QStyle.SubElement] = ...
    SE_ToolButtonLayoutItem: ClassVar[QStyle.SubElement] = ...
    SE_TreeViewDisclosureItem: ClassVar[QStyle.SubElement] = ...
    SE_ViewItemCheckIndicator: ClassVar[QStyle.SubElement] = ...
    SH_BlinkCursorWhenTextSelected: ClassVar[QStyle.StyleHint] = ...
    SH_Button_FocusPolicy: ClassVar[QStyle.StyleHint] = ...
    SH_ComboBox_AllowWheelScrolling: ClassVar[QStyle.StyleHint] = ...
    SH_ComboBox_LayoutDirection: ClassVar[QStyle.StyleHint] = ...
    SH_ComboBox_ListMouseTracking: ClassVar[QStyle.StyleHint] = ...
    SH_ComboBox_Popup: ClassVar[QStyle.StyleHint] = ...
    SH_ComboBox_PopupFrameStyle: ClassVar[QStyle.StyleHint] = ...
    SH_ComboBox_UseNativePopup: ClassVar[QStyle.StyleHint] = ...
    SH_CustomBase: ClassVar[QStyle.StyleHint] = ...
    SH_Dial_BackgroundRole: ClassVar[QStyle.StyleHint] = ...
    SH_DialogButtonBox_ButtonsHaveIcons: ClassVar[QStyle.StyleHint] = ...
    SH_DialogButtonLayout: ClassVar[QStyle.StyleHint] = ...
    SH_DialogButtons_DefaultButton: ClassVar[QStyle.StyleHint] = ...
    SH_DitherDisabledText: ClassVar[QStyle.StyleHint] = ...
    SH_DockWidget_ButtonsHaveFrame: ClassVar[QStyle.StyleHint] = ...
    SH_DrawMenuBarSeparator: ClassVar[QStyle.StyleHint] = ...
    SH_EtchDisabledText: ClassVar[QStyle.StyleHint] = ...
    SH_FocusFrame_AboveWidget: ClassVar[QStyle.StyleHint] = ...
    SH_FocusFrame_Mask: ClassVar[QStyle.StyleHint] = ...
    SH_FontDialog_SelectAssociatedText: ClassVar[QStyle.StyleHint] = ...
    SH_FormLayoutFieldGrowthPolicy: ClassVar[QStyle.StyleHint] = ...
    SH_FormLayoutFormAlignment: ClassVar[QStyle.StyleHint] = ...
    SH_FormLayoutLabelAlignment: ClassVar[QStyle.StyleHint] = ...
    SH_FormLayoutWrapPolicy: ClassVar[QStyle.StyleHint] = ...
    SH_GroupBox_TextLabelColor: ClassVar[QStyle.StyleHint] = ...
    SH_GroupBox_TextLabelVerticalAlignment: ClassVar[QStyle.StyleHint] = ...
    SH_Header_ArrowAlignment: ClassVar[QStyle.StyleHint] = ...
    SH_ItemView_ActivateItemOnSingleClick: ClassVar[QStyle.StyleHint] = ...
    SH_ItemView_ArrowKeysNavigateIntoChildren: ClassVar[QStyle.StyleHint] = ...
    SH_ItemView_ChangeHighlightOnFocus: ClassVar[QStyle.StyleHint] = ...
    SH_ItemView_DrawDelegateFrame: ClassVar[QStyle.StyleHint] = ...
    SH_ItemView_EllipsisLocation: ClassVar[QStyle.StyleHint] = ...
    SH_ItemView_MovementWithoutUpdatingSelection: ClassVar[QStyle.StyleHint] = ...
    SH_ItemView_PaintAlternatingRowColorsForEmptyArea: ClassVar[QStyle.StyleHint] = ...
    SH_ItemView_ScrollMode: ClassVar[QStyle.StyleHint] = ...
    SH_ItemView_ShowDecorationSelected: ClassVar[QStyle.StyleHint] = ...
    SH_LineEdit_PasswordCharacter: ClassVar[QStyle.StyleHint] = ...
    SH_LineEdit_PasswordMaskDelay: ClassVar[QStyle.StyleHint] = ...
    SH_ListViewExpand_SelectMouseType: ClassVar[QStyle.StyleHint] = ...
    SH_MainWindow_SpaceBelowMenuBar: ClassVar[QStyle.StyleHint] = ...
    SH_MenuBar_AltKeyNavigation: ClassVar[QStyle.StyleHint] = ...
    SH_MenuBar_MouseTracking: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_AllowActiveAndDisabled: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_FadeOutOnHide: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_FillScreenWithScroll: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_FlashTriggeredItem: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_KeyboardSearch: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_Mask: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_MouseTracking: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_Scrollable: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_SelectionWrap: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_SloppySubMenus: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_SpaceActivatesItem: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_SubMenuDontStartSloppyOnLeave: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_SubMenuPopupDelay: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_SubMenuResetWhenReenteringParent: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_SubMenuSloppyCloseTimeout: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_SubMenuSloppySelectOtherActions: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_SubMenuUniDirection: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_SubMenuUniDirectionFailCount: ClassVar[QStyle.StyleHint] = ...
    SH_Menu_SupportsSections: ClassVar[QStyle.StyleHint] = ...
    SH_MessageBox_CenterButtons: ClassVar[QStyle.StyleHint] = ...
    SH_MessageBox_TextInteractionFlags: ClassVar[QStyle.StyleHint] = ...
    SH_MessageBox_UseBorderForButtonSpacing: ClassVar[QStyle.StyleHint] = ...
    SH_PrintDialog_RightAlignButtons: ClassVar[QStyle.StyleHint] = ...
    SH_ProgressDialog_CenterCancelButton: ClassVar[QStyle.StyleHint] = ...
    SH_ProgressDialog_TextLabelAlignment: ClassVar[QStyle.StyleHint] = ...
    SH_RequestSoftwareInputPanel: ClassVar[QStyle.StyleHint] = ...
    SH_RichText_FullWidthSelection: ClassVar[QStyle.StyleHint] = ...
    SH_RubberBand_Mask: ClassVar[QStyle.StyleHint] = ...
    SH_ScrollBar_ContextMenu: ClassVar[QStyle.StyleHint] = ...
    SH_ScrollBar_LeftClickAbsolutePosition: ClassVar[QStyle.StyleHint] = ...
    SH_ScrollBar_MiddleClickAbsolutePosition: ClassVar[QStyle.StyleHint] = ...
    SH_ScrollBar_RollBetweenButtons: ClassVar[QStyle.StyleHint] = ...
    SH_ScrollBar_ScrollWhenPointerLeavesControl: ClassVar[QStyle.StyleHint] = ...
    SH_ScrollBar_StopMouseOverSlider: ClassVar[QStyle.StyleHint] = ...
    SH_ScrollBar_Transient: ClassVar[QStyle.StyleHint] = ...
    SH_ScrollView_FrameOnlyAroundContents: ClassVar[QStyle.StyleHint] = ...
    SH_Slider_AbsoluteSetButtons: ClassVar[QStyle.StyleHint] = ...
    SH_Slider_PageSetButtons: ClassVar[QStyle.StyleHint] = ...
    SH_Slider_SloppyKeyEvents: ClassVar[QStyle.StyleHint] = ...
    SH_Slider_SnapToValue: ClassVar[QStyle.StyleHint] = ...
    SH_Slider_StopMouseOverSlider: ClassVar[QStyle.StyleHint] = ...
    SH_SpellCheckUnderlineStyle: ClassVar[QStyle.StyleHint] = ...
    SH_SpinBox_AnimateButton: ClassVar[QStyle.StyleHint] = ...
    SH_SpinBox_ButtonsInsideFrame: ClassVar[QStyle.StyleHint] = ...
    SH_SpinBox_ClickAutoRepeatRate: ClassVar[QStyle.StyleHint] = ...
    SH_SpinBox_ClickAutoRepeatThreshold: ClassVar[QStyle.StyleHint] = ...
    SH_SpinBox_KeyPressAutoRepeatRate: ClassVar[QStyle.StyleHint] = ...
    SH_SpinBox_StepModifier: ClassVar[QStyle.StyleHint] = ...
    SH_SpinControls_DisableOnBounds: ClassVar[QStyle.StyleHint] = ...
    SH_Splitter_OpaqueResize: ClassVar[QStyle.StyleHint] = ...
    SH_TabBar_Alignment: ClassVar[QStyle.StyleHint] = ...
    SH_TabBar_ChangeCurrentDelay: ClassVar[QStyle.StyleHint] = ...
    SH_TabBar_CloseButtonPosition: ClassVar[QStyle.StyleHint] = ...
    SH_TabBar_ElideMode: ClassVar[QStyle.StyleHint] = ...
    SH_TabBar_PreferNoArrows: ClassVar[QStyle.StyleHint] = ...
    SH_TabBar_SelectMouseType: ClassVar[QStyle.StyleHint] = ...
    SH_TabWidget_DefaultTabPosition: ClassVar[QStyle.StyleHint] = ...
    SH_Table_GridLineColor: ClassVar[QStyle.StyleHint] = ...
    SH_TextControl_FocusIndicatorTextCharFormat: ClassVar[QStyle.StyleHint] = ...
    SH_TitleBar_AutoRaise: ClassVar[QStyle.StyleHint] = ...
    SH_TitleBar_ModifyNotification: ClassVar[QStyle.StyleHint] = ...
    SH_TitleBar_NoBorder: ClassVar[QStyle.StyleHint] = ...
    SH_TitleBar_ShowToolTipsOnButtons: ClassVar[QStyle.StyleHint] = ...
    SH_ToolBar_Movable: ClassVar[QStyle.StyleHint] = ...
    SH_ToolBox_SelectedPageTitleBold: ClassVar[QStyle.StyleHint] = ...
    SH_ToolButtonStyle: ClassVar[QStyle.StyleHint] = ...
    SH_ToolButton_PopupDelay: ClassVar[QStyle.StyleHint] = ...
    SH_ToolTipLabel_Opacity: ClassVar[QStyle.StyleHint] = ...
    SH_ToolTip_FallAsleepDelay: ClassVar[QStyle.StyleHint] = ...
    SH_ToolTip_Mask: ClassVar[QStyle.StyleHint] = ...
    SH_ToolTip_WakeUpDelay: ClassVar[QStyle.StyleHint] = ...
    SH_UnderlineShortcut: ClassVar[QStyle.StyleHint] = ...
    SH_Widget_Animate: ClassVar[QStyle.StyleHint] = ...
    SH_Widget_Animation_Duration: ClassVar[QStyle.StyleHint] = ...
    SH_Widget_ShareActivation: ClassVar[QStyle.StyleHint] = ...
    SH_WindowFrame_Mask: ClassVar[QStyle.StyleHint] = ...
    SH_WizardStyle: ClassVar[QStyle.StyleHint] = ...
    SH_Workspace_FillSpaceOnMaximize: ClassVar[QStyle.StyleHint] = ...
    SP_ArrowBack: ClassVar[QStyle.StandardPixmap] = ...
    SP_ArrowDown: ClassVar[QStyle.StandardPixmap] = ...
    SP_ArrowForward: ClassVar[QStyle.StandardPixmap] = ...
    SP_ArrowLeft: ClassVar[QStyle.StandardPixmap] = ...
    SP_ArrowRight: ClassVar[QStyle.StandardPixmap] = ...
    SP_ArrowUp: ClassVar[QStyle.StandardPixmap] = ...
    SP_BrowserReload: ClassVar[QStyle.StandardPixmap] = ...
    SP_BrowserStop: ClassVar[QStyle.StandardPixmap] = ...
    SP_CommandLink: ClassVar[QStyle.StandardPixmap] = ...
    SP_ComputerIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_CustomBase: ClassVar[QStyle.StandardPixmap] = ...
    SP_DesktopIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogAbortButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogApplyButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogCancelButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogCloseButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogDiscardButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogHelpButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogIgnoreButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogNoButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogNoToAllButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogOkButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogOpenButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogResetButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogRetryButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogSaveAllButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogSaveButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogYesButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DialogYesToAllButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DirClosedIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_DirHomeIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_DirIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_DirLinkIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_DirLinkOpenIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_DirOpenIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_DockWidgetCloseButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_DriveCDIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_DriveDVDIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_DriveFDIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_DriveHDIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_DriveNetIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_FileDialogBack: ClassVar[QStyle.StandardPixmap] = ...
    SP_FileDialogContentsView: ClassVar[QStyle.StandardPixmap] = ...
    SP_FileDialogDetailedView: ClassVar[QStyle.StandardPixmap] = ...
    SP_FileDialogEnd: ClassVar[QStyle.StandardPixmap] = ...
    SP_FileDialogInfoView: ClassVar[QStyle.StandardPixmap] = ...
    SP_FileDialogListView: ClassVar[QStyle.StandardPixmap] = ...
    SP_FileDialogNewFolder: ClassVar[QStyle.StandardPixmap] = ...
    SP_FileDialogStart: ClassVar[QStyle.StandardPixmap] = ...
    SP_FileDialogToParent: ClassVar[QStyle.StandardPixmap] = ...
    SP_FileIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_FileLinkIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_LineEditClearButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_MediaPause: ClassVar[QStyle.StandardPixmap] = ...
    SP_MediaPlay: ClassVar[QStyle.StandardPixmap] = ...
    SP_MediaSeekBackward: ClassVar[QStyle.StandardPixmap] = ...
    SP_MediaSeekForward: ClassVar[QStyle.StandardPixmap] = ...
    SP_MediaSkipBackward: ClassVar[QStyle.StandardPixmap] = ...
    SP_MediaSkipForward: ClassVar[QStyle.StandardPixmap] = ...
    SP_MediaStop: ClassVar[QStyle.StandardPixmap] = ...
    SP_MediaVolume: ClassVar[QStyle.StandardPixmap] = ...
    SP_MediaVolumeMuted: ClassVar[QStyle.StandardPixmap] = ...
    SP_MessageBoxCritical: ClassVar[QStyle.StandardPixmap] = ...
    SP_MessageBoxInformation: ClassVar[QStyle.StandardPixmap] = ...
    SP_MessageBoxQuestion: ClassVar[QStyle.StandardPixmap] = ...
    SP_MessageBoxWarning: ClassVar[QStyle.StandardPixmap] = ...
    SP_RestoreDefaultsButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_TitleBarCloseButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_TitleBarContextHelpButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_TitleBarMaxButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_TitleBarMenuButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_TitleBarMinButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_TitleBarNormalButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_TitleBarShadeButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_TitleBarUnshadeButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_ToolBarHorizontalExtensionButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_ToolBarVerticalExtensionButton: ClassVar[QStyle.StandardPixmap] = ...
    SP_TrashIcon: ClassVar[QStyle.StandardPixmap] = ...
    SP_VistaShield: ClassVar[QStyle.StandardPixmap] = ...
    State_Active: ClassVar[QStyle.StateFlag] = ...
    State_AutoRaise: ClassVar[QStyle.StateFlag] = ...
    State_Bottom: ClassVar[QStyle.StateFlag] = ...
    State_Children: ClassVar[QStyle.StateFlag] = ...
    State_DownArrow: ClassVar[QStyle.StateFlag] = ...
    State_Editing: ClassVar[QStyle.StateFlag] = ...
    State_Enabled: ClassVar[QStyle.StateFlag] = ...
    State_FocusAtBorder: ClassVar[QStyle.StateFlag] = ...
    State_HasFocus: ClassVar[QStyle.StateFlag] = ...
    State_Horizontal: ClassVar[QStyle.StateFlag] = ...
    State_Item: ClassVar[QStyle.StateFlag] = ...
    State_KeyboardFocusChange: ClassVar[QStyle.StateFlag] = ...
    State_Mini: ClassVar[QStyle.StateFlag] = ...
    State_MouseOver: ClassVar[QStyle.StateFlag] = ...
    State_NoChange: ClassVar[QStyle.StateFlag] = ...
    State_None: ClassVar[QStyle.StateFlag] = ...
    State_Off: ClassVar[QStyle.StateFlag] = ...
    State_On: ClassVar[QStyle.StateFlag] = ...
    State_Open: ClassVar[QStyle.StateFlag] = ...
    State_Raised: ClassVar[QStyle.StateFlag] = ...
    State_ReadOnly: ClassVar[QStyle.StateFlag] = ...
    State_Selected: ClassVar[QStyle.StateFlag] = ...
    State_Sibling: ClassVar[QStyle.StateFlag] = ...
    State_Small: ClassVar[QStyle.StateFlag] = ...
    State_Sunken: ClassVar[QStyle.StateFlag] = ...
    State_Top: ClassVar[QStyle.StateFlag] = ...
    State_UpArrow: ClassVar[QStyle.StateFlag] = ...
    State_Window: ClassVar[QStyle.StateFlag] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @classmethod
    def alignedRect(cls, direction: PySide2.QtCore.Qt.LayoutDirection, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag], size: PySide2.QtCore.QSize, rectangle: PySide2.QtCore.QRect) -> PySide2.QtCore.QRect: ...
    def combinedLayoutSpacing(self, controls1: typing.Union[QSizePolicy.ControlTypes,QSizePolicy.ControlType], controls2: typing.Union[QSizePolicy.ControlTypes,QSizePolicy.ControlType], orientation: PySide2.QtCore.Qt.Orientation, option: typing.Union[QStyleOption,None] = ..., widget: typing.Union[QWidget,None] = ...) -> int: ...
    def drawComplexControl(self, cc: QStyle.ComplexControl, opt: QStyleOptionComplex, p: PySide2.QtGui.QPainter, widget: typing.Union[QWidget,None] = ...) -> None: ...
    def drawControl(self, element: QStyle.ControlElement, opt: QStyleOption, p: PySide2.QtGui.QPainter, widget: typing.Union[QWidget,None] = ...) -> None: ...
    def drawItemPixmap(self, painter: PySide2.QtGui.QPainter, rect: PySide2.QtCore.QRect, alignment: int, pixmap: PySide2.QtGui.QPixmap) -> None: ...
    def drawItemText(self, painter: PySide2.QtGui.QPainter, rect: PySide2.QtCore.QRect, flags: typing.SupportsInt, pal: PySide2.QtGui.QPalette, enabled: bool, text: str, textRole: PySide2.QtGui.QPalette.ColorRole = ...) -> None: ...
    def drawPrimitive(self, pe: QStyle.PrimitiveElement, opt: QStyleOption, p: PySide2.QtGui.QPainter, widget: typing.Union[QWidget,None] = ...) -> None: ...
    def generatedIconPixmap(self, iconMode: PySide2.QtGui.QIcon.Mode, pixmap: PySide2.QtGui.QPixmap, opt: QStyleOption) -> PySide2.QtGui.QPixmap: ...
    def hitTestComplexControl(self, cc: QStyle.ComplexControl, opt: QStyleOptionComplex, pt: PySide2.QtCore.QPoint, widget: typing.Union[QWidget,None] = ...) -> QStyle.SubControl: ...
    def itemPixmapRect(self, r: PySide2.QtCore.QRect, flags: typing.SupportsInt, pixmap: PySide2.QtGui.QPixmap) -> PySide2.QtCore.QRect: ...
    def itemTextRect(self, fm: PySide2.QtGui.QFontMetrics, r: PySide2.QtCore.QRect, flags: typing.SupportsInt, enabled: bool, text: str) -> PySide2.QtCore.QRect: ...
    def layoutSpacing(self, control1: QSizePolicy.ControlType, control2: QSizePolicy.ControlType, orientation: PySide2.QtCore.Qt.Orientation, option: typing.Union[QStyleOption,None] = ..., widget: typing.Union[QWidget,None] = ...) -> int: ...
    def pixelMetric(self, metric: QStyle.PixelMetric, option: typing.Union[QStyleOption,None] = ..., widget: typing.Union[QWidget,None] = ...) -> int: ...
    @overload
    def polish(self, application: QApplication) -> None: ...
    @overload
    def polish(self, palette: PySide2.QtGui.QPalette) -> None: ...
    @overload
    def polish(self, widget: QWidget) -> None: ...
    def proxy(self) -> QStyle: ...
    def sizeFromContents(self, ct: QStyle.ContentsType, opt: QStyleOption, contentsSize: PySide2.QtCore.QSize, w: typing.Union[QWidget,None] = ...) -> PySide2.QtCore.QSize: ...
    @classmethod
    def sliderPositionFromValue(cls, min: int, max: int, val: int, space: int, upsideDown: bool = ...) -> int: ...
    @classmethod
    def sliderValueFromPosition(cls, min: int, max: int, pos: int, space: int, upsideDown: bool = ...) -> int: ...
    def standardIcon(self, standardIcon: QStyle.StandardPixmap, option: typing.Union[QStyleOption,None] = ..., widget: typing.Union[QWidget,None] = ...) -> PySide2.QtGui.QIcon: ...
    def standardPalette(self) -> PySide2.QtGui.QPalette: ...
    def standardPixmap(self, standardPixmap: QStyle.StandardPixmap, opt: typing.Union[QStyleOption,None] = ..., widget: typing.Union[QWidget,None] = ...) -> PySide2.QtGui.QPixmap: ...
    def styleHint(self, stylehint: QStyle.StyleHint, opt: typing.Union[QStyleOption,None] = ..., widget: typing.Union[QWidget,None] = ..., returnData: typing.Union[QStyleHintReturn,None] = ...) -> int: ...
    def subControlRect(self, cc: QStyle.ComplexControl, opt: QStyleOptionComplex, sc: QStyle.SubControl, widget: typing.Union[QWidget,None] = ...) -> PySide2.QtCore.QRect: ...
    def subElementRect(self, subElement: QStyle.SubElement, option: QStyleOption, widget: typing.Union[QWidget,None] = ...) -> PySide2.QtCore.QRect: ...
    @overload
    def unpolish(self, application: QApplication) -> None: ...
    @overload
    def unpolish(self, widget: QWidget) -> None: ...
    @classmethod
    def visualAlignment(cls, direction: PySide2.QtCore.Qt.LayoutDirection, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    @classmethod
    def visualPos(cls, direction: PySide2.QtCore.Qt.LayoutDirection, boundingRect: PySide2.QtCore.QRect, logicalPos: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    @classmethod
    def visualRect(cls, direction: PySide2.QtCore.Qt.LayoutDirection, boundingRect: PySide2.QtCore.QRect, logicalRect: PySide2.QtCore.QRect) -> PySide2.QtCore.QRect: ...

class QStyleFactory(shiboken2.Object):
    def __init__(self) -> None: ...
    @classmethod
    def create(cls, arg__1: str) -> QStyle: ...
    @classmethod
    def keys(cls) -> typing.List[str]: ...

class QStyleHintReturn(shiboken2.Object):
    class HintReturnType:
        SH_Default: ClassVar[QStyleHintReturn.HintReturnType] = ...
        SH_Mask: ClassVar[QStyleHintReturn.HintReturnType] = ...
        SH_Variant: ClassVar[QStyleHintReturn.HintReturnType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleHintReturn.HintReturnType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleHintReturn.HintReturnType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleHintReturn.HintReturnType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleHintReturn.HintReturnType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleHintReturn.HintReturnType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleHintReturn.HintReturnType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleHintReturn.HintReturnType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleHintReturn.HintReturnType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleHintReturn.HintReturnType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleHintReturn.HintReturnType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleHintReturn.HintReturnType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleHintReturn.HintReturnType: ...

    class StyleOptionType:
        Type: ClassVar[QStyleHintReturn.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleHintReturn.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleHintReturn.StyleOptionVersion: ...
    SH_Default: ClassVar[QStyleHintReturn.HintReturnType] = ...
    SH_Mask: ClassVar[QStyleHintReturn.HintReturnType] = ...
    SH_Variant: ClassVar[QStyleHintReturn.HintReturnType] = ...
    Type: ClassVar[QStyleHintReturn.StyleOptionType] = ...
    Version: ClassVar[QStyleHintReturn.StyleOptionVersion] = ...
    type: Any
    version: Any
    def __init__(self, version: int = ..., type: int = ...) -> None: ...

class QStyleHintReturnMask(QStyleHintReturn):
    class StyleOptionType:
        Type: ClassVar[QStyleHintReturnMask.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleHintReturnMask.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleHintReturnMask.StyleOptionVersion: ...
    Type: ClassVar[QStyleHintReturnMask.StyleOptionType] = ...
    Version: ClassVar[QStyleHintReturnMask.StyleOptionVersion] = ...
    region: Any
    def __init__(self) -> None: ...

class QStyleHintReturnVariant(QStyleHintReturn):
    class StyleOptionType:
        Type: ClassVar[QStyleHintReturnVariant.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleHintReturnVariant.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleHintReturnVariant.StyleOptionVersion: ...
    Type: ClassVar[QStyleHintReturnVariant.StyleOptionType] = ...
    Version: ClassVar[QStyleHintReturnVariant.StyleOptionVersion] = ...
    variant: Any
    def __init__(self) -> None: ...

class QStyleOption(shiboken2.Object):
    class OptionType:
        SO_Button: ClassVar[QStyleOption.OptionType] = ...
        SO_ComboBox: ClassVar[QStyleOption.OptionType] = ...
        SO_Complex: ClassVar[QStyleOption.OptionType] = ...
        SO_ComplexCustomBase: ClassVar[QStyleOption.OptionType] = ...
        SO_CustomBase: ClassVar[QStyleOption.OptionType] = ...
        SO_Default: ClassVar[QStyleOption.OptionType] = ...
        SO_DockWidget: ClassVar[QStyleOption.OptionType] = ...
        SO_FocusRect: ClassVar[QStyleOption.OptionType] = ...
        SO_Frame: ClassVar[QStyleOption.OptionType] = ...
        SO_GraphicsItem: ClassVar[QStyleOption.OptionType] = ...
        SO_GroupBox: ClassVar[QStyleOption.OptionType] = ...
        SO_Header: ClassVar[QStyleOption.OptionType] = ...
        SO_MenuItem: ClassVar[QStyleOption.OptionType] = ...
        SO_ProgressBar: ClassVar[QStyleOption.OptionType] = ...
        SO_RubberBand: ClassVar[QStyleOption.OptionType] = ...
        SO_SizeGrip: ClassVar[QStyleOption.OptionType] = ...
        SO_Slider: ClassVar[QStyleOption.OptionType] = ...
        SO_SpinBox: ClassVar[QStyleOption.OptionType] = ...
        SO_Tab: ClassVar[QStyleOption.OptionType] = ...
        SO_TabBarBase: ClassVar[QStyleOption.OptionType] = ...
        SO_TabWidgetFrame: ClassVar[QStyleOption.OptionType] = ...
        SO_TitleBar: ClassVar[QStyleOption.OptionType] = ...
        SO_ToolBar: ClassVar[QStyleOption.OptionType] = ...
        SO_ToolBox: ClassVar[QStyleOption.OptionType] = ...
        SO_ToolButton: ClassVar[QStyleOption.OptionType] = ...
        SO_ViewItem: ClassVar[QStyleOption.OptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOption.OptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOption.OptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOption.OptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOption.OptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOption.OptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOption.OptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOption.OptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOption.OptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOption.OptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOption.OptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOption.OptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOption.OptionType: ...

    class StyleOptionType:
        Type: ClassVar[QStyleOption.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOption.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOption.StyleOptionVersion: ...
    SO_Button: ClassVar[QStyleOption.OptionType] = ...
    SO_ComboBox: ClassVar[QStyleOption.OptionType] = ...
    SO_Complex: ClassVar[QStyleOption.OptionType] = ...
    SO_ComplexCustomBase: ClassVar[QStyleOption.OptionType] = ...
    SO_CustomBase: ClassVar[QStyleOption.OptionType] = ...
    SO_Default: ClassVar[QStyleOption.OptionType] = ...
    SO_DockWidget: ClassVar[QStyleOption.OptionType] = ...
    SO_FocusRect: ClassVar[QStyleOption.OptionType] = ...
    SO_Frame: ClassVar[QStyleOption.OptionType] = ...
    SO_GraphicsItem: ClassVar[QStyleOption.OptionType] = ...
    SO_GroupBox: ClassVar[QStyleOption.OptionType] = ...
    SO_Header: ClassVar[QStyleOption.OptionType] = ...
    SO_MenuItem: ClassVar[QStyleOption.OptionType] = ...
    SO_ProgressBar: ClassVar[QStyleOption.OptionType] = ...
    SO_RubberBand: ClassVar[QStyleOption.OptionType] = ...
    SO_SizeGrip: ClassVar[QStyleOption.OptionType] = ...
    SO_Slider: ClassVar[QStyleOption.OptionType] = ...
    SO_SpinBox: ClassVar[QStyleOption.OptionType] = ...
    SO_Tab: ClassVar[QStyleOption.OptionType] = ...
    SO_TabBarBase: ClassVar[QStyleOption.OptionType] = ...
    SO_TabWidgetFrame: ClassVar[QStyleOption.OptionType] = ...
    SO_TitleBar: ClassVar[QStyleOption.OptionType] = ...
    SO_ToolBar: ClassVar[QStyleOption.OptionType] = ...
    SO_ToolBox: ClassVar[QStyleOption.OptionType] = ...
    SO_ToolButton: ClassVar[QStyleOption.OptionType] = ...
    SO_ViewItem: ClassVar[QStyleOption.OptionType] = ...
    Type: ClassVar[QStyleOption.StyleOptionType] = ...
    Version: ClassVar[QStyleOption.StyleOptionVersion] = ...
    direction: Any
    fontMetrics: Any
    palette: Any
    rect: Any
    state: Any
    styleObject: Any
    type: Any
    version: Any
    @overload
    def __init__(self, other: QStyleOption) -> None: ...
    @overload
    def __init__(self, version: int = ..., type: int = ...) -> None: ...
    def init(self, w: QWidget) -> None: ...
    def initFrom(self, w: QWidget) -> None: ...

class QStyleOptionButton(QStyleOption):
    class ButtonFeature:
        AutoDefaultButton: ClassVar[QStyleOptionButton.ButtonFeature] = ...
        CommandLinkButton: ClassVar[QStyleOptionButton.ButtonFeature] = ...
        DefaultButton: ClassVar[QStyleOptionButton.ButtonFeature] = ...
        Flat: ClassVar[QStyleOptionButton.ButtonFeature] = ...
        HasMenu: ClassVar[QStyleOptionButton.ButtonFeature] = ...
        None_: ClassVar[QStyleOptionButton.ButtonFeature] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionButton.ButtonFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyleOptionButton.ButtonFeature: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionButton.ButtonFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionButton.ButtonFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionButton.ButtonFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionButton.ButtonFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionButton.ButtonFeatures: ...

    class ButtonFeatures:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionButton.ButtonFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyleOptionButton.ButtonFeatures: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionButton.ButtonFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionButton.ButtonFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionButton.ButtonFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionButton.ButtonFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionButton.ButtonFeatures: ...

    class StyleOptionType:
        Type: ClassVar[QStyleOptionButton.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionButton.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionButton.StyleOptionVersion: ...
    AutoDefaultButton: ClassVar[QStyleOptionButton.ButtonFeature] = ...
    CommandLinkButton: ClassVar[QStyleOptionButton.ButtonFeature] = ...
    DefaultButton: ClassVar[QStyleOptionButton.ButtonFeature] = ...
    Flat: ClassVar[QStyleOptionButton.ButtonFeature] = ...
    HasMenu: ClassVar[QStyleOptionButton.ButtonFeature] = ...
    None_: ClassVar[QStyleOptionButton.ButtonFeature] = ...
    Type: ClassVar[QStyleOptionButton.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionButton.StyleOptionVersion] = ...
    features: Any
    icon: Any
    iconSize: Any
    text: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionButton) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionComboBox(QStyleOptionComplex):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionComboBox.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionComboBox.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionComboBox.StyleOptionVersion: ...
    Type: ClassVar[QStyleOptionComboBox.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionComboBox.StyleOptionVersion] = ...
    currentIcon: Any
    currentText: Any
    editable: Any
    frame: Any
    iconSize: Any
    popupRect: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionComboBox) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionComplex(QStyleOption):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionComplex.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionComplex.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionComplex.StyleOptionVersion: ...
    Type: ClassVar[QStyleOptionComplex.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionComplex.StyleOptionVersion] = ...
    activeSubControls: Any
    subControls: Any
    @overload
    def __init__(self, other: QStyleOptionComplex) -> None: ...
    @overload
    def __init__(self, version: int = ..., type: int = ...) -> None: ...

class QStyleOptionDockWidget(QStyleOption):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionDockWidget.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionDockWidget.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionDockWidget.StyleOptionVersion: ...
    Type: ClassVar[QStyleOptionDockWidget.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionDockWidget.StyleOptionVersion] = ...
    closable: Any
    floatable: Any
    movable: Any
    title: Any
    verticalTitleBar: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionDockWidget) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionFocusRect(QStyleOption):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionFocusRect.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionFocusRect.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionFocusRect.StyleOptionVersion: ...
    Type: ClassVar[QStyleOptionFocusRect.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionFocusRect.StyleOptionVersion] = ...
    backgroundColor: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionFocusRect) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionFrame(QStyleOption):
    class FrameFeature:
        Flat: ClassVar[QStyleOptionFrame.FrameFeature] = ...
        None_: ClassVar[QStyleOptionFrame.FrameFeature] = ...
        Rounded: ClassVar[QStyleOptionFrame.FrameFeature] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionFrame.FrameFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyleOptionFrame.FrameFeature: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionFrame.FrameFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionFrame.FrameFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionFrame.FrameFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionFrame.FrameFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionFrame.FrameFeatures: ...

    class FrameFeatures:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionFrame.FrameFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyleOptionFrame.FrameFeatures: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionFrame.FrameFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionFrame.FrameFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionFrame.FrameFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionFrame.FrameFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionFrame.FrameFeatures: ...

    class StyleOptionType:
        Type: ClassVar[QStyleOptionFrame.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionFrame.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionFrame.StyleOptionVersion: ...
    Flat: ClassVar[QStyleOptionFrame.FrameFeature] = ...
    None_: ClassVar[QStyleOptionFrame.FrameFeature] = ...
    Rounded: ClassVar[QStyleOptionFrame.FrameFeature] = ...
    Type: ClassVar[QStyleOptionFrame.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionFrame.StyleOptionVersion] = ...
    features: Any
    frameShape: Any
    lineWidth: Any
    midLineWidth: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionFrame) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionGraphicsItem(QStyleOption):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionGraphicsItem.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionGraphicsItem.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionGraphicsItem.StyleOptionVersion: ...
    Type: ClassVar[QStyleOptionGraphicsItem.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionGraphicsItem.StyleOptionVersion] = ...
    exposedRect: Any
    levelOfDetail: Any
    matrix: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionGraphicsItem) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...
    @classmethod
    def levelOfDetailFromTransform(cls, worldTransform: PySide2.QtGui.QTransform) -> float: ...

class QStyleOptionGroupBox(QStyleOptionComplex):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionGroupBox.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionGroupBox.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionGroupBox.StyleOptionVersion: ...
    Type: ClassVar[QStyleOptionGroupBox.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionGroupBox.StyleOptionVersion] = ...
    features: Any
    lineWidth: Any
    midLineWidth: Any
    text: Any
    textAlignment: Any
    textColor: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionGroupBox) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionHeader(QStyleOption):
    class SectionPosition:
        Beginning: ClassVar[QStyleOptionHeader.SectionPosition] = ...
        End: ClassVar[QStyleOptionHeader.SectionPosition] = ...
        Middle: ClassVar[QStyleOptionHeader.SectionPosition] = ...
        OnlyOneSection: ClassVar[QStyleOptionHeader.SectionPosition] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SectionPosition: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SectionPosition: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SectionPosition: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SectionPosition: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SectionPosition: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SectionPosition: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SectionPosition: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SectionPosition: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SectionPosition: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SectionPosition: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SectionPosition: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SectionPosition: ...

    class SelectedPosition:
        NextAndPreviousAreSelected: ClassVar[QStyleOptionHeader.SelectedPosition] = ...
        NextIsSelected: ClassVar[QStyleOptionHeader.SelectedPosition] = ...
        NotAdjacent: ClassVar[QStyleOptionHeader.SelectedPosition] = ...
        PreviousIsSelected: ClassVar[QStyleOptionHeader.SelectedPosition] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SelectedPosition: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SelectedPosition: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SelectedPosition: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SelectedPosition: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SelectedPosition: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SelectedPosition: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SelectedPosition: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SelectedPosition: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SelectedPosition: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SelectedPosition: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SelectedPosition: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SelectedPosition: ...

    class SortIndicator:
        None_: ClassVar[QStyleOptionHeader.SortIndicator] = ...
        SortDown: ClassVar[QStyleOptionHeader.SortIndicator] = ...
        SortUp: ClassVar[QStyleOptionHeader.SortIndicator] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SortIndicator: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SortIndicator: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SortIndicator: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SortIndicator: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SortIndicator: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SortIndicator: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SortIndicator: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SortIndicator: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SortIndicator: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SortIndicator: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SortIndicator: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionHeader.SortIndicator: ...

    class StyleOptionType:
        Type: ClassVar[QStyleOptionHeader.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionHeader.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionHeader.StyleOptionVersion: ...
    Beginning: ClassVar[QStyleOptionHeader.SectionPosition] = ...
    End: ClassVar[QStyleOptionHeader.SectionPosition] = ...
    Middle: ClassVar[QStyleOptionHeader.SectionPosition] = ...
    NextAndPreviousAreSelected: ClassVar[QStyleOptionHeader.SelectedPosition] = ...
    NextIsSelected: ClassVar[QStyleOptionHeader.SelectedPosition] = ...
    None_: ClassVar[QStyleOptionHeader.SortIndicator] = ...
    NotAdjacent: ClassVar[QStyleOptionHeader.SelectedPosition] = ...
    OnlyOneSection: ClassVar[QStyleOptionHeader.SectionPosition] = ...
    PreviousIsSelected: ClassVar[QStyleOptionHeader.SelectedPosition] = ...
    SortDown: ClassVar[QStyleOptionHeader.SortIndicator] = ...
    SortUp: ClassVar[QStyleOptionHeader.SortIndicator] = ...
    Type: ClassVar[QStyleOptionHeader.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionHeader.StyleOptionVersion] = ...
    icon: Any
    iconAlignment: Any
    orientation: Any
    position: Any
    section: Any
    selectedPosition: Any
    sortIndicator: Any
    text: Any
    textAlignment: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionHeader) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionMenuItem(QStyleOption):
    class CheckType:
        Exclusive: ClassVar[QStyleOptionMenuItem.CheckType] = ...
        NonExclusive: ClassVar[QStyleOptionMenuItem.CheckType] = ...
        NotCheckable: ClassVar[QStyleOptionMenuItem.CheckType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.CheckType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.CheckType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.CheckType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.CheckType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.CheckType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.CheckType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.CheckType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.CheckType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.CheckType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.CheckType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.CheckType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.CheckType: ...

    class MenuItemType:
        DefaultItem: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
        EmptyArea: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
        Margin: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
        Normal: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
        Scroller: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
        Separator: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
        SubMenu: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
        TearOff: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.MenuItemType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.MenuItemType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.MenuItemType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.MenuItemType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.MenuItemType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.MenuItemType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.MenuItemType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.MenuItemType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.MenuItemType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.MenuItemType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.MenuItemType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.MenuItemType: ...

    class StyleOptionType:
        Type: ClassVar[QStyleOptionMenuItem.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionMenuItem.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionMenuItem.StyleOptionVersion: ...
    DefaultItem: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
    EmptyArea: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
    Exclusive: ClassVar[QStyleOptionMenuItem.CheckType] = ...
    Margin: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
    NonExclusive: ClassVar[QStyleOptionMenuItem.CheckType] = ...
    Normal: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
    NotCheckable: ClassVar[QStyleOptionMenuItem.CheckType] = ...
    Scroller: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
    Separator: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
    SubMenu: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
    TearOff: ClassVar[QStyleOptionMenuItem.MenuItemType] = ...
    Type: ClassVar[QStyleOptionMenuItem.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionMenuItem.StyleOptionVersion] = ...
    checkType: Any
    checked: Any
    font: Any
    icon: Any
    maxIconWidth: Any
    menuHasCheckableItems: Any
    menuItemType: Any
    menuRect: Any
    tabWidth: Any
    text: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionMenuItem) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionProgressBar(QStyleOption):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionProgressBar.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionProgressBar.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionProgressBar.StyleOptionVersion: ...
    Type: ClassVar[QStyleOptionProgressBar.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionProgressBar.StyleOptionVersion] = ...
    bottomToTop: Any
    invertedAppearance: Any
    maximum: Any
    minimum: Any
    orientation: Any
    progress: Any
    text: Any
    textAlignment: Any
    textVisible: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionProgressBar) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionRubberBand(QStyleOption):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionRubberBand.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionRubberBand.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionRubberBand.StyleOptionVersion: ...
    Type: ClassVar[QStyleOptionRubberBand.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionRubberBand.StyleOptionVersion] = ...
    opaque: Any
    shape: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionRubberBand) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionSizeGrip(QStyleOptionComplex):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionSizeGrip.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionSizeGrip.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionSizeGrip.StyleOptionVersion: ...
    Type: ClassVar[QStyleOptionSizeGrip.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionSizeGrip.StyleOptionVersion] = ...
    corner: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionSizeGrip) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionSlider(QStyleOptionComplex):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionSlider.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionSlider.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionSlider.StyleOptionVersion: ...
    Type: ClassVar[QStyleOptionSlider.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionSlider.StyleOptionVersion] = ...
    dialWrapping: Any
    maximum: Any
    minimum: Any
    notchTarget: Any
    orientation: Any
    pageStep: Any
    singleStep: Any
    sliderPosition: Any
    sliderValue: Any
    tickInterval: Any
    tickPosition: Any
    upsideDown: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionSlider) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionSpinBox(QStyleOptionComplex):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionSpinBox.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionSpinBox.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionSpinBox.StyleOptionVersion: ...
    Type: ClassVar[QStyleOptionSpinBox.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionSpinBox.StyleOptionVersion] = ...
    buttonSymbols: Any
    frame: Any
    stepEnabled: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionSpinBox) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionTab(QStyleOption):
    class CornerWidget:
        LeftCornerWidget: ClassVar[QStyleOptionTab.CornerWidget] = ...
        NoCornerWidgets: ClassVar[QStyleOptionTab.CornerWidget] = ...
        RightCornerWidget: ClassVar[QStyleOptionTab.CornerWidget] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionTab.CornerWidgets: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyleOptionTab.CornerWidget: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionTab.CornerWidgets: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionTab.CornerWidgets: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionTab.CornerWidgets: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionTab.CornerWidgets: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionTab.CornerWidgets: ...

    class CornerWidgets:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionTab.CornerWidgets: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyleOptionTab.CornerWidgets: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionTab.CornerWidgets: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionTab.CornerWidgets: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionTab.CornerWidgets: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionTab.CornerWidgets: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionTab.CornerWidgets: ...

    class SelectedPosition:
        NextIsSelected: ClassVar[QStyleOptionTab.SelectedPosition] = ...
        NotAdjacent: ClassVar[QStyleOptionTab.SelectedPosition] = ...
        PreviousIsSelected: ClassVar[QStyleOptionTab.SelectedPosition] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionTab.SelectedPosition: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionTab.SelectedPosition: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionTab.SelectedPosition: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionTab.SelectedPosition: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionTab.SelectedPosition: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionTab.SelectedPosition: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionTab.SelectedPosition: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionTab.SelectedPosition: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionTab.SelectedPosition: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionTab.SelectedPosition: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionTab.SelectedPosition: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionTab.SelectedPosition: ...

    class StyleOptionType:
        Type: ClassVar[QStyleOptionTab.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionTab.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionTab.StyleOptionVersion: ...

    class TabFeature:
        HasFrame: ClassVar[QStyleOptionTab.TabFeature] = ...
        None_: ClassVar[QStyleOptionTab.TabFeature] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyleOptionTab.TabFeature: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabFeatures: ...

    class TabFeatures:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyleOptionTab.TabFeatures: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabFeatures: ...

    class TabPosition:
        Beginning: ClassVar[QStyleOptionTab.TabPosition] = ...
        End: ClassVar[QStyleOptionTab.TabPosition] = ...
        Middle: ClassVar[QStyleOptionTab.TabPosition] = ...
        OnlyOneTab: ClassVar[QStyleOptionTab.TabPosition] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabPosition: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabPosition: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabPosition: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabPosition: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabPosition: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabPosition: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabPosition: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabPosition: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabPosition: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabPosition: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabPosition: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionTab.TabPosition: ...
    Beginning: ClassVar[QStyleOptionTab.TabPosition] = ...
    End: ClassVar[QStyleOptionTab.TabPosition] = ...
    HasFrame: ClassVar[QStyleOptionTab.TabFeature] = ...
    LeftCornerWidget: ClassVar[QStyleOptionTab.CornerWidget] = ...
    Middle: ClassVar[QStyleOptionTab.TabPosition] = ...
    NextIsSelected: ClassVar[QStyleOptionTab.SelectedPosition] = ...
    NoCornerWidgets: ClassVar[QStyleOptionTab.CornerWidget] = ...
    None_: ClassVar[QStyleOptionTab.TabFeature] = ...
    NotAdjacent: ClassVar[QStyleOptionTab.SelectedPosition] = ...
    OnlyOneTab: ClassVar[QStyleOptionTab.TabPosition] = ...
    PreviousIsSelected: ClassVar[QStyleOptionTab.SelectedPosition] = ...
    RightCornerWidget: ClassVar[QStyleOptionTab.CornerWidget] = ...
    Type: ClassVar[QStyleOptionTab.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionTab.StyleOptionVersion] = ...
    cornerWidgets: Any
    documentMode: Any
    features: Any
    icon: Any
    iconSize: Any
    leftButtonSize: Any
    position: Any
    rightButtonSize: Any
    row: Any
    selectedPosition: Any
    shape: Any
    text: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionTab) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionTabBarBase(QStyleOption):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionTabBarBase.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionTabBarBase.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionTabBarBase.StyleOptionVersion: ...
    Type: ClassVar[QStyleOptionTabBarBase.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionTabBarBase.StyleOptionVersion] = ...
    documentMode: Any
    selectedTabRect: Any
    shape: Any
    tabBarRect: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionTabBarBase) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionTabWidgetFrame(QStyleOption):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionTabWidgetFrame.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionTabWidgetFrame.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionTabWidgetFrame.StyleOptionVersion: ...
    Type: ClassVar[QStyleOptionTabWidgetFrame.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionTabWidgetFrame.StyleOptionVersion] = ...
    leftCornerWidgetSize: Any
    lineWidth: Any
    midLineWidth: Any
    rightCornerWidgetSize: Any
    selectedTabRect: Any
    shape: Any
    tabBarRect: Any
    tabBarSize: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionTabWidgetFrame) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionTitleBar(QStyleOptionComplex):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionTitleBar.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionTitleBar.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionTitleBar.StyleOptionVersion: ...
    Type: ClassVar[QStyleOptionTitleBar.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionTitleBar.StyleOptionVersion] = ...
    icon: Any
    text: Any
    titleBarFlags: Any
    titleBarState: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionTitleBar) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionToolBar(QStyleOption):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionToolBar.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionToolBar.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.StyleOptionVersion: ...

    class ToolBarFeature:
        Movable: ClassVar[QStyleOptionToolBar.ToolBarFeature] = ...
        None_: ClassVar[QStyleOptionToolBar.ToolBarFeature] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyleOptionToolBar.ToolBarFeature: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarFeatures: ...

    class ToolBarFeatures:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyleOptionToolBar.ToolBarFeatures: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarFeatures: ...

    class ToolBarPosition:
        Beginning: ClassVar[QStyleOptionToolBar.ToolBarPosition] = ...
        End: ClassVar[QStyleOptionToolBar.ToolBarPosition] = ...
        Middle: ClassVar[QStyleOptionToolBar.ToolBarPosition] = ...
        OnlyOne: ClassVar[QStyleOptionToolBar.ToolBarPosition] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarPosition: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarPosition: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarPosition: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarPosition: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarPosition: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarPosition: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarPosition: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarPosition: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarPosition: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarPosition: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarPosition: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionToolBar.ToolBarPosition: ...
    Beginning: ClassVar[QStyleOptionToolBar.ToolBarPosition] = ...
    End: ClassVar[QStyleOptionToolBar.ToolBarPosition] = ...
    Middle: ClassVar[QStyleOptionToolBar.ToolBarPosition] = ...
    Movable: ClassVar[QStyleOptionToolBar.ToolBarFeature] = ...
    None_: ClassVar[QStyleOptionToolBar.ToolBarFeature] = ...
    OnlyOne: ClassVar[QStyleOptionToolBar.ToolBarPosition] = ...
    Type: ClassVar[QStyleOptionToolBar.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionToolBar.StyleOptionVersion] = ...
    features: Any
    lineWidth: Any
    midLineWidth: Any
    positionOfLine: Any
    positionWithinLine: Any
    toolBarArea: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionToolBar) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionToolBox(QStyleOption):
    class SelectedPosition:
        NextIsSelected: ClassVar[QStyleOptionToolBox.SelectedPosition] = ...
        NotAdjacent: ClassVar[QStyleOptionToolBox.SelectedPosition] = ...
        PreviousIsSelected: ClassVar[QStyleOptionToolBox.SelectedPosition] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.SelectedPosition: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.SelectedPosition: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.SelectedPosition: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.SelectedPosition: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.SelectedPosition: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.SelectedPosition: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.SelectedPosition: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.SelectedPosition: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.SelectedPosition: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.SelectedPosition: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.SelectedPosition: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.SelectedPosition: ...

    class StyleOptionType:
        Type: ClassVar[QStyleOptionToolBox.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionToolBox.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.StyleOptionVersion: ...

    class TabPosition:
        Beginning: ClassVar[QStyleOptionToolBox.TabPosition] = ...
        End: ClassVar[QStyleOptionToolBox.TabPosition] = ...
        Middle: ClassVar[QStyleOptionToolBox.TabPosition] = ...
        OnlyOneTab: ClassVar[QStyleOptionToolBox.TabPosition] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.TabPosition: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.TabPosition: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.TabPosition: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.TabPosition: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.TabPosition: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.TabPosition: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.TabPosition: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.TabPosition: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.TabPosition: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.TabPosition: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.TabPosition: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionToolBox.TabPosition: ...
    Beginning: ClassVar[QStyleOptionToolBox.TabPosition] = ...
    End: ClassVar[QStyleOptionToolBox.TabPosition] = ...
    Middle: ClassVar[QStyleOptionToolBox.TabPosition] = ...
    NextIsSelected: ClassVar[QStyleOptionToolBox.SelectedPosition] = ...
    NotAdjacent: ClassVar[QStyleOptionToolBox.SelectedPosition] = ...
    OnlyOneTab: ClassVar[QStyleOptionToolBox.TabPosition] = ...
    PreviousIsSelected: ClassVar[QStyleOptionToolBox.SelectedPosition] = ...
    Type: ClassVar[QStyleOptionToolBox.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionToolBox.StyleOptionVersion] = ...
    icon: Any
    position: Any
    selectedPosition: Any
    text: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionToolBox) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionToolButton(QStyleOptionComplex):
    class StyleOptionType:
        Type: ClassVar[QStyleOptionToolButton.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionToolButton.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.StyleOptionVersion: ...

    class ToolButtonFeature:
        Arrow: ClassVar[QStyleOptionToolButton.ToolButtonFeature] = ...
        HasMenu: ClassVar[QStyleOptionToolButton.ToolButtonFeature] = ...
        Menu: ClassVar[QStyleOptionToolButton.ToolButtonFeature] = ...
        MenuButtonPopup: ClassVar[QStyleOptionToolButton.ToolButtonFeature] = ...
        None_: ClassVar[QStyleOptionToolButton.ToolButtonFeature] = ...
        PopupDelay: ClassVar[QStyleOptionToolButton.ToolButtonFeature] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.ToolButtonFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyleOptionToolButton.ToolButtonFeature: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.ToolButtonFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.ToolButtonFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.ToolButtonFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.ToolButtonFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.ToolButtonFeatures: ...

    class ToolButtonFeatures:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.ToolButtonFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyleOptionToolButton.ToolButtonFeatures: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.ToolButtonFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.ToolButtonFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.ToolButtonFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.ToolButtonFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionToolButton.ToolButtonFeatures: ...
    Arrow: ClassVar[QStyleOptionToolButton.ToolButtonFeature] = ...
    HasMenu: ClassVar[QStyleOptionToolButton.ToolButtonFeature] = ...
    Menu: ClassVar[QStyleOptionToolButton.ToolButtonFeature] = ...
    MenuButtonPopup: ClassVar[QStyleOptionToolButton.ToolButtonFeature] = ...
    None_: ClassVar[QStyleOptionToolButton.ToolButtonFeature] = ...
    PopupDelay: ClassVar[QStyleOptionToolButton.ToolButtonFeature] = ...
    Type: ClassVar[QStyleOptionToolButton.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionToolButton.StyleOptionVersion] = ...
    arrowType: Any
    features: Any
    font: Any
    icon: Any
    iconSize: Any
    pos: Any
    text: Any
    toolButtonStyle: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionToolButton) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...

class QStyleOptionViewItem(QStyleOption):
    class Position:
        Bottom: ClassVar[QStyleOptionViewItem.Position] = ...
        Left: ClassVar[QStyleOptionViewItem.Position] = ...
        Right: ClassVar[QStyleOptionViewItem.Position] = ...
        Top: ClassVar[QStyleOptionViewItem.Position] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.Position: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.Position: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.Position: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.Position: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.Position: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.Position: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.Position: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.Position: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.Position: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.Position: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.Position: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.Position: ...

    class StyleOptionType:
        Type: ClassVar[QStyleOptionViewItem.StyleOptionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionType: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionType: ...

    class StyleOptionVersion:
        Version: ClassVar[QStyleOptionViewItem.StyleOptionVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.StyleOptionVersion: ...

    class ViewItemFeature:
        Alternate: ClassVar[QStyleOptionViewItem.ViewItemFeature] = ...
        HasCheckIndicator: ClassVar[QStyleOptionViewItem.ViewItemFeature] = ...
        HasDecoration: ClassVar[QStyleOptionViewItem.ViewItemFeature] = ...
        HasDisplay: ClassVar[QStyleOptionViewItem.ViewItemFeature] = ...
        None_: ClassVar[QStyleOptionViewItem.ViewItemFeature] = ...
        WrapText: ClassVar[QStyleOptionViewItem.ViewItemFeature] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyleOptionViewItem.ViewItemFeature: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemFeatures: ...

    class ViewItemFeatures:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QStyleOptionViewItem.ViewItemFeatures: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemFeatures: ...

    class ViewItemPosition:
        Beginning: ClassVar[QStyleOptionViewItem.ViewItemPosition] = ...
        End: ClassVar[QStyleOptionViewItem.ViewItemPosition] = ...
        Invalid: ClassVar[QStyleOptionViewItem.ViewItemPosition] = ...
        Middle: ClassVar[QStyleOptionViewItem.ViewItemPosition] = ...
        OnlyOne: ClassVar[QStyleOptionViewItem.ViewItemPosition] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemPosition: ...
        def __and__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemPosition: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemPosition: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemPosition: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemPosition: ...
        def __rand__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemPosition: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemPosition: ...
        def __ror__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemPosition: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemPosition: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemPosition: ...
        def __sub__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemPosition: ...
        def __xor__(self, other: typing.SupportsInt) -> QStyleOptionViewItem.ViewItemPosition: ...
    Alternate: ClassVar[QStyleOptionViewItem.ViewItemFeature] = ...
    Beginning: ClassVar[QStyleOptionViewItem.ViewItemPosition] = ...
    Bottom: ClassVar[QStyleOptionViewItem.Position] = ...
    End: ClassVar[QStyleOptionViewItem.ViewItemPosition] = ...
    HasCheckIndicator: ClassVar[QStyleOptionViewItem.ViewItemFeature] = ...
    HasDecoration: ClassVar[QStyleOptionViewItem.ViewItemFeature] = ...
    HasDisplay: ClassVar[QStyleOptionViewItem.ViewItemFeature] = ...
    Invalid: ClassVar[QStyleOptionViewItem.ViewItemPosition] = ...
    Left: ClassVar[QStyleOptionViewItem.Position] = ...
    Middle: ClassVar[QStyleOptionViewItem.ViewItemPosition] = ...
    None_: ClassVar[QStyleOptionViewItem.ViewItemFeature] = ...
    OnlyOne: ClassVar[QStyleOptionViewItem.ViewItemPosition] = ...
    Right: ClassVar[QStyleOptionViewItem.Position] = ...
    Top: ClassVar[QStyleOptionViewItem.Position] = ...
    Type: ClassVar[QStyleOptionViewItem.StyleOptionType] = ...
    Version: ClassVar[QStyleOptionViewItem.StyleOptionVersion] = ...
    WrapText: ClassVar[QStyleOptionViewItem.ViewItemFeature] = ...
    backgroundBrush: Any
    checkState: Any
    decorationAlignment: Any
    decorationPosition: Any
    decorationSize: Any
    displayAlignment: Any
    features: Any
    font: Any
    icon: Any
    index: Any
    locale: Any
    showDecorationSelected: Any
    text: Any
    textElideMode: Any
    viewItemPosition: Any
    widget: Any
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStyleOptionViewItem) -> None: ...
    @overload
    def __init__(self, version: int) -> None: ...
    def __copy__(self) -> None: ...

class QStylePainter(PySide2.QtGui.QPainter):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, pd: PySide2.QtGui.QPaintDevice, w: QWidget) -> None: ...
    @overload
    def __init__(self, w: QWidget) -> None: ...
    @overload
    def begin(self, arg__1: PySide2.QtGui.QPaintDevice) -> bool: ...
    @overload
    def begin(self, pd: PySide2.QtGui.QPaintDevice, w: QWidget) -> bool: ...
    @overload
    def begin(self, w: QWidget) -> bool: ...
    def drawComplexControl(self, cc: QStyle.ComplexControl, opt: QStyleOptionComplex) -> None: ...
    def drawControl(self, ce: QStyle.ControlElement, opt: QStyleOption) -> None: ...
    def drawItemPixmap(self, r: PySide2.QtCore.QRect, flags: typing.SupportsInt, pixmap: PySide2.QtGui.QPixmap) -> None: ...
    def drawItemText(self, r: PySide2.QtCore.QRect, flags: typing.SupportsInt, pal: PySide2.QtGui.QPalette, enabled: bool, text: str, textRole: PySide2.QtGui.QPalette.ColorRole = ...) -> None: ...
    def drawPrimitive(self, pe: QStyle.PrimitiveElement, opt: QStyleOption) -> None: ...
    def style(self) -> QStyle: ...

class QStyledItemDelegate(QAbstractItemDelegate):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., closeEditor: typing.Callable = ..., commitData: typing.Callable = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., sizeHintChanged: typing.Callable = ...) -> None: ...
    def createEditor(self, parent: typing.Optional[QWidget], option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> QWidget: ...
    def displayText(self, value: typing.Any, locale: PySide2.QtCore.QLocale) -> str: ...
    def editorEvent(self, event: PySide2.QtCore.QEvent, model: PySide2.QtCore.QAbstractItemModel, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def eventFilter(self, object: PySide2.QtCore.QObject, event: PySide2.QtCore.QEvent) -> bool: ...
    def initStyleOption(self, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> None: ...
    def itemEditorFactory(self) -> QItemEditorFactory: ...
    def paint(self, painter: PySide2.QtGui.QPainter, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> None: ...
    def setEditorData(self, editor: QWidget, index: PySide2.QtCore.QModelIndex) -> None: ...
    def setItemEditorFactory(self, factory: QItemEditorFactory) -> None: ...
    def setModelData(self, editor: QWidget, model: PySide2.QtCore.QAbstractItemModel, index: PySide2.QtCore.QModelIndex) -> None: ...
    def sizeHint(self, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QSize: ...
    def updateEditorGeometry(self, editor: QWidget, option: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> None: ...

class QSwipeGesture(QGesture):
    class SwipeDirection:
        Down: ClassVar[QSwipeGesture.SwipeDirection] = ...
        Left: ClassVar[QSwipeGesture.SwipeDirection] = ...
        NoDirection: ClassVar[QSwipeGesture.SwipeDirection] = ...
        Right: ClassVar[QSwipeGesture.SwipeDirection] = ...
        Up: ClassVar[QSwipeGesture.SwipeDirection] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSwipeGesture.SwipeDirection: ...
        def __and__(self, other: typing.SupportsInt) -> QSwipeGesture.SwipeDirection: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSwipeGesture.SwipeDirection: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSwipeGesture.SwipeDirection: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSwipeGesture.SwipeDirection: ...
        def __rand__(self, other: typing.SupportsInt) -> QSwipeGesture.SwipeDirection: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSwipeGesture.SwipeDirection: ...
        def __ror__(self, other: typing.SupportsInt) -> QSwipeGesture.SwipeDirection: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSwipeGesture.SwipeDirection: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSwipeGesture.SwipeDirection: ...
        def __sub__(self, other: typing.SupportsInt) -> QSwipeGesture.SwipeDirection: ...
        def __xor__(self, other: typing.SupportsInt) -> QSwipeGesture.SwipeDirection: ...
    Down: ClassVar[QSwipeGesture.SwipeDirection] = ...
    Left: ClassVar[QSwipeGesture.SwipeDirection] = ...
    NoDirection: ClassVar[QSwipeGesture.SwipeDirection] = ...
    Right: ClassVar[QSwipeGesture.SwipeDirection] = ...
    Up: ClassVar[QSwipeGesture.SwipeDirection] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., gestureCancelPolicy: typing.Any = ..., gestureType: PySide2.QtCore.Qt.GestureType = ..., hasHotSpot: bool = ..., horizontalDirection: QSwipeGesture.SwipeDirection = ..., hotSpot: PySide2.QtCore.QPointF = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., state: PySide2.QtCore.Qt.GestureState = ..., swipeAngle: float = ..., velocity: float = ..., verticalDirection: QSwipeGesture.SwipeDirection = ...) -> None: ...
    def horizontalDirection(self) -> QSwipeGesture.SwipeDirection: ...
    def setSwipeAngle(self, value: float) -> None: ...
    def swipeAngle(self) -> float: ...
    def verticalDirection(self) -> QSwipeGesture.SwipeDirection: ...

class QSystemTrayIcon(PySide2.QtCore.QObject):
    class ActivationReason:
        Context: ClassVar[QSystemTrayIcon.ActivationReason] = ...
        DoubleClick: ClassVar[QSystemTrayIcon.ActivationReason] = ...
        MiddleClick: ClassVar[QSystemTrayIcon.ActivationReason] = ...
        Trigger: ClassVar[QSystemTrayIcon.ActivationReason] = ...
        Unknown: ClassVar[QSystemTrayIcon.ActivationReason] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSystemTrayIcon.ActivationReason: ...
        def __and__(self, other: typing.SupportsInt) -> QSystemTrayIcon.ActivationReason: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSystemTrayIcon.ActivationReason: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSystemTrayIcon.ActivationReason: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSystemTrayIcon.ActivationReason: ...
        def __rand__(self, other: typing.SupportsInt) -> QSystemTrayIcon.ActivationReason: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSystemTrayIcon.ActivationReason: ...
        def __ror__(self, other: typing.SupportsInt) -> QSystemTrayIcon.ActivationReason: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSystemTrayIcon.ActivationReason: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSystemTrayIcon.ActivationReason: ...
        def __sub__(self, other: typing.SupportsInt) -> QSystemTrayIcon.ActivationReason: ...
        def __xor__(self, other: typing.SupportsInt) -> QSystemTrayIcon.ActivationReason: ...

    class MessageIcon:
        Critical: ClassVar[QSystemTrayIcon.MessageIcon] = ...
        Information: ClassVar[QSystemTrayIcon.MessageIcon] = ...
        NoIcon: ClassVar[QSystemTrayIcon.MessageIcon] = ...
        Warning: ClassVar[QSystemTrayIcon.MessageIcon] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSystemTrayIcon.MessageIcon: ...
        def __and__(self, other: typing.SupportsInt) -> QSystemTrayIcon.MessageIcon: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSystemTrayIcon.MessageIcon: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSystemTrayIcon.MessageIcon: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSystemTrayIcon.MessageIcon: ...
        def __rand__(self, other: typing.SupportsInt) -> QSystemTrayIcon.MessageIcon: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSystemTrayIcon.MessageIcon: ...
        def __ror__(self, other: typing.SupportsInt) -> QSystemTrayIcon.MessageIcon: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSystemTrayIcon.MessageIcon: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSystemTrayIcon.MessageIcon: ...
        def __sub__(self, other: typing.SupportsInt) -> QSystemTrayIcon.MessageIcon: ...
        def __xor__(self, other: typing.SupportsInt) -> QSystemTrayIcon.MessageIcon: ...
    Context: ClassVar[QSystemTrayIcon.ActivationReason] = ...
    Critical: ClassVar[QSystemTrayIcon.MessageIcon] = ...
    DoubleClick: ClassVar[QSystemTrayIcon.ActivationReason] = ...
    Information: ClassVar[QSystemTrayIcon.MessageIcon] = ...
    MiddleClick: ClassVar[QSystemTrayIcon.ActivationReason] = ...
    NoIcon: ClassVar[QSystemTrayIcon.MessageIcon] = ...
    Trigger: ClassVar[QSystemTrayIcon.ActivationReason] = ...
    Unknown: ClassVar[QSystemTrayIcon.ActivationReason] = ...
    Warning: ClassVar[QSystemTrayIcon.MessageIcon] = ...
    activated: ClassVar[PySide2.QtCore.Signal] = ...
    messageClicked: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, icon: PySide2.QtGui.QIcon, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., activated: typing.Callable = ..., destroyed: typing.Callable = ..., messageClicked: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., toolTip: str = ..., visible: bool = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., activated: typing.Callable = ..., destroyed: typing.Callable = ..., icon: PySide2.QtGui.QIcon = ..., messageClicked: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., toolTip: str = ..., visible: bool = ...) -> None: ...
    def contextMenu(self) -> QMenu: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def geometry(self) -> PySide2.QtCore.QRect: ...
    def hide(self) -> None: ...
    def icon(self) -> PySide2.QtGui.QIcon: ...
    @classmethod
    def isSystemTrayAvailable(cls) -> bool: ...
    def isVisible(self) -> bool: ...
    def setContextMenu(self, menu: QMenu) -> None: ...
    def setIcon(self, icon: PySide2.QtGui.QIcon) -> None: ...
    def setToolTip(self, tip: str) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def show(self) -> None: ...
    @overload
    def showMessage(self, title: str, msg: str, icon: PySide2.QtGui.QIcon, msecs: int = ...) -> None: ...
    @overload
    def showMessage(self, title: str, msg: str, icon: QSystemTrayIcon.MessageIcon = ..., msecs: int = ...) -> None: ...
    @classmethod
    def supportsMessages(cls) -> bool: ...
    def toolTip(self) -> str: ...

class QTabBar(QWidget):
    class ButtonPosition:
        LeftSide: ClassVar[QTabBar.ButtonPosition] = ...
        RightSide: ClassVar[QTabBar.ButtonPosition] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTabBar.ButtonPosition: ...
        def __and__(self, other: typing.SupportsInt) -> QTabBar.ButtonPosition: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTabBar.ButtonPosition: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTabBar.ButtonPosition: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTabBar.ButtonPosition: ...
        def __rand__(self, other: typing.SupportsInt) -> QTabBar.ButtonPosition: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTabBar.ButtonPosition: ...
        def __ror__(self, other: typing.SupportsInt) -> QTabBar.ButtonPosition: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTabBar.ButtonPosition: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTabBar.ButtonPosition: ...
        def __sub__(self, other: typing.SupportsInt) -> QTabBar.ButtonPosition: ...
        def __xor__(self, other: typing.SupportsInt) -> QTabBar.ButtonPosition: ...

    class SelectionBehavior:
        SelectLeftTab: ClassVar[QTabBar.SelectionBehavior] = ...
        SelectPreviousTab: ClassVar[QTabBar.SelectionBehavior] = ...
        SelectRightTab: ClassVar[QTabBar.SelectionBehavior] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTabBar.SelectionBehavior: ...
        def __and__(self, other: typing.SupportsInt) -> QTabBar.SelectionBehavior: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTabBar.SelectionBehavior: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTabBar.SelectionBehavior: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTabBar.SelectionBehavior: ...
        def __rand__(self, other: typing.SupportsInt) -> QTabBar.SelectionBehavior: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTabBar.SelectionBehavior: ...
        def __ror__(self, other: typing.SupportsInt) -> QTabBar.SelectionBehavior: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTabBar.SelectionBehavior: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTabBar.SelectionBehavior: ...
        def __sub__(self, other: typing.SupportsInt) -> QTabBar.SelectionBehavior: ...
        def __xor__(self, other: typing.SupportsInt) -> QTabBar.SelectionBehavior: ...

    class Shape:
        RoundedEast: ClassVar[QTabBar.Shape] = ...
        RoundedNorth: ClassVar[QTabBar.Shape] = ...
        RoundedSouth: ClassVar[QTabBar.Shape] = ...
        RoundedWest: ClassVar[QTabBar.Shape] = ...
        TriangularEast: ClassVar[QTabBar.Shape] = ...
        TriangularNorth: ClassVar[QTabBar.Shape] = ...
        TriangularSouth: ClassVar[QTabBar.Shape] = ...
        TriangularWest: ClassVar[QTabBar.Shape] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTabBar.Shape: ...
        def __and__(self, other: typing.SupportsInt) -> QTabBar.Shape: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTabBar.Shape: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTabBar.Shape: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTabBar.Shape: ...
        def __rand__(self, other: typing.SupportsInt) -> QTabBar.Shape: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTabBar.Shape: ...
        def __ror__(self, other: typing.SupportsInt) -> QTabBar.Shape: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTabBar.Shape: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTabBar.Shape: ...
        def __sub__(self, other: typing.SupportsInt) -> QTabBar.Shape: ...
        def __xor__(self, other: typing.SupportsInt) -> QTabBar.Shape: ...
    LeftSide: ClassVar[QTabBar.ButtonPosition] = ...
    RightSide: ClassVar[QTabBar.ButtonPosition] = ...
    RoundedEast: ClassVar[QTabBar.Shape] = ...
    RoundedNorth: ClassVar[QTabBar.Shape] = ...
    RoundedSouth: ClassVar[QTabBar.Shape] = ...
    RoundedWest: ClassVar[QTabBar.Shape] = ...
    SelectLeftTab: ClassVar[QTabBar.SelectionBehavior] = ...
    SelectPreviousTab: ClassVar[QTabBar.SelectionBehavior] = ...
    SelectRightTab: ClassVar[QTabBar.SelectionBehavior] = ...
    TriangularEast: ClassVar[QTabBar.Shape] = ...
    TriangularNorth: ClassVar[QTabBar.Shape] = ...
    TriangularSouth: ClassVar[QTabBar.Shape] = ...
    TriangularWest: ClassVar[QTabBar.Shape] = ...
    currentChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    tabBarClicked: ClassVar[PySide2.QtCore.Signal] = ...
    tabBarDoubleClicked: ClassVar[PySide2.QtCore.Signal] = ...
    tabCloseRequested: ClassVar[PySide2.QtCore.Signal] = ...
    tabMoved: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., autoHide: bool = ..., baseSize: PySide2.QtCore.QSize = ..., changeCurrentOnDrag: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., count: int = ..., currentChanged: typing.Callable = ..., currentIndex: int = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., documentMode: bool = ..., drawBase: bool = ..., elideMode: PySide2.QtCore.Qt.TextElideMode = ..., enabled: bool = ..., expanding: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., iconSize: PySide2.QtCore.QSize = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., movable: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., selectionBehaviorOnRemove: typing.Any = ..., shape: QTabBar.Shape = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabBarClicked: typing.Callable = ..., tabBarDoubleClicked: typing.Callable = ..., tabCloseRequested: typing.Callable = ..., tabMoved: typing.Callable = ..., tabletTracking: bool = ..., tabsClosable: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., usesScrollButtons: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def accessibleTabName(self, index: int) -> str: ...
    @overload
    def addTab(self, icon: PySide2.QtGui.QIcon, text: str) -> int: ...
    @overload
    def addTab(self, text: str) -> int: ...
    def autoHide(self) -> bool: ...
    def changeCurrentOnDrag(self) -> bool: ...
    def changeEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def count(self) -> int: ...
    def currentIndex(self) -> int: ...
    def documentMode(self) -> bool: ...
    def drawBase(self) -> bool: ...
    def elideMode(self) -> PySide2.QtCore.Qt.TextElideMode: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def expanding(self) -> bool: ...
    def hideEvent(self, arg__1: PySide2.QtGui.QHideEvent) -> None: ...
    def iconSize(self) -> PySide2.QtCore.QSize: ...
    def initStyleOption(self, option: QStyleOptionTab, tabIndex: int) -> None: ...
    @overload
    def insertTab(self, index: int, icon: PySide2.QtGui.QIcon, text: str) -> int: ...
    @overload
    def insertTab(self, index: int, text: str) -> int: ...
    def isMovable(self) -> bool: ...
    def isTabEnabled(self, index: int) -> bool: ...
    def isTabVisible(self, index: int) -> bool: ...
    def keyPressEvent(self, arg__1: PySide2.QtGui.QKeyEvent) -> None: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def minimumTabSizeHint(self, index: int) -> PySide2.QtCore.QSize: ...
    def mouseMoveEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def moveTab(self, from_: int, to: int) -> None: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def removeTab(self, index: int) -> None: ...
    def resizeEvent(self, arg__1: PySide2.QtGui.QResizeEvent) -> None: ...
    def selectionBehaviorOnRemove(self) -> QTabBar.SelectionBehavior: ...
    def setAccessibleTabName(self, index: int, name: str) -> None: ...
    def setAutoHide(self, hide: bool) -> None: ...
    def setChangeCurrentOnDrag(self, change: bool) -> None: ...
    def setCurrentIndex(self, index: int) -> None: ...
    def setDocumentMode(self, set: bool) -> None: ...
    def setDrawBase(self, drawTheBase: bool) -> None: ...
    def setElideMode(self, mode: PySide2.QtCore.Qt.TextElideMode) -> None: ...
    def setExpanding(self, enabled: bool) -> None: ...
    def setIconSize(self, size: PySide2.QtCore.QSize) -> None: ...
    def setMovable(self, movable: bool) -> None: ...
    def setSelectionBehaviorOnRemove(self, behavior: QTabBar.SelectionBehavior) -> None: ...
    def setShape(self, shape: QTabBar.Shape) -> None: ...
    def setTabButton(self, index: int, position: QTabBar.ButtonPosition, widget: QWidget) -> None: ...
    def setTabData(self, index: int, data: typing.Any) -> None: ...
    def setTabEnabled(self, index: int, enabled: bool) -> None: ...
    def setTabIcon(self, index: int, icon: PySide2.QtGui.QIcon) -> None: ...
    def setTabText(self, index: int, text: str) -> None: ...
    def setTabTextColor(self, index: int, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setTabToolTip(self, index: int, tip: str) -> None: ...
    def setTabVisible(self, index: int, visible: bool) -> None: ...
    def setTabWhatsThis(self, index: int, text: str) -> None: ...
    def setTabsClosable(self, closable: bool) -> None: ...
    def setUsesScrollButtons(self, useButtons: bool) -> None: ...
    def shape(self) -> QTabBar.Shape: ...
    def showEvent(self, arg__1: PySide2.QtGui.QShowEvent) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def tabAt(self, pos: PySide2.QtCore.QPoint) -> int: ...
    def tabButton(self, index: int, position: QTabBar.ButtonPosition) -> QWidget: ...
    def tabData(self, index: int) -> typing.Any: ...
    def tabIcon(self, index: int) -> PySide2.QtGui.QIcon: ...
    def tabInserted(self, index: int) -> None: ...
    def tabLayoutChange(self) -> None: ...
    def tabRect(self, index: int) -> PySide2.QtCore.QRect: ...
    def tabRemoved(self, index: int) -> None: ...
    def tabSizeHint(self, index: int) -> PySide2.QtCore.QSize: ...
    def tabText(self, index: int) -> str: ...
    def tabTextColor(self, index: int) -> PySide2.QtGui.QColor: ...
    def tabToolTip(self, index: int) -> str: ...
    def tabWhatsThis(self, index: int) -> str: ...
    def tabsClosable(self) -> bool: ...
    def timerEvent(self, event: PySide2.QtCore.QTimerEvent) -> None: ...
    def usesScrollButtons(self) -> bool: ...
    def wheelEvent(self, event: PySide2.QtGui.QWheelEvent) -> None: ...

class QTabWidget(QWidget):
    class TabPosition:
        East: ClassVar[QTabWidget.TabPosition] = ...
        North: ClassVar[QTabWidget.TabPosition] = ...
        South: ClassVar[QTabWidget.TabPosition] = ...
        West: ClassVar[QTabWidget.TabPosition] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTabWidget.TabPosition: ...
        def __and__(self, other: typing.SupportsInt) -> QTabWidget.TabPosition: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTabWidget.TabPosition: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTabWidget.TabPosition: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTabWidget.TabPosition: ...
        def __rand__(self, other: typing.SupportsInt) -> QTabWidget.TabPosition: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTabWidget.TabPosition: ...
        def __ror__(self, other: typing.SupportsInt) -> QTabWidget.TabPosition: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTabWidget.TabPosition: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTabWidget.TabPosition: ...
        def __sub__(self, other: typing.SupportsInt) -> QTabWidget.TabPosition: ...
        def __xor__(self, other: typing.SupportsInt) -> QTabWidget.TabPosition: ...

    class TabShape:
        Rounded: ClassVar[QTabWidget.TabShape] = ...
        Triangular: ClassVar[QTabWidget.TabShape] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTabWidget.TabShape: ...
        def __and__(self, other: typing.SupportsInt) -> QTabWidget.TabShape: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTabWidget.TabShape: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTabWidget.TabShape: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTabWidget.TabShape: ...
        def __rand__(self, other: typing.SupportsInt) -> QTabWidget.TabShape: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTabWidget.TabShape: ...
        def __ror__(self, other: typing.SupportsInt) -> QTabWidget.TabShape: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTabWidget.TabShape: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTabWidget.TabShape: ...
        def __sub__(self, other: typing.SupportsInt) -> QTabWidget.TabShape: ...
        def __xor__(self, other: typing.SupportsInt) -> QTabWidget.TabShape: ...
    East: ClassVar[QTabWidget.TabPosition] = ...
    North: ClassVar[QTabWidget.TabPosition] = ...
    Rounded: ClassVar[QTabWidget.TabShape] = ...
    South: ClassVar[QTabWidget.TabPosition] = ...
    Triangular: ClassVar[QTabWidget.TabShape] = ...
    West: ClassVar[QTabWidget.TabPosition] = ...
    currentChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    tabBarClicked: ClassVar[PySide2.QtCore.Signal] = ...
    tabBarDoubleClicked: ClassVar[PySide2.QtCore.Signal] = ...
    tabCloseRequested: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., count: int = ..., currentChanged: typing.Callable = ..., currentIndex: int = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., documentMode: bool = ..., elideMode: PySide2.QtCore.Qt.TextElideMode = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., iconSize: PySide2.QtCore.QSize = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., movable: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabBarAutoHide: bool = ..., tabBarClicked: typing.Callable = ..., tabBarDoubleClicked: typing.Callable = ..., tabCloseRequested: typing.Callable = ..., tabPosition: QTabWidget.TabPosition = ..., tabShape: QTabWidget.TabShape = ..., tabletTracking: bool = ..., tabsClosable: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., usesScrollButtons: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def addTab(self, widget: QWidget, arg__2: str) -> int: ...
    @overload
    def addTab(self, widget: QWidget, icon: PySide2.QtGui.QIcon, label: str) -> int: ...
    def changeEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def clear(self) -> None: ...
    def cornerWidget(self, corner: PySide2.QtCore.Qt.Corner = ...) -> QWidget: ...
    def count(self) -> int: ...
    def currentIndex(self) -> int: ...
    def currentWidget(self) -> QWidget: ...
    def documentMode(self) -> bool: ...
    def elideMode(self) -> PySide2.QtCore.Qt.TextElideMode: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def hasHeightForWidth(self) -> bool: ...
    def heightForWidth(self, width: int) -> int: ...
    def iconSize(self) -> PySide2.QtCore.QSize: ...
    def indexOf(self, widget: QWidget) -> int: ...
    def initStyleOption(self, option: QStyleOptionTabWidgetFrame) -> None: ...
    @overload
    def insertTab(self, index: int, widget: QWidget, arg__3: str) -> int: ...
    @overload
    def insertTab(self, index: int, widget: QWidget, icon: PySide2.QtGui.QIcon, label: str) -> int: ...
    def isMovable(self) -> bool: ...
    def isTabEnabled(self, index: int) -> bool: ...
    def isTabVisible(self, index: int) -> bool: ...
    def keyPressEvent(self, arg__1: PySide2.QtGui.QKeyEvent) -> None: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def removeTab(self, index: int) -> None: ...
    def resizeEvent(self, arg__1: PySide2.QtGui.QResizeEvent) -> None: ...
    def setCornerWidget(self, w: QWidget, corner: PySide2.QtCore.Qt.Corner = ...) -> None: ...
    def setCurrentIndex(self, index: int) -> None: ...
    def setCurrentWidget(self, widget: QWidget) -> None: ...
    def setDocumentMode(self, set: bool) -> None: ...
    def setElideMode(self, mode: PySide2.QtCore.Qt.TextElideMode) -> None: ...
    def setIconSize(self, size: PySide2.QtCore.QSize) -> None: ...
    def setMovable(self, movable: bool) -> None: ...
    def setTabBar(self, arg__1: QTabBar) -> None: ...
    def setTabBarAutoHide(self, enabled: bool) -> None: ...
    def setTabEnabled(self, index: int, enabled: bool) -> None: ...
    def setTabIcon(self, index: int, icon: PySide2.QtGui.QIcon) -> None: ...
    def setTabPosition(self, position: QTabWidget.TabPosition) -> None: ...
    def setTabShape(self, s: QTabWidget.TabShape) -> None: ...
    def setTabText(self, index: int, text: str) -> None: ...
    def setTabToolTip(self, index: int, tip: str) -> None: ...
    def setTabVisible(self, index: int, visible: bool) -> None: ...
    def setTabWhatsThis(self, index: int, text: str) -> None: ...
    def setTabsClosable(self, closeable: bool) -> None: ...
    def setUsesScrollButtons(self, useButtons: bool) -> None: ...
    def showEvent(self, arg__1: PySide2.QtGui.QShowEvent) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def tabBar(self) -> QTabBar: ...
    def tabBarAutoHide(self) -> bool: ...
    def tabIcon(self, index: int) -> PySide2.QtGui.QIcon: ...
    def tabInserted(self, index: int) -> None: ...
    def tabPosition(self) -> QTabWidget.TabPosition: ...
    def tabRemoved(self, index: int) -> None: ...
    def tabShape(self) -> QTabWidget.TabShape: ...
    def tabText(self, index: int) -> str: ...
    def tabToolTip(self, index: int) -> str: ...
    def tabWhatsThis(self, index: int) -> str: ...
    def tabsClosable(self) -> bool: ...
    def usesScrollButtons(self) -> bool: ...
    def widget(self, index: int) -> QWidget: ...

class QTableView(QAbstractItemView):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., activated: typing.Callable = ..., alternatingRowColors: bool = ..., autoFillBackground: bool = ..., autoScroll: bool = ..., autoScrollMargin: int = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cornerButtonEnabled: bool = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., defaultDropAction: PySide2.QtCore.Qt.DropAction = ..., destroyed: typing.Callable = ..., doubleClicked: typing.Callable = ..., dragDropMode: QTableView.DragDropMode = ..., dragDropOverwriteMode: bool = ..., dragEnabled: bool = ..., editTriggers: QTableView.EditTriggers = ..., enabled: bool = ..., entered: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QTableView.Shadow = ..., frameShape: QTableView.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., gridStyle: PySide2.QtCore.Qt.PenStyle = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., horizontalScrollMode: QTableView.ScrollMode = ..., iconSize: PySide2.QtCore.QSize = ..., iconSizeChanged: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., selectionBehavior: QTableView.SelectionBehavior = ..., selectionMode: QTableView.SelectionMode = ..., showDropIndicator: bool = ..., showGrid: bool = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QTableView.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., sortingEnabled: bool = ..., statusTip: str = ..., styleSheet: str = ..., tabKeyNavigation: bool = ..., tabletTracking: bool = ..., textElideMode: PySide2.QtCore.Qt.TextElideMode = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., verticalScrollMode: QTableView.ScrollMode = ..., viewportEntered: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wordWrap: bool = ..., x: int = ..., y: int = ...) -> None: ...
    def clearSpans(self) -> None: ...
    def columnAt(self, x: int) -> int: ...
    def columnCountChanged(self, oldCount: int, newCount: int) -> None: ...
    def columnMoved(self, column: int, oldIndex: int, newIndex: int) -> None: ...
    def columnResized(self, column: int, oldWidth: int, newWidth: int) -> None: ...
    def columnSpan(self, row: int, column: int) -> int: ...
    def columnViewportPosition(self, column: int) -> int: ...
    def columnWidth(self, column: int) -> int: ...
    def currentChanged(self, current: PySide2.QtCore.QModelIndex, previous: PySide2.QtCore.QModelIndex) -> None: ...
    def doItemsLayout(self) -> None: ...
    def gridStyle(self) -> PySide2.QtCore.Qt.PenStyle: ...
    def hideColumn(self, column: int) -> None: ...
    def hideRow(self, row: int) -> None: ...
    def horizontalHeader(self) -> QHeaderView: ...
    def horizontalOffset(self) -> int: ...
    def horizontalScrollbarAction(self, action: int) -> None: ...
    def indexAt(self, p: PySide2.QtCore.QPoint) -> PySide2.QtCore.QModelIndex: ...
    def isColumnHidden(self, column: int) -> bool: ...
    def isCornerButtonEnabled(self) -> bool: ...
    def isIndexHidden(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def isRowHidden(self, row: int) -> bool: ...
    def isSortingEnabled(self) -> bool: ...
    def moveCursor(self, cursorAction: QAbstractItemView.CursorAction, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> PySide2.QtCore.QModelIndex: ...
    def paintEvent(self, e: PySide2.QtGui.QPaintEvent) -> None: ...
    def resizeColumnToContents(self, column: int) -> None: ...
    def resizeColumnsToContents(self) -> None: ...
    def resizeRowToContents(self, row: int) -> None: ...
    def resizeRowsToContents(self) -> None: ...
    def rowAt(self, y: int) -> int: ...
    def rowCountChanged(self, oldCount: int, newCount: int) -> None: ...
    def rowHeight(self, row: int) -> int: ...
    def rowMoved(self, row: int, oldIndex: int, newIndex: int) -> None: ...
    def rowResized(self, row: int, oldHeight: int, newHeight: int) -> None: ...
    def rowSpan(self, row: int, column: int) -> int: ...
    def rowViewportPosition(self, row: int) -> int: ...
    def scrollContentsBy(self, dx: int, dy: int) -> None: ...
    def scrollTo(self, index: PySide2.QtCore.QModelIndex, hint: QAbstractItemView.ScrollHint = ...) -> None: ...
    def selectColumn(self, column: int) -> None: ...
    def selectRow(self, row: int) -> None: ...
    def selectedIndexes(self) -> typing.List[QModelIndex]: ...
    def selectionChanged(self, selected: PySide2.QtCore.QItemSelection, deselected: PySide2.QtCore.QItemSelection) -> None: ...
    def setColumnHidden(self, column: int, hide: bool) -> None: ...
    def setColumnWidth(self, column: int, width: int) -> None: ...
    def setCornerButtonEnabled(self, enable: bool) -> None: ...
    def setGridStyle(self, style: PySide2.QtCore.Qt.PenStyle) -> None: ...
    def setHorizontalHeader(self, header: QHeaderView) -> None: ...
    def setModel(self, model: typing.Optional[PySide2.QtCore.QAbstractItemModel]) -> None: ...
    def setRootIndex(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    def setRowHeight(self, row: int, height: int) -> None: ...
    def setRowHidden(self, row: int, hide: bool) -> None: ...
    def setSelection(self, rect: PySide2.QtCore.QRect, command: typing.Union[PySide2.QtCore.QItemSelectionModel.SelectionFlags,PySide2.QtCore.QItemSelectionModel.SelectionFlag]) -> None: ...
    def setSelectionModel(self, selectionModel: PySide2.QtCore.QItemSelectionModel) -> None: ...
    def setShowGrid(self, show: bool) -> None: ...
    def setSortingEnabled(self, enable: bool) -> None: ...
    def setSpan(self, row: int, column: int, rowSpan: int, columnSpan: int) -> None: ...
    def setVerticalHeader(self, header: QHeaderView) -> None: ...
    def setWordWrap(self, on: bool) -> None: ...
    def showColumn(self, column: int) -> None: ...
    def showGrid(self) -> bool: ...
    def showRow(self, row: int) -> None: ...
    def sizeHintForColumn(self, column: int) -> int: ...
    def sizeHintForRow(self, row: int) -> int: ...
    @overload
    def sortByColumn(self, column: int) -> None: ...
    @overload
    def sortByColumn(self, column: int, order: PySide2.QtCore.Qt.SortOrder) -> None: ...
    def timerEvent(self, event: PySide2.QtCore.QTimerEvent) -> None: ...
    def updateGeometries(self) -> None: ...
    def verticalHeader(self) -> QHeaderView: ...
    def verticalOffset(self) -> int: ...
    def verticalScrollbarAction(self, action: int) -> None: ...
    def viewOptions(self) -> QStyleOptionViewItem: ...
    def viewportSizeHint(self) -> PySide2.QtCore.QSize: ...
    def visualRect(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QRect: ...
    def visualRegionForSelection(self, selection: PySide2.QtCore.QItemSelection) -> PySide2.QtGui.QRegion: ...
    def wordWrap(self) -> bool: ...

class QTableWidget(QTableView):
    cellActivated: ClassVar[PySide2.QtCore.Signal] = ...
    cellChanged: ClassVar[PySide2.QtCore.Signal] = ...
    cellClicked: ClassVar[PySide2.QtCore.Signal] = ...
    cellDoubleClicked: ClassVar[PySide2.QtCore.Signal] = ...
    cellEntered: ClassVar[PySide2.QtCore.Signal] = ...
    cellPressed: ClassVar[PySide2.QtCore.Signal] = ...
    currentCellChanged: ClassVar[PySide2.QtCore.Signal] = ...
    currentItemChanged: ClassVar[PySide2.QtCore.Signal] = ...
    itemActivated: ClassVar[PySide2.QtCore.Signal] = ...
    itemChanged: ClassVar[PySide2.QtCore.Signal] = ...
    itemClicked: ClassVar[PySide2.QtCore.Signal] = ...
    itemDoubleClicked: ClassVar[PySide2.QtCore.Signal] = ...
    itemEntered: ClassVar[PySide2.QtCore.Signal] = ...
    itemPressed: ClassVar[PySide2.QtCore.Signal] = ...
    itemSelectionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., activated: typing.Callable = ..., alternatingRowColors: bool = ..., autoFillBackground: bool = ..., autoScroll: bool = ..., autoScrollMargin: int = ..., baseSize: PySide2.QtCore.QSize = ..., cellActivated: typing.Callable = ..., cellChanged: typing.Callable = ..., cellClicked: typing.Callable = ..., cellDoubleClicked: typing.Callable = ..., cellEntered: typing.Callable = ..., cellPressed: typing.Callable = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., columnCount: int = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cornerButtonEnabled: bool = ..., currentCellChanged: typing.Callable = ..., currentItemChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., defaultDropAction: PySide2.QtCore.Qt.DropAction = ..., destroyed: typing.Callable = ..., doubleClicked: typing.Callable = ..., dragDropMode: QTableWidget.DragDropMode = ..., dragDropOverwriteMode: bool = ..., dragEnabled: bool = ..., editTriggers: QTableWidget.EditTriggers = ..., enabled: bool = ..., entered: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QTableWidget.Shadow = ..., frameShape: QTableWidget.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., gridStyle: PySide2.QtCore.Qt.PenStyle = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., horizontalScrollMode: QTableWidget.ScrollMode = ..., iconSize: PySide2.QtCore.QSize = ..., iconSizeChanged: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., itemActivated: typing.Callable = ..., itemChanged: typing.Callable = ..., itemClicked: typing.Callable = ..., itemDoubleClicked: typing.Callable = ..., itemEntered: typing.Callable = ..., itemPressed: typing.Callable = ..., itemSelectionChanged: typing.Callable = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., rowCount: int = ..., selectionBehavior: QTableWidget.SelectionBehavior = ..., selectionMode: QTableWidget.SelectionMode = ..., showDropIndicator: bool = ..., showGrid: bool = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QTableWidget.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., sortingEnabled: bool = ..., statusTip: str = ..., styleSheet: str = ..., tabKeyNavigation: bool = ..., tabletTracking: bool = ..., textElideMode: PySide2.QtCore.Qt.TextElideMode = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., verticalScrollMode: QTableWidget.ScrollMode = ..., viewportEntered: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wordWrap: bool = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, rows: int, columns: int, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., activated: typing.Callable = ..., alternatingRowColors: bool = ..., autoFillBackground: bool = ..., autoScroll: bool = ..., autoScrollMargin: int = ..., baseSize: PySide2.QtCore.QSize = ..., cellActivated: typing.Callable = ..., cellChanged: typing.Callable = ..., cellClicked: typing.Callable = ..., cellDoubleClicked: typing.Callable = ..., cellEntered: typing.Callable = ..., cellPressed: typing.Callable = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., columnCount: int = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cornerButtonEnabled: bool = ..., currentCellChanged: typing.Callable = ..., currentItemChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., defaultDropAction: PySide2.QtCore.Qt.DropAction = ..., destroyed: typing.Callable = ..., doubleClicked: typing.Callable = ..., dragDropMode: QTableWidget.DragDropMode = ..., dragDropOverwriteMode: bool = ..., dragEnabled: bool = ..., editTriggers: QTableWidget.EditTriggers = ..., enabled: bool = ..., entered: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QTableWidget.Shadow = ..., frameShape: QTableWidget.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., gridStyle: PySide2.QtCore.Qt.PenStyle = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., horizontalScrollMode: QTableWidget.ScrollMode = ..., iconSize: PySide2.QtCore.QSize = ..., iconSizeChanged: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., itemActivated: typing.Callable = ..., itemChanged: typing.Callable = ..., itemClicked: typing.Callable = ..., itemDoubleClicked: typing.Callable = ..., itemEntered: typing.Callable = ..., itemPressed: typing.Callable = ..., itemSelectionChanged: typing.Callable = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., rowCount: int = ..., selectionBehavior: QTableWidget.SelectionBehavior = ..., selectionMode: QTableWidget.SelectionMode = ..., showDropIndicator: bool = ..., showGrid: bool = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QTableWidget.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., sortingEnabled: bool = ..., statusTip: str = ..., styleSheet: str = ..., tabKeyNavigation: bool = ..., tabletTracking: bool = ..., textElideMode: PySide2.QtCore.Qt.TextElideMode = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., verticalScrollMode: QTableWidget.ScrollMode = ..., viewportEntered: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wordWrap: bool = ..., x: int = ..., y: int = ...) -> None: ...
    def cellWidget(self, row: int, column: int) -> QWidget: ...
    def clear(self) -> None: ...
    def clearContents(self) -> None: ...
    @overload
    def closePersistentEditor(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    @overload
    def closePersistentEditor(self, item: QTableWidgetItem) -> None: ...
    def column(self, item: QTableWidgetItem) -> int: ...
    def columnCount(self) -> int: ...
    def currentColumn(self) -> int: ...
    def currentItem(self) -> QTableWidgetItem: ...
    def currentRow(self) -> int: ...
    def dropEvent(self, event: PySide2.QtGui.QDropEvent) -> None: ...
    def dropMimeData(self, row: int, column: int, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction) -> bool: ...
    def editItem(self, item: QTableWidgetItem) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def findItems(self, text: str, flags: typing.Union[PySide2.QtCore.Qt.MatchFlags,PySide2.QtCore.Qt.MatchFlag]) -> typing.List[QTableWidgetItem]: ...
    def horizontalHeaderItem(self, column: int) -> QTableWidgetItem: ...
    def indexFromItem(self, item: QTableWidgetItem) -> PySide2.QtCore.QModelIndex: ...
    def insertColumn(self, column: int) -> None: ...
    def insertRow(self, row: int) -> None: ...
    def isItemSelected(self, item: QTableWidgetItem) -> bool: ...
    @overload
    def isPersistentEditorOpen(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    @overload
    def isPersistentEditorOpen(self, item: QTableWidgetItem) -> bool: ...
    def isSortingEnabled(self) -> bool: ...
    def item(self, row: int, column: int) -> QTableWidgetItem: ...
    @overload
    def itemAt(self, p: PySide2.QtCore.QPoint) -> QTableWidgetItem: ...
    @overload
    def itemAt(self, x: int, y: int) -> QTableWidgetItem: ...
    def itemFromIndex(self, index: PySide2.QtCore.QModelIndex) -> QTableWidgetItem: ...
    def itemPrototype(self) -> QTableWidgetItem: ...
    def items(self, data: PySide2.QtCore.QMimeData) -> typing.List[QTableWidgetItem]: ...
    def mimeData(self, items: typing.Sequence[QTableWidgetItem]) -> PySide2.QtCore.QMimeData: ...
    def mimeTypes(self) -> typing.List[str]: ...
    @overload
    def openPersistentEditor(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    @overload
    def openPersistentEditor(self, item: QTableWidgetItem) -> None: ...
    def removeCellWidget(self, row: int, column: int) -> None: ...
    def removeColumn(self, column: int) -> None: ...
    def removeRow(self, row: int) -> None: ...
    def row(self, item: QTableWidgetItem) -> int: ...
    def rowCount(self) -> int: ...
    def scrollToItem(self, item: QTableWidgetItem, hint: QAbstractItemView.ScrollHint = ...) -> None: ...
    def selectedItems(self) -> typing.List[QTableWidgetItem]: ...
    def selectedRanges(self) -> typing.List[QTableWidgetSelectionRange]: ...
    def setCellWidget(self, row: int, column: int, widget: QWidget) -> None: ...
    def setColumnCount(self, columns: int) -> None: ...
    @overload
    def setCurrentCell(self, row: int, column: int) -> None: ...
    @overload
    def setCurrentCell(self, row: int, column: int, command: typing.Union[PySide2.QtCore.QItemSelectionModel.SelectionFlags,PySide2.QtCore.QItemSelectionModel.SelectionFlag]) -> None: ...
    @overload
    def setCurrentItem(self, item: QTableWidgetItem) -> None: ...
    @overload
    def setCurrentItem(self, item: QTableWidgetItem, command: typing.Union[PySide2.QtCore.QItemSelectionModel.SelectionFlags,PySide2.QtCore.QItemSelectionModel.SelectionFlag]) -> None: ...
    def setHorizontalHeaderItem(self, column: int, item: QTableWidgetItem) -> None: ...
    def setHorizontalHeaderLabels(self, labels: typing.Sequence[str]) -> None: ...
    def setItem(self, row: int, column: int, item: QTableWidgetItem) -> None: ...
    def setItemPrototype(self, item: QTableWidgetItem) -> None: ...
    def setItemSelected(self, item: QTableWidgetItem, select: bool) -> None: ...
    def setModel(self, model: typing.Optional[PySide2.QtCore.QAbstractItemModel]) -> None: ...
    def setRangeSelected(self, range: QTableWidgetSelectionRange, select: bool) -> None: ...
    def setRowCount(self, rows: int) -> None: ...
    def setSortingEnabled(self, enable: bool) -> None: ...
    def setVerticalHeaderItem(self, row: int, item: QTableWidgetItem) -> None: ...
    def setVerticalHeaderLabels(self, labels: typing.Sequence[str]) -> None: ...
    def sortItems(self, column: int, order: PySide2.QtCore.Qt.SortOrder = ...) -> None: ...
    def supportedDropActions(self) -> typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction]: ...
    def takeHorizontalHeaderItem(self, column: int) -> QTableWidgetItem: ...
    def takeItem(self, row: int, column: int) -> QTableWidgetItem: ...
    def takeVerticalHeaderItem(self, row: int) -> QTableWidgetItem: ...
    def verticalHeaderItem(self, row: int) -> QTableWidgetItem: ...
    def visualColumn(self, logicalColumn: int) -> int: ...
    def visualItemRect(self, item: QTableWidgetItem) -> PySide2.QtCore.QRect: ...
    def visualRow(self, logicalRow: int) -> int: ...

class QTableWidgetItem(shiboken2.Object):
    class ItemType:
        Type: ClassVar[QTableWidgetItem.ItemType] = ...
        UserType: ClassVar[QTableWidgetItem.ItemType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTableWidgetItem.ItemType: ...
        def __and__(self, other: typing.SupportsInt) -> QTableWidgetItem.ItemType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTableWidgetItem.ItemType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTableWidgetItem.ItemType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTableWidgetItem.ItemType: ...
        def __rand__(self, other: typing.SupportsInt) -> QTableWidgetItem.ItemType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTableWidgetItem.ItemType: ...
        def __ror__(self, other: typing.SupportsInt) -> QTableWidgetItem.ItemType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTableWidgetItem.ItemType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTableWidgetItem.ItemType: ...
        def __sub__(self, other: typing.SupportsInt) -> QTableWidgetItem.ItemType: ...
        def __xor__(self, other: typing.SupportsInt) -> QTableWidgetItem.ItemType: ...
    Type: ClassVar[QTableWidgetItem.ItemType] = ...
    UserType: ClassVar[QTableWidgetItem.ItemType] = ...
    @overload
    def __init__(self, icon: PySide2.QtGui.QIcon, text: str, type: int = ...) -> None: ...
    @overload
    def __init__(self, other: QTableWidgetItem) -> None: ...
    @overload
    def __init__(self, text: str, type: int = ...) -> None: ...
    @overload
    def __init__(self, type: int = ...) -> None: ...
    def background(self) -> PySide2.QtGui.QBrush: ...
    def backgroundColor(self) -> PySide2.QtGui.QColor: ...
    def checkState(self) -> PySide2.QtCore.Qt.CheckState: ...
    def clone(self) -> QTableWidgetItem: ...
    def column(self) -> int: ...
    def data(self, role: PySide2.QtCore.Qt.ItemDataRole) -> typing.Any: ...
    def flags(self) -> typing.Union[PySide2.QtCore.Qt.ItemFlags,PySide2.QtCore.Qt.ItemFlag]: ...
    def font(self) -> PySide2.QtGui.QFont: ...
    def foreground(self) -> PySide2.QtGui.QBrush: ...
    def icon(self) -> PySide2.QtGui.QIcon: ...
    def isSelected(self) -> bool: ...
    def read(self, in_: PySide2.QtCore.QDataStream) -> None: ...
    def row(self) -> int: ...
    def setBackground(self, brush: PySide2.QtGui.QBrush) -> None: ...
    def setBackgroundColor(self, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setCheckState(self, state: PySide2.QtCore.Qt.CheckState) -> None: ...
    def setData(self, role: PySide2.QtCore.Qt.ItemDataRole, value: typing.Any) -> None: ...
    def setFlags(self, flags: typing.Union[PySide2.QtCore.Qt.ItemFlags,PySide2.QtCore.Qt.ItemFlag]) -> None: ...
    def setFont(self, font: PySide2.QtGui.QFont) -> None: ...
    def setForeground(self, brush: PySide2.QtGui.QBrush) -> None: ...
    def setIcon(self, icon: PySide2.QtGui.QIcon) -> None: ...
    def setSelected(self, select: bool) -> None: ...
    def setSizeHint(self, size: PySide2.QtCore.QSize) -> None: ...
    def setStatusTip(self, statusTip: str) -> None: ...
    def setText(self, text: str) -> None: ...
    def setTextAlignment(self, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setTextColor(self, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setToolTip(self, toolTip: str) -> None: ...
    def setWhatsThis(self, whatsThis: str) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def statusTip(self) -> str: ...
    def tableWidget(self) -> QTableWidget: ...
    def text(self) -> str: ...
    def textAlignment(self) -> int: ...
    def textColor(self) -> PySide2.QtGui.QColor: ...
    def toolTip(self) -> str: ...
    def type(self) -> int: ...
    def whatsThis(self) -> str: ...
    def write(self, out: PySide2.QtCore.QDataStream) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, out: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, in_: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QTableWidgetSelectionRange(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QTableWidgetSelectionRange) -> None: ...
    @overload
    def __init__(self, top: int, left: int, bottom: int, right: int) -> None: ...
    def bottomRow(self) -> int: ...
    def columnCount(self) -> int: ...
    def leftColumn(self) -> int: ...
    def rightColumn(self) -> int: ...
    def rowCount(self) -> int: ...
    def topRow(self) -> int: ...
    def __copy__(self) -> None: ...

class QTapAndHoldGesture(QGesture):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., gestureCancelPolicy: typing.Any = ..., gestureType: PySide2.QtCore.Qt.GestureType = ..., hasHotSpot: bool = ..., hotSpot: PySide2.QtCore.QPointF = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., position: PySide2.QtCore.QPointF = ..., state: PySide2.QtCore.Qt.GestureState = ...) -> None: ...
    def position(self) -> PySide2.QtCore.QPointF: ...
    def setPosition(self, pos: PySide2.QtCore.QPointF) -> None: ...
    @classmethod
    def setTimeout(cls, msecs: int) -> None: ...
    @classmethod
    def timeout(cls) -> int: ...

class QTapGesture(QGesture):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., gestureCancelPolicy: typing.Any = ..., gestureType: PySide2.QtCore.Qt.GestureType = ..., hasHotSpot: bool = ..., hotSpot: PySide2.QtCore.QPointF = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., position: PySide2.QtCore.QPointF = ..., state: PySide2.QtCore.Qt.GestureState = ...) -> None: ...
    def position(self) -> PySide2.QtCore.QPointF: ...
    def setPosition(self, pos: PySide2.QtCore.QPointF) -> None: ...

class QTextBrowser(QTextEdit):
    anchorClicked: ClassVar[PySide2.QtCore.Signal] = ...
    backwardAvailable: ClassVar[PySide2.QtCore.Signal] = ...
    forwardAvailable: ClassVar[PySide2.QtCore.Signal] = ...
    highlighted: ClassVar[PySide2.QtCore.Signal] = ...
    historyChanged: ClassVar[PySide2.QtCore.Signal] = ...
    sourceChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., acceptRichText: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., anchorClicked: typing.Callable = ..., autoFillBackground: bool = ..., autoFormatting: QTextBrowser.AutoFormatting = ..., backwardAvailable: typing.Callable = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., copyAvailable: typing.Callable = ..., currentCharFormatChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., cursorPositionChanged: typing.Callable = ..., cursorWidth: int = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., document: typing.Any = ..., documentTitle: str = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., forwardAvailable: typing.Callable = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QTextBrowser.Shadow = ..., frameShape: QTextBrowser.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., highlighted: typing.Callable = ..., historyChanged: typing.Callable = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., html: str = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., lineWrapColumnOrWidth: int = ..., lineWrapMode: QTextBrowser.LineWrapMode = ..., locale: PySide2.QtCore.QLocale = ..., markdown: str = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., openExternalLinks: bool = ..., openLinks: bool = ..., overwriteMode: bool = ..., palette: PySide2.QtGui.QPalette = ..., placeholderText: str = ..., plainText: str = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., redoAvailable: typing.Callable = ..., searchPaths: None = ..., selectionChanged: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QTextBrowser.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., source: PySide2.QtCore.QUrl = ..., sourceChanged: typing.Callable = ..., sourceType: typing.Any = ..., statusTip: str = ..., styleSheet: str = ..., tabChangesFocus: bool = ..., tabStopDistance: float = ..., tabStopWidth: int = ..., tabletTracking: bool = ..., textChanged: typing.Callable = ..., textInteractionFlags: typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag] = ..., toolTip: str = ..., toolTipDuration: int = ..., undoAvailable: typing.Callable = ..., undoRedoEnabled: bool = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def backward(self) -> None: ...
    def backwardHistoryCount(self) -> int: ...
    def clearHistory(self) -> None: ...
    def doSetSource(self, name: PySide2.QtCore.QUrl, type: PySide2.QtGui.QTextDocument.ResourceType = ...) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def focusOutEvent(self, ev: PySide2.QtGui.QFocusEvent) -> None: ...
    def forward(self) -> None: ...
    def forwardHistoryCount(self) -> int: ...
    def historyTitle(self, arg__1: int) -> str: ...
    def historyUrl(self, arg__1: int) -> PySide2.QtCore.QUrl: ...
    def home(self) -> None: ...
    def isBackwardAvailable(self) -> bool: ...
    def isForwardAvailable(self) -> bool: ...
    def keyPressEvent(self, ev: PySide2.QtGui.QKeyEvent) -> None: ...
    def loadResource(self, type: int, name: PySide2.QtCore.QUrl) -> typing.Any: ...
    def mouseMoveEvent(self, ev: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, ev: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, ev: PySide2.QtGui.QMouseEvent) -> None: ...
    def openExternalLinks(self) -> bool: ...
    def openLinks(self) -> bool: ...
    def paintEvent(self, e: PySide2.QtGui.QPaintEvent) -> None: ...
    def reload(self) -> None: ...
    def searchPaths(self) -> typing.List[str]: ...
    def setOpenExternalLinks(self, open: bool) -> None: ...
    def setOpenLinks(self, open: bool) -> None: ...
    def setSearchPaths(self, paths: typing.Sequence[str]) -> None: ...
    @overload
    def setSource(self, name: PySide2.QtCore.QUrl) -> None: ...
    @overload
    def setSource(self, name: PySide2.QtCore.QUrl, type: PySide2.QtGui.QTextDocument.ResourceType) -> None: ...
    def source(self) -> PySide2.QtCore.QUrl: ...
    def sourceType(self) -> PySide2.QtGui.QTextDocument.ResourceType: ...

class QTextEdit(QAbstractScrollArea):
    class AutoFormatting:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTextEdit.AutoFormatting: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTextEdit.AutoFormatting: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextEdit.AutoFormatting: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextEdit.AutoFormatting: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextEdit.AutoFormatting: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextEdit.AutoFormatting: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextEdit.AutoFormatting: ...

    class AutoFormattingFlag:
        AutoAll: ClassVar[QTextEdit.AutoFormattingFlag] = ...
        AutoBulletList: ClassVar[QTextEdit.AutoFormattingFlag] = ...
        AutoNone: ClassVar[QTextEdit.AutoFormattingFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTextEdit.AutoFormatting: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTextEdit.AutoFormattingFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextEdit.AutoFormatting: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextEdit.AutoFormatting: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextEdit.AutoFormatting: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextEdit.AutoFormatting: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextEdit.AutoFormatting: ...

    class ExtraSelection(shiboken2.Object):
        cursor: Any
        format: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, ExtraSelection: QTextEdit.ExtraSelection) -> None: ...
        def __copy__(self) -> None: ...

    class LineWrapMode:
        FixedColumnWidth: ClassVar[QTextEdit.LineWrapMode] = ...
        FixedPixelWidth: ClassVar[QTextEdit.LineWrapMode] = ...
        NoWrap: ClassVar[QTextEdit.LineWrapMode] = ...
        WidgetWidth: ClassVar[QTextEdit.LineWrapMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextEdit.LineWrapMode: ...
        def __and__(self, other: typing.SupportsInt) -> QTextEdit.LineWrapMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextEdit.LineWrapMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextEdit.LineWrapMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextEdit.LineWrapMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextEdit.LineWrapMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextEdit.LineWrapMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextEdit.LineWrapMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextEdit.LineWrapMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextEdit.LineWrapMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextEdit.LineWrapMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextEdit.LineWrapMode: ...
    AutoAll: ClassVar[QTextEdit.AutoFormattingFlag] = ...
    AutoBulletList: ClassVar[QTextEdit.AutoFormattingFlag] = ...
    AutoNone: ClassVar[QTextEdit.AutoFormattingFlag] = ...
    FixedColumnWidth: ClassVar[QTextEdit.LineWrapMode] = ...
    FixedPixelWidth: ClassVar[QTextEdit.LineWrapMode] = ...
    NoWrap: ClassVar[QTextEdit.LineWrapMode] = ...
    WidgetWidth: ClassVar[QTextEdit.LineWrapMode] = ...
    copyAvailable: ClassVar[PySide2.QtCore.Signal] = ...
    currentCharFormatChanged: ClassVar[PySide2.QtCore.Signal] = ...
    cursorPositionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    redoAvailable: ClassVar[PySide2.QtCore.Signal] = ...
    selectionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    textChanged: ClassVar[PySide2.QtCore.Signal] = ...
    undoAvailable: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., acceptRichText: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., autoFormatting: typing.Union[QTextEdit.AutoFormatting,QTextEdit.AutoFormattingFlag] = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., copyAvailable: typing.Callable = ..., currentCharFormatChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., cursorPositionChanged: typing.Callable = ..., cursorWidth: int = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., document: PySide2.QtGui.QTextDocument = ..., documentTitle: str = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QTextEdit.Shadow = ..., frameShape: QTextEdit.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., html: str = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., lineWrapColumnOrWidth: int = ..., lineWrapMode: QTextEdit.LineWrapMode = ..., locale: PySide2.QtCore.QLocale = ..., markdown: str = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., overwriteMode: bool = ..., palette: PySide2.QtGui.QPalette = ..., placeholderText: str = ..., plainText: str = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., redoAvailable: typing.Callable = ..., selectionChanged: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QTextEdit.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabChangesFocus: bool = ..., tabStopDistance: float = ..., tabStopWidth: int = ..., tabletTracking: bool = ..., textChanged: typing.Callable = ..., textInteractionFlags: typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag] = ..., toolTip: str = ..., toolTipDuration: int = ..., undoAvailable: typing.Callable = ..., undoRedoEnabled: bool = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, text: str, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., acceptRichText: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., autoFormatting: typing.Union[QTextEdit.AutoFormatting,QTextEdit.AutoFormattingFlag] = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., copyAvailable: typing.Callable = ..., currentCharFormatChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., cursorPositionChanged: typing.Callable = ..., cursorWidth: int = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., document: PySide2.QtGui.QTextDocument = ..., documentTitle: str = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QTextEdit.Shadow = ..., frameShape: QTextEdit.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., html: str = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., lineWrapColumnOrWidth: int = ..., lineWrapMode: QTextEdit.LineWrapMode = ..., locale: PySide2.QtCore.QLocale = ..., markdown: str = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., overwriteMode: bool = ..., palette: PySide2.QtGui.QPalette = ..., placeholderText: str = ..., plainText: str = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., redoAvailable: typing.Callable = ..., selectionChanged: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QTextEdit.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabChangesFocus: bool = ..., tabStopDistance: float = ..., tabStopWidth: int = ..., tabletTracking: bool = ..., textChanged: typing.Callable = ..., textInteractionFlags: typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag] = ..., toolTip: str = ..., toolTipDuration: int = ..., undoAvailable: typing.Callable = ..., undoRedoEnabled: bool = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def acceptRichText(self) -> bool: ...
    def alignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def anchorAt(self, pos: PySide2.QtCore.QPoint) -> str: ...
    def append(self, text: str) -> None: ...
    def autoFormatting(self) -> typing.Union[QTextEdit.AutoFormatting,QTextEdit.AutoFormattingFlag]: ...
    def canInsertFromMimeData(self, source: PySide2.QtCore.QMimeData) -> bool: ...
    def canPaste(self) -> bool: ...
    def changeEvent(self, e: PySide2.QtCore.QEvent) -> None: ...
    def clear(self) -> None: ...
    def contextMenuEvent(self, e: PySide2.QtGui.QContextMenuEvent) -> None: ...
    def copy(self) -> None: ...
    def createMimeDataFromSelection(self) -> PySide2.QtCore.QMimeData: ...
    @overload
    def createStandardContextMenu(self) -> QMenu: ...
    @overload
    def createStandardContextMenu(self, position: PySide2.QtCore.QPoint) -> QMenu: ...
    def currentCharFormat(self) -> PySide2.QtGui.QTextCharFormat: ...
    def currentFont(self) -> PySide2.QtGui.QFont: ...
    def cursorForPosition(self, pos: PySide2.QtCore.QPoint) -> PySide2.QtGui.QTextCursor: ...
    @overload
    def cursorRect(self) -> PySide2.QtCore.QRect: ...
    @overload
    def cursorRect(self, cursor: PySide2.QtGui.QTextCursor) -> PySide2.QtCore.QRect: ...
    def cursorWidth(self) -> int: ...
    def cut(self) -> None: ...
    def doSetTextCursor(self, cursor: PySide2.QtGui.QTextCursor) -> None: ...
    def document(self) -> PySide2.QtGui.QTextDocument: ...
    def documentTitle(self) -> str: ...
    def dragEnterEvent(self, e: PySide2.QtGui.QDragEnterEvent) -> None: ...
    def dragLeaveEvent(self, e: PySide2.QtGui.QDragLeaveEvent) -> None: ...
    def dragMoveEvent(self, e: PySide2.QtGui.QDragMoveEvent) -> None: ...
    def dropEvent(self, e: PySide2.QtGui.QDropEvent) -> None: ...
    def ensureCursorVisible(self) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def extraSelections(self) -> typing.List[QTextEdit.ExtraSelection]: ...
    @overload
    def find(self, exp: PySide2.QtCore.QRegExp, options: typing.Union[PySide2.QtGui.QTextDocument.FindFlags,PySide2.QtGui.QTextDocument.FindFlag] = ...) -> bool: ...
    @overload
    def find(self, exp: PySide2.QtCore.QRegularExpression, options: typing.Union[PySide2.QtGui.QTextDocument.FindFlags,PySide2.QtGui.QTextDocument.FindFlag] = ...) -> bool: ...
    @overload
    def find(self, exp: str, options: typing.Union[PySide2.QtGui.QTextDocument.FindFlags,PySide2.QtGui.QTextDocument.FindFlag] = ...) -> bool: ...
    def focusInEvent(self, e: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def focusOutEvent(self, e: PySide2.QtGui.QFocusEvent) -> None: ...
    def fontFamily(self) -> str: ...
    def fontItalic(self) -> bool: ...
    def fontPointSize(self) -> float: ...
    def fontUnderline(self) -> bool: ...
    def fontWeight(self) -> int: ...
    def inputMethodEvent(self, arg__1: PySide2.QtGui.QInputMethodEvent) -> None: ...
    @overload
    def inputMethodQuery(self, property: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    @overload
    def inputMethodQuery(self, query: PySide2.QtCore.Qt.InputMethodQuery, argument: typing.Any) -> typing.Any: ...
    def insertFromMimeData(self, source: PySide2.QtCore.QMimeData) -> None: ...
    def insertHtml(self, text: str) -> None: ...
    def insertPlainText(self, text: str) -> None: ...
    def isReadOnly(self) -> bool: ...
    def isUndoRedoEnabled(self) -> bool: ...
    def keyPressEvent(self, e: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, e: PySide2.QtGui.QKeyEvent) -> None: ...
    def lineWrapColumnOrWidth(self) -> int: ...
    def lineWrapMode(self) -> QTextEdit.LineWrapMode: ...
    def loadResource(self, type: int, name: PySide2.QtCore.QUrl) -> typing.Any: ...
    def mergeCurrentCharFormat(self, modifier: PySide2.QtGui.QTextCharFormat) -> None: ...
    def mouseDoubleClickEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseMoveEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, e: PySide2.QtGui.QMouseEvent) -> None: ...
    def moveCursor(self, operation: PySide2.QtGui.QTextCursor.MoveOperation, mode: PySide2.QtGui.QTextCursor.MoveMode = ...) -> None: ...
    def overwriteMode(self) -> bool: ...
    def paintEvent(self, e: PySide2.QtGui.QPaintEvent) -> None: ...
    def paste(self) -> None: ...
    def placeholderText(self) -> str: ...
    def print_(self, printer: PySide2.QtGui.QPagedPaintDevice) -> None: ...
    def redo(self) -> None: ...
    def resizeEvent(self, e: PySide2.QtGui.QResizeEvent) -> None: ...
    def scrollContentsBy(self, dx: int, dy: int) -> None: ...
    def scrollToAnchor(self, name: str) -> None: ...
    def selectAll(self) -> None: ...
    def setAcceptRichText(self, accept: bool) -> None: ...
    def setAlignment(self, a: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setAutoFormatting(self, features: typing.Union[QTextEdit.AutoFormatting,QTextEdit.AutoFormattingFlag]) -> None: ...
    def setCurrentCharFormat(self, format: PySide2.QtGui.QTextCharFormat) -> None: ...
    def setCurrentFont(self, f: PySide2.QtGui.QFont) -> None: ...
    def setCursorWidth(self, width: int) -> None: ...
    def setDocument(self, document: PySide2.QtGui.QTextDocument) -> None: ...
    def setDocumentTitle(self, title: str) -> None: ...
    def setExtraSelections(self, selections: typing.Sequence[QTextEdit.ExtraSelection]) -> None: ...
    def setFontFamily(self, fontFamily: str) -> None: ...
    def setFontItalic(self, b: bool) -> None: ...
    def setFontPointSize(self, s: float) -> None: ...
    def setFontUnderline(self, b: bool) -> None: ...
    def setFontWeight(self, w: int) -> None: ...
    def setHtml(self, text: str) -> None: ...
    def setLineWrapColumnOrWidth(self, w: int) -> None: ...
    def setLineWrapMode(self, mode: QTextEdit.LineWrapMode) -> None: ...
    def setMarkdown(self, markdown: str) -> None: ...
    def setOverwriteMode(self, overwrite: bool) -> None: ...
    def setPlaceholderText(self, placeholderText: str) -> None: ...
    def setPlainText(self, text: str) -> None: ...
    def setReadOnly(self, ro: bool) -> None: ...
    def setTabChangesFocus(self, b: bool) -> None: ...
    def setTabStopDistance(self, distance: float) -> None: ...
    def setTabStopWidth(self, width: int) -> None: ...
    def setText(self, text: str) -> None: ...
    def setTextBackgroundColor(self, c: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setTextColor(self, c: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setTextCursor(self, cursor: PySide2.QtGui.QTextCursor) -> None: ...
    def setTextInteractionFlags(self, flags: typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag]) -> None: ...
    def setUndoRedoEnabled(self, enable: bool) -> None: ...
    def setWordWrapMode(self, policy: PySide2.QtGui.QTextOption.WrapMode) -> None: ...
    def showEvent(self, arg__1: PySide2.QtGui.QShowEvent) -> None: ...
    def tabChangesFocus(self) -> bool: ...
    def tabStopDistance(self) -> float: ...
    def tabStopWidth(self) -> int: ...
    def textBackgroundColor(self) -> PySide2.QtGui.QColor: ...
    def textColor(self) -> PySide2.QtGui.QColor: ...
    def textCursor(self) -> PySide2.QtGui.QTextCursor: ...
    def textInteractionFlags(self) -> typing.Union[PySide2.QtCore.Qt.TextInteractionFlags,PySide2.QtCore.Qt.TextInteractionFlag]: ...
    def timerEvent(self, e: PySide2.QtCore.QTimerEvent) -> None: ...
    def toHtml(self) -> str: ...
    def toMarkdown(self, features: typing.Union[PySide2.QtGui.QTextDocument.MarkdownFeatures,PySide2.QtGui.QTextDocument.MarkdownFeature] = ...) -> str: ...
    def toPlainText(self) -> str: ...
    def undo(self) -> None: ...
    def wheelEvent(self, e: PySide2.QtGui.QWheelEvent) -> None: ...
    def wordWrapMode(self) -> PySide2.QtGui.QTextOption.WrapMode: ...
    def zoomIn(self, range: int = ...) -> None: ...
    def zoomInF(self, range: float) -> None: ...
    def zoomOut(self, range: int = ...) -> None: ...

class QTileRules(shiboken2.Object):
    horizontal: Any
    vertical: Any
    @overload
    def __init__(self, QTileRules: QTileRules) -> None: ...
    @overload
    def __init__(self, horizontalRule: PySide2.QtCore.Qt.TileRule, verticalRule: PySide2.QtCore.Qt.TileRule) -> None: ...
    @overload
    def __init__(self, rule: PySide2.QtCore.Qt.TileRule = ...) -> None: ...
    def __copy__(self) -> None: ...

class QTimeEdit(QDateTimeEdit):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    userTimeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., accelerated: bool = ..., acceptDrops: bool = ..., acceptableInput: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., buttonSymbols: QTimeEdit.ButtonSymbols = ..., calendarPopup: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., correctionMode: QTimeEdit.CorrectionMode = ..., currentSection: QTimeEdit.Section = ..., currentSectionIndex: int = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., date: PySide2.QtCore.QDate = ..., dateChanged: typing.Callable = ..., dateTime: PySide2.QtCore.QDateTime = ..., dateTimeChanged: typing.Callable = ..., destroyed: typing.Callable = ..., displayFormat: str = ..., displayedSections: QTimeEdit.Sections = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., keyboardTracking: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumDate: PySide2.QtCore.QDate = ..., maximumDateTime: PySide2.QtCore.QDateTime = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumTime: PySide2.QtCore.QTime = ..., maximumWidth: int = ..., minimized: bool = ..., minimumDate: PySide2.QtCore.QDate = ..., minimumDateTime: PySide2.QtCore.QDateTime = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumTime: PySide2.QtCore.QTime = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., sectionCount: int = ..., showGroupSeparator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., specialValueText: str = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., time: PySide2.QtCore.QTime = ..., timeChanged: typing.Callable = ..., timeSpec: PySide2.QtCore.Qt.TimeSpec = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., userTimeChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wrapping: bool = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, time: PySide2.QtCore.QTime, parent: typing.Union[QWidget,None] = ..., accelerated: bool = ..., acceptDrops: bool = ..., acceptableInput: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., buttonSymbols: QTimeEdit.ButtonSymbols = ..., calendarPopup: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., correctionMode: QTimeEdit.CorrectionMode = ..., currentSection: QTimeEdit.Section = ..., currentSectionIndex: int = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., date: PySide2.QtCore.QDate = ..., dateChanged: typing.Callable = ..., dateTime: PySide2.QtCore.QDateTime = ..., dateTimeChanged: typing.Callable = ..., destroyed: typing.Callable = ..., displayFormat: str = ..., displayedSections: QTimeEdit.Sections = ..., editingFinished: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frame: bool = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., keyboardTracking: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumDate: PySide2.QtCore.QDate = ..., maximumDateTime: PySide2.QtCore.QDateTime = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumTime: PySide2.QtCore.QTime = ..., maximumWidth: int = ..., minimized: bool = ..., minimumDate: PySide2.QtCore.QDate = ..., minimumDateTime: PySide2.QtCore.QDateTime = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumTime: PySide2.QtCore.QTime = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., readOnly: bool = ..., rect: PySide2.QtCore.QRect = ..., sectionCount: int = ..., showGroupSeparator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., specialValueText: str = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., timeChanged: typing.Callable = ..., timeSpec: PySide2.QtCore.Qt.TimeSpec = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., userTimeChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wrapping: bool = ..., x: int = ..., y: int = ...) -> None: ...

class QToolBar(QWidget):
    actionTriggered: ClassVar[PySide2.QtCore.Signal] = ...
    allowedAreasChanged: ClassVar[PySide2.QtCore.Signal] = ...
    iconSizeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    movableChanged: ClassVar[PySide2.QtCore.Signal] = ...
    orientationChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    toolButtonStyleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    topLevelChanged: ClassVar[PySide2.QtCore.Signal] = ...
    visibilityChanged: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., actionTriggered: typing.Callable = ..., allowedAreas: typing.Union[PySide2.QtCore.Qt.ToolBarAreas,PySide2.QtCore.Qt.ToolBarArea] = ..., allowedAreasChanged: typing.Callable = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., floatable: bool = ..., floating: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., iconSize: PySide2.QtCore.QSize = ..., iconSizeChanged: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., movable: bool = ..., movableChanged: typing.Callable = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., orientation: PySide2.QtCore.Qt.Orientation = ..., orientationChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolButtonStyle: PySide2.QtCore.Qt.ToolButtonStyle = ..., toolButtonStyleChanged: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., topLevelChanged: typing.Callable = ..., updatesEnabled: bool = ..., visibilityChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, title: str, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., actionTriggered: typing.Callable = ..., allowedAreas: typing.Union[PySide2.QtCore.Qt.ToolBarAreas,PySide2.QtCore.Qt.ToolBarArea] = ..., allowedAreasChanged: typing.Callable = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., floatable: bool = ..., floating: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., iconSize: PySide2.QtCore.QSize = ..., iconSizeChanged: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., movable: bool = ..., movableChanged: typing.Callable = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., orientation: PySide2.QtCore.Qt.Orientation = ..., orientationChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolButtonStyle: PySide2.QtCore.Qt.ToolButtonStyle = ..., toolButtonStyleChanged: typing.Callable = ..., toolTip: str = ..., toolTipDuration: int = ..., topLevelChanged: typing.Callable = ..., updatesEnabled: bool = ..., visibilityChanged: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def actionAt(self, p: PySide2.QtCore.QPoint) -> QAction: ...
    @overload
    def actionAt(self, x: int, y: int) -> QAction: ...
    def actionEvent(self, event: PySide2.QtGui.QActionEvent) -> None: ...
    def actionGeometry(self, action: QAction) -> PySide2.QtCore.QRect: ...
    @overload
    def addAction(self, arg__1: QAction) -> None: ...
    @overload
    def addAction(self, icon: PySide2.QtGui.QIcon, text: str) -> QAction: ...
    @overload
    def addAction(self, icon: PySide2.QtGui.QIcon, text: str, receiver: PySide2.QtCore.QObject, member: bytes) -> QAction: ...
    @overload
    def addAction(self, text: str) -> QAction: ...
    @overload
    def addAction(self, text: str, receiver: PySide2.QtCore.QObject, member: bytes) -> QAction: ...
    def addSeparator(self) -> QAction: ...
    def addWidget(self, widget: QWidget) -> QAction: ...
    def allowedAreas(self) -> typing.Union[PySide2.QtCore.Qt.ToolBarAreas,PySide2.QtCore.Qt.ToolBarArea]: ...
    def changeEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def clear(self) -> None: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def iconSize(self) -> PySide2.QtCore.QSize: ...
    def initStyleOption(self, option: QStyleOptionToolBar) -> None: ...
    def insertSeparator(self, before: QAction) -> QAction: ...
    def insertWidget(self, before: QAction, widget: QWidget) -> QAction: ...
    def isAreaAllowed(self, area: PySide2.QtCore.Qt.ToolBarArea) -> bool: ...
    def isFloatable(self) -> bool: ...
    def isFloating(self) -> bool: ...
    def isMovable(self) -> bool: ...
    def orientation(self) -> PySide2.QtCore.Qt.Orientation: ...
    def paintEvent(self, event: PySide2.QtGui.QPaintEvent) -> None: ...
    def setAllowedAreas(self, areas: typing.Union[PySide2.QtCore.Qt.ToolBarAreas,PySide2.QtCore.Qt.ToolBarArea]) -> None: ...
    def setFloatable(self, floatable: bool) -> None: ...
    def setIconSize(self, iconSize: PySide2.QtCore.QSize) -> None: ...
    def setMovable(self, movable: bool) -> None: ...
    def setOrientation(self, orientation: PySide2.QtCore.Qt.Orientation) -> None: ...
    def setToolButtonStyle(self, toolButtonStyle: PySide2.QtCore.Qt.ToolButtonStyle) -> None: ...
    def toggleViewAction(self) -> QAction: ...
    def toolButtonStyle(self) -> PySide2.QtCore.Qt.ToolButtonStyle: ...
    def widgetForAction(self, action: QAction) -> QWidget: ...

class QToolBox(QFrame):
    currentChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., f: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., count: int = ..., currentChanged: typing.Callable = ..., currentIndex: int = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QToolBox.Shadow = ..., frameShape: QToolBox.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def addItem(self, widget: QWidget, icon: PySide2.QtGui.QIcon, text: str) -> int: ...
    @overload
    def addItem(self, widget: QWidget, text: str) -> int: ...
    def changeEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def count(self) -> int: ...
    def currentIndex(self) -> int: ...
    def currentWidget(self) -> QWidget: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def indexOf(self, widget: QWidget) -> int: ...
    @overload
    def insertItem(self, index: int, widget: QWidget, icon: PySide2.QtGui.QIcon, text: str) -> int: ...
    @overload
    def insertItem(self, index: int, widget: QWidget, text: str) -> int: ...
    def isItemEnabled(self, index: int) -> bool: ...
    def itemIcon(self, index: int) -> PySide2.QtGui.QIcon: ...
    def itemInserted(self, index: int) -> None: ...
    def itemRemoved(self, index: int) -> None: ...
    def itemText(self, index: int) -> str: ...
    def itemToolTip(self, index: int) -> str: ...
    def removeItem(self, index: int) -> None: ...
    def setCurrentIndex(self, index: int) -> None: ...
    def setCurrentWidget(self, widget: QWidget) -> None: ...
    def setItemEnabled(self, index: int, enabled: bool) -> None: ...
    def setItemIcon(self, index: int, icon: PySide2.QtGui.QIcon) -> None: ...
    def setItemText(self, index: int, text: str) -> None: ...
    def setItemToolTip(self, index: int, toolTip: str) -> None: ...
    def showEvent(self, e: PySide2.QtGui.QShowEvent) -> None: ...
    def widget(self, index: int) -> QWidget: ...

class QToolButton(QAbstractButton):
    class ToolButtonPopupMode:
        DelayedPopup: ClassVar[QToolButton.ToolButtonPopupMode] = ...
        InstantPopup: ClassVar[QToolButton.ToolButtonPopupMode] = ...
        MenuButtonPopup: ClassVar[QToolButton.ToolButtonPopupMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QToolButton.ToolButtonPopupMode: ...
        def __and__(self, other: typing.SupportsInt) -> QToolButton.ToolButtonPopupMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QToolButton.ToolButtonPopupMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QToolButton.ToolButtonPopupMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QToolButton.ToolButtonPopupMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QToolButton.ToolButtonPopupMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QToolButton.ToolButtonPopupMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QToolButton.ToolButtonPopupMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QToolButton.ToolButtonPopupMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QToolButton.ToolButtonPopupMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QToolButton.ToolButtonPopupMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QToolButton.ToolButtonPopupMode: ...
    DelayedPopup: ClassVar[QToolButton.ToolButtonPopupMode] = ...
    InstantPopup: ClassVar[QToolButton.ToolButtonPopupMode] = ...
    MenuButtonPopup: ClassVar[QToolButton.ToolButtonPopupMode] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    triggered: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., arrowType: PySide2.QtCore.Qt.ArrowType = ..., autoExclusive: bool = ..., autoFillBackground: bool = ..., autoRaise: bool = ..., autoRepeat: bool = ..., autoRepeatDelay: int = ..., autoRepeatInterval: int = ..., baseSize: PySide2.QtCore.QSize = ..., checkable: bool = ..., checked: bool = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., down: bool = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., icon: PySide2.QtGui.QIcon = ..., iconSize: PySide2.QtCore.QSize = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., popupMode: QToolButton.ToolButtonPopupMode = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., released: typing.Callable = ..., shortcut: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., text: str = ..., toggled: typing.Callable = ..., toolButtonStyle: PySide2.QtCore.Qt.ToolButtonStyle = ..., toolTip: str = ..., toolTipDuration: int = ..., triggered: typing.Callable = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def actionEvent(self, arg__1: PySide2.QtGui.QActionEvent) -> None: ...
    def arrowType(self) -> PySide2.QtCore.Qt.ArrowType: ...
    def autoRaise(self) -> bool: ...
    def changeEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def defaultAction(self) -> QAction: ...
    def enterEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def hitButton(self, pos: PySide2.QtCore.QPoint) -> bool: ...
    def initStyleOption(self, option: QStyleOptionToolButton) -> None: ...
    def leaveEvent(self, arg__1: PySide2.QtCore.QEvent) -> None: ...
    def menu(self) -> QMenu: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def mousePressEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def nextCheckState(self) -> None: ...
    def paintEvent(self, arg__1: PySide2.QtGui.QPaintEvent) -> None: ...
    def popupMode(self) -> QToolButton.ToolButtonPopupMode: ...
    def setArrowType(self, type: PySide2.QtCore.Qt.ArrowType) -> None: ...
    def setAutoRaise(self, enable: bool) -> None: ...
    def setDefaultAction(self, arg__1: QAction) -> None: ...
    def setMenu(self, menu: QMenu) -> None: ...
    def setPopupMode(self, mode: QToolButton.ToolButtonPopupMode) -> None: ...
    def setToolButtonStyle(self, style: PySide2.QtCore.Qt.ToolButtonStyle) -> None: ...
    def showMenu(self) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def timerEvent(self, arg__1: PySide2.QtCore.QTimerEvent) -> None: ...
    def toolButtonStyle(self) -> PySide2.QtCore.Qt.ToolButtonStyle: ...

class QToolTip(shiboken2.Object):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def font(cls) -> PySide2.QtGui.QFont: ...
    @classmethod
    def hideText(cls) -> None: ...
    @classmethod
    def isVisible(cls) -> bool: ...
    @classmethod
    def palette(cls) -> PySide2.QtGui.QPalette: ...
    @classmethod
    def setFont(cls, arg__1: PySide2.QtGui.QFont) -> None: ...
    @classmethod
    def setPalette(cls, arg__1: PySide2.QtGui.QPalette) -> None: ...
    @classmethod
    @overload
    def showText(cls, pos: PySide2.QtCore.QPoint, text: str, w: QWidget, rect: PySide2.QtCore.QRect) -> None: ...
    @classmethod
    @overload
    def showText(cls, pos: PySide2.QtCore.QPoint, text: str, w: QWidget, rect: PySide2.QtCore.QRect, msecShowTime: int) -> None: ...
    @classmethod
    @overload
    def showText(cls, pos: PySide2.QtCore.QPoint, text: str, w: typing.Union[QWidget,None] = ...) -> None: ...
    @classmethod
    def text(cls) -> str: ...

class QTreeView(QAbstractItemView):
    collapsed: ClassVar[PySide2.QtCore.Signal] = ...
    expanded: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., activated: typing.Callable = ..., allColumnsShowFocus: bool = ..., alternatingRowColors: bool = ..., animated: bool = ..., autoExpandDelay: int = ..., autoFillBackground: bool = ..., autoScroll: bool = ..., autoScrollMargin: int = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., collapsed: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., defaultDropAction: PySide2.QtCore.Qt.DropAction = ..., destroyed: typing.Callable = ..., doubleClicked: typing.Callable = ..., dragDropMode: QTreeView.DragDropMode = ..., dragDropOverwriteMode: bool = ..., dragEnabled: bool = ..., editTriggers: QTreeView.EditTriggers = ..., enabled: bool = ..., entered: typing.Callable = ..., expanded: typing.Callable = ..., expandsOnDoubleClick: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QTreeView.Shadow = ..., frameShape: QTreeView.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., headerHidden: bool = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., horizontalScrollMode: QTreeView.ScrollMode = ..., iconSize: PySide2.QtCore.QSize = ..., iconSizeChanged: typing.Callable = ..., indentation: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., itemsExpandable: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., rootIsDecorated: bool = ..., selectionBehavior: QTreeView.SelectionBehavior = ..., selectionMode: QTreeView.SelectionMode = ..., showDropIndicator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QTreeView.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., sortingEnabled: bool = ..., statusTip: str = ..., styleSheet: str = ..., tabKeyNavigation: bool = ..., tabletTracking: bool = ..., textElideMode: PySide2.QtCore.Qt.TextElideMode = ..., toolTip: str = ..., toolTipDuration: int = ..., uniformRowHeights: bool = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., verticalScrollMode: QTreeView.ScrollMode = ..., viewportEntered: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wordWrap: bool = ..., x: int = ..., y: int = ...) -> None: ...
    def allColumnsShowFocus(self) -> bool: ...
    def autoExpandDelay(self) -> int: ...
    def collapse(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    def collapseAll(self) -> None: ...
    def columnAt(self, x: int) -> int: ...
    def columnCountChanged(self, oldCount: int, newCount: int) -> None: ...
    def columnMoved(self) -> None: ...
    def columnResized(self, column: int, oldSize: int, newSize: int) -> None: ...
    def columnViewportPosition(self, column: int) -> int: ...
    def columnWidth(self, column: int) -> int: ...
    def currentChanged(self, current: PySide2.QtCore.QModelIndex, previous: PySide2.QtCore.QModelIndex) -> None: ...
    def dataChanged(self, topLeft: PySide2.QtCore.QModelIndex, bottomRight: PySide2.QtCore.QModelIndex, roles: typing.List[int] = ...) -> None: ...
    def doItemsLayout(self) -> None: ...
    def dragMoveEvent(self, event: PySide2.QtGui.QDragMoveEvent) -> None: ...
    def drawBranches(self, painter: PySide2.QtGui.QPainter, rect: PySide2.QtCore.QRect, index: PySide2.QtCore.QModelIndex) -> None: ...
    def drawRow(self, painter: PySide2.QtGui.QPainter, options: QStyleOptionViewItem, index: PySide2.QtCore.QModelIndex) -> None: ...
    def drawTree(self, painter: PySide2.QtGui.QPainter, region: PySide2.QtGui.QRegion) -> None: ...
    def expand(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    def expandAll(self) -> None: ...
    def expandRecursively(self, index: PySide2.QtCore.QModelIndex, depth: int = ...) -> None: ...
    def expandToDepth(self, depth: int) -> None: ...
    def expandsOnDoubleClick(self) -> bool: ...
    def header(self) -> QHeaderView: ...
    def hideColumn(self, column: int) -> None: ...
    def horizontalOffset(self) -> int: ...
    def horizontalScrollbarAction(self, action: int) -> None: ...
    def indentation(self) -> int: ...
    def indexAbove(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def indexAt(self, p: PySide2.QtCore.QPoint) -> PySide2.QtCore.QModelIndex: ...
    def indexBelow(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def indexRowSizeHint(self, index: PySide2.QtCore.QModelIndex) -> int: ...
    def isAnimated(self) -> bool: ...
    def isColumnHidden(self, column: int) -> bool: ...
    def isExpanded(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def isFirstColumnSpanned(self, row: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def isHeaderHidden(self) -> bool: ...
    def isIndexHidden(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def isRowHidden(self, row: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def isSortingEnabled(self) -> bool: ...
    def itemsExpandable(self) -> bool: ...
    def keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyboardSearch(self, search: str) -> None: ...
    def mouseDoubleClickEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseMoveEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def moveCursor(self, cursorAction: QAbstractItemView.CursorAction, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> PySide2.QtCore.QModelIndex: ...
    def paintEvent(self, event: PySide2.QtGui.QPaintEvent) -> None: ...
    def reexpand(self) -> None: ...
    def reset(self) -> None: ...
    def resetIndentation(self) -> None: ...
    def resizeColumnToContents(self, column: int) -> None: ...
    def rootIsDecorated(self) -> bool: ...
    def rowHeight(self, index: PySide2.QtCore.QModelIndex) -> int: ...
    def rowsAboutToBeRemoved(self, parent: PySide2.QtCore.QModelIndex, start: int, end: int) -> None: ...
    def rowsInserted(self, parent: PySide2.QtCore.QModelIndex, start: int, end: int) -> None: ...
    def rowsRemoved(self, parent: PySide2.QtCore.QModelIndex, first: int, last: int) -> None: ...
    def scrollContentsBy(self, dx: int, dy: int) -> None: ...
    def scrollTo(self, index: PySide2.QtCore.QModelIndex, hint: QAbstractItemView.ScrollHint = ...) -> None: ...
    def selectAll(self) -> None: ...
    def selectedIndexes(self) -> typing.List[QModelIndex]: ...
    def selectionChanged(self, selected: PySide2.QtCore.QItemSelection, deselected: PySide2.QtCore.QItemSelection) -> None: ...
    def setAllColumnsShowFocus(self, enable: bool) -> None: ...
    def setAnimated(self, enable: bool) -> None: ...
    def setAutoExpandDelay(self, delay: int) -> None: ...
    def setColumnHidden(self, column: int, hide: bool) -> None: ...
    def setColumnWidth(self, column: int, width: int) -> None: ...
    def setExpanded(self, index: PySide2.QtCore.QModelIndex, expand: bool) -> None: ...
    def setExpandsOnDoubleClick(self, enable: bool) -> None: ...
    def setFirstColumnSpanned(self, row: int, parent: PySide2.QtCore.QModelIndex, span: bool) -> None: ...
    def setHeader(self, header: QHeaderView) -> None: ...
    def setHeaderHidden(self, hide: bool) -> None: ...
    def setIndentation(self, i: int) -> None: ...
    def setItemsExpandable(self, enable: bool) -> None: ...
    def setModel(self, model: typing.Optional[PySide2.QtCore.QAbstractItemModel]) -> None: ...
    def setRootIndex(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    def setRootIsDecorated(self, show: bool) -> None: ...
    def setRowHidden(self, row: int, parent: PySide2.QtCore.QModelIndex, hide: bool) -> None: ...
    def setSelection(self, rect: PySide2.QtCore.QRect, command: typing.Union[PySide2.QtCore.QItemSelectionModel.SelectionFlags,PySide2.QtCore.QItemSelectionModel.SelectionFlag]) -> None: ...
    def setSelectionModel(self, selectionModel: PySide2.QtCore.QItemSelectionModel) -> None: ...
    def setSortingEnabled(self, enable: bool) -> None: ...
    def setTreePosition(self, logicalIndex: int) -> None: ...
    def setUniformRowHeights(self, uniform: bool) -> None: ...
    def setWordWrap(self, on: bool) -> None: ...
    def showColumn(self, column: int) -> None: ...
    def sizeHintForColumn(self, column: int) -> int: ...
    @overload
    def sortByColumn(self, column: int) -> None: ...
    @overload
    def sortByColumn(self, column: int, order: PySide2.QtCore.Qt.SortOrder) -> None: ...
    def timerEvent(self, event: PySide2.QtCore.QTimerEvent) -> None: ...
    def treePosition(self) -> int: ...
    def uniformRowHeights(self) -> bool: ...
    def updateGeometries(self) -> None: ...
    def verticalOffset(self) -> int: ...
    def verticalScrollbarValueChanged(self, value: int) -> None: ...
    def viewportEvent(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def viewportSizeHint(self) -> PySide2.QtCore.QSize: ...
    def visualRect(self, index: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QRect: ...
    def visualRegionForSelection(self, selection: PySide2.QtCore.QItemSelection) -> PySide2.QtGui.QRegion: ...
    def wordWrap(self) -> bool: ...

class QTreeWidget(QTreeView):
    currentItemChanged: ClassVar[PySide2.QtCore.Signal] = ...
    itemActivated: ClassVar[PySide2.QtCore.Signal] = ...
    itemChanged: ClassVar[PySide2.QtCore.Signal] = ...
    itemClicked: ClassVar[PySide2.QtCore.Signal] = ...
    itemCollapsed: ClassVar[PySide2.QtCore.Signal] = ...
    itemDoubleClicked: ClassVar[PySide2.QtCore.Signal] = ...
    itemEntered: ClassVar[PySide2.QtCore.Signal] = ...
    itemExpanded: ClassVar[PySide2.QtCore.Signal] = ...
    itemPressed: ClassVar[PySide2.QtCore.Signal] = ...
    itemSelectionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., activated: typing.Callable = ..., allColumnsShowFocus: bool = ..., alternatingRowColors: bool = ..., animated: bool = ..., autoExpandDelay: int = ..., autoFillBackground: bool = ..., autoScroll: bool = ..., autoScrollMargin: int = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., clicked: typing.Callable = ..., collapsed: typing.Callable = ..., columnCount: int = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., currentItemChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., defaultDropAction: PySide2.QtCore.Qt.DropAction = ..., destroyed: typing.Callable = ..., doubleClicked: typing.Callable = ..., dragDropMode: QTreeWidget.DragDropMode = ..., dragDropOverwriteMode: bool = ..., dragEnabled: bool = ..., editTriggers: QTreeWidget.EditTriggers = ..., enabled: bool = ..., entered: typing.Callable = ..., expanded: typing.Callable = ..., expandsOnDoubleClick: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QTreeWidget.Shadow = ..., frameShape: QTreeWidget.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., headerHidden: bool = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., horizontalScrollMode: QTreeWidget.ScrollMode = ..., iconSize: PySide2.QtCore.QSize = ..., iconSizeChanged: typing.Callable = ..., indentation: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., itemActivated: typing.Callable = ..., itemChanged: typing.Callable = ..., itemClicked: typing.Callable = ..., itemCollapsed: typing.Callable = ..., itemDoubleClicked: typing.Callable = ..., itemEntered: typing.Callable = ..., itemExpanded: typing.Callable = ..., itemPressed: typing.Callable = ..., itemSelectionChanged: typing.Callable = ..., itemsExpandable: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., rootIsDecorated: bool = ..., selectionBehavior: QTreeWidget.SelectionBehavior = ..., selectionMode: QTreeWidget.SelectionMode = ..., showDropIndicator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QTreeWidget.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., sortingEnabled: bool = ..., statusTip: str = ..., styleSheet: str = ..., tabKeyNavigation: bool = ..., tabletTracking: bool = ..., textElideMode: PySide2.QtCore.Qt.TextElideMode = ..., toolTip: str = ..., toolTipDuration: int = ..., topLevelItemCount: int = ..., uniformRowHeights: bool = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., verticalScrollMode: QTreeWidget.ScrollMode = ..., viewportEntered: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wordWrap: bool = ..., x: int = ..., y: int = ...) -> None: ...
    def addTopLevelItem(self, item: QTreeWidgetItem) -> None: ...
    def addTopLevelItems(self, items: typing.Sequence[QTreeWidgetItem]) -> None: ...
    def clear(self) -> None: ...
    @overload
    def closePersistentEditor(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    @overload
    def closePersistentEditor(self, item: QTreeWidgetItem, column: int = ...) -> None: ...
    def collapseItem(self, item: QTreeWidgetItem) -> None: ...
    def columnCount(self) -> int: ...
    def currentColumn(self) -> int: ...
    def currentItem(self) -> QTreeWidgetItem: ...
    def dropEvent(self, event: PySide2.QtGui.QDropEvent) -> None: ...
    def dropMimeData(self, parent: QTreeWidgetItem, index: int, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction) -> bool: ...
    def editItem(self, item: QTreeWidgetItem, column: int = ...) -> None: ...
    def event(self, e: PySide2.QtCore.QEvent) -> bool: ...
    def expandItem(self, item: QTreeWidgetItem) -> None: ...
    def findItems(self, text: str, flags: typing.Union[PySide2.QtCore.Qt.MatchFlags,PySide2.QtCore.Qt.MatchFlag], column: int = ...) -> typing.List[QTreeWidgetItem]: ...
    def headerItem(self) -> QTreeWidgetItem: ...
    def indexFromItem(self, item: QTreeWidgetItem, column: int = ...) -> PySide2.QtCore.QModelIndex: ...
    def indexOfTopLevelItem(self, item: QTreeWidgetItem) -> int: ...
    def insertTopLevelItem(self, index: int, item: QTreeWidgetItem) -> None: ...
    def insertTopLevelItems(self, index: int, items: typing.Sequence[QTreeWidgetItem]) -> None: ...
    def invisibleRootItem(self) -> QTreeWidgetItem: ...
    def isFirstItemColumnSpanned(self, item: QTreeWidgetItem) -> bool: ...
    def isItemExpanded(self, item: QTreeWidgetItem) -> bool: ...
    def isItemHidden(self, item: QTreeWidgetItem) -> bool: ...
    def isItemSelected(self, item: QTreeWidgetItem) -> bool: ...
    @overload
    def isPersistentEditorOpen(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    @overload
    def isPersistentEditorOpen(self, item: QTreeWidgetItem, column: int = ...) -> bool: ...
    def itemAbove(self, item: QTreeWidgetItem) -> QTreeWidgetItem: ...
    @overload
    def itemAt(self, p: PySide2.QtCore.QPoint) -> QTreeWidgetItem: ...
    @overload
    def itemAt(self, x: int, y: int) -> QTreeWidgetItem: ...
    def itemBelow(self, item: QTreeWidgetItem) -> QTreeWidgetItem: ...
    def itemFromIndex(self, index: PySide2.QtCore.QModelIndex) -> QTreeWidgetItem: ...
    def itemWidget(self, item: QTreeWidgetItem, column: int) -> QWidget: ...
    def items(self, data: PySide2.QtCore.QMimeData) -> typing.List[QTreeWidgetItem]: ...
    def mimeData(self, items: typing.Sequence[QTreeWidgetItem]) -> PySide2.QtCore.QMimeData: ...
    def mimeTypes(self) -> typing.List[str]: ...
    @overload
    def openPersistentEditor(self, index: PySide2.QtCore.QModelIndex) -> None: ...
    @overload
    def openPersistentEditor(self, item: QTreeWidgetItem, column: int = ...) -> None: ...
    def removeItemWidget(self, item: QTreeWidgetItem, column: int) -> None: ...
    def scrollToItem(self, item: QTreeWidgetItem, hint: QAbstractItemView.ScrollHint = ...) -> None: ...
    def selectedItems(self) -> typing.List[QTreeWidgetItem]: ...
    def setColumnCount(self, columns: int) -> None: ...
    @overload
    def setCurrentItem(self, item: QTreeWidgetItem) -> None: ...
    @overload
    def setCurrentItem(self, item: QTreeWidgetItem, column: int) -> None: ...
    @overload
    def setCurrentItem(self, item: QTreeWidgetItem, column: int, command: typing.Union[PySide2.QtCore.QItemSelectionModel.SelectionFlags,PySide2.QtCore.QItemSelectionModel.SelectionFlag]) -> None: ...
    def setFirstItemColumnSpanned(self, item: QTreeWidgetItem, span: bool) -> None: ...
    def setHeaderItem(self, item: QTreeWidgetItem) -> None: ...
    def setHeaderLabel(self, label: str) -> None: ...
    def setHeaderLabels(self, labels: typing.Sequence[str]) -> None: ...
    def setItemExpanded(self, item: QTreeWidgetItem, expand: bool) -> None: ...
    def setItemHidden(self, item: QTreeWidgetItem, hide: bool) -> None: ...
    def setItemSelected(self, item: QTreeWidgetItem, select: bool) -> None: ...
    def setItemWidget(self, item: QTreeWidgetItem, column: int, widget: QWidget) -> None: ...
    def setModel(self, model: typing.Optional[PySide2.QtCore.QAbstractItemModel]) -> None: ...
    def setSelectionModel(self, selectionModel: PySide2.QtCore.QItemSelectionModel) -> None: ...
    def sortColumn(self) -> int: ...
    def sortItems(self, column: int, order: PySide2.QtCore.Qt.SortOrder) -> None: ...
    def supportedDropActions(self) -> typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction]: ...
    def takeTopLevelItem(self, index: int) -> QTreeWidgetItem: ...
    def topLevelItem(self, index: int) -> QTreeWidgetItem: ...
    def topLevelItemCount(self) -> int: ...
    def visualItemRect(self, item: QTreeWidgetItem) -> PySide2.QtCore.QRect: ...

class QTreeWidgetItem(shiboken2.Object):
    class ChildIndicatorPolicy:
        DontShowIndicator: ClassVar[QTreeWidgetItem.ChildIndicatorPolicy] = ...
        DontShowIndicatorWhenChildless: ClassVar[QTreeWidgetItem.ChildIndicatorPolicy] = ...
        ShowIndicator: ClassVar[QTreeWidgetItem.ChildIndicatorPolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ChildIndicatorPolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ChildIndicatorPolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ChildIndicatorPolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ChildIndicatorPolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ChildIndicatorPolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ChildIndicatorPolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ChildIndicatorPolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ChildIndicatorPolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ChildIndicatorPolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ChildIndicatorPolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ChildIndicatorPolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ChildIndicatorPolicy: ...

    class ItemType:
        Type: ClassVar[QTreeWidgetItem.ItemType] = ...
        UserType: ClassVar[QTreeWidgetItem.ItemType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ItemType: ...
        def __and__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ItemType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ItemType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ItemType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ItemType: ...
        def __rand__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ItemType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ItemType: ...
        def __ror__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ItemType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ItemType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ItemType: ...
        def __sub__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ItemType: ...
        def __xor__(self, other: typing.SupportsInt) -> QTreeWidgetItem.ItemType: ...
    DontShowIndicator: ClassVar[QTreeWidgetItem.ChildIndicatorPolicy] = ...
    DontShowIndicatorWhenChildless: ClassVar[QTreeWidgetItem.ChildIndicatorPolicy] = ...
    ShowIndicator: ClassVar[QTreeWidgetItem.ChildIndicatorPolicy] = ...
    Type: ClassVar[QTreeWidgetItem.ItemType] = ...
    UserType: ClassVar[QTreeWidgetItem.ItemType] = ...
    @overload
    def __init__(self, other: QTreeWidgetItem) -> None: ...
    @overload
    def __init__(self, parent: QTreeWidgetItem, after: QTreeWidgetItem, type: int = ...) -> None: ...
    @overload
    def __init__(self, parent: QTreeWidgetItem, strings: typing.Sequence[str], type: int = ...) -> None: ...
    @overload
    def __init__(self, parent: QTreeWidgetItem, type: int = ...) -> None: ...
    @overload
    def __init__(self, strings: typing.Sequence[str], type: int = ...) -> None: ...
    @overload
    def __init__(self, treeview: QTreeWidget, after: QTreeWidgetItem, type: int = ...) -> None: ...
    @overload
    def __init__(self, treeview: QTreeWidget, strings: typing.Sequence[str], type: int = ...) -> None: ...
    @overload
    def __init__(self, treeview: QTreeWidget, type: int = ...) -> None: ...
    @overload
    def __init__(self, type: int = ...) -> None: ...
    def addChild(self, child: QTreeWidgetItem) -> None: ...
    def addChildren(self, children: typing.Sequence[QTreeWidgetItem]) -> None: ...
    def background(self, column: int) -> PySide2.QtGui.QBrush: ...
    def backgroundColor(self, column: int) -> PySide2.QtGui.QColor: ...
    def checkState(self, column: int) -> PySide2.QtCore.Qt.CheckState: ...
    def child(self, index: int) -> QTreeWidgetItem: ...
    def childCount(self) -> int: ...
    def childIndicatorPolicy(self) -> QTreeWidgetItem.ChildIndicatorPolicy: ...
    def clone(self) -> QTreeWidgetItem: ...
    def columnCount(self) -> int: ...
    def data(self, column: int, role: PySide2.QtCore.Qt.ItemDataRole) -> typing.Any: ...
    def emitDataChanged(self) -> None: ...
    def flags(self) -> typing.Union[PySide2.QtCore.Qt.ItemFlags,PySide2.QtCore.Qt.ItemFlag]: ...
    def font(self, column: int) -> PySide2.QtGui.QFont: ...
    def foreground(self, column: int) -> PySide2.QtGui.QBrush: ...
    def icon(self, column: int) -> PySide2.QtGui.QIcon: ...
    def indexOfChild(self, child: QTreeWidgetItem) -> int: ...
    def insertChild(self, index: int, child: QTreeWidgetItem) -> None: ...
    def insertChildren(self, index: int, children: typing.Sequence[QTreeWidgetItem]) -> None: ...
    def isDisabled(self) -> bool: ...
    def isExpanded(self) -> bool: ...
    def isFirstColumnSpanned(self) -> bool: ...
    def isHidden(self) -> bool: ...
    def isSelected(self) -> bool: ...
    def parent(self) -> QTreeWidgetItem: ...
    def read(self, in_: PySide2.QtCore.QDataStream) -> None: ...
    def removeChild(self, child: QTreeWidgetItem) -> None: ...
    def setBackground(self, column: int, brush: PySide2.QtGui.QBrush) -> None: ...
    def setBackgroundColor(self, column: int, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setCheckState(self, column: int, state: PySide2.QtCore.Qt.CheckState) -> None: ...
    def setChildIndicatorPolicy(self, policy: QTreeWidgetItem.ChildIndicatorPolicy) -> None: ...
    def setData(self, column: int, role: PySide2.QtCore.Qt.ItemDataRole, value: typing.Any) -> None: ...
    def setDisabled(self, disabled: bool) -> None: ...
    def setExpanded(self, expand: bool) -> None: ...
    def setFirstColumnSpanned(self, span: bool) -> None: ...
    def setFlags(self, flags: typing.Union[PySide2.QtCore.Qt.ItemFlags,PySide2.QtCore.Qt.ItemFlag]) -> None: ...
    def setFont(self, column: int, font: PySide2.QtGui.QFont) -> None: ...
    def setForeground(self, column: int, brush: PySide2.QtGui.QBrush) -> None: ...
    def setHidden(self, hide: bool) -> None: ...
    def setIcon(self, column: int, icon: PySide2.QtGui.QIcon) -> None: ...
    def setSelected(self, select: bool) -> None: ...
    def setSizeHint(self, column: int, size: PySide2.QtCore.QSize) -> None: ...
    def setStatusTip(self, column: int, statusTip: str) -> None: ...
    def setText(self, column: int, text: str) -> None: ...
    def setTextAlignment(self, column: int, alignment: int) -> None: ...
    def setTextColor(self, column: int, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setToolTip(self, column: int, toolTip: str) -> None: ...
    def setWhatsThis(self, column: int, whatsThis: str) -> None: ...
    def sizeHint(self, column: int) -> PySide2.QtCore.QSize: ...
    def sortChildren(self, column: int, order: PySide2.QtCore.Qt.SortOrder) -> None: ...
    def statusTip(self, column: int) -> str: ...
    def takeChild(self, index: int) -> QTreeWidgetItem: ...
    def takeChildren(self) -> typing.List[QTreeWidgetItem]: ...
    def text(self, column: int) -> str: ...
    def textAlignment(self, column: int) -> int: ...
    def textColor(self, column: int) -> PySide2.QtGui.QColor: ...
    def toolTip(self, column: int) -> str: ...
    def treeWidget(self) -> QTreeWidget: ...
    def type(self) -> int: ...
    def whatsThis(self, column: int) -> str: ...
    def write(self, out: PySide2.QtCore.QDataStream) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, out: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, in_: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QTreeWidgetItemIterator(shiboken2.Object):
    class IteratorFlag:
        All: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        Checked: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        Disabled: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        DragDisabled: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        DragEnabled: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        DropDisabled: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        DropEnabled: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        Editable: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        Enabled: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        HasChildren: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        Hidden: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        NoChildren: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        NotChecked: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        NotEditable: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        NotHidden: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        NotSelectable: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        Selectable: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        Selected: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        Unselected: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        UserFlag: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTreeWidgetItemIterator.IteratorFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTreeWidgetItemIterator.IteratorFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTreeWidgetItemIterator.IteratorFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QTreeWidgetItemIterator.IteratorFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QTreeWidgetItemIterator.IteratorFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTreeWidgetItemIterator.IteratorFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QTreeWidgetItemIterator.IteratorFlags: ...

    class IteratorFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTreeWidgetItemIterator.IteratorFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTreeWidgetItemIterator.IteratorFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTreeWidgetItemIterator.IteratorFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QTreeWidgetItemIterator.IteratorFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QTreeWidgetItemIterator.IteratorFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTreeWidgetItemIterator.IteratorFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QTreeWidgetItemIterator.IteratorFlags: ...
    All: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    Checked: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    Disabled: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    DragDisabled: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    DragEnabled: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    DropDisabled: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    DropEnabled: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    Editable: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    Enabled: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    HasChildren: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    Hidden: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    NoChildren: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    NotChecked: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    NotEditable: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    NotHidden: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    NotSelectable: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    Selectable: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    Selected: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    Unselected: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    UserFlag: ClassVar[QTreeWidgetItemIterator.IteratorFlag] = ...
    @overload
    def __init__(self, it: QTreeWidgetItemIterator) -> None: ...
    @overload
    def __init__(self, item: QTreeWidgetItem, flags: typing.Union[QTreeWidgetItemIterator.IteratorFlags,QTreeWidgetItemIterator.IteratorFlag] = ...) -> None: ...
    @overload
    def __init__(self, widget: QTreeWidget, flags: typing.Union[QTreeWidgetItemIterator.IteratorFlags,QTreeWidgetItemIterator.IteratorFlag] = ...) -> None: ...
    def value(self) -> QTreeWidgetItem: ...
    def __copy__(self) -> None: ...
    def __iadd__(self, n: int) -> QTreeWidgetItemIterator: ...
    def __isub__(self, n: int) -> QTreeWidgetItemIterator: ...
    def __iter__(self) -> Iterator[QTreeWidgetItemIterator]: ...
    def __next__(self) -> QTreeWidgetItemIterator: ...

class QUndoCommand(shiboken2.Object):
    @overload
    def __init__(self, parent: typing.Union[QUndoCommand,None] = ...) -> None: ...
    @overload
    def __init__(self, text: str, parent: typing.Union[QUndoCommand,None] = ...) -> None: ...
    def actionText(self) -> str: ...
    def child(self, index: int) -> QUndoCommand: ...
    def childCount(self) -> int: ...
    def id(self) -> int: ...
    def isObsolete(self) -> bool: ...
    def mergeWith(self, other: QUndoCommand) -> bool: ...
    def redo(self) -> None: ...
    def setObsolete(self, obsolete: bool) -> None: ...
    def setText(self, text: str) -> None: ...
    def text(self) -> str: ...
    def undo(self) -> None: ...

class QUndoGroup(PySide2.QtCore.QObject):
    activeStackChanged: ClassVar[PySide2.QtCore.Signal] = ...
    canRedoChanged: ClassVar[PySide2.QtCore.Signal] = ...
    canUndoChanged: ClassVar[PySide2.QtCore.Signal] = ...
    cleanChanged: ClassVar[PySide2.QtCore.Signal] = ...
    indexChanged: ClassVar[PySide2.QtCore.Signal] = ...
    redoTextChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    undoTextChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., activeStackChanged: typing.Callable = ..., canRedoChanged: typing.Callable = ..., canUndoChanged: typing.Callable = ..., cleanChanged: typing.Callable = ..., destroyed: typing.Callable = ..., indexChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., redoTextChanged: typing.Callable = ..., undoTextChanged: typing.Callable = ...) -> None: ...
    def activeStack(self) -> QUndoStack: ...
    def addStack(self, stack: QUndoStack) -> None: ...
    def canRedo(self) -> bool: ...
    def canUndo(self) -> bool: ...
    def createRedoAction(self, parent: typing.Optional[PySide2.QtCore.QObject], prefix: str = ...) -> QAction: ...
    def createUndoAction(self, parent: typing.Optional[PySide2.QtCore.QObject], prefix: str = ...) -> QAction: ...
    def isClean(self) -> bool: ...
    def redo(self) -> None: ...
    def redoText(self) -> str: ...
    def removeStack(self, stack: QUndoStack) -> None: ...
    def setActiveStack(self, stack: QUndoStack) -> None: ...
    def stacks(self) -> typing.List[QUndoStack]: ...
    def undo(self) -> None: ...
    def undoText(self) -> str: ...

class QUndoStack(PySide2.QtCore.QObject):
    canRedoChanged: ClassVar[PySide2.QtCore.Signal] = ...
    canUndoChanged: ClassVar[PySide2.QtCore.Signal] = ...
    cleanChanged: ClassVar[PySide2.QtCore.Signal] = ...
    indexChanged: ClassVar[PySide2.QtCore.Signal] = ...
    redoTextChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    undoTextChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., active: bool = ..., canRedo: bool = ..., canRedoChanged: typing.Callable = ..., canUndo: bool = ..., canUndoChanged: typing.Callable = ..., clean: bool = ..., cleanChanged: typing.Callable = ..., destroyed: typing.Callable = ..., indexChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., redoText: str = ..., redoTextChanged: typing.Callable = ..., undoLimit: int = ..., undoText: str = ..., undoTextChanged: typing.Callable = ...) -> None: ...
    def beginMacro(self, text: str) -> None: ...
    def canRedo(self) -> bool: ...
    def canUndo(self) -> bool: ...
    def cleanIndex(self) -> int: ...
    def clear(self) -> None: ...
    def command(self, index: int) -> QUndoCommand: ...
    def count(self) -> int: ...
    def createRedoAction(self, parent: typing.Optional[PySide2.QtCore.QObject], prefix: str = ...) -> QAction: ...
    def createUndoAction(self, parent: typing.Optional[PySide2.QtCore.QObject], prefix: str = ...) -> QAction: ...
    def endMacro(self) -> None: ...
    def index(self) -> int: ...
    def isActive(self) -> bool: ...
    def isClean(self) -> bool: ...
    def push(self, cmd: QUndoCommand) -> None: ...
    def redo(self) -> None: ...
    def redoText(self) -> str: ...
    def resetClean(self) -> None: ...
    def setActive(self, active: bool = ...) -> None: ...
    def setClean(self) -> None: ...
    def setIndex(self, idx: int) -> None: ...
    def setUndoLimit(self, limit: int) -> None: ...
    def text(self, idx: int) -> str: ...
    def undo(self) -> None: ...
    def undoLimit(self) -> int: ...
    def undoText(self) -> str: ...

class QUndoView(QListView):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, group: QUndoGroup, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., activated: typing.Callable = ..., alternatingRowColors: bool = ..., autoFillBackground: bool = ..., autoScroll: bool = ..., autoScrollMargin: int = ..., baseSize: PySide2.QtCore.QSize = ..., batchSize: int = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., cleanIcon: PySide2.QtGui.QIcon = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., defaultDropAction: PySide2.QtCore.Qt.DropAction = ..., destroyed: typing.Callable = ..., doubleClicked: typing.Callable = ..., dragDropMode: QUndoView.DragDropMode = ..., dragDropOverwriteMode: bool = ..., dragEnabled: bool = ..., editTriggers: QUndoView.EditTriggers = ..., emptyLabel: str = ..., enabled: bool = ..., entered: typing.Callable = ..., flow: QUndoView.Flow = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QUndoView.Shadow = ..., frameShape: QUndoView.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., gridSize: PySide2.QtCore.QSize = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., horizontalScrollMode: QUndoView.ScrollMode = ..., iconSize: PySide2.QtCore.QSize = ..., iconSizeChanged: typing.Callable = ..., indexesMoved: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., isWrapping: bool = ..., itemAlignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., layoutMode: QUndoView.LayoutMode = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., modelColumn: int = ..., mouseTracking: bool = ..., movement: QUndoView.Movement = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., resizeMode: QUndoView.ResizeMode = ..., selectionBehavior: QUndoView.SelectionBehavior = ..., selectionMode: QUndoView.SelectionMode = ..., selectionRectVisible: bool = ..., showDropIndicator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QUndoView.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., spacing: int = ..., statusTip: str = ..., styleSheet: str = ..., tabKeyNavigation: bool = ..., tabletTracking: bool = ..., textElideMode: PySide2.QtCore.Qt.TextElideMode = ..., toolTip: str = ..., toolTipDuration: int = ..., uniformItemSizes: bool = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., verticalScrollMode: QUndoView.ScrollMode = ..., viewMode: QUndoView.ViewMode = ..., viewportEntered: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wordWrap: bool = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., activated: typing.Callable = ..., alternatingRowColors: bool = ..., autoFillBackground: bool = ..., autoScroll: bool = ..., autoScrollMargin: int = ..., baseSize: PySide2.QtCore.QSize = ..., batchSize: int = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., cleanIcon: PySide2.QtGui.QIcon = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., defaultDropAction: PySide2.QtCore.Qt.DropAction = ..., destroyed: typing.Callable = ..., doubleClicked: typing.Callable = ..., dragDropMode: QUndoView.DragDropMode = ..., dragDropOverwriteMode: bool = ..., dragEnabled: bool = ..., editTriggers: QUndoView.EditTriggers = ..., emptyLabel: str = ..., enabled: bool = ..., entered: typing.Callable = ..., flow: QUndoView.Flow = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QUndoView.Shadow = ..., frameShape: QUndoView.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., gridSize: PySide2.QtCore.QSize = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., horizontalScrollMode: QUndoView.ScrollMode = ..., iconSize: PySide2.QtCore.QSize = ..., iconSizeChanged: typing.Callable = ..., indexesMoved: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., isWrapping: bool = ..., itemAlignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., layoutMode: QUndoView.LayoutMode = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., modelColumn: int = ..., mouseTracking: bool = ..., movement: QUndoView.Movement = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., resizeMode: QUndoView.ResizeMode = ..., selectionBehavior: QUndoView.SelectionBehavior = ..., selectionMode: QUndoView.SelectionMode = ..., selectionRectVisible: bool = ..., showDropIndicator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QUndoView.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., spacing: int = ..., statusTip: str = ..., styleSheet: str = ..., tabKeyNavigation: bool = ..., tabletTracking: bool = ..., textElideMode: PySide2.QtCore.Qt.TextElideMode = ..., toolTip: str = ..., toolTipDuration: int = ..., uniformItemSizes: bool = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., verticalScrollMode: QUndoView.ScrollMode = ..., viewMode: QUndoView.ViewMode = ..., viewportEntered: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wordWrap: bool = ..., x: int = ..., y: int = ...) -> None: ...
    @overload
    def __init__(self, stack: QUndoStack, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., activated: typing.Callable = ..., alternatingRowColors: bool = ..., autoFillBackground: bool = ..., autoScroll: bool = ..., autoScrollMargin: int = ..., baseSize: PySide2.QtCore.QSize = ..., batchSize: int = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., cleanIcon: PySide2.QtGui.QIcon = ..., clicked: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., defaultDropAction: PySide2.QtCore.Qt.DropAction = ..., destroyed: typing.Callable = ..., doubleClicked: typing.Callable = ..., dragDropMode: QUndoView.DragDropMode = ..., dragDropOverwriteMode: bool = ..., dragEnabled: bool = ..., editTriggers: QUndoView.EditTriggers = ..., emptyLabel: str = ..., enabled: bool = ..., entered: typing.Callable = ..., flow: QUndoView.Flow = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameRect: PySide2.QtCore.QRect = ..., frameShadow: QUndoView.Shadow = ..., frameShape: QUndoView.Shape = ..., frameSize: PySide2.QtCore.QSize = ..., frameWidth: int = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., gridSize: PySide2.QtCore.QSize = ..., height: int = ..., horizontalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., horizontalScrollMode: QUndoView.ScrollMode = ..., iconSize: PySide2.QtCore.QSize = ..., iconSizeChanged: typing.Callable = ..., indexesMoved: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., isWrapping: bool = ..., itemAlignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., layoutMode: QUndoView.LayoutMode = ..., lineWidth: int = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., midLineWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., modelColumn: int = ..., mouseTracking: bool = ..., movement: QUndoView.Movement = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., pressed: typing.Callable = ..., rect: PySide2.QtCore.QRect = ..., resizeMode: QUndoView.ResizeMode = ..., selectionBehavior: QUndoView.SelectionBehavior = ..., selectionMode: QUndoView.SelectionMode = ..., selectionRectVisible: bool = ..., showDropIndicator: bool = ..., size: PySide2.QtCore.QSize = ..., sizeAdjustPolicy: QUndoView.SizeAdjustPolicy = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., spacing: int = ..., statusTip: str = ..., styleSheet: str = ..., tabKeyNavigation: bool = ..., tabletTracking: bool = ..., textElideMode: PySide2.QtCore.Qt.TextElideMode = ..., toolTip: str = ..., toolTipDuration: int = ..., uniformItemSizes: bool = ..., updatesEnabled: bool = ..., verticalScrollBarPolicy: PySide2.QtCore.Qt.ScrollBarPolicy = ..., verticalScrollMode: QUndoView.ScrollMode = ..., viewMode: QUndoView.ViewMode = ..., viewportEntered: typing.Callable = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wordWrap: bool = ..., x: int = ..., y: int = ...) -> None: ...
    def cleanIcon(self) -> PySide2.QtGui.QIcon: ...
    def emptyLabel(self) -> str: ...
    def group(self) -> QUndoGroup: ...
    def setCleanIcon(self, icon: PySide2.QtGui.QIcon) -> None: ...
    def setEmptyLabel(self, label: str) -> None: ...
    def setGroup(self, group: QUndoGroup) -> None: ...
    def setStack(self, stack: QUndoStack) -> None: ...
    def stack(self) -> QUndoStack: ...

class QVBoxLayout(QBoxLayout):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, destroyed: typing.Callable = ..., margin: int = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., sizeConstraint: QVBoxLayout.SizeConstraint = ..., spacing: int = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Optional[QWidget], destroyed: typing.Callable = ..., margin: int = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., sizeConstraint: QVBoxLayout.SizeConstraint = ..., spacing: int = ...) -> None: ...

class QWhatsThis(shiboken2.Object):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def createAction(cls, parent: typing.Union[PySide2.QtCore.QObject,None] = ...) -> QAction: ...
    @classmethod
    def enterWhatsThisMode(cls) -> None: ...
    @classmethod
    def hideText(cls) -> None: ...
    @classmethod
    def inWhatsThisMode(cls) -> bool: ...
    @classmethod
    def leaveWhatsThisMode(cls) -> None: ...
    @classmethod
    def showText(cls, pos: PySide2.QtCore.QPoint, text: str, w: typing.Union[QWidget,None] = ...) -> None: ...

class QWidget(PySide2.QtCore.QObject, PySide2.QtGui.QPaintDevice):
    class RenderFlag:
        DrawChildren: ClassVar[QWidget.RenderFlag] = ...
        DrawWindowBackground: ClassVar[QWidget.RenderFlag] = ...
        IgnoreMask: ClassVar[QWidget.RenderFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QWidget.RenderFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QWidget.RenderFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWidget.RenderFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QWidget.RenderFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QWidget.RenderFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWidget.RenderFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QWidget.RenderFlags: ...

    class RenderFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QWidget.RenderFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QWidget.RenderFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWidget.RenderFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QWidget.RenderFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QWidget.RenderFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWidget.RenderFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QWidget.RenderFlags: ...
    DrawChildren: ClassVar[QWidget.RenderFlag] = ...
    DrawWindowBackground: ClassVar[QWidget.RenderFlag] = ...
    IgnoreMask: ClassVar[QWidget.RenderFlag] = ...
    customContextMenuRequested: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    windowIconChanged: ClassVar[PySide2.QtCore.Signal] = ...
    windowIconTextChanged: ClassVar[PySide2.QtCore.Signal] = ...
    windowTitleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., f: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., tabletTracking: bool = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def acceptDrops(self) -> bool: ...
    def accessibleDescription(self) -> str: ...
    def accessibleName(self) -> str: ...
    def actionEvent(self, event: PySide2.QtGui.QActionEvent) -> None: ...
    def actions(self) -> typing.List[QAction]: ...
    def activateWindow(self) -> None: ...
    def addAction(self, action: QAction) -> None: ...
    def addActions(self, actions: typing.Sequence[QAction]) -> None: ...
    def adjustSize(self) -> None: ...
    def autoFillBackground(self) -> bool: ...
    def backgroundRole(self) -> PySide2.QtGui.QPalette.ColorRole: ...
    def backingStore(self) -> PySide2.QtGui.QBackingStore: ...
    def baseSize(self) -> PySide2.QtCore.QSize: ...
    def changeEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    @overload
    def childAt(self, p: PySide2.QtCore.QPoint) -> QWidget: ...
    @overload
    def childAt(self, x: int, y: int) -> QWidget: ...
    def childrenRect(self) -> PySide2.QtCore.QRect: ...
    def childrenRegion(self) -> PySide2.QtGui.QRegion: ...
    def clearFocus(self) -> None: ...
    def clearMask(self) -> None: ...
    def close(self) -> bool: ...
    def closeEvent(self, event: PySide2.QtGui.QCloseEvent) -> None: ...
    def contentsMargins(self) -> PySide2.QtCore.QMargins: ...
    def contentsRect(self) -> PySide2.QtCore.QRect: ...
    def contextMenuEvent(self, event: PySide2.QtGui.QContextMenuEvent) -> None: ...
    def contextMenuPolicy(self) -> PySide2.QtCore.Qt.ContextMenuPolicy: ...
    def create(self, arg__1: int = ..., initializeWindow: bool = ..., destroyOldWindow: bool = ...) -> None: ...
    def createWinId(self) -> None: ...
    @classmethod
    def createWindowContainer(cls, window: PySide2.QtGui.QWindow, parent: typing.Union[QWidget,None] = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ...) -> QWidget: ...
    def cursor(self) -> PySide2.QtGui.QCursor: ...
    def destroy(self, destroyWindow: bool = ..., destroySubWindows: bool = ...) -> None: ...
    def devType(self) -> int: ...
    def dragEnterEvent(self, event: PySide2.QtGui.QDragEnterEvent) -> None: ...
    def dragLeaveEvent(self, event: PySide2.QtGui.QDragLeaveEvent) -> None: ...
    def dragMoveEvent(self, event: PySide2.QtGui.QDragMoveEvent) -> None: ...
    def dropEvent(self, event: PySide2.QtGui.QDropEvent) -> None: ...
    def effectiveWinId(self) -> int: ...
    def ensurePolished(self) -> None: ...
    def enterEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    @classmethod
    def find(cls, arg__1: int) -> QWidget: ...
    def focusInEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusNextChild(self) -> bool: ...
    def focusNextPrevChild(self, next: bool) -> bool: ...
    def focusOutEvent(self, event: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusPolicy(self) -> PySide2.QtCore.Qt.FocusPolicy: ...
    def focusPreviousChild(self) -> bool: ...
    def focusProxy(self) -> QWidget: ...
    def focusWidget(self) -> QWidget: ...
    def font(self) -> PySide2.QtGui.QFont: ...
    def fontInfo(self) -> PySide2.QtGui.QFontInfo: ...
    def fontMetrics(self) -> PySide2.QtGui.QFontMetrics: ...
    def foregroundRole(self) -> PySide2.QtGui.QPalette.ColorRole: ...
    def frameGeometry(self) -> PySide2.QtCore.QRect: ...
    def frameSize(self) -> PySide2.QtCore.QSize: ...
    def geometry(self) -> PySide2.QtCore.QRect: ...
    def getContentsMargins(self) -> typing.Tuple[int,int,int,int]: ...
    def grab(self, rectangle: PySide2.QtCore.QRect = ...) -> PySide2.QtGui.QPixmap: ...
    def grabGesture(self, type: PySide2.QtCore.Qt.GestureType, flags: typing.Union[PySide2.QtCore.Qt.GestureFlags,PySide2.QtCore.Qt.GestureFlag] = ...) -> None: ...
    def grabKeyboard(self) -> None: ...
    @overload
    def grabMouse(self) -> None: ...
    @overload
    def grabMouse(self, arg__1: PySide2.QtGui.QCursor) -> None: ...
    def grabShortcut(self, key: typing.Union[PySide2.QtGui.QKeySequence,str], context: PySide2.QtCore.Qt.ShortcutContext = ...) -> int: ...
    def graphicsEffect(self) -> QGraphicsEffect: ...
    def graphicsProxyWidget(self) -> QGraphicsProxyWidget: ...
    def hasFocus(self) -> bool: ...
    def hasHeightForWidth(self) -> bool: ...
    def hasMouseTracking(self) -> bool: ...
    def hasTabletTracking(self) -> bool: ...
    def height(self) -> int: ...
    def heightForWidth(self, arg__1: int) -> int: ...
    def hide(self) -> None: ...
    def hideEvent(self, event: PySide2.QtGui.QHideEvent) -> None: ...
    def initPainter(self, painter: PySide2.QtGui.QPainter) -> None: ...
    def inputMethodEvent(self, event: PySide2.QtGui.QInputMethodEvent) -> None: ...
    def inputMethodHints(self) -> typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint]: ...
    def inputMethodQuery(self, arg__1: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    def insertAction(self, before: QAction, action: QAction) -> None: ...
    def insertActions(self, before: QAction, actions: typing.Sequence[QAction]) -> None: ...
    def internalWinId(self) -> int: ...
    def isActiveWindow(self) -> bool: ...
    def isAncestorOf(self, child: QWidget) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isEnabledTo(self, arg__1: QWidget) -> bool: ...
    def isEnabledToTLW(self) -> bool: ...
    def isFullScreen(self) -> bool: ...
    def isHidden(self) -> bool: ...
    def isLeftToRight(self) -> bool: ...
    def isMaximized(self) -> bool: ...
    def isMinimized(self) -> bool: ...
    def isModal(self) -> bool: ...
    def isRightToLeft(self) -> bool: ...
    def isTopLevel(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def isVisibleTo(self, arg__1: QWidget) -> bool: ...
    def isWindow(self) -> bool: ...
    def isWindowModified(self) -> bool: ...
    def keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    @classmethod
    def keyboardGrabber(cls) -> QWidget: ...
    def layout(self) -> QLayout: ...
    def layoutDirection(self) -> PySide2.QtCore.Qt.LayoutDirection: ...
    def leaveEvent(self, event: PySide2.QtCore.QEvent) -> None: ...
    def locale(self) -> PySide2.QtCore.QLocale: ...
    def lower(self) -> None: ...
    def mapFrom(self, arg__1: QWidget, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    def mapFromGlobal(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    def mapFromParent(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    def mapTo(self, arg__1: QWidget, arg__2: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    def mapToGlobal(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    def mapToParent(self, arg__1: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    def mask(self) -> PySide2.QtGui.QRegion: ...
    def maximumHeight(self) -> int: ...
    def maximumSize(self) -> PySide2.QtCore.QSize: ...
    def maximumWidth(self) -> int: ...
    def metric(self, arg__1: PySide2.QtGui.QPaintDevice.PaintDeviceMetric) -> int: ...
    def minimumHeight(self) -> int: ...
    def minimumSize(self) -> PySide2.QtCore.QSize: ...
    def minimumSizeHint(self) -> PySide2.QtCore.QSize: ...
    def minimumWidth(self) -> int: ...
    def mouseDoubleClickEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    @classmethod
    def mouseGrabber(cls) -> QWidget: ...
    def mouseMoveEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    @overload
    def move(self, arg__1: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def move(self, x: int, y: int) -> None: ...
    def moveEvent(self, event: PySide2.QtGui.QMoveEvent) -> None: ...
    def nativeEvent(self, eventType: typing.Union[PySide2.QtCore.QByteArray,bytes], message: int) -> typing.Tuple[bool,int]: ...
    def nativeParentWidget(self) -> QWidget: ...
    def nextInFocusChain(self) -> QWidget: ...
    def normalGeometry(self) -> PySide2.QtCore.QRect: ...
    def overrideWindowFlags(self, type: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType]) -> None: ...
    def overrideWindowState(self, state: typing.Union[PySide2.QtCore.Qt.WindowStates,PySide2.QtCore.Qt.WindowState]) -> None: ...
    def paintEngine(self) -> PySide2.QtGui.QPaintEngine: ...
    def paintEvent(self, event: PySide2.QtGui.QPaintEvent) -> None: ...
    def palette(self) -> PySide2.QtGui.QPalette: ...
    def parentWidget(self) -> QWidget: ...
    def pos(self) -> PySide2.QtCore.QPoint: ...
    def previousInFocusChain(self) -> QWidget: ...
    def raise_(self) -> None: ...
    def rect(self) -> PySide2.QtCore.QRect: ...
    def redirected(self, offset: PySide2.QtCore.QPoint) -> PySide2.QtGui.QPaintDevice: ...
    def releaseKeyboard(self) -> None: ...
    def releaseMouse(self) -> None: ...
    def releaseShortcut(self, id: int) -> None: ...
    def removeAction(self, action: QAction) -> None: ...
    @overload
    def render(self, painter: PySide2.QtGui.QPainter, targetOffset: PySide2.QtCore.QPoint, sourceRegion: PySide2.QtGui.QRegion = ..., renderFlags: typing.Union[QWidget.RenderFlags,QWidget.RenderFlag] = ...) -> None: ...
    @overload
    def render(self, target: PySide2.QtGui.QPaintDevice, targetOffset: PySide2.QtCore.QPoint = ..., sourceRegion: PySide2.QtGui.QRegion = ..., renderFlags: typing.Union[QWidget.RenderFlags,QWidget.RenderFlag] = ...) -> None: ...
    @overload
    def repaint(self) -> None: ...
    @overload
    def repaint(self, arg__1: PySide2.QtCore.QRect) -> None: ...
    @overload
    def repaint(self, arg__1: PySide2.QtGui.QRegion) -> None: ...
    @overload
    def repaint(self, x: int, y: int, w: int, h: int) -> None: ...
    @overload
    def resize(self, arg__1: PySide2.QtCore.QSize) -> None: ...
    @overload
    def resize(self, w: int, h: int) -> None: ...
    def resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None: ...
    def restoreGeometry(self, geometry: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> bool: ...
    def saveGeometry(self) -> PySide2.QtCore.QByteArray: ...
    def screen(self) -> PySide2.QtGui.QScreen: ...
    @overload
    def scroll(self, dx: int, dy: int) -> None: ...
    @overload
    def scroll(self, dx: int, dy: int, arg__3: PySide2.QtCore.QRect) -> None: ...
    def setAcceptDrops(self, on: bool) -> None: ...
    def setAccessibleDescription(self, description: str) -> None: ...
    def setAccessibleName(self, name: str) -> None: ...
    def setAttribute(self, arg__1: PySide2.QtCore.Qt.WidgetAttribute, on: bool = ...) -> None: ...
    def setAutoFillBackground(self, enabled: bool) -> None: ...
    def setBackgroundRole(self, arg__1: PySide2.QtGui.QPalette.ColorRole) -> None: ...
    @overload
    def setBaseSize(self, arg__1: PySide2.QtCore.QSize) -> None: ...
    @overload
    def setBaseSize(self, basew: int, baseh: int) -> None: ...
    @overload
    def setContentsMargins(self, left: int, top: int, right: int, bottom: int) -> None: ...
    @overload
    def setContentsMargins(self, margins: PySide2.QtCore.QMargins) -> None: ...
    def setContextMenuPolicy(self, policy: PySide2.QtCore.Qt.ContextMenuPolicy) -> None: ...
    def setCursor(self, arg__1: PySide2.QtGui.QCursor) -> None: ...
    def setDisabled(self, arg__1: bool) -> None: ...
    def setEnabled(self, arg__1: bool) -> None: ...
    def setFixedHeight(self, h: int) -> None: ...
    @overload
    def setFixedSize(self, arg__1: PySide2.QtCore.QSize) -> None: ...
    @overload
    def setFixedSize(self, w: int, h: int) -> None: ...
    def setFixedWidth(self, w: int) -> None: ...
    @overload
    def setFocus(self) -> None: ...
    @overload
    def setFocus(self, reason: PySide2.QtCore.Qt.FocusReason) -> None: ...
    def setFocusPolicy(self, policy: PySide2.QtCore.Qt.FocusPolicy) -> None: ...
    def setFocusProxy(self, arg__1: QWidget) -> None: ...
    def setFont(self, arg__1: PySide2.QtGui.QFont) -> None: ...
    def setForegroundRole(self, arg__1: PySide2.QtGui.QPalette.ColorRole) -> None: ...
    @overload
    def setGeometry(self, arg__1: PySide2.QtCore.QRect) -> None: ...
    @overload
    def setGeometry(self, x: int, y: int, w: int, h: int) -> None: ...
    def setGraphicsEffect(self, effect: QGraphicsEffect) -> None: ...
    def setHidden(self, hidden: bool) -> None: ...
    def setInputMethodHints(self, hints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint]) -> None: ...
    def setLayout(self, arg__1: QLayout) -> None: ...
    def setLayoutDirection(self, direction: PySide2.QtCore.Qt.LayoutDirection) -> None: ...
    def setLocale(self, locale: PySide2.QtCore.QLocale) -> None: ...
    @overload
    def setMask(self, arg__1: PySide2.QtGui.QBitmap) -> None: ...
    @overload
    def setMask(self, arg__1: PySide2.QtGui.QRegion) -> None: ...
    def setMaximumHeight(self, maxh: int) -> None: ...
    @overload
    def setMaximumSize(self, arg__1: PySide2.QtCore.QSize) -> None: ...
    @overload
    def setMaximumSize(self, maxw: int, maxh: int) -> None: ...
    def setMaximumWidth(self, maxw: int) -> None: ...
    def setMinimumHeight(self, minh: int) -> None: ...
    @overload
    def setMinimumSize(self, arg__1: PySide2.QtCore.QSize) -> None: ...
    @overload
    def setMinimumSize(self, minw: int, minh: int) -> None: ...
    def setMinimumWidth(self, minw: int) -> None: ...
    def setMouseTracking(self, enable: bool) -> None: ...
    def setPalette(self, arg__1: PySide2.QtGui.QPalette) -> None: ...
    @overload
    def setParent(self, parent: typing.Optional[PySide2.QtCore.QObject]) -> None: ...
    @overload
    def setParent(self, parent: typing.Optional[QWidget]) -> None: ...
    @overload
    def setParent(self, parent: typing.Optional[QWidget], f: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType]) -> None: ...
    def setShortcutAutoRepeat(self, id: int, enable: bool = ...) -> None: ...
    def setShortcutEnabled(self, id: int, enable: bool = ...) -> None: ...
    @overload
    def setSizeIncrement(self, arg__1: PySide2.QtCore.QSize) -> None: ...
    @overload
    def setSizeIncrement(self, w: int, h: int) -> None: ...
    @overload
    def setSizePolicy(self, arg__1: QSizePolicy) -> None: ...
    @overload
    def setSizePolicy(self, horizontal: QSizePolicy.Policy, vertical: QSizePolicy.Policy) -> None: ...
    def setStatusTip(self, arg__1: str) -> None: ...
    def setStyle(self, arg__1: QStyle) -> None: ...
    def setStyleSheet(self, styleSheet: str) -> None: ...
    @classmethod
    def setTabOrder(cls, arg__1: QWidget, arg__2: QWidget) -> None: ...
    def setTabletTracking(self, enable: bool) -> None: ...
    def setToolTip(self, arg__1: str) -> None: ...
    def setToolTipDuration(self, msec: int) -> None: ...
    def setUpdatesEnabled(self, enable: bool) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def setWhatsThis(self, arg__1: str) -> None: ...
    def setWindowFilePath(self, filePath: str) -> None: ...
    def setWindowFlag(self, arg__1: PySide2.QtCore.Qt.WindowType, on: bool = ...) -> None: ...
    def setWindowFlags(self, type: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType]) -> None: ...
    def setWindowIcon(self, icon: PySide2.QtGui.QIcon) -> None: ...
    def setWindowIconText(self, arg__1: str) -> None: ...
    def setWindowModality(self, windowModality: PySide2.QtCore.Qt.WindowModality) -> None: ...
    def setWindowModified(self, arg__1: bool) -> None: ...
    def setWindowOpacity(self, level: float) -> None: ...
    def setWindowRole(self, arg__1: str) -> None: ...
    def setWindowState(self, state: typing.Union[PySide2.QtCore.Qt.WindowStates,PySide2.QtCore.Qt.WindowState]) -> None: ...
    def setWindowTitle(self, arg__1: str) -> None: ...
    def sharedPainter(self) -> PySide2.QtGui.QPainter: ...
    def show(self) -> None: ...
    def showEvent(self, event: PySide2.QtGui.QShowEvent) -> None: ...
    def showFullScreen(self) -> None: ...
    def showMaximized(self) -> None: ...
    def showMinimized(self) -> None: ...
    def showNormal(self) -> None: ...
    def size(self) -> PySide2.QtCore.QSize: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def sizeIncrement(self) -> PySide2.QtCore.QSize: ...
    def sizePolicy(self) -> QSizePolicy: ...
    def stackUnder(self, arg__1: QWidget) -> None: ...
    def statusTip(self) -> str: ...
    def style(self) -> QStyle: ...
    def styleSheet(self) -> str: ...
    def tabletEvent(self, event: PySide2.QtGui.QTabletEvent) -> None: ...
    def testAttribute(self, arg__1: PySide2.QtCore.Qt.WidgetAttribute) -> bool: ...
    def toolTip(self) -> str: ...
    def toolTipDuration(self) -> int: ...
    def topLevelWidget(self) -> QWidget: ...
    def underMouse(self) -> bool: ...
    def ungrabGesture(self, type: PySide2.QtCore.Qt.GestureType) -> None: ...
    def unsetCursor(self) -> None: ...
    def unsetLayoutDirection(self) -> None: ...
    def unsetLocale(self) -> None: ...
    @overload
    def update(self) -> None: ...
    @overload
    def update(self, arg__1: PySide2.QtCore.QRect) -> None: ...
    @overload
    def update(self, arg__1: PySide2.QtGui.QRegion) -> None: ...
    @overload
    def update(self, x: int, y: int, w: int, h: int) -> None: ...
    def updateGeometry(self) -> None: ...
    def updateMicroFocus(self) -> None: ...
    def updatesEnabled(self) -> bool: ...
    def visibleRegion(self) -> PySide2.QtGui.QRegion: ...
    def whatsThis(self) -> str: ...
    def wheelEvent(self, event: PySide2.QtGui.QWheelEvent) -> None: ...
    def width(self) -> int: ...
    def winId(self) -> int: ...
    def window(self) -> QWidget: ...
    def windowFilePath(self) -> str: ...
    def windowFlags(self) -> typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType]: ...
    def windowHandle(self) -> PySide2.QtGui.QWindow: ...
    def windowIcon(self) -> PySide2.QtGui.QIcon: ...
    def windowIconText(self) -> str: ...
    def windowModality(self) -> PySide2.QtCore.Qt.WindowModality: ...
    def windowOpacity(self) -> float: ...
    def windowRole(self) -> str: ...
    def windowState(self) -> typing.Union[PySide2.QtCore.Qt.WindowStates,PySide2.QtCore.Qt.WindowState]: ...
    def windowTitle(self) -> str: ...
    def windowType(self) -> PySide2.QtCore.Qt.WindowType: ...
    def x(self) -> int: ...
    def y(self) -> int: ...

class QWidgetAction(QAction):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject], autoRepeat: bool = ..., changed: typing.Callable = ..., checkable: bool = ..., checked: bool = ..., destroyed: typing.Callable = ..., enabled: bool = ..., font: PySide2.QtGui.QFont = ..., hovered: typing.Callable = ..., icon: PySide2.QtGui.QIcon = ..., iconText: str = ..., iconVisibleInMenu: bool = ..., menuRole: QAction.MenuRole = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., priority: QAction.Priority = ..., shortcut: typing.Union[PySide2.QtGui.QKeySequence,str] = ..., shortcutContext: PySide2.QtCore.Qt.ShortcutContext = ..., shortcutVisibleInContextMenu: bool = ..., statusTip: str = ..., text: str = ..., toggled: typing.Callable = ..., toolTip: str = ..., triggered: typing.Callable = ..., visible: bool = ..., whatsThis: str = ...) -> None: ...
    def createWidget(self, parent: typing.Optional[QWidget]) -> QWidget: ...
    def createdWidgets(self) -> typing.List[QWidget]: ...
    def defaultWidget(self) -> QWidget: ...
    def deleteWidget(self, widget: QWidget) -> None: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def eventFilter(self, arg__1: PySide2.QtCore.QObject, arg__2: PySide2.QtCore.QEvent) -> bool: ...
    def releaseWidget(self, widget: QWidget) -> None: ...
    def requestWidget(self, parent: typing.Optional[QWidget]) -> QWidget: ...
    def setDefaultWidget(self, w: QWidget) -> None: ...

class QWidgetItem(QLayoutItem):
    wid: Any
    def __init__(self, w: QWidget) -> None: ...
    def controlTypes(self) -> typing.Union[QSizePolicy.ControlTypes,QSizePolicy.ControlType]: ...
    def expandingDirections(self) -> typing.Union[PySide2.QtCore.Qt.Orientations,PySide2.QtCore.Qt.Orientation]: ...
    def geometry(self) -> PySide2.QtCore.QRect: ...
    def hasHeightForWidth(self) -> bool: ...
    def heightForWidth(self, arg__1: int) -> int: ...
    def isEmpty(self) -> bool: ...
    def maximumSize(self) -> PySide2.QtCore.QSize: ...
    def minimumSize(self) -> PySide2.QtCore.QSize: ...
    def setGeometry(self, arg__1: PySide2.QtCore.QRect) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def widget(self) -> QWidget: ...

class QWizard(QDialog):
    class WizardButton:
        BackButton: ClassVar[QWizard.WizardButton] = ...
        CancelButton: ClassVar[QWizard.WizardButton] = ...
        CommitButton: ClassVar[QWizard.WizardButton] = ...
        CustomButton1: ClassVar[QWizard.WizardButton] = ...
        CustomButton2: ClassVar[QWizard.WizardButton] = ...
        CustomButton3: ClassVar[QWizard.WizardButton] = ...
        FinishButton: ClassVar[QWizard.WizardButton] = ...
        HelpButton: ClassVar[QWizard.WizardButton] = ...
        NButtons: ClassVar[QWizard.WizardButton] = ...
        NStandardButtons: ClassVar[QWizard.WizardButton] = ...
        NextButton: ClassVar[QWizard.WizardButton] = ...
        NoButton: ClassVar[QWizard.WizardButton] = ...
        Stretch: ClassVar[QWizard.WizardButton] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWizard.WizardButton: ...
        def __and__(self, other: typing.SupportsInt) -> QWizard.WizardButton: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWizard.WizardButton: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWizard.WizardButton: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWizard.WizardButton: ...
        def __rand__(self, other: typing.SupportsInt) -> QWizard.WizardButton: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWizard.WizardButton: ...
        def __ror__(self, other: typing.SupportsInt) -> QWizard.WizardButton: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWizard.WizardButton: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWizard.WizardButton: ...
        def __sub__(self, other: typing.SupportsInt) -> QWizard.WizardButton: ...
        def __xor__(self, other: typing.SupportsInt) -> QWizard.WizardButton: ...

    class WizardOption:
        CancelButtonOnLeft: ClassVar[QWizard.WizardOption] = ...
        DisabledBackButtonOnLastPage: ClassVar[QWizard.WizardOption] = ...
        ExtendedWatermarkPixmap: ClassVar[QWizard.WizardOption] = ...
        HaveCustomButton1: ClassVar[QWizard.WizardOption] = ...
        HaveCustomButton2: ClassVar[QWizard.WizardOption] = ...
        HaveCustomButton3: ClassVar[QWizard.WizardOption] = ...
        HaveFinishButtonOnEarlyPages: ClassVar[QWizard.WizardOption] = ...
        HaveHelpButton: ClassVar[QWizard.WizardOption] = ...
        HaveNextButtonOnLastPage: ClassVar[QWizard.WizardOption] = ...
        HelpButtonOnRight: ClassVar[QWizard.WizardOption] = ...
        IgnoreSubTitles: ClassVar[QWizard.WizardOption] = ...
        IndependentPages: ClassVar[QWizard.WizardOption] = ...
        NoBackButtonOnLastPage: ClassVar[QWizard.WizardOption] = ...
        NoBackButtonOnStartPage: ClassVar[QWizard.WizardOption] = ...
        NoCancelButton: ClassVar[QWizard.WizardOption] = ...
        NoCancelButtonOnLastPage: ClassVar[QWizard.WizardOption] = ...
        NoDefaultButton: ClassVar[QWizard.WizardOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QWizard.WizardOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QWizard.WizardOption: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWizard.WizardOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QWizard.WizardOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QWizard.WizardOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWizard.WizardOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QWizard.WizardOptions: ...

    class WizardOptions:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QWizard.WizardOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QWizard.WizardOptions: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWizard.WizardOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QWizard.WizardOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QWizard.WizardOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWizard.WizardOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QWizard.WizardOptions: ...

    class WizardPixmap:
        BackgroundPixmap: ClassVar[QWizard.WizardPixmap] = ...
        BannerPixmap: ClassVar[QWizard.WizardPixmap] = ...
        LogoPixmap: ClassVar[QWizard.WizardPixmap] = ...
        NPixmaps: ClassVar[QWizard.WizardPixmap] = ...
        WatermarkPixmap: ClassVar[QWizard.WizardPixmap] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWizard.WizardPixmap: ...
        def __and__(self, other: typing.SupportsInt) -> QWizard.WizardPixmap: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWizard.WizardPixmap: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWizard.WizardPixmap: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWizard.WizardPixmap: ...
        def __rand__(self, other: typing.SupportsInt) -> QWizard.WizardPixmap: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWizard.WizardPixmap: ...
        def __ror__(self, other: typing.SupportsInt) -> QWizard.WizardPixmap: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWizard.WizardPixmap: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWizard.WizardPixmap: ...
        def __sub__(self, other: typing.SupportsInt) -> QWizard.WizardPixmap: ...
        def __xor__(self, other: typing.SupportsInt) -> QWizard.WizardPixmap: ...

    class WizardStyle:
        AeroStyle: ClassVar[QWizard.WizardStyle] = ...
        ClassicStyle: ClassVar[QWizard.WizardStyle] = ...
        MacStyle: ClassVar[QWizard.WizardStyle] = ...
        ModernStyle: ClassVar[QWizard.WizardStyle] = ...
        NStyles: ClassVar[QWizard.WizardStyle] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWizard.WizardStyle: ...
        def __and__(self, other: typing.SupportsInt) -> QWizard.WizardStyle: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWizard.WizardStyle: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWizard.WizardStyle: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWizard.WizardStyle: ...
        def __rand__(self, other: typing.SupportsInt) -> QWizard.WizardStyle: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWizard.WizardStyle: ...
        def __ror__(self, other: typing.SupportsInt) -> QWizard.WizardStyle: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWizard.WizardStyle: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWizard.WizardStyle: ...
        def __sub__(self, other: typing.SupportsInt) -> QWizard.WizardStyle: ...
        def __xor__(self, other: typing.SupportsInt) -> QWizard.WizardStyle: ...
    AeroStyle: ClassVar[QWizard.WizardStyle] = ...
    BackButton: ClassVar[QWizard.WizardButton] = ...
    BackgroundPixmap: ClassVar[QWizard.WizardPixmap] = ...
    BannerPixmap: ClassVar[QWizard.WizardPixmap] = ...
    CancelButton: ClassVar[QWizard.WizardButton] = ...
    CancelButtonOnLeft: ClassVar[QWizard.WizardOption] = ...
    ClassicStyle: ClassVar[QWizard.WizardStyle] = ...
    CommitButton: ClassVar[QWizard.WizardButton] = ...
    CustomButton1: ClassVar[QWizard.WizardButton] = ...
    CustomButton2: ClassVar[QWizard.WizardButton] = ...
    CustomButton3: ClassVar[QWizard.WizardButton] = ...
    DisabledBackButtonOnLastPage: ClassVar[QWizard.WizardOption] = ...
    ExtendedWatermarkPixmap: ClassVar[QWizard.WizardOption] = ...
    FinishButton: ClassVar[QWizard.WizardButton] = ...
    HaveCustomButton1: ClassVar[QWizard.WizardOption] = ...
    HaveCustomButton2: ClassVar[QWizard.WizardOption] = ...
    HaveCustomButton3: ClassVar[QWizard.WizardOption] = ...
    HaveFinishButtonOnEarlyPages: ClassVar[QWizard.WizardOption] = ...
    HaveHelpButton: ClassVar[QWizard.WizardOption] = ...
    HaveNextButtonOnLastPage: ClassVar[QWizard.WizardOption] = ...
    HelpButton: ClassVar[QWizard.WizardButton] = ...
    HelpButtonOnRight: ClassVar[QWizard.WizardOption] = ...
    IgnoreSubTitles: ClassVar[QWizard.WizardOption] = ...
    IndependentPages: ClassVar[QWizard.WizardOption] = ...
    LogoPixmap: ClassVar[QWizard.WizardPixmap] = ...
    MacStyle: ClassVar[QWizard.WizardStyle] = ...
    ModernStyle: ClassVar[QWizard.WizardStyle] = ...
    NButtons: ClassVar[QWizard.WizardButton] = ...
    NPixmaps: ClassVar[QWizard.WizardPixmap] = ...
    NStandardButtons: ClassVar[QWizard.WizardButton] = ...
    NStyles: ClassVar[QWizard.WizardStyle] = ...
    NextButton: ClassVar[QWizard.WizardButton] = ...
    NoBackButtonOnLastPage: ClassVar[QWizard.WizardOption] = ...
    NoBackButtonOnStartPage: ClassVar[QWizard.WizardOption] = ...
    NoButton: ClassVar[QWizard.WizardButton] = ...
    NoCancelButton: ClassVar[QWizard.WizardOption] = ...
    NoCancelButtonOnLastPage: ClassVar[QWizard.WizardOption] = ...
    NoDefaultButton: ClassVar[QWizard.WizardOption] = ...
    Stretch: ClassVar[QWizard.WizardButton] = ...
    WatermarkPixmap: ClassVar[QWizard.WizardPixmap] = ...
    currentIdChanged: ClassVar[PySide2.QtCore.Signal] = ...
    customButtonClicked: ClassVar[PySide2.QtCore.Signal] = ...
    helpRequested: ClassVar[PySide2.QtCore.Signal] = ...
    pageAdded: ClassVar[PySide2.QtCore.Signal] = ...
    pageRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., acceptDrops: bool = ..., accepted: typing.Callable = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., currentId: int = ..., currentIdChanged: typing.Callable = ..., cursor: PySide2.QtGui.QCursor = ..., customButtonClicked: typing.Callable = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., finished: typing.Callable = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., helpRequested: typing.Callable = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., options: typing.Union[QWizard.WizardOptions,QWizard.WizardOption] = ..., pageAdded: typing.Callable = ..., pageRemoved: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., rejected: typing.Callable = ..., size: PySide2.QtCore.QSize = ..., sizeGripEnabled: bool = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., startId: int = ..., statusTip: str = ..., styleSheet: str = ..., subTitleFormat: PySide2.QtCore.Qt.TextFormat = ..., tabletTracking: bool = ..., titleFormat: PySide2.QtCore.Qt.TextFormat = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., wizardStyle: QWizard.WizardStyle = ..., x: int = ..., y: int = ...) -> None: ...
    def addPage(self, page: QWizardPage) -> int: ...
    def back(self) -> None: ...
    def button(self, which: QWizard.WizardButton) -> QAbstractButton: ...
    def buttonText(self, which: QWizard.WizardButton) -> str: ...
    def cleanupPage(self, id: int) -> None: ...
    def currentId(self) -> int: ...
    def currentPage(self) -> QWizardPage: ...
    def done(self, result: int) -> None: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def field(self, name: str) -> typing.Any: ...
    def hasVisitedPage(self, id: int) -> bool: ...
    def initializePage(self, id: int) -> None: ...
    def next(self) -> None: ...
    def nextId(self) -> int: ...
    def options(self) -> typing.Union[QWizard.WizardOptions,QWizard.WizardOption]: ...
    def page(self, id: int) -> QWizardPage: ...
    def pageIds(self) -> typing.List[int]: ...
    def paintEvent(self, event: PySide2.QtGui.QPaintEvent) -> None: ...
    def pixmap(self, which: QWizard.WizardPixmap) -> PySide2.QtGui.QPixmap: ...
    def removePage(self, id: int) -> None: ...
    def resizeEvent(self, event: PySide2.QtGui.QResizeEvent) -> None: ...
    def restart(self) -> None: ...
    def setButton(self, which: QWizard.WizardButton, button: QAbstractButton) -> None: ...
    def setButtonLayout(self, layout: typing.Sequence[QWizard.WizardButton]) -> None: ...
    def setButtonText(self, which: QWizard.WizardButton, text: str) -> None: ...
    def setDefaultProperty(self, className: bytes, property: bytes, changedSignal: bytes) -> None: ...
    def setField(self, name: str, value: typing.Any) -> None: ...
    def setOption(self, option: QWizard.WizardOption, on: bool = ...) -> None: ...
    def setOptions(self, options: typing.Union[QWizard.WizardOptions,QWizard.WizardOption]) -> None: ...
    def setPage(self, id: int, page: QWizardPage) -> None: ...
    def setPixmap(self, which: QWizard.WizardPixmap, pixmap: PySide2.QtGui.QPixmap) -> None: ...
    def setSideWidget(self, widget: QWidget) -> None: ...
    def setStartId(self, id: int) -> None: ...
    def setSubTitleFormat(self, format: PySide2.QtCore.Qt.TextFormat) -> None: ...
    def setTitleFormat(self, format: PySide2.QtCore.Qt.TextFormat) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def setWizardStyle(self, style: QWizard.WizardStyle) -> None: ...
    def sideWidget(self) -> QWidget: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def startId(self) -> int: ...
    def subTitleFormat(self) -> PySide2.QtCore.Qt.TextFormat: ...
    def testOption(self, option: QWizard.WizardOption) -> bool: ...
    def titleFormat(self) -> PySide2.QtCore.Qt.TextFormat: ...
    def validateCurrentPage(self) -> bool: ...
    def visitedIds(self) -> typing.List[int]: ...
    def visitedPages(self) -> typing.List[int]: ...
    def wizardStyle(self) -> QWizard.WizardStyle: ...

class QWizardPage(QWidget):
    completeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWidget,None] = ..., acceptDrops: bool = ..., accessibleDescription: str = ..., accessibleName: str = ..., autoFillBackground: bool = ..., baseSize: PySide2.QtCore.QSize = ..., childrenRect: PySide2.QtCore.QRect = ..., childrenRegion: PySide2.QtGui.QRegion = ..., completeChanged: typing.Callable = ..., contextMenuPolicy: PySide2.QtCore.Qt.ContextMenuPolicy = ..., cursor: PySide2.QtGui.QCursor = ..., customContextMenuRequested: typing.Callable = ..., destroyed: typing.Callable = ..., enabled: bool = ..., focus: bool = ..., focusPolicy: PySide2.QtCore.Qt.FocusPolicy = ..., font: PySide2.QtGui.QFont = ..., frameGeometry: PySide2.QtCore.QRect = ..., frameSize: PySide2.QtCore.QSize = ..., fullScreen: bool = ..., geometry: PySide2.QtCore.QRect = ..., height: int = ..., inputMethodHints: typing.Union[PySide2.QtCore.Qt.InputMethodHints,PySide2.QtCore.Qt.InputMethodHint] = ..., isActiveWindow: bool = ..., layoutDirection: PySide2.QtCore.Qt.LayoutDirection = ..., locale: PySide2.QtCore.QLocale = ..., maximized: bool = ..., maximumHeight: int = ..., maximumSize: PySide2.QtCore.QSize = ..., maximumWidth: int = ..., minimized: bool = ..., minimumHeight: int = ..., minimumSize: PySide2.QtCore.QSize = ..., minimumSizeHint: PySide2.QtCore.QSize = ..., minimumWidth: int = ..., modal: bool = ..., mouseTracking: bool = ..., normalGeometry: PySide2.QtCore.QRect = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., palette: PySide2.QtGui.QPalette = ..., pos: PySide2.QtCore.QPoint = ..., rect: PySide2.QtCore.QRect = ..., size: PySide2.QtCore.QSize = ..., sizeHint: PySide2.QtCore.QSize = ..., sizeIncrement: PySide2.QtCore.QSize = ..., sizePolicy: QSizePolicy = ..., statusTip: str = ..., styleSheet: str = ..., subTitle: str = ..., tabletTracking: bool = ..., title: str = ..., toolTip: str = ..., toolTipDuration: int = ..., updatesEnabled: bool = ..., visible: bool = ..., whatsThis: str = ..., width: int = ..., windowFilePath: str = ..., windowIcon: PySide2.QtGui.QIcon = ..., windowIconChanged: typing.Callable = ..., windowIconText: str = ..., windowIconTextChanged: typing.Callable = ..., windowModality: PySide2.QtCore.Qt.WindowModality = ..., windowModified: bool = ..., windowOpacity: float = ..., windowTitle: str = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., y: int = ...) -> None: ...
    def buttonText(self, which: QWizard.WizardButton) -> str: ...
    def cleanupPage(self) -> None: ...
    def field(self, name: str) -> typing.Any: ...
    def initializePage(self) -> None: ...
    def isCommitPage(self) -> bool: ...
    def isComplete(self) -> bool: ...
    def isFinalPage(self) -> bool: ...
    def nextId(self) -> int: ...
    def pixmap(self, which: QWizard.WizardPixmap) -> PySide2.QtGui.QPixmap: ...
    def registerField(self, name: str, widget: QWidget, property: typing.Union[bytes,None] = ..., changedSignal: typing.Union[bytes,None] = ...) -> None: ...
    def setButtonText(self, which: QWizard.WizardButton, text: str) -> None: ...
    def setCommitPage(self, commitPage: bool) -> None: ...
    def setField(self, name: str, value: typing.Any) -> None: ...
    def setFinalPage(self, finalPage: bool) -> None: ...
    def setPixmap(self, which: QWizard.WizardPixmap, pixmap: PySide2.QtGui.QPixmap) -> None: ...
    def setSubTitle(self, subTitle: str) -> None: ...
    def setTitle(self, title: str) -> None: ...
    def subTitle(self) -> str: ...
    def title(self) -> str: ...
    def validatePage(self) -> bool: ...
    def wizard(self) -> QWizard: ...
