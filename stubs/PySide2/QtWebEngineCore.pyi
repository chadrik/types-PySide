from typing import Any, Callable, ClassVar, Dict, List, Union

from typing import overload
import PySide2.QtCore
import PySide2.QtNetwork
import shiboken2
import typing
T = typing.TypeVar('T')

class QWebEngineCookieStore(PySide2.QtCore.QObject):
    cookieAdded: ClassVar[PySide2.QtCore.Signal] = ...
    cookieRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def deleteAllCookies(self) -> None: ...
    def deleteCookie(self, cookie: PySide2.QtNetwork.QNetworkCookie, origin: PySide2.QtCore.QUrl = ...) -> None: ...
    def deleteSessionCookies(self) -> None: ...
    def loadAllCookies(self) -> None: ...
    def setCookie(self, cookie: PySide2.QtNetwork.QNetworkCookie, origin: PySide2.QtCore.QUrl = ...) -> None: ...

class QWebEngineHttpRequest(shiboken2.Object):
    class Method:
        Get: ClassVar[QWebEngineHttpRequest.Method] = ...
        Post: ClassVar[QWebEngineHttpRequest.Method] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineHttpRequest.Method: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineHttpRequest.Method: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineHttpRequest.Method: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineHttpRequest.Method: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineHttpRequest.Method: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineHttpRequest.Method: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineHttpRequest.Method: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineHttpRequest.Method: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineHttpRequest.Method: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineHttpRequest.Method: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineHttpRequest.Method: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineHttpRequest.Method: ...
    Get: ClassVar[QWebEngineHttpRequest.Method] = ...
    Post: ClassVar[QWebEngineHttpRequest.Method] = ...
    @overload
    def __init__(self, other: QWebEngineHttpRequest) -> None: ...
    @overload
    def __init__(self, url: PySide2.QtCore.QUrl = ..., method: QWebEngineHttpRequest.Method = ...) -> None: ...
    def hasHeader(self, headerName: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> bool: ...
    def header(self, headerName: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> PySide2.QtCore.QByteArray: ...
    def headers(self) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def method(self) -> QWebEngineHttpRequest.Method: ...
    def postData(self) -> PySide2.QtCore.QByteArray: ...
    @classmethod
    def postRequest(cls, url: PySide2.QtCore.QUrl, postData: typing.Dict[str,str]) -> QWebEngineHttpRequest: ...
    def setHeader(self, headerName: typing.Union[PySide2.QtCore.QByteArray,bytes], value: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setMethod(self, method: QWebEngineHttpRequest.Method) -> None: ...
    def setPostData(self, postData: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setUrl(self, url: PySide2.QtCore.QUrl) -> None: ...
    def swap(self, other: QWebEngineHttpRequest) -> None: ...
    def unsetHeader(self, headerName: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def url(self) -> PySide2.QtCore.QUrl: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QWebEngineUrlRequestInfo(shiboken2.Object):
    class NavigationType:
        NavigationTypeBackForward: ClassVar[QWebEngineUrlRequestInfo.NavigationType] = ...
        NavigationTypeFormSubmitted: ClassVar[QWebEngineUrlRequestInfo.NavigationType] = ...
        NavigationTypeLink: ClassVar[QWebEngineUrlRequestInfo.NavigationType] = ...
        NavigationTypeOther: ClassVar[QWebEngineUrlRequestInfo.NavigationType] = ...
        NavigationTypeRedirect: ClassVar[QWebEngineUrlRequestInfo.NavigationType] = ...
        NavigationTypeReload: ClassVar[QWebEngineUrlRequestInfo.NavigationType] = ...
        NavigationTypeTyped: ClassVar[QWebEngineUrlRequestInfo.NavigationType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.NavigationType: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.NavigationType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.NavigationType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.NavigationType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.NavigationType: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.NavigationType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.NavigationType: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.NavigationType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.NavigationType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.NavigationType: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.NavigationType: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.NavigationType: ...

    class ResourceType:
        ResourceTypeCspReport: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeFavicon: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeFontResource: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeImage: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeLast: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeMainFrame: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeMedia: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeNavigationPreloadMainFrame: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeNavigationPreloadSubFrame: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeObject: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypePing: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypePluginResource: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypePrefetch: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeScript: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeServiceWorker: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeSharedWorker: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeStylesheet: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeSubFrame: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeSubResource: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeUnknown: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeWorker: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        ResourceTypeXhr: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.ResourceType: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.ResourceType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.ResourceType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.ResourceType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.ResourceType: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.ResourceType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.ResourceType: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.ResourceType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.ResourceType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.ResourceType: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.ResourceType: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestInfo.ResourceType: ...
    NavigationTypeBackForward: ClassVar[QWebEngineUrlRequestInfo.NavigationType] = ...
    NavigationTypeFormSubmitted: ClassVar[QWebEngineUrlRequestInfo.NavigationType] = ...
    NavigationTypeLink: ClassVar[QWebEngineUrlRequestInfo.NavigationType] = ...
    NavigationTypeOther: ClassVar[QWebEngineUrlRequestInfo.NavigationType] = ...
    NavigationTypeRedirect: ClassVar[QWebEngineUrlRequestInfo.NavigationType] = ...
    NavigationTypeReload: ClassVar[QWebEngineUrlRequestInfo.NavigationType] = ...
    NavigationTypeTyped: ClassVar[QWebEngineUrlRequestInfo.NavigationType] = ...
    ResourceTypeCspReport: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeFavicon: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeFontResource: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeImage: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeLast: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeMainFrame: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeMedia: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeNavigationPreloadMainFrame: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeNavigationPreloadSubFrame: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeObject: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypePing: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypePluginResource: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypePrefetch: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeScript: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeServiceWorker: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeSharedWorker: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeStylesheet: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeSubFrame: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeSubResource: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeUnknown: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeWorker: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    ResourceTypeXhr: ClassVar[QWebEngineUrlRequestInfo.ResourceType] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def block(self, shouldBlock: bool) -> None: ...
    def changed(self) -> bool: ...
    def firstPartyUrl(self) -> PySide2.QtCore.QUrl: ...
    def initiator(self) -> PySide2.QtCore.QUrl: ...
    def navigationType(self) -> QWebEngineUrlRequestInfo.NavigationType: ...
    def redirect(self, url: PySide2.QtCore.QUrl) -> None: ...
    def requestMethod(self) -> PySide2.QtCore.QByteArray: ...
    def requestUrl(self) -> PySide2.QtCore.QUrl: ...
    def resourceType(self) -> QWebEngineUrlRequestInfo.ResourceType: ...
    def setHttpHeader(self, name: typing.Union[PySide2.QtCore.QByteArray,bytes], value: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...

class QWebEngineUrlRequestInterceptor(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, p: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def interceptRequest(self, info: QWebEngineUrlRequestInfo) -> None: ...

class QWebEngineUrlRequestJob(PySide2.QtCore.QObject):
    class Error:
        NoError: ClassVar[QWebEngineUrlRequestJob.Error] = ...
        RequestAborted: ClassVar[QWebEngineUrlRequestJob.Error] = ...
        RequestDenied: ClassVar[QWebEngineUrlRequestJob.Error] = ...
        RequestFailed: ClassVar[QWebEngineUrlRequestJob.Error] = ...
        UrlInvalid: ClassVar[QWebEngineUrlRequestJob.Error] = ...
        UrlNotFound: ClassVar[QWebEngineUrlRequestJob.Error] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestJob.Error: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestJob.Error: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestJob.Error: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestJob.Error: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestJob.Error: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestJob.Error: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestJob.Error: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestJob.Error: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestJob.Error: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestJob.Error: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestJob.Error: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineUrlRequestJob.Error: ...
    NoError: ClassVar[QWebEngineUrlRequestJob.Error] = ...
    RequestAborted: ClassVar[QWebEngineUrlRequestJob.Error] = ...
    RequestDenied: ClassVar[QWebEngineUrlRequestJob.Error] = ...
    RequestFailed: ClassVar[QWebEngineUrlRequestJob.Error] = ...
    UrlInvalid: ClassVar[QWebEngineUrlRequestJob.Error] = ...
    UrlNotFound: ClassVar[QWebEngineUrlRequestJob.Error] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def fail(self, error: QWebEngineUrlRequestJob.Error) -> None: ...
    def initiator(self) -> PySide2.QtCore.QUrl: ...
    def redirect(self, url: PySide2.QtCore.QUrl) -> None: ...
    def reply(self, contentType: typing.Union[PySide2.QtCore.QByteArray,bytes], device: PySide2.QtCore.QIODevice) -> None: ...
    def requestHeaders(self) -> typing.Dict[PySide2.QtCore.QByteArray,PySide2.QtCore.QByteArray]: ...
    def requestMethod(self) -> PySide2.QtCore.QByteArray: ...
    def requestUrl(self) -> PySide2.QtCore.QUrl: ...

class QWebEngineUrlScheme(shiboken2.Object):
    class Flag:
        ContentSecurityPolicyIgnored: ClassVar[QWebEngineUrlScheme.Flag] = ...
        CorsEnabled: ClassVar[QWebEngineUrlScheme.Flag] = ...
        LocalAccessAllowed: ClassVar[QWebEngineUrlScheme.Flag] = ...
        LocalScheme: ClassVar[QWebEngineUrlScheme.Flag] = ...
        NoAccessAllowed: ClassVar[QWebEngineUrlScheme.Flag] = ...
        SecureScheme: ClassVar[QWebEngineUrlScheme.Flag] = ...
        ServiceWorkersAllowed: ClassVar[QWebEngineUrlScheme.Flag] = ...
        ViewSourceAllowed: ClassVar[QWebEngineUrlScheme.Flag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Flags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QWebEngineUrlScheme.Flag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Flags: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Flags: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Flags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Flags: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Flags: ...

    class Flags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Flags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QWebEngineUrlScheme.Flags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Flags: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Flags: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Flags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Flags: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Flags: ...

    class SpecialPort:
        PortUnspecified: ClassVar[QWebEngineUrlScheme.SpecialPort] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.SpecialPort: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.SpecialPort: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.SpecialPort: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.SpecialPort: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.SpecialPort: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.SpecialPort: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.SpecialPort: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.SpecialPort: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.SpecialPort: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.SpecialPort: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.SpecialPort: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.SpecialPort: ...

    class Syntax:
        Host: ClassVar[QWebEngineUrlScheme.Syntax] = ...
        HostAndPort: ClassVar[QWebEngineUrlScheme.Syntax] = ...
        HostPortAndUserInformation: ClassVar[QWebEngineUrlScheme.Syntax] = ...
        Path: ClassVar[QWebEngineUrlScheme.Syntax] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Syntax: ...
        def __and__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Syntax: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Syntax: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Syntax: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Syntax: ...
        def __rand__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Syntax: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Syntax: ...
        def __ror__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Syntax: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Syntax: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Syntax: ...
        def __sub__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Syntax: ...
        def __xor__(self, other: typing.SupportsInt) -> QWebEngineUrlScheme.Syntax: ...
    ContentSecurityPolicyIgnored: ClassVar[QWebEngineUrlScheme.Flag] = ...
    CorsEnabled: ClassVar[QWebEngineUrlScheme.Flag] = ...
    LocalAccessAllowed: ClassVar[QWebEngineUrlScheme.Flag] = ...
    LocalScheme: ClassVar[QWebEngineUrlScheme.Flag] = ...
    NoAccessAllowed: ClassVar[QWebEngineUrlScheme.Flag] = ...
    PortUnspecified: ClassVar[QWebEngineUrlScheme.SpecialPort] = ...
    SecureScheme: ClassVar[QWebEngineUrlScheme.Flag] = ...
    ServiceWorkersAllowed: ClassVar[QWebEngineUrlScheme.Flag] = ...
    ViewSourceAllowed: ClassVar[QWebEngineUrlScheme.Flag] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    @overload
    def __init__(self, that: QWebEngineUrlScheme) -> None: ...
    def defaultPort(self) -> int: ...
    def flags(self) -> typing.Union[QWebEngineUrlScheme.Flags,QWebEngineUrlScheme.Flag]: ...
    def name(self) -> PySide2.QtCore.QByteArray: ...
    @classmethod
    def registerScheme(cls, scheme: QWebEngineUrlScheme) -> None: ...
    @classmethod
    def schemeByName(cls, name: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> QWebEngineUrlScheme: ...
    def setDefaultPort(self, newValue: int) -> None: ...
    def setFlags(self, newValue: typing.Union[QWebEngineUrlScheme.Flags,QWebEngineUrlScheme.Flag]) -> None: ...
    def setName(self, newValue: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setSyntax(self, newValue: QWebEngineUrlScheme.Syntax) -> None: ...
    def syntax(self) -> QWebEngineUrlScheme.Syntax: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QWebEngineUrlSchemeHandler(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def requestStarted(self, arg__1: QWebEngineUrlRequestJob) -> None: ...
