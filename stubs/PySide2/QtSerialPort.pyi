from typing import Any, Callable, ClassVar, List, Union

from typing import overload
import PySide2.QtCore
import shiboken2
import typing
T = typing.TypeVar('T')

class QSerialPort(PySide2.QtCore.QIODevice):
    class BaudRate:
        Baud115200: ClassVar[QSerialPort.BaudRate] = ...
        Baud1200: ClassVar[QSerialPort.BaudRate] = ...
        Baud19200: ClassVar[QSerialPort.BaudRate] = ...
        Baud2400: ClassVar[QSerialPort.BaudRate] = ...
        Baud38400: ClassVar[QSerialPort.BaudRate] = ...
        Baud4800: ClassVar[QSerialPort.BaudRate] = ...
        Baud57600: ClassVar[QSerialPort.BaudRate] = ...
        Baud9600: ClassVar[QSerialPort.BaudRate] = ...
        UnknownBaud: ClassVar[QSerialPort.BaudRate] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSerialPort.BaudRate: ...
        def __and__(self, other: typing.SupportsInt) -> QSerialPort.BaudRate: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSerialPort.BaudRate: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSerialPort.BaudRate: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSerialPort.BaudRate: ...
        def __rand__(self, other: typing.SupportsInt) -> QSerialPort.BaudRate: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSerialPort.BaudRate: ...
        def __ror__(self, other: typing.SupportsInt) -> QSerialPort.BaudRate: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSerialPort.BaudRate: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSerialPort.BaudRate: ...
        def __sub__(self, other: typing.SupportsInt) -> QSerialPort.BaudRate: ...
        def __xor__(self, other: typing.SupportsInt) -> QSerialPort.BaudRate: ...

    class DataBits:
        Data5: ClassVar[QSerialPort.DataBits] = ...
        Data6: ClassVar[QSerialPort.DataBits] = ...
        Data7: ClassVar[QSerialPort.DataBits] = ...
        Data8: ClassVar[QSerialPort.DataBits] = ...
        UnknownDataBits: ClassVar[QSerialPort.DataBits] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSerialPort.DataBits: ...
        def __and__(self, other: typing.SupportsInt) -> QSerialPort.DataBits: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSerialPort.DataBits: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSerialPort.DataBits: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSerialPort.DataBits: ...
        def __rand__(self, other: typing.SupportsInt) -> QSerialPort.DataBits: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSerialPort.DataBits: ...
        def __ror__(self, other: typing.SupportsInt) -> QSerialPort.DataBits: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSerialPort.DataBits: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSerialPort.DataBits: ...
        def __sub__(self, other: typing.SupportsInt) -> QSerialPort.DataBits: ...
        def __xor__(self, other: typing.SupportsInt) -> QSerialPort.DataBits: ...

    class DataErrorPolicy:
        IgnorePolicy: ClassVar[QSerialPort.DataErrorPolicy] = ...
        PassZeroPolicy: ClassVar[QSerialPort.DataErrorPolicy] = ...
        SkipPolicy: ClassVar[QSerialPort.DataErrorPolicy] = ...
        StopReceivingPolicy: ClassVar[QSerialPort.DataErrorPolicy] = ...
        UnknownPolicy: ClassVar[QSerialPort.DataErrorPolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSerialPort.DataErrorPolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QSerialPort.DataErrorPolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSerialPort.DataErrorPolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSerialPort.DataErrorPolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSerialPort.DataErrorPolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QSerialPort.DataErrorPolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSerialPort.DataErrorPolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QSerialPort.DataErrorPolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSerialPort.DataErrorPolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSerialPort.DataErrorPolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QSerialPort.DataErrorPolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QSerialPort.DataErrorPolicy: ...

    class Direction:
        AllDirections: ClassVar[QSerialPort.Direction] = ...
        Input: ClassVar[QSerialPort.Direction] = ...
        Output: ClassVar[QSerialPort.Direction] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSerialPort.Directions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSerialPort.Direction: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSerialPort.Directions: ...
        def __rand__(self, other: typing.SupportsInt) -> QSerialPort.Directions: ...
        def __ror__(self, other: typing.SupportsInt) -> QSerialPort.Directions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSerialPort.Directions: ...
        def __xor__(self, other: typing.SupportsInt) -> QSerialPort.Directions: ...

    class Directions:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSerialPort.Directions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSerialPort.Directions: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSerialPort.Directions: ...
        def __rand__(self, other: typing.SupportsInt) -> QSerialPort.Directions: ...
        def __ror__(self, other: typing.SupportsInt) -> QSerialPort.Directions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSerialPort.Directions: ...
        def __xor__(self, other: typing.SupportsInt) -> QSerialPort.Directions: ...

    class FlowControl:
        HardwareControl: ClassVar[QSerialPort.FlowControl] = ...
        NoFlowControl: ClassVar[QSerialPort.FlowControl] = ...
        SoftwareControl: ClassVar[QSerialPort.FlowControl] = ...
        UnknownFlowControl: ClassVar[QSerialPort.FlowControl] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSerialPort.FlowControl: ...
        def __and__(self, other: typing.SupportsInt) -> QSerialPort.FlowControl: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSerialPort.FlowControl: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSerialPort.FlowControl: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSerialPort.FlowControl: ...
        def __rand__(self, other: typing.SupportsInt) -> QSerialPort.FlowControl: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSerialPort.FlowControl: ...
        def __ror__(self, other: typing.SupportsInt) -> QSerialPort.FlowControl: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSerialPort.FlowControl: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSerialPort.FlowControl: ...
        def __sub__(self, other: typing.SupportsInt) -> QSerialPort.FlowControl: ...
        def __xor__(self, other: typing.SupportsInt) -> QSerialPort.FlowControl: ...

    class Parity:
        EvenParity: ClassVar[QSerialPort.Parity] = ...
        MarkParity: ClassVar[QSerialPort.Parity] = ...
        NoParity: ClassVar[QSerialPort.Parity] = ...
        OddParity: ClassVar[QSerialPort.Parity] = ...
        SpaceParity: ClassVar[QSerialPort.Parity] = ...
        UnknownParity: ClassVar[QSerialPort.Parity] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSerialPort.Parity: ...
        def __and__(self, other: typing.SupportsInt) -> QSerialPort.Parity: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSerialPort.Parity: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSerialPort.Parity: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSerialPort.Parity: ...
        def __rand__(self, other: typing.SupportsInt) -> QSerialPort.Parity: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSerialPort.Parity: ...
        def __ror__(self, other: typing.SupportsInt) -> QSerialPort.Parity: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSerialPort.Parity: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSerialPort.Parity: ...
        def __sub__(self, other: typing.SupportsInt) -> QSerialPort.Parity: ...
        def __xor__(self, other: typing.SupportsInt) -> QSerialPort.Parity: ...

    class PinoutSignal:
        ClearToSendSignal: ClassVar[QSerialPort.PinoutSignal] = ...
        DataCarrierDetectSignal: ClassVar[QSerialPort.PinoutSignal] = ...
        DataSetReadySignal: ClassVar[QSerialPort.PinoutSignal] = ...
        DataTerminalReadySignal: ClassVar[QSerialPort.PinoutSignal] = ...
        NoSignal: ClassVar[QSerialPort.PinoutSignal] = ...
        ReceivedDataSignal: ClassVar[QSerialPort.PinoutSignal] = ...
        RequestToSendSignal: ClassVar[QSerialPort.PinoutSignal] = ...
        RingIndicatorSignal: ClassVar[QSerialPort.PinoutSignal] = ...
        SecondaryReceivedDataSignal: ClassVar[QSerialPort.PinoutSignal] = ...
        SecondaryTransmittedDataSignal: ClassVar[QSerialPort.PinoutSignal] = ...
        TransmittedDataSignal: ClassVar[QSerialPort.PinoutSignal] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSerialPort.PinoutSignals: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSerialPort.PinoutSignal: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSerialPort.PinoutSignals: ...
        def __rand__(self, other: typing.SupportsInt) -> QSerialPort.PinoutSignals: ...
        def __ror__(self, other: typing.SupportsInt) -> QSerialPort.PinoutSignals: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSerialPort.PinoutSignals: ...
        def __xor__(self, other: typing.SupportsInt) -> QSerialPort.PinoutSignals: ...

    class PinoutSignals:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSerialPort.PinoutSignals: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSerialPort.PinoutSignals: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSerialPort.PinoutSignals: ...
        def __rand__(self, other: typing.SupportsInt) -> QSerialPort.PinoutSignals: ...
        def __ror__(self, other: typing.SupportsInt) -> QSerialPort.PinoutSignals: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSerialPort.PinoutSignals: ...
        def __xor__(self, other: typing.SupportsInt) -> QSerialPort.PinoutSignals: ...

    class SerialPortError:
        BreakConditionError: ClassVar[QSerialPort.SerialPortError] = ...
        DeviceNotFoundError: ClassVar[QSerialPort.SerialPortError] = ...
        FramingError: ClassVar[QSerialPort.SerialPortError] = ...
        NoError: ClassVar[QSerialPort.SerialPortError] = ...
        NotOpenError: ClassVar[QSerialPort.SerialPortError] = ...
        OpenError: ClassVar[QSerialPort.SerialPortError] = ...
        ParityError: ClassVar[QSerialPort.SerialPortError] = ...
        PermissionError: ClassVar[QSerialPort.SerialPortError] = ...
        ReadError: ClassVar[QSerialPort.SerialPortError] = ...
        ResourceError: ClassVar[QSerialPort.SerialPortError] = ...
        TimeoutError: ClassVar[QSerialPort.SerialPortError] = ...
        UnknownError: ClassVar[QSerialPort.SerialPortError] = ...
        UnsupportedOperationError: ClassVar[QSerialPort.SerialPortError] = ...
        WriteError: ClassVar[QSerialPort.SerialPortError] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSerialPort.SerialPortError: ...
        def __and__(self, other: typing.SupportsInt) -> QSerialPort.SerialPortError: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSerialPort.SerialPortError: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSerialPort.SerialPortError: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSerialPort.SerialPortError: ...
        def __rand__(self, other: typing.SupportsInt) -> QSerialPort.SerialPortError: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSerialPort.SerialPortError: ...
        def __ror__(self, other: typing.SupportsInt) -> QSerialPort.SerialPortError: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSerialPort.SerialPortError: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSerialPort.SerialPortError: ...
        def __sub__(self, other: typing.SupportsInt) -> QSerialPort.SerialPortError: ...
        def __xor__(self, other: typing.SupportsInt) -> QSerialPort.SerialPortError: ...

    class StopBits:
        OneAndHalfStop: ClassVar[QSerialPort.StopBits] = ...
        OneStop: ClassVar[QSerialPort.StopBits] = ...
        TwoStop: ClassVar[QSerialPort.StopBits] = ...
        UnknownStopBits: ClassVar[QSerialPort.StopBits] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSerialPort.StopBits: ...
        def __and__(self, other: typing.SupportsInt) -> QSerialPort.StopBits: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSerialPort.StopBits: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSerialPort.StopBits: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSerialPort.StopBits: ...
        def __rand__(self, other: typing.SupportsInt) -> QSerialPort.StopBits: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSerialPort.StopBits: ...
        def __ror__(self, other: typing.SupportsInt) -> QSerialPort.StopBits: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSerialPort.StopBits: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSerialPort.StopBits: ...
        def __sub__(self, other: typing.SupportsInt) -> QSerialPort.StopBits: ...
        def __xor__(self, other: typing.SupportsInt) -> QSerialPort.StopBits: ...
    AllDirections: ClassVar[QSerialPort.Direction] = ...
    Baud115200: ClassVar[QSerialPort.BaudRate] = ...
    Baud1200: ClassVar[QSerialPort.BaudRate] = ...
    Baud19200: ClassVar[QSerialPort.BaudRate] = ...
    Baud2400: ClassVar[QSerialPort.BaudRate] = ...
    Baud38400: ClassVar[QSerialPort.BaudRate] = ...
    Baud4800: ClassVar[QSerialPort.BaudRate] = ...
    Baud57600: ClassVar[QSerialPort.BaudRate] = ...
    Baud9600: ClassVar[QSerialPort.BaudRate] = ...
    BreakConditionError: ClassVar[QSerialPort.SerialPortError] = ...
    ClearToSendSignal: ClassVar[QSerialPort.PinoutSignal] = ...
    Data5: ClassVar[QSerialPort.DataBits] = ...
    Data6: ClassVar[QSerialPort.DataBits] = ...
    Data7: ClassVar[QSerialPort.DataBits] = ...
    Data8: ClassVar[QSerialPort.DataBits] = ...
    DataCarrierDetectSignal: ClassVar[QSerialPort.PinoutSignal] = ...
    DataSetReadySignal: ClassVar[QSerialPort.PinoutSignal] = ...
    DataTerminalReadySignal: ClassVar[QSerialPort.PinoutSignal] = ...
    DeviceNotFoundError: ClassVar[QSerialPort.SerialPortError] = ...
    EvenParity: ClassVar[QSerialPort.Parity] = ...
    FramingError: ClassVar[QSerialPort.SerialPortError] = ...
    HardwareControl: ClassVar[QSerialPort.FlowControl] = ...
    IgnorePolicy: ClassVar[QSerialPort.DataErrorPolicy] = ...
    Input: ClassVar[QSerialPort.Direction] = ...
    MarkParity: ClassVar[QSerialPort.Parity] = ...
    NoError: ClassVar[QSerialPort.SerialPortError] = ...
    NoFlowControl: ClassVar[QSerialPort.FlowControl] = ...
    NoParity: ClassVar[QSerialPort.Parity] = ...
    NoSignal: ClassVar[QSerialPort.PinoutSignal] = ...
    NotOpenError: ClassVar[QSerialPort.SerialPortError] = ...
    OddParity: ClassVar[QSerialPort.Parity] = ...
    OneAndHalfStop: ClassVar[QSerialPort.StopBits] = ...
    OneStop: ClassVar[QSerialPort.StopBits] = ...
    OpenError: ClassVar[QSerialPort.SerialPortError] = ...
    Output: ClassVar[QSerialPort.Direction] = ...
    ParityError: ClassVar[QSerialPort.SerialPortError] = ...
    PassZeroPolicy: ClassVar[QSerialPort.DataErrorPolicy] = ...
    PermissionError: ClassVar[QSerialPort.SerialPortError] = ...
    ReadError: ClassVar[QSerialPort.SerialPortError] = ...
    ReceivedDataSignal: ClassVar[QSerialPort.PinoutSignal] = ...
    RequestToSendSignal: ClassVar[QSerialPort.PinoutSignal] = ...
    ResourceError: ClassVar[QSerialPort.SerialPortError] = ...
    RingIndicatorSignal: ClassVar[QSerialPort.PinoutSignal] = ...
    SecondaryReceivedDataSignal: ClassVar[QSerialPort.PinoutSignal] = ...
    SecondaryTransmittedDataSignal: ClassVar[QSerialPort.PinoutSignal] = ...
    SkipPolicy: ClassVar[QSerialPort.DataErrorPolicy] = ...
    SoftwareControl: ClassVar[QSerialPort.FlowControl] = ...
    SpaceParity: ClassVar[QSerialPort.Parity] = ...
    StopReceivingPolicy: ClassVar[QSerialPort.DataErrorPolicy] = ...
    TimeoutError: ClassVar[QSerialPort.SerialPortError] = ...
    TransmittedDataSignal: ClassVar[QSerialPort.PinoutSignal] = ...
    TwoStop: ClassVar[QSerialPort.StopBits] = ...
    UnknownBaud: ClassVar[QSerialPort.BaudRate] = ...
    UnknownDataBits: ClassVar[QSerialPort.DataBits] = ...
    UnknownError: ClassVar[QSerialPort.SerialPortError] = ...
    UnknownFlowControl: ClassVar[QSerialPort.FlowControl] = ...
    UnknownParity: ClassVar[QSerialPort.Parity] = ...
    UnknownPolicy: ClassVar[QSerialPort.DataErrorPolicy] = ...
    UnknownStopBits: ClassVar[QSerialPort.StopBits] = ...
    UnsupportedOperationError: ClassVar[QSerialPort.SerialPortError] = ...
    WriteError: ClassVar[QSerialPort.SerialPortError] = ...
    baudRateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    breakEnabledChanged: ClassVar[PySide2.QtCore.Signal] = ...
    dataBitsChanged: ClassVar[PySide2.QtCore.Signal] = ...
    dataErrorPolicyChanged: ClassVar[PySide2.QtCore.Signal] = ...
    dataTerminalReadyChanged: ClassVar[PySide2.QtCore.Signal] = ...
    error: ClassVar[PySide2.QtCore.Signal] = ...
    errorOccurred: ClassVar[PySide2.QtCore.Signal] = ...
    flowControlChanged: ClassVar[PySide2.QtCore.Signal] = ...
    parityChanged: ClassVar[PySide2.QtCore.Signal] = ...
    requestToSendChanged: ClassVar[PySide2.QtCore.Signal] = ...
    settingsRestoredOnCloseChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    stopBitsChanged: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, info: QSerialPortInfo, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., aboutToClose: typing.Callable = ..., baudRate: int = ..., baudRateChanged: typing.Callable = ..., breakEnabled: bool = ..., breakEnabledChanged: typing.Callable = ..., bytesWritten: typing.Callable = ..., channelBytesWritten: typing.Callable = ..., channelReadyRead: typing.Callable = ..., dataBits: QSerialPort.DataBits = ..., dataBitsChanged: typing.Callable = ..., dataErrorPolicy: QSerialPort.DataErrorPolicy = ..., dataErrorPolicyChanged: typing.Callable = ..., dataTerminalReady: bool = ..., dataTerminalReadyChanged: typing.Callable = ..., destroyed: typing.Callable = ..., error: typing.Callable = ..., errorOccurred: typing.Callable = ..., flowControl: QSerialPort.FlowControl = ..., flowControlChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., parity: QSerialPort.Parity = ..., parityChanged: typing.Callable = ..., readChannelFinished: typing.Callable = ..., readyRead: typing.Callable = ..., requestToSend: bool = ..., requestToSendChanged: typing.Callable = ..., settingsRestoredOnClose: bool = ..., settingsRestoredOnCloseChanged: typing.Callable = ..., stopBits: QSerialPort.StopBits = ..., stopBitsChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, name: str, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., aboutToClose: typing.Callable = ..., baudRate: int = ..., baudRateChanged: typing.Callable = ..., breakEnabled: bool = ..., breakEnabledChanged: typing.Callable = ..., bytesWritten: typing.Callable = ..., channelBytesWritten: typing.Callable = ..., channelReadyRead: typing.Callable = ..., dataBits: QSerialPort.DataBits = ..., dataBitsChanged: typing.Callable = ..., dataErrorPolicy: QSerialPort.DataErrorPolicy = ..., dataErrorPolicyChanged: typing.Callable = ..., dataTerminalReady: bool = ..., dataTerminalReadyChanged: typing.Callable = ..., destroyed: typing.Callable = ..., error: typing.Callable = ..., errorOccurred: typing.Callable = ..., flowControl: QSerialPort.FlowControl = ..., flowControlChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., parity: QSerialPort.Parity = ..., parityChanged: typing.Callable = ..., readChannelFinished: typing.Callable = ..., readyRead: typing.Callable = ..., requestToSend: bool = ..., requestToSendChanged: typing.Callable = ..., settingsRestoredOnClose: bool = ..., settingsRestoredOnCloseChanged: typing.Callable = ..., stopBits: QSerialPort.StopBits = ..., stopBitsChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., aboutToClose: typing.Callable = ..., baudRate: int = ..., baudRateChanged: typing.Callable = ..., breakEnabled: bool = ..., breakEnabledChanged: typing.Callable = ..., bytesWritten: typing.Callable = ..., channelBytesWritten: typing.Callable = ..., channelReadyRead: typing.Callable = ..., dataBits: QSerialPort.DataBits = ..., dataBitsChanged: typing.Callable = ..., dataErrorPolicy: QSerialPort.DataErrorPolicy = ..., dataErrorPolicyChanged: typing.Callable = ..., dataTerminalReady: bool = ..., dataTerminalReadyChanged: typing.Callable = ..., destroyed: typing.Callable = ..., error: typing.Callable = ..., errorOccurred: typing.Callable = ..., flowControl: QSerialPort.FlowControl = ..., flowControlChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., parity: QSerialPort.Parity = ..., parityChanged: typing.Callable = ..., readChannelFinished: typing.Callable = ..., readyRead: typing.Callable = ..., requestToSend: bool = ..., requestToSendChanged: typing.Callable = ..., settingsRestoredOnClose: bool = ..., settingsRestoredOnCloseChanged: typing.Callable = ..., stopBits: QSerialPort.StopBits = ..., stopBitsChanged: typing.Callable = ...) -> None: ...
    def atEnd(self) -> bool: ...
    def baudRate(self, directions: typing.Union[QSerialPort.Directions,QSerialPort.Direction] = ...) -> int: ...
    def bytesAvailable(self) -> int: ...
    def bytesToWrite(self) -> int: ...
    def canReadLine(self) -> bool: ...
    def clear(self, directions: typing.Union[QSerialPort.Directions,QSerialPort.Direction] = ...) -> bool: ...
    def clearError(self) -> None: ...
    def close(self) -> None: ...
    def dataBits(self) -> QSerialPort.DataBits: ...
    def dataErrorPolicy(self) -> QSerialPort.DataErrorPolicy: ...
    def flowControl(self) -> QSerialPort.FlowControl: ...
    def flush(self) -> bool: ...
    def handle(self) -> int: ...
    def isBreakEnabled(self) -> bool: ...
    def isDataTerminalReady(self) -> bool: ...
    def isRequestToSend(self) -> bool: ...
    def isSequential(self) -> bool: ...
    def open(self, mode: typing.Union[PySide2.QtCore.QIODevice.OpenMode,PySide2.QtCore.QIODevice.OpenModeFlag]) -> bool: ...
    def parity(self) -> QSerialPort.Parity: ...
    def pinoutSignals(self) -> typing.Union[QSerialPort.PinoutSignals,QSerialPort.PinoutSignal]: ...
    def portName(self) -> str: ...
    def readBufferSize(self) -> int: ...
    def readData(self, data: bytes, maxSize: int) -> int: ...
    def readLineData(self, data: bytes, maxSize: int) -> int: ...
    def sendBreak(self, duration: int = ...) -> bool: ...
    def setBaudRate(self, baudRate: int, directions: typing.Union[QSerialPort.Directions,QSerialPort.Direction] = ...) -> bool: ...
    def setBreakEnabled(self, set: bool = ...) -> bool: ...
    def setDataBits(self, dataBits: QSerialPort.DataBits) -> bool: ...
    def setDataErrorPolicy(self, policy: QSerialPort.DataErrorPolicy = ...) -> bool: ...
    def setDataTerminalReady(self, set: bool) -> bool: ...
    def setFlowControl(self, flowControl: QSerialPort.FlowControl) -> bool: ...
    def setParity(self, parity: QSerialPort.Parity) -> bool: ...
    def setPort(self, info: QSerialPortInfo) -> None: ...
    def setPortName(self, name: str) -> None: ...
    def setReadBufferSize(self, size: int) -> None: ...
    def setRequestToSend(self, set: bool) -> bool: ...
    def setSettingsRestoredOnClose(self, restore: bool) -> None: ...
    def setStopBits(self, stopBits: QSerialPort.StopBits) -> bool: ...
    def settingsRestoredOnClose(self) -> bool: ...
    def stopBits(self) -> QSerialPort.StopBits: ...
    def waitForBytesWritten(self, msecs: int = ...) -> bool: ...
    def waitForReadyRead(self, msecs: int = ...) -> bool: ...
    def writeData(self, data: bytes, maxSize: int) -> int: ...

class QSerialPortInfo(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, other: QSerialPortInfo) -> None: ...
    @overload
    def __init__(self, port: QSerialPort) -> None: ...
    @classmethod
    def availablePorts(cls) -> typing.List[QSerialPortInfo]: ...
    def description(self) -> str: ...
    def hasProductIdentifier(self) -> bool: ...
    def hasVendorIdentifier(self) -> bool: ...
    def isBusy(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isValid(self) -> bool: ...
    def manufacturer(self) -> str: ...
    def portName(self) -> str: ...
    def productIdentifier(self) -> int: ...
    def serialNumber(self) -> str: ...
    @classmethod
    def standardBaudRates(cls) -> typing.List[int]: ...
    def swap(self, other: QSerialPortInfo) -> None: ...
    def systemLocation(self) -> str: ...
    def vendorIdentifier(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
