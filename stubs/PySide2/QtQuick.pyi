from typing import Any, Callable, ClassVar, Dict, List, Tuple, Union

from typing import overload
import PySide2.QtCore
import PySide2.QtGui
import PySide2.QtQml
import shiboken2
import typing
T = typing.TypeVar('T')

class QQuickAsyncImageProvider(QQuickImageProvider):
    def __init__(self) -> None: ...
    def requestImageResponse(self, id: str, requestedSize: PySide2.QtCore.QSize) -> QQuickImageResponse: ...

class QQuickFramebufferObject(QQuickItem):
    class Renderer(shiboken2.Object):
        def __init__(self) -> None: ...
        def createFramebufferObject(self, size: PySide2.QtCore.QSize) -> PySide2.QtGui.QOpenGLFramebufferObject: ...
        def framebufferObject(self) -> PySide2.QtGui.QOpenGLFramebufferObject: ...
        def invalidateFramebufferObject(self) -> None: ...
        def render(self) -> None: ...
        def synchronize(self, arg__1: QQuickFramebufferObject) -> None: ...
        def update(self) -> None: ...
    mirrorVerticallyChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    textureFollowsItemSizeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QQuickItem,None] = ..., activeFocus: bool = ..., activeFocusChanged: typing.Callable = ..., activeFocusOnTab: bool = ..., activeFocusOnTabChanged: typing.Callable = ..., anchors: typing.Any = ..., antialiasing: bool = ..., antialiasingChanged: typing.Callable = ..., baseline: typing.Any = ..., baselineOffset: float = ..., baselineOffsetChanged: typing.Callable = ..., bottom: typing.Any = ..., children: typing.Any = ..., childrenChanged: typing.Callable = ..., childrenRect: PySide2.QtCore.QRectF = ..., childrenRectChanged: typing.Callable = ..., clip: bool = ..., clipChanged: typing.Callable = ..., containmentMask: PySide2.QtCore.QObject = ..., containmentMaskChanged: typing.Callable = ..., data: typing.Any = ..., destroyed: typing.Callable = ..., enabled: bool = ..., enabledChanged: typing.Callable = ..., focus: bool = ..., focusChanged: typing.Callable = ..., height: float = ..., heightChanged: typing.Callable = ..., horizontalCenter: typing.Any = ..., implicitHeight: float = ..., implicitHeightChanged: typing.Callable = ..., implicitWidth: float = ..., implicitWidthChanged: typing.Callable = ..., layer: typing.Any = ..., left: typing.Any = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., parentChanged: typing.Callable = ..., resources: typing.Any = ..., right: typing.Any = ..., rotation: float = ..., rotationChanged: typing.Callable = ..., scale: float = ..., scaleChanged: typing.Callable = ..., smooth: bool = ..., smoothChanged: typing.Callable = ..., state: str = ..., stateChanged: typing.Callable = ..., states: typing.Any = ..., top: typing.Any = ..., transform: typing.Any = ..., transformOrigin: QQuickItem.TransformOrigin = ..., transformOriginChanged: typing.Callable = ..., transformOriginPoint: PySide2.QtCore.QPointF = ..., transitions: typing.Any = ..., verticalCenter: typing.Any = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., visibleChildren: typing.Any = ..., visibleChildrenChanged: typing.Callable = ..., width: float = ..., widthChanged: typing.Callable = ..., windowChanged: typing.Callable = ..., x: float = ..., xChanged: typing.Callable = ..., y: float = ..., yChanged: typing.Callable = ..., z: float = ..., zChanged: typing.Callable = ...) -> None: ...
    def createRenderer(self) -> QQuickFramebufferObject.Renderer: ...
    def geometryChanged(self, newGeometry: PySide2.QtCore.QRectF, oldGeometry: PySide2.QtCore.QRectF) -> None: ...
    def isTextureProvider(self) -> bool: ...
    def mirrorVertically(self) -> bool: ...
    def releaseResources(self) -> None: ...
    def setMirrorVertically(self, enable: bool) -> None: ...
    def setTextureFollowsItemSize(self, follows: bool) -> None: ...
    def textureFollowsItemSize(self) -> bool: ...
    def textureProvider(self) -> QSGTextureProvider: ...
    def updatePaintNode(self, arg__1: QSGNode, arg__2: QQuickItem.UpdatePaintNodeData) -> QSGNode: ...

class QQuickImageProvider(PySide2.QtQml.QQmlImageProviderBase):
    def __init__(self, type: PySide2.QtQml.QQmlImageProviderBase.ImageType, flags: typing.Union[PySide2.QtQml.QQmlImageProviderBase.Flags,PySide2.QtQml.QQmlImageProviderBase.Flag] = ...) -> None: ...
    def flags(self) -> typing.Union[PySide2.QtQml.QQmlImageProviderBase.Flags,PySide2.QtQml.QQmlImageProviderBase.Flag]: ...
    def imageType(self) -> PySide2.QtQml.QQmlImageProviderBase.ImageType: ...
    def requestImage(self, id: str, size: PySide2.QtCore.QSize, requestedSize: PySide2.QtCore.QSize) -> PySide2.QtGui.QImage: ...
    def requestPixmap(self, id: str, size: PySide2.QtCore.QSize, requestedSize: PySide2.QtCore.QSize) -> PySide2.QtGui.QPixmap: ...
    def requestTexture(self, id: str, size: PySide2.QtCore.QSize, requestedSize: PySide2.QtCore.QSize) -> QQuickTextureFactory: ...

class QQuickImageResponse(PySide2.QtCore.QObject):
    finished: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def cancel(self) -> None: ...
    def errorString(self) -> str: ...
    def textureFactory(self) -> QQuickTextureFactory: ...

class QQuickItem(PySide2.QtCore.QObject, PySide2.QtQml.QQmlParserStatus):
    class Flag:
        ItemAcceptsDrops: ClassVar[QQuickItem.Flag] = ...
        ItemAcceptsInputMethod: ClassVar[QQuickItem.Flag] = ...
        ItemClipsChildrenToShape: ClassVar[QQuickItem.Flag] = ...
        ItemHasContents: ClassVar[QQuickItem.Flag] = ...
        ItemIsFocusScope: ClassVar[QQuickItem.Flag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QQuickItem.Flags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QQuickItem.Flag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QQuickItem.Flags: ...
        def __rand__(self, other: typing.SupportsInt) -> QQuickItem.Flags: ...
        def __ror__(self, other: typing.SupportsInt) -> QQuickItem.Flags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QQuickItem.Flags: ...
        def __xor__(self, other: typing.SupportsInt) -> QQuickItem.Flags: ...

    class Flags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QQuickItem.Flags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QQuickItem.Flags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QQuickItem.Flags: ...
        def __rand__(self, other: typing.SupportsInt) -> QQuickItem.Flags: ...
        def __ror__(self, other: typing.SupportsInt) -> QQuickItem.Flags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QQuickItem.Flags: ...
        def __xor__(self, other: typing.SupportsInt) -> QQuickItem.Flags: ...

    class ItemChange:
        ItemActiveFocusHasChanged: ClassVar[QQuickItem.ItemChange] = ...
        ItemAntialiasingHasChanged: ClassVar[QQuickItem.ItemChange] = ...
        ItemChildAddedChange: ClassVar[QQuickItem.ItemChange] = ...
        ItemChildRemovedChange: ClassVar[QQuickItem.ItemChange] = ...
        ItemDevicePixelRatioHasChanged: ClassVar[QQuickItem.ItemChange] = ...
        ItemEnabledHasChanged: ClassVar[QQuickItem.ItemChange] = ...
        ItemOpacityHasChanged: ClassVar[QQuickItem.ItemChange] = ...
        ItemParentHasChanged: ClassVar[QQuickItem.ItemChange] = ...
        ItemRotationHasChanged: ClassVar[QQuickItem.ItemChange] = ...
        ItemSceneChange: ClassVar[QQuickItem.ItemChange] = ...
        ItemVisibleHasChanged: ClassVar[QQuickItem.ItemChange] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QQuickItem.ItemChange: ...
        def __and__(self, other: typing.SupportsInt) -> QQuickItem.ItemChange: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QQuickItem.ItemChange: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QQuickItem.ItemChange: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QQuickItem.ItemChange: ...
        def __rand__(self, other: typing.SupportsInt) -> QQuickItem.ItemChange: ...
        def __rmul__(self, other: typing.SupportsInt) -> QQuickItem.ItemChange: ...
        def __ror__(self, other: typing.SupportsInt) -> QQuickItem.ItemChange: ...
        def __rsub__(self, other: typing.SupportsInt) -> QQuickItem.ItemChange: ...
        def __rxor__(self, other: typing.SupportsInt) -> QQuickItem.ItemChange: ...
        def __sub__(self, other: typing.SupportsInt) -> QQuickItem.ItemChange: ...
        def __xor__(self, other: typing.SupportsInt) -> QQuickItem.ItemChange: ...

    class TransformOrigin:
        Bottom: ClassVar[QQuickItem.TransformOrigin] = ...
        BottomLeft: ClassVar[QQuickItem.TransformOrigin] = ...
        BottomRight: ClassVar[QQuickItem.TransformOrigin] = ...
        Center: ClassVar[QQuickItem.TransformOrigin] = ...
        Left: ClassVar[QQuickItem.TransformOrigin] = ...
        Right: ClassVar[QQuickItem.TransformOrigin] = ...
        Top: ClassVar[QQuickItem.TransformOrigin] = ...
        TopLeft: ClassVar[QQuickItem.TransformOrigin] = ...
        TopRight: ClassVar[QQuickItem.TransformOrigin] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QQuickItem.TransformOrigin: ...
        def __and__(self, other: typing.SupportsInt) -> QQuickItem.TransformOrigin: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QQuickItem.TransformOrigin: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QQuickItem.TransformOrigin: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QQuickItem.TransformOrigin: ...
        def __rand__(self, other: typing.SupportsInt) -> QQuickItem.TransformOrigin: ...
        def __rmul__(self, other: typing.SupportsInt) -> QQuickItem.TransformOrigin: ...
        def __ror__(self, other: typing.SupportsInt) -> QQuickItem.TransformOrigin: ...
        def __rsub__(self, other: typing.SupportsInt) -> QQuickItem.TransformOrigin: ...
        def __rxor__(self, other: typing.SupportsInt) -> QQuickItem.TransformOrigin: ...
        def __sub__(self, other: typing.SupportsInt) -> QQuickItem.TransformOrigin: ...
        def __xor__(self, other: typing.SupportsInt) -> QQuickItem.TransformOrigin: ...

    class UpdatePaintNodeData(shiboken2.Object):
        transformNode: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __copy__(self) -> None: ...
    Bottom: ClassVar[QQuickItem.TransformOrigin] = ...
    BottomLeft: ClassVar[QQuickItem.TransformOrigin] = ...
    BottomRight: ClassVar[QQuickItem.TransformOrigin] = ...
    Center: ClassVar[QQuickItem.TransformOrigin] = ...
    ItemAcceptsDrops: ClassVar[QQuickItem.Flag] = ...
    ItemAcceptsInputMethod: ClassVar[QQuickItem.Flag] = ...
    ItemActiveFocusHasChanged: ClassVar[QQuickItem.ItemChange] = ...
    ItemAntialiasingHasChanged: ClassVar[QQuickItem.ItemChange] = ...
    ItemChildAddedChange: ClassVar[QQuickItem.ItemChange] = ...
    ItemChildRemovedChange: ClassVar[QQuickItem.ItemChange] = ...
    ItemClipsChildrenToShape: ClassVar[QQuickItem.Flag] = ...
    ItemDevicePixelRatioHasChanged: ClassVar[QQuickItem.ItemChange] = ...
    ItemEnabledHasChanged: ClassVar[QQuickItem.ItemChange] = ...
    ItemHasContents: ClassVar[QQuickItem.Flag] = ...
    ItemIsFocusScope: ClassVar[QQuickItem.Flag] = ...
    ItemOpacityHasChanged: ClassVar[QQuickItem.ItemChange] = ...
    ItemParentHasChanged: ClassVar[QQuickItem.ItemChange] = ...
    ItemRotationHasChanged: ClassVar[QQuickItem.ItemChange] = ...
    ItemSceneChange: ClassVar[QQuickItem.ItemChange] = ...
    ItemVisibleHasChanged: ClassVar[QQuickItem.ItemChange] = ...
    Left: ClassVar[QQuickItem.TransformOrigin] = ...
    Right: ClassVar[QQuickItem.TransformOrigin] = ...
    Top: ClassVar[QQuickItem.TransformOrigin] = ...
    TopLeft: ClassVar[QQuickItem.TransformOrigin] = ...
    TopRight: ClassVar[QQuickItem.TransformOrigin] = ...
    activeFocusChanged: ClassVar[PySide2.QtCore.Signal] = ...
    activeFocusOnTabChanged: ClassVar[PySide2.QtCore.Signal] = ...
    antialiasingChanged: ClassVar[PySide2.QtCore.Signal] = ...
    baselineOffsetChanged: ClassVar[PySide2.QtCore.Signal] = ...
    childrenChanged: ClassVar[PySide2.QtCore.Signal] = ...
    childrenRectChanged: ClassVar[PySide2.QtCore.Signal] = ...
    clipChanged: ClassVar[PySide2.QtCore.Signal] = ...
    containmentMaskChanged: ClassVar[PySide2.QtCore.Signal] = ...
    enabledChanged: ClassVar[PySide2.QtCore.Signal] = ...
    focusChanged: ClassVar[PySide2.QtCore.Signal] = ...
    heightChanged: ClassVar[PySide2.QtCore.Signal] = ...
    implicitHeightChanged: ClassVar[PySide2.QtCore.Signal] = ...
    implicitWidthChanged: ClassVar[PySide2.QtCore.Signal] = ...
    opacityChanged: ClassVar[PySide2.QtCore.Signal] = ...
    parentChanged: ClassVar[PySide2.QtCore.Signal] = ...
    rotationChanged: ClassVar[PySide2.QtCore.Signal] = ...
    scaleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    smoothChanged: ClassVar[PySide2.QtCore.Signal] = ...
    stateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    transformOriginChanged: ClassVar[PySide2.QtCore.Signal] = ...
    visibleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    visibleChildrenChanged: ClassVar[PySide2.QtCore.Signal] = ...
    widthChanged: ClassVar[PySide2.QtCore.Signal] = ...
    windowChanged: ClassVar[PySide2.QtCore.Signal] = ...
    xChanged: ClassVar[PySide2.QtCore.Signal] = ...
    yChanged: ClassVar[PySide2.QtCore.Signal] = ...
    zChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QQuickItem,None] = ..., activeFocus: bool = ..., activeFocusChanged: typing.Callable = ..., activeFocusOnTab: bool = ..., activeFocusOnTabChanged: typing.Callable = ..., anchors: typing.Any = ..., antialiasing: bool = ..., antialiasingChanged: typing.Callable = ..., baseline: typing.Any = ..., baselineOffset: float = ..., baselineOffsetChanged: typing.Callable = ..., bottom: typing.Any = ..., children: typing.Any = ..., childrenChanged: typing.Callable = ..., childrenRect: PySide2.QtCore.QRectF = ..., childrenRectChanged: typing.Callable = ..., clip: bool = ..., clipChanged: typing.Callable = ..., containmentMask: PySide2.QtCore.QObject = ..., containmentMaskChanged: typing.Callable = ..., data: typing.Any = ..., destroyed: typing.Callable = ..., enabled: bool = ..., enabledChanged: typing.Callable = ..., focus: bool = ..., focusChanged: typing.Callable = ..., height: float = ..., heightChanged: typing.Callable = ..., horizontalCenter: typing.Any = ..., implicitHeight: float = ..., implicitHeightChanged: typing.Callable = ..., implicitWidth: float = ..., implicitWidthChanged: typing.Callable = ..., layer: typing.Any = ..., left: typing.Any = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., parentChanged: typing.Callable = ..., resources: typing.Any = ..., right: typing.Any = ..., rotation: float = ..., rotationChanged: typing.Callable = ..., scale: float = ..., scaleChanged: typing.Callable = ..., smooth: bool = ..., smoothChanged: typing.Callable = ..., state: str = ..., stateChanged: typing.Callable = ..., states: typing.Any = ..., top: typing.Any = ..., transform: typing.Any = ..., transformOrigin: QQuickItem.TransformOrigin = ..., transformOriginChanged: typing.Callable = ..., transformOriginPoint: PySide2.QtCore.QPointF = ..., transitions: typing.Any = ..., verticalCenter: typing.Any = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., visibleChildren: typing.Any = ..., visibleChildrenChanged: typing.Callable = ..., width: float = ..., widthChanged: typing.Callable = ..., windowChanged: typing.Callable = ..., x: float = ..., xChanged: typing.Callable = ..., y: float = ..., yChanged: typing.Callable = ..., z: float = ..., zChanged: typing.Callable = ...) -> None: ...
    def acceptHoverEvents(self) -> bool: ...
    def acceptTouchEvents(self) -> bool: ...
    def acceptedMouseButtons(self) -> typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]: ...
    def activeFocusOnTab(self) -> bool: ...
    def antialiasing(self) -> bool: ...
    def baselineOffset(self) -> float: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def childAt(self, x: float, y: float) -> QQuickItem: ...
    def childItems(self) -> typing.List[QQuickItem]: ...
    def childMouseEventFilter(self, arg__1: QQuickItem, arg__2: PySide2.QtCore.QEvent) -> bool: ...
    def childrenRect(self) -> PySide2.QtCore.QRectF: ...
    def classBegin(self) -> None: ...
    def clip(self) -> bool: ...
    def clipRect(self) -> PySide2.QtCore.QRectF: ...
    def componentComplete(self) -> None: ...
    def containmentMask(self) -> PySide2.QtCore.QObject: ...
    def contains(self, point: PySide2.QtCore.QPointF) -> bool: ...
    def cursor(self) -> PySide2.QtGui.QCursor: ...
    def dragEnterEvent(self, arg__1: PySide2.QtGui.QDragEnterEvent) -> None: ...
    def dragLeaveEvent(self, arg__1: PySide2.QtGui.QDragLeaveEvent) -> None: ...
    def dragMoveEvent(self, arg__1: PySide2.QtGui.QDragMoveEvent) -> None: ...
    def dropEvent(self, arg__1: PySide2.QtGui.QDropEvent) -> None: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def filtersChildMouseEvents(self) -> bool: ...
    def flags(self) -> typing.Union[QQuickItem.Flags,QQuickItem.Flag]: ...
    def focusInEvent(self, arg__1: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusOutEvent(self, arg__1: PySide2.QtGui.QFocusEvent) -> None: ...
    @overload
    def forceActiveFocus(self) -> None: ...
    @overload
    def forceActiveFocus(self, reason: PySide2.QtCore.Qt.FocusReason) -> None: ...
    def geometryChanged(self, newGeometry: PySide2.QtCore.QRectF, oldGeometry: PySide2.QtCore.QRectF) -> None: ...
    def grabMouse(self) -> None: ...
    @overload
    def grabToImage(self, callback: PySide2.QtQml.QJSValue, targetSize: PySide2.QtCore.QSize = ...) -> bool: ...
    @overload
    def grabToImage(self, targetSize: PySide2.QtCore.QSize = ...) -> typing.Tuple[QQuickItemGrabResult]: ...
    def grabTouchPoints(self, ids: typing.List[int]) -> None: ...
    def hasActiveFocus(self) -> bool: ...
    def hasFocus(self) -> bool: ...
    def height(self) -> float: ...
    def heightValid(self) -> bool: ...
    def hoverEnterEvent(self, event: PySide2.QtGui.QHoverEvent) -> None: ...
    def hoverLeaveEvent(self, event: PySide2.QtGui.QHoverEvent) -> None: ...
    def hoverMoveEvent(self, event: PySide2.QtGui.QHoverEvent) -> None: ...
    def implicitHeight(self) -> float: ...
    def implicitWidth(self) -> float: ...
    def inputMethodEvent(self, arg__1: PySide2.QtGui.QInputMethodEvent) -> None: ...
    def inputMethodQuery(self, query: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    def isAncestorOf(self, child: QQuickItem) -> bool: ...
    def isComponentComplete(self) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isFocusScope(self) -> bool: ...
    def isTextureProvider(self) -> bool: ...
    def isUnderMouse(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def itemTransform(self, arg__1: QQuickItem) -> typing.Tuple[PySide2.QtGui.QTransform,bool]: ...
    def keepMouseGrab(self) -> bool: ...
    def keepTouchGrab(self) -> bool: ...
    def keyPressEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, event: PySide2.QtGui.QKeyEvent) -> None: ...
    def mapFromGlobal(self, point: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    def mapFromItem(self, item: QQuickItem, point: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    def mapFromScene(self, point: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    def mapRectFromItem(self, item: QQuickItem, rect: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def mapRectFromScene(self, rect: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def mapRectToItem(self, item: QQuickItem, rect: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def mapRectToScene(self, rect: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def mapToGlobal(self, point: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    def mapToItem(self, item: QQuickItem, point: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    def mapToScene(self, point: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    def mouseDoubleClickEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseMoveEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, event: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseUngrabEvent(self) -> None: ...
    def nextItemInFocusChain(self, forward: bool = ...) -> QQuickItem: ...
    def opacity(self) -> float: ...
    def parentItem(self) -> QQuickItem: ...
    def polish(self) -> None: ...
    def position(self) -> PySide2.QtCore.QPointF: ...
    def releaseResources(self) -> None: ...
    def resetAntialiasing(self) -> None: ...
    def resetHeight(self) -> None: ...
    def resetWidth(self) -> None: ...
    def rotation(self) -> float: ...
    def scale(self) -> float: ...
    def scopedFocusItem(self) -> QQuickItem: ...
    def setAcceptHoverEvents(self, enabled: bool) -> None: ...
    def setAcceptTouchEvents(self, accept: bool) -> None: ...
    def setAcceptedMouseButtons(self, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]) -> None: ...
    def setActiveFocusOnTab(self, arg__1: bool) -> None: ...
    def setAntialiasing(self, arg__1: bool) -> None: ...
    def setBaselineOffset(self, arg__1: float) -> None: ...
    def setClip(self, arg__1: bool) -> None: ...
    def setContainmentMask(self, mask: PySide2.QtCore.QObject) -> None: ...
    def setCursor(self, cursor: PySide2.QtGui.QCursor) -> None: ...
    def setEnabled(self, arg__1: bool) -> None: ...
    def setFiltersChildMouseEvents(self, filter: bool) -> None: ...
    def setFlag(self, flag: QQuickItem.Flag, enabled: bool = ...) -> None: ...
    def setFlags(self, flags: typing.Union[QQuickItem.Flags,QQuickItem.Flag]) -> None: ...
    @overload
    def setFocus(self, arg__1: bool) -> None: ...
    @overload
    def setFocus(self, focus: bool, reason: PySide2.QtCore.Qt.FocusReason) -> None: ...
    def setHeight(self, arg__1: float) -> None: ...
    def setImplicitHeight(self, arg__1: float) -> None: ...
    def setImplicitSize(self, arg__1: float, arg__2: float) -> None: ...
    def setImplicitWidth(self, arg__1: float) -> None: ...
    def setKeepMouseGrab(self, arg__1: bool) -> None: ...
    def setKeepTouchGrab(self, arg__1: bool) -> None: ...
    def setOpacity(self, arg__1: float) -> None: ...
    def setParentItem(self, parent: QQuickItem) -> None: ...
    def setPosition(self, arg__1: PySide2.QtCore.QPointF) -> None: ...
    def setRotation(self, arg__1: float) -> None: ...
    def setScale(self, arg__1: float) -> None: ...
    def setSize(self, size: PySide2.QtCore.QSizeF) -> None: ...
    def setSmooth(self, arg__1: bool) -> None: ...
    def setState(self, arg__1: str) -> None: ...
    def setTransformOrigin(self, arg__1: QQuickItem.TransformOrigin) -> None: ...
    def setTransformOriginPoint(self, arg__1: PySide2.QtCore.QPointF) -> None: ...
    def setVisible(self, arg__1: bool) -> None: ...
    def setWidth(self, arg__1: float) -> None: ...
    def setX(self, arg__1: float) -> None: ...
    def setY(self, arg__1: float) -> None: ...
    def setZ(self, arg__1: float) -> None: ...
    def size(self) -> PySide2.QtCore.QSizeF: ...
    def smooth(self) -> bool: ...
    def stackAfter(self, arg__1: QQuickItem) -> None: ...
    def stackBefore(self, arg__1: QQuickItem) -> None: ...
    def state(self) -> str: ...
    def textureProvider(self) -> QSGTextureProvider: ...
    def touchEvent(self, event: PySide2.QtGui.QTouchEvent) -> None: ...
    def touchUngrabEvent(self) -> None: ...
    def transformOrigin(self) -> QQuickItem.TransformOrigin: ...
    def transformOriginPoint(self) -> PySide2.QtCore.QPointF: ...
    def ungrabMouse(self) -> None: ...
    def ungrabTouchPoints(self) -> None: ...
    def unsetCursor(self) -> None: ...
    def update(self) -> None: ...
    def updateInputMethod(self, queries: typing.Union[PySide2.QtCore.Qt.InputMethodQueries,PySide2.QtCore.Qt.InputMethodQuery] = ...) -> None: ...
    def updatePaintNode(self, arg__1: QSGNode, arg__2: QQuickItem.UpdatePaintNodeData) -> QSGNode: ...
    def updatePolish(self) -> None: ...
    def wheelEvent(self, event: PySide2.QtGui.QWheelEvent) -> None: ...
    def width(self) -> float: ...
    def widthValid(self) -> bool: ...
    def window(self) -> QQuickWindow: ...
    def windowDeactivateEvent(self) -> None: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def z(self) -> float: ...

class QQuickItemGrabResult(PySide2.QtCore.QObject):
    ready: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def image(self) -> PySide2.QtGui.QImage: ...
    def saveToFile(self, fileName: str) -> bool: ...
    def url(self) -> PySide2.QtCore.QUrl: ...

class QQuickPaintedItem(QQuickItem):
    class PerformanceHint:
        FastFBOResizing: ClassVar[QQuickPaintedItem.PerformanceHint] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QQuickPaintedItem.PerformanceHints: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QQuickPaintedItem.PerformanceHint: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QQuickPaintedItem.PerformanceHints: ...
        def __rand__(self, other: typing.SupportsInt) -> QQuickPaintedItem.PerformanceHints: ...
        def __ror__(self, other: typing.SupportsInt) -> QQuickPaintedItem.PerformanceHints: ...
        def __rxor__(self, other: typing.SupportsInt) -> QQuickPaintedItem.PerformanceHints: ...
        def __xor__(self, other: typing.SupportsInt) -> QQuickPaintedItem.PerformanceHints: ...

    class PerformanceHints:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QQuickPaintedItem.PerformanceHints: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QQuickPaintedItem.PerformanceHints: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QQuickPaintedItem.PerformanceHints: ...
        def __rand__(self, other: typing.SupportsInt) -> QQuickPaintedItem.PerformanceHints: ...
        def __ror__(self, other: typing.SupportsInt) -> QQuickPaintedItem.PerformanceHints: ...
        def __rxor__(self, other: typing.SupportsInt) -> QQuickPaintedItem.PerformanceHints: ...
        def __xor__(self, other: typing.SupportsInt) -> QQuickPaintedItem.PerformanceHints: ...

    class RenderTarget:
        FramebufferObject: ClassVar[QQuickPaintedItem.RenderTarget] = ...
        Image: ClassVar[QQuickPaintedItem.RenderTarget] = ...
        InvertedYFramebufferObject: ClassVar[QQuickPaintedItem.RenderTarget] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QQuickPaintedItem.RenderTarget: ...
        def __and__(self, other: typing.SupportsInt) -> QQuickPaintedItem.RenderTarget: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QQuickPaintedItem.RenderTarget: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QQuickPaintedItem.RenderTarget: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QQuickPaintedItem.RenderTarget: ...
        def __rand__(self, other: typing.SupportsInt) -> QQuickPaintedItem.RenderTarget: ...
        def __rmul__(self, other: typing.SupportsInt) -> QQuickPaintedItem.RenderTarget: ...
        def __ror__(self, other: typing.SupportsInt) -> QQuickPaintedItem.RenderTarget: ...
        def __rsub__(self, other: typing.SupportsInt) -> QQuickPaintedItem.RenderTarget: ...
        def __rxor__(self, other: typing.SupportsInt) -> QQuickPaintedItem.RenderTarget: ...
        def __sub__(self, other: typing.SupportsInt) -> QQuickPaintedItem.RenderTarget: ...
        def __xor__(self, other: typing.SupportsInt) -> QQuickPaintedItem.RenderTarget: ...
    FastFBOResizing: ClassVar[QQuickPaintedItem.PerformanceHint] = ...
    FramebufferObject: ClassVar[QQuickPaintedItem.RenderTarget] = ...
    Image: ClassVar[QQuickPaintedItem.RenderTarget] = ...
    InvertedYFramebufferObject: ClassVar[QQuickPaintedItem.RenderTarget] = ...
    contentsScaleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    contentsSizeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    fillColorChanged: ClassVar[PySide2.QtCore.Signal] = ...
    renderTargetChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    textureSizeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, parent: typing.Union[QQuickItem,None] = ..., activeFocus: bool = ..., activeFocusChanged: typing.Callable = ..., activeFocusOnTab: bool = ..., activeFocusOnTabChanged: typing.Callable = ..., anchors: typing.Any = ..., antialiasing: bool = ..., antialiasingChanged: typing.Callable = ..., baseline: typing.Any = ..., baselineOffset: float = ..., baselineOffsetChanged: typing.Callable = ..., bottom: typing.Any = ..., children: typing.Any = ..., childrenChanged: typing.Callable = ..., childrenRect: PySide2.QtCore.QRectF = ..., childrenRectChanged: typing.Callable = ..., clip: bool = ..., clipChanged: typing.Callable = ..., containmentMask: PySide2.QtCore.QObject = ..., containmentMaskChanged: typing.Callable = ..., data: typing.Any = ..., destroyed: typing.Callable = ..., enabled: bool = ..., enabledChanged: typing.Callable = ..., focus: bool = ..., focusChanged: typing.Callable = ..., height: float = ..., heightChanged: typing.Callable = ..., horizontalCenter: typing.Any = ..., implicitHeight: float = ..., implicitHeightChanged: typing.Callable = ..., implicitWidth: float = ..., implicitWidthChanged: typing.Callable = ..., layer: typing.Any = ..., left: typing.Any = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., parentChanged: typing.Callable = ..., resources: typing.Any = ..., right: typing.Any = ..., rotation: float = ..., rotationChanged: typing.Callable = ..., scale: float = ..., scaleChanged: typing.Callable = ..., smooth: bool = ..., smoothChanged: typing.Callable = ..., state: str = ..., stateChanged: typing.Callable = ..., states: typing.Any = ..., top: typing.Any = ..., transform: typing.Any = ..., transformOrigin: QQuickItem.TransformOrigin = ..., transformOriginChanged: typing.Callable = ..., transformOriginPoint: PySide2.QtCore.QPointF = ..., transitions: typing.Any = ..., verticalCenter: typing.Any = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., visibleChildren: typing.Any = ..., visibleChildrenChanged: typing.Callable = ..., width: float = ..., widthChanged: typing.Callable = ..., windowChanged: typing.Callable = ..., x: float = ..., xChanged: typing.Callable = ..., y: float = ..., yChanged: typing.Callable = ..., z: float = ..., zChanged: typing.Callable = ...) -> None: ...
    def antialiasing(self) -> bool: ...
    def contentsBoundingRect(self) -> PySide2.QtCore.QRectF: ...
    def contentsScale(self) -> float: ...
    def contentsSize(self) -> PySide2.QtCore.QSize: ...
    def fillColor(self) -> PySide2.QtGui.QColor: ...
    def isTextureProvider(self) -> bool: ...
    def mipmap(self) -> bool: ...
    def opaquePainting(self) -> bool: ...
    def paint(self, painter: PySide2.QtGui.QPainter) -> None: ...
    def performanceHints(self) -> typing.Union[QQuickPaintedItem.PerformanceHints,QQuickPaintedItem.PerformanceHint]: ...
    def releaseResources(self) -> None: ...
    def renderTarget(self) -> QQuickPaintedItem.RenderTarget: ...
    def resetContentsSize(self) -> None: ...
    def setAntialiasing(self, enable: bool) -> None: ...
    def setContentsScale(self, arg__1: float) -> None: ...
    def setContentsSize(self, arg__1: PySide2.QtCore.QSize) -> None: ...
    def setFillColor(self, arg__1: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setMipmap(self, enable: bool) -> None: ...
    def setOpaquePainting(self, opaque: bool) -> None: ...
    def setPerformanceHint(self, hint: QQuickPaintedItem.PerformanceHint, enabled: bool = ...) -> None: ...
    def setPerformanceHints(self, hints: typing.Union[QQuickPaintedItem.PerformanceHints,QQuickPaintedItem.PerformanceHint]) -> None: ...
    def setRenderTarget(self, target: QQuickPaintedItem.RenderTarget) -> None: ...
    def setTextureSize(self, size: PySide2.QtCore.QSize) -> None: ...
    def textureProvider(self) -> QSGTextureProvider: ...
    def textureSize(self) -> PySide2.QtCore.QSize: ...
    def update(self, rect: PySide2.QtCore.QRect = ...) -> None: ...
    def updatePaintNode(self, arg__1: QSGNode, arg__2: QQuickItem.UpdatePaintNodeData) -> QSGNode: ...

class QQuickRenderControl(PySide2.QtCore.QObject):
    renderRequested: ClassVar[PySide2.QtCore.Signal] = ...
    sceneChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., renderRequested: typing.Callable = ..., sceneChanged: typing.Callable = ...) -> None: ...
    def grab(self) -> PySide2.QtGui.QImage: ...
    def initialize(self, gl: PySide2.QtGui.QOpenGLContext) -> None: ...
    def invalidate(self) -> None: ...
    def polishItems(self) -> None: ...
    def prepareThread(self, targetThread: PySide2.QtCore.QThread) -> None: ...
    def render(self) -> None: ...
    def renderWindow(self, offset: PySide2.QtCore.QPoint) -> PySide2.QtGui.QWindow: ...
    @classmethod
    def renderWindowFor(cls, win: QQuickWindow, offset: typing.Union[PySide2.QtCore.QPoint,None] = ...) -> PySide2.QtGui.QWindow: ...
    def sync(self) -> bool: ...

class QQuickTextDocument(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: QQuickItem, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def textDocument(self) -> PySide2.QtGui.QTextDocument: ...

class QQuickTextureFactory(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def createTexture(self, window: QQuickWindow) -> QSGTexture: ...
    def image(self) -> PySide2.QtGui.QImage: ...
    def textureByteCount(self) -> int: ...
    @classmethod
    def textureFactoryForImage(cls, image: PySide2.QtGui.QImage) -> QQuickTextureFactory: ...
    def textureSize(self) -> PySide2.QtCore.QSize: ...

class QQuickTransform(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def appendToItem(self, arg__1: QQuickItem) -> None: ...
    def applyTo(self, matrix: PySide2.QtGui.QMatrix4x4) -> None: ...
    def prependToItem(self, arg__1: QQuickItem) -> None: ...
    def update(self) -> None: ...

class QQuickView(QQuickWindow):
    class ResizeMode:
        SizeRootObjectToView: ClassVar[QQuickView.ResizeMode] = ...
        SizeViewToRootObject: ClassVar[QQuickView.ResizeMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QQuickView.ResizeMode: ...
        def __and__(self, other: typing.SupportsInt) -> QQuickView.ResizeMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QQuickView.ResizeMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QQuickView.ResizeMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QQuickView.ResizeMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QQuickView.ResizeMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QQuickView.ResizeMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QQuickView.ResizeMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QQuickView.ResizeMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QQuickView.ResizeMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QQuickView.ResizeMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QQuickView.ResizeMode: ...

    class Status:
        Error: ClassVar[QQuickView.Status] = ...
        Loading: ClassVar[QQuickView.Status] = ...
        Null: ClassVar[QQuickView.Status] = ...
        Ready: ClassVar[QQuickView.Status] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QQuickView.Status: ...
        def __and__(self, other: typing.SupportsInt) -> QQuickView.Status: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QQuickView.Status: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QQuickView.Status: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QQuickView.Status: ...
        def __rand__(self, other: typing.SupportsInt) -> QQuickView.Status: ...
        def __rmul__(self, other: typing.SupportsInt) -> QQuickView.Status: ...
        def __ror__(self, other: typing.SupportsInt) -> QQuickView.Status: ...
        def __rsub__(self, other: typing.SupportsInt) -> QQuickView.Status: ...
        def __rxor__(self, other: typing.SupportsInt) -> QQuickView.Status: ...
        def __sub__(self, other: typing.SupportsInt) -> QQuickView.Status: ...
        def __xor__(self, other: typing.SupportsInt) -> QQuickView.Status: ...
    Error: ClassVar[QQuickView.Status] = ...
    Loading: ClassVar[QQuickView.Status] = ...
    Null: ClassVar[QQuickView.Status] = ...
    Ready: ClassVar[QQuickView.Status] = ...
    SizeRootObjectToView: ClassVar[QQuickView.ResizeMode] = ...
    SizeViewToRootObject: ClassVar[QQuickView.ResizeMode] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    statusChanged: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, engine: PySide2.QtQml.QQmlEngine, parent: PySide2.QtGui.QWindow, active: bool = ..., activeChanged: typing.Callable = ..., activeFocusItem: typing.Any = ..., activeFocusItemChanged: typing.Callable = ..., afterAnimating: typing.Callable = ..., afterRenderPassRecording: typing.Callable = ..., afterRendering: typing.Callable = ..., afterSynchronizing: typing.Callable = ..., beforeRenderPassRecording: typing.Callable = ..., beforeRendering: typing.Callable = ..., beforeSynchronizing: typing.Callable = ..., closing: typing.Callable = ..., color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor] = ..., colorChanged: typing.Callable = ..., contentItem: typing.Any = ..., contentOrientation: PySide2.QtCore.Qt.ScreenOrientation = ..., contentOrientationChanged: typing.Callable = ..., data: typing.Any = ..., destroyed: typing.Callable = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., focusObjectChanged: typing.Callable = ..., frameSwapped: typing.Callable = ..., height: int = ..., heightChanged: typing.Callable = ..., maximumHeight: int = ..., maximumHeightChanged: typing.Callable = ..., maximumWidth: int = ..., maximumWidthChanged: typing.Callable = ..., minimumHeight: int = ..., minimumHeightChanged: typing.Callable = ..., minimumWidth: int = ..., minimumWidthChanged: typing.Callable = ..., modality: PySide2.QtCore.Qt.WindowModality = ..., modalityChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., openglContextCreated: typing.Callable = ..., resizeMode: QQuickView.ResizeMode = ..., sceneGraphAboutToStop: typing.Callable = ..., sceneGraphError: typing.Callable = ..., sceneGraphInitialized: typing.Callable = ..., sceneGraphInvalidated: typing.Callable = ..., screenChanged: typing.Callable = ..., source: PySide2.QtCore.QUrl = ..., status: QQuickView.Status = ..., statusChanged: typing.Callable = ..., title: str = ..., transientParent: typing.Any = ..., transientParentChanged: typing.Callable = ..., visibility: QQuickView.Visibility = ..., visibilityChanged: typing.Callable = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., width: int = ..., widthChanged: typing.Callable = ..., windowStateChanged: typing.Callable = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., xChanged: typing.Callable = ..., y: int = ..., yChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtGui.QWindow,None] = ..., active: bool = ..., activeChanged: typing.Callable = ..., activeFocusItem: typing.Any = ..., activeFocusItemChanged: typing.Callable = ..., afterAnimating: typing.Callable = ..., afterRenderPassRecording: typing.Callable = ..., afterRendering: typing.Callable = ..., afterSynchronizing: typing.Callable = ..., beforeRenderPassRecording: typing.Callable = ..., beforeRendering: typing.Callable = ..., beforeSynchronizing: typing.Callable = ..., closing: typing.Callable = ..., color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor] = ..., colorChanged: typing.Callable = ..., contentItem: typing.Any = ..., contentOrientation: PySide2.QtCore.Qt.ScreenOrientation = ..., contentOrientationChanged: typing.Callable = ..., data: typing.Any = ..., destroyed: typing.Callable = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., focusObjectChanged: typing.Callable = ..., frameSwapped: typing.Callable = ..., height: int = ..., heightChanged: typing.Callable = ..., maximumHeight: int = ..., maximumHeightChanged: typing.Callable = ..., maximumWidth: int = ..., maximumWidthChanged: typing.Callable = ..., minimumHeight: int = ..., minimumHeightChanged: typing.Callable = ..., minimumWidth: int = ..., minimumWidthChanged: typing.Callable = ..., modality: PySide2.QtCore.Qt.WindowModality = ..., modalityChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., openglContextCreated: typing.Callable = ..., resizeMode: QQuickView.ResizeMode = ..., sceneGraphAboutToStop: typing.Callable = ..., sceneGraphError: typing.Callable = ..., sceneGraphInitialized: typing.Callable = ..., sceneGraphInvalidated: typing.Callable = ..., screenChanged: typing.Callable = ..., source: PySide2.QtCore.QUrl = ..., status: QQuickView.Status = ..., statusChanged: typing.Callable = ..., title: str = ..., transientParent: typing.Any = ..., transientParentChanged: typing.Callable = ..., visibility: QQuickView.Visibility = ..., visibilityChanged: typing.Callable = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., width: int = ..., widthChanged: typing.Callable = ..., windowStateChanged: typing.Callable = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., xChanged: typing.Callable = ..., y: int = ..., yChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, source: PySide2.QtCore.QUrl, parent: typing.Union[PySide2.QtGui.QWindow,None] = ..., active: bool = ..., activeChanged: typing.Callable = ..., activeFocusItem: typing.Any = ..., activeFocusItemChanged: typing.Callable = ..., afterAnimating: typing.Callable = ..., afterRenderPassRecording: typing.Callable = ..., afterRendering: typing.Callable = ..., afterSynchronizing: typing.Callable = ..., beforeRenderPassRecording: typing.Callable = ..., beforeRendering: typing.Callable = ..., beforeSynchronizing: typing.Callable = ..., closing: typing.Callable = ..., color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor] = ..., colorChanged: typing.Callable = ..., contentItem: typing.Any = ..., contentOrientation: PySide2.QtCore.Qt.ScreenOrientation = ..., contentOrientationChanged: typing.Callable = ..., data: typing.Any = ..., destroyed: typing.Callable = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., focusObjectChanged: typing.Callable = ..., frameSwapped: typing.Callable = ..., height: int = ..., heightChanged: typing.Callable = ..., maximumHeight: int = ..., maximumHeightChanged: typing.Callable = ..., maximumWidth: int = ..., maximumWidthChanged: typing.Callable = ..., minimumHeight: int = ..., minimumHeightChanged: typing.Callable = ..., minimumWidth: int = ..., minimumWidthChanged: typing.Callable = ..., modality: PySide2.QtCore.Qt.WindowModality = ..., modalityChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., openglContextCreated: typing.Callable = ..., resizeMode: QQuickView.ResizeMode = ..., sceneGraphAboutToStop: typing.Callable = ..., sceneGraphError: typing.Callable = ..., sceneGraphInitialized: typing.Callable = ..., sceneGraphInvalidated: typing.Callable = ..., screenChanged: typing.Callable = ..., status: QQuickView.Status = ..., statusChanged: typing.Callable = ..., title: str = ..., transientParent: typing.Any = ..., transientParentChanged: typing.Callable = ..., visibility: QQuickView.Visibility = ..., visibilityChanged: typing.Callable = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., width: int = ..., widthChanged: typing.Callable = ..., windowStateChanged: typing.Callable = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., xChanged: typing.Callable = ..., y: int = ..., yChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, source: PySide2.QtCore.QUrl, renderControl: QQuickRenderControl, active: bool = ..., activeChanged: typing.Callable = ..., activeFocusItem: typing.Any = ..., activeFocusItemChanged: typing.Callable = ..., afterAnimating: typing.Callable = ..., afterRenderPassRecording: typing.Callable = ..., afterRendering: typing.Callable = ..., afterSynchronizing: typing.Callable = ..., beforeRenderPassRecording: typing.Callable = ..., beforeRendering: typing.Callable = ..., beforeSynchronizing: typing.Callable = ..., closing: typing.Callable = ..., color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor] = ..., colorChanged: typing.Callable = ..., contentItem: typing.Any = ..., contentOrientation: PySide2.QtCore.Qt.ScreenOrientation = ..., contentOrientationChanged: typing.Callable = ..., data: typing.Any = ..., destroyed: typing.Callable = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., focusObjectChanged: typing.Callable = ..., frameSwapped: typing.Callable = ..., height: int = ..., heightChanged: typing.Callable = ..., maximumHeight: int = ..., maximumHeightChanged: typing.Callable = ..., maximumWidth: int = ..., maximumWidthChanged: typing.Callable = ..., minimumHeight: int = ..., minimumHeightChanged: typing.Callable = ..., minimumWidth: int = ..., minimumWidthChanged: typing.Callable = ..., modality: PySide2.QtCore.Qt.WindowModality = ..., modalityChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., openglContextCreated: typing.Callable = ..., resizeMode: QQuickView.ResizeMode = ..., sceneGraphAboutToStop: typing.Callable = ..., sceneGraphError: typing.Callable = ..., sceneGraphInitialized: typing.Callable = ..., sceneGraphInvalidated: typing.Callable = ..., screenChanged: typing.Callable = ..., status: QQuickView.Status = ..., statusChanged: typing.Callable = ..., title: str = ..., transientParent: typing.Any = ..., transientParentChanged: typing.Callable = ..., visibility: QQuickView.Visibility = ..., visibilityChanged: typing.Callable = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., width: int = ..., widthChanged: typing.Callable = ..., windowStateChanged: typing.Callable = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., xChanged: typing.Callable = ..., y: int = ..., yChanged: typing.Callable = ...) -> None: ...
    def engine(self) -> PySide2.QtQml.QQmlEngine: ...
    def errors(self) -> typing.List[PySide2.QtQml.QQmlError]: ...
    def initialSize(self) -> PySide2.QtCore.QSize: ...
    def keyPressEvent(self, arg__1: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, arg__1: PySide2.QtGui.QKeyEvent) -> None: ...
    def mouseMoveEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def resizeEvent(self, arg__1: PySide2.QtGui.QResizeEvent) -> None: ...
    def resizeMode(self) -> QQuickView.ResizeMode: ...
    def rootContext(self) -> PySide2.QtQml.QQmlContext: ...
    def rootObject(self) -> QQuickItem: ...
    def setContent(self, url: PySide2.QtCore.QUrl, component: PySide2.QtQml.QQmlComponent, item: PySide2.QtCore.QObject) -> None: ...
    def setInitialProperties(self, initialProperties: typing.Dict[str,typing.Any]) -> None: ...
    def setResizeMode(self, arg__1: QQuickView.ResizeMode) -> None: ...
    def setSource(self, arg__1: PySide2.QtCore.QUrl) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def source(self) -> PySide2.QtCore.QUrl: ...
    def status(self) -> QQuickView.Status: ...
    def timerEvent(self, arg__1: PySide2.QtCore.QTimerEvent) -> None: ...

class QQuickWindow(PySide2.QtGui.QWindow):
    class CreateTextureOption:
        TextureCanUseAtlas: ClassVar[QQuickWindow.CreateTextureOption] = ...
        TextureHasAlphaChannel: ClassVar[QQuickWindow.CreateTextureOption] = ...
        TextureHasMipmaps: ClassVar[QQuickWindow.CreateTextureOption] = ...
        TextureIsOpaque: ClassVar[QQuickWindow.CreateTextureOption] = ...
        TextureOwnsGLTexture: ClassVar[QQuickWindow.CreateTextureOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QQuickWindow.CreateTextureOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QQuickWindow.CreateTextureOption: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QQuickWindow.CreateTextureOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QQuickWindow.CreateTextureOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QQuickWindow.CreateTextureOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QQuickWindow.CreateTextureOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QQuickWindow.CreateTextureOptions: ...

    class CreateTextureOptions:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QQuickWindow.CreateTextureOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QQuickWindow.CreateTextureOptions: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QQuickWindow.CreateTextureOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QQuickWindow.CreateTextureOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QQuickWindow.CreateTextureOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QQuickWindow.CreateTextureOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QQuickWindow.CreateTextureOptions: ...

    class NativeObjectType:
        NativeObjectTexture: ClassVar[QQuickWindow.NativeObjectType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QQuickWindow.NativeObjectType: ...
        def __and__(self, other: typing.SupportsInt) -> QQuickWindow.NativeObjectType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QQuickWindow.NativeObjectType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QQuickWindow.NativeObjectType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QQuickWindow.NativeObjectType: ...
        def __rand__(self, other: typing.SupportsInt) -> QQuickWindow.NativeObjectType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QQuickWindow.NativeObjectType: ...
        def __ror__(self, other: typing.SupportsInt) -> QQuickWindow.NativeObjectType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QQuickWindow.NativeObjectType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QQuickWindow.NativeObjectType: ...
        def __sub__(self, other: typing.SupportsInt) -> QQuickWindow.NativeObjectType: ...
        def __xor__(self, other: typing.SupportsInt) -> QQuickWindow.NativeObjectType: ...

    class RenderStage:
        AfterRenderingStage: ClassVar[QQuickWindow.RenderStage] = ...
        AfterSwapStage: ClassVar[QQuickWindow.RenderStage] = ...
        AfterSynchronizingStage: ClassVar[QQuickWindow.RenderStage] = ...
        BeforeRenderingStage: ClassVar[QQuickWindow.RenderStage] = ...
        BeforeSynchronizingStage: ClassVar[QQuickWindow.RenderStage] = ...
        NoStage: ClassVar[QQuickWindow.RenderStage] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QQuickWindow.RenderStage: ...
        def __and__(self, other: typing.SupportsInt) -> QQuickWindow.RenderStage: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QQuickWindow.RenderStage: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QQuickWindow.RenderStage: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QQuickWindow.RenderStage: ...
        def __rand__(self, other: typing.SupportsInt) -> QQuickWindow.RenderStage: ...
        def __rmul__(self, other: typing.SupportsInt) -> QQuickWindow.RenderStage: ...
        def __ror__(self, other: typing.SupportsInt) -> QQuickWindow.RenderStage: ...
        def __rsub__(self, other: typing.SupportsInt) -> QQuickWindow.RenderStage: ...
        def __rxor__(self, other: typing.SupportsInt) -> QQuickWindow.RenderStage: ...
        def __sub__(self, other: typing.SupportsInt) -> QQuickWindow.RenderStage: ...
        def __xor__(self, other: typing.SupportsInt) -> QQuickWindow.RenderStage: ...

    class SceneGraphError:
        ContextNotAvailable: ClassVar[QQuickWindow.SceneGraphError] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QQuickWindow.SceneGraphError: ...
        def __and__(self, other: typing.SupportsInt) -> QQuickWindow.SceneGraphError: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QQuickWindow.SceneGraphError: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QQuickWindow.SceneGraphError: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QQuickWindow.SceneGraphError: ...
        def __rand__(self, other: typing.SupportsInt) -> QQuickWindow.SceneGraphError: ...
        def __rmul__(self, other: typing.SupportsInt) -> QQuickWindow.SceneGraphError: ...
        def __ror__(self, other: typing.SupportsInt) -> QQuickWindow.SceneGraphError: ...
        def __rsub__(self, other: typing.SupportsInt) -> QQuickWindow.SceneGraphError: ...
        def __rxor__(self, other: typing.SupportsInt) -> QQuickWindow.SceneGraphError: ...
        def __sub__(self, other: typing.SupportsInt) -> QQuickWindow.SceneGraphError: ...
        def __xor__(self, other: typing.SupportsInt) -> QQuickWindow.SceneGraphError: ...

    class TextRenderType:
        NativeTextRendering: ClassVar[QQuickWindow.TextRenderType] = ...
        QtTextRendering: ClassVar[QQuickWindow.TextRenderType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QQuickWindow.TextRenderType: ...
        def __and__(self, other: typing.SupportsInt) -> QQuickWindow.TextRenderType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QQuickWindow.TextRenderType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QQuickWindow.TextRenderType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QQuickWindow.TextRenderType: ...
        def __rand__(self, other: typing.SupportsInt) -> QQuickWindow.TextRenderType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QQuickWindow.TextRenderType: ...
        def __ror__(self, other: typing.SupportsInt) -> QQuickWindow.TextRenderType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QQuickWindow.TextRenderType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QQuickWindow.TextRenderType: ...
        def __sub__(self, other: typing.SupportsInt) -> QQuickWindow.TextRenderType: ...
        def __xor__(self, other: typing.SupportsInt) -> QQuickWindow.TextRenderType: ...
    AfterRenderingStage: ClassVar[QQuickWindow.RenderStage] = ...
    AfterSwapStage: ClassVar[QQuickWindow.RenderStage] = ...
    AfterSynchronizingStage: ClassVar[QQuickWindow.RenderStage] = ...
    BeforeRenderingStage: ClassVar[QQuickWindow.RenderStage] = ...
    BeforeSynchronizingStage: ClassVar[QQuickWindow.RenderStage] = ...
    ContextNotAvailable: ClassVar[QQuickWindow.SceneGraphError] = ...
    NativeObjectTexture: ClassVar[QQuickWindow.NativeObjectType] = ...
    NativeTextRendering: ClassVar[QQuickWindow.TextRenderType] = ...
    NoStage: ClassVar[QQuickWindow.RenderStage] = ...
    QtTextRendering: ClassVar[QQuickWindow.TextRenderType] = ...
    TextureCanUseAtlas: ClassVar[QQuickWindow.CreateTextureOption] = ...
    TextureHasAlphaChannel: ClassVar[QQuickWindow.CreateTextureOption] = ...
    TextureHasMipmaps: ClassVar[QQuickWindow.CreateTextureOption] = ...
    TextureIsOpaque: ClassVar[QQuickWindow.CreateTextureOption] = ...
    TextureOwnsGLTexture: ClassVar[QQuickWindow.CreateTextureOption] = ...
    activeFocusItemChanged: ClassVar[PySide2.QtCore.Signal] = ...
    afterAnimating: ClassVar[PySide2.QtCore.Signal] = ...
    afterRenderPassRecording: ClassVar[PySide2.QtCore.Signal] = ...
    afterRendering: ClassVar[PySide2.QtCore.Signal] = ...
    afterSynchronizing: ClassVar[PySide2.QtCore.Signal] = ...
    beforeRenderPassRecording: ClassVar[PySide2.QtCore.Signal] = ...
    beforeRendering: ClassVar[PySide2.QtCore.Signal] = ...
    beforeSynchronizing: ClassVar[PySide2.QtCore.Signal] = ...
    closing: ClassVar[PySide2.QtCore.Signal] = ...
    colorChanged: ClassVar[PySide2.QtCore.Signal] = ...
    frameSwapped: ClassVar[PySide2.QtCore.Signal] = ...
    openglContextCreated: ClassVar[PySide2.QtCore.Signal] = ...
    sceneGraphAboutToStop: ClassVar[PySide2.QtCore.Signal] = ...
    sceneGraphError: ClassVar[PySide2.QtCore.Signal] = ...
    sceneGraphInitialized: ClassVar[PySide2.QtCore.Signal] = ...
    sceneGraphInvalidated: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtGui.QWindow,None] = ..., active: bool = ..., activeChanged: typing.Callable = ..., activeFocusItem: QQuickItem = ..., activeFocusItemChanged: typing.Callable = ..., afterAnimating: typing.Callable = ..., afterRenderPassRecording: typing.Callable = ..., afterRendering: typing.Callable = ..., afterSynchronizing: typing.Callable = ..., beforeRenderPassRecording: typing.Callable = ..., beforeRendering: typing.Callable = ..., beforeSynchronizing: typing.Callable = ..., closing: typing.Callable = ..., color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor] = ..., colorChanged: typing.Callable = ..., contentItem: QQuickItem = ..., contentOrientation: PySide2.QtCore.Qt.ScreenOrientation = ..., contentOrientationChanged: typing.Callable = ..., data: typing.Any = ..., destroyed: typing.Callable = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., focusObjectChanged: typing.Callable = ..., frameSwapped: typing.Callable = ..., height: int = ..., heightChanged: typing.Callable = ..., maximumHeight: int = ..., maximumHeightChanged: typing.Callable = ..., maximumWidth: int = ..., maximumWidthChanged: typing.Callable = ..., minimumHeight: int = ..., minimumHeightChanged: typing.Callable = ..., minimumWidth: int = ..., minimumWidthChanged: typing.Callable = ..., modality: PySide2.QtCore.Qt.WindowModality = ..., modalityChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., openglContextCreated: typing.Callable = ..., sceneGraphAboutToStop: typing.Callable = ..., sceneGraphError: typing.Callable = ..., sceneGraphInitialized: typing.Callable = ..., sceneGraphInvalidated: typing.Callable = ..., screenChanged: typing.Callable = ..., title: str = ..., transientParent: typing.Any = ..., transientParentChanged: typing.Callable = ..., visibility: QQuickWindow.Visibility = ..., visibilityChanged: typing.Callable = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., width: int = ..., widthChanged: typing.Callable = ..., windowStateChanged: typing.Callable = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., xChanged: typing.Callable = ..., y: int = ..., yChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, renderControl: QQuickRenderControl, active: bool = ..., activeChanged: typing.Callable = ..., activeFocusItem: QQuickItem = ..., activeFocusItemChanged: typing.Callable = ..., afterAnimating: typing.Callable = ..., afterRenderPassRecording: typing.Callable = ..., afterRendering: typing.Callable = ..., afterSynchronizing: typing.Callable = ..., beforeRenderPassRecording: typing.Callable = ..., beforeRendering: typing.Callable = ..., beforeSynchronizing: typing.Callable = ..., closing: typing.Callable = ..., color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor] = ..., colorChanged: typing.Callable = ..., contentItem: QQuickItem = ..., contentOrientation: PySide2.QtCore.Qt.ScreenOrientation = ..., contentOrientationChanged: typing.Callable = ..., data: typing.Any = ..., destroyed: typing.Callable = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., focusObjectChanged: typing.Callable = ..., frameSwapped: typing.Callable = ..., height: int = ..., heightChanged: typing.Callable = ..., maximumHeight: int = ..., maximumHeightChanged: typing.Callable = ..., maximumWidth: int = ..., maximumWidthChanged: typing.Callable = ..., minimumHeight: int = ..., minimumHeightChanged: typing.Callable = ..., minimumWidth: int = ..., minimumWidthChanged: typing.Callable = ..., modality: PySide2.QtCore.Qt.WindowModality = ..., modalityChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., openglContextCreated: typing.Callable = ..., sceneGraphAboutToStop: typing.Callable = ..., sceneGraphError: typing.Callable = ..., sceneGraphInitialized: typing.Callable = ..., sceneGraphInvalidated: typing.Callable = ..., screenChanged: typing.Callable = ..., title: str = ..., transientParent: typing.Any = ..., transientParentChanged: typing.Callable = ..., visibility: QQuickWindow.Visibility = ..., visibilityChanged: typing.Callable = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., width: int = ..., widthChanged: typing.Callable = ..., windowStateChanged: typing.Callable = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., xChanged: typing.Callable = ..., y: int = ..., yChanged: typing.Callable = ...) -> None: ...
    def accessibleRoot(self) -> PySide2.QtGui.QAccessibleInterface: ...
    def activeFocusItem(self) -> QQuickItem: ...
    def beginExternalCommands(self) -> None: ...
    def clearBeforeRendering(self) -> bool: ...
    def color(self) -> PySide2.QtGui.QColor: ...
    def contentItem(self) -> QQuickItem: ...
    def createTextureFromId(self, id: int, size: PySide2.QtCore.QSize, options: typing.Union[QQuickWindow.CreateTextureOptions,QQuickWindow.CreateTextureOption] = ...) -> QSGTexture: ...
    @overload
    def createTextureFromImage(self, image: PySide2.QtGui.QImage) -> QSGTexture: ...
    @overload
    def createTextureFromImage(self, image: PySide2.QtGui.QImage, options: typing.Union[QQuickWindow.CreateTextureOptions,QQuickWindow.CreateTextureOption]) -> QSGTexture: ...
    def createTextureFromNativeObject(self, type: QQuickWindow.NativeObjectType, nativeObjectPtr: int, nativeLayout: int, size: PySide2.QtCore.QSize, options: typing.Union[QQuickWindow.CreateTextureOptions,QQuickWindow.CreateTextureOption] = ...) -> QSGTexture: ...
    def effectiveDevicePixelRatio(self) -> float: ...
    def endExternalCommands(self) -> None: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def exposeEvent(self, arg__1: PySide2.QtGui.QExposeEvent) -> None: ...
    def focusInEvent(self, arg__1: PySide2.QtGui.QFocusEvent) -> None: ...
    def focusObject(self) -> PySide2.QtCore.QObject: ...
    def focusOutEvent(self, arg__1: PySide2.QtGui.QFocusEvent) -> None: ...
    def grabWindow(self) -> PySide2.QtGui.QImage: ...
    @classmethod
    def hasDefaultAlphaBuffer(cls) -> bool: ...
    def hideEvent(self, arg__1: PySide2.QtGui.QHideEvent) -> None: ...
    def incubationController(self) -> PySide2.QtQml.QQmlIncubationController: ...
    def isPersistentOpenGLContext(self) -> bool: ...
    def isPersistentSceneGraph(self) -> bool: ...
    def isSceneGraphInitialized(self) -> bool: ...
    def keyPressEvent(self, arg__1: PySide2.QtGui.QKeyEvent) -> None: ...
    def keyReleaseEvent(self, arg__1: PySide2.QtGui.QKeyEvent) -> None: ...
    def mouseDoubleClickEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseGrabberItem(self) -> QQuickItem: ...
    def mouseMoveEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mousePressEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, arg__1: PySide2.QtGui.QMouseEvent) -> None: ...
    def openglContext(self) -> PySide2.QtGui.QOpenGLContext: ...
    def releaseResources(self) -> None: ...
    def renderTarget(self) -> PySide2.QtGui.QOpenGLFramebufferObject: ...
    def renderTargetId(self) -> int: ...
    def renderTargetSize(self) -> PySide2.QtCore.QSize: ...
    def resetOpenGLState(self) -> None: ...
    def resizeEvent(self, arg__1: PySide2.QtGui.QResizeEvent) -> None: ...
    @classmethod
    def sceneGraphBackend(cls) -> str: ...
    def scheduleRenderJob(self, job: PySide2.QtCore.QRunnable, schedule: QQuickWindow.RenderStage) -> None: ...
    def sendEvent(self, arg__1: QQuickItem, arg__2: PySide2.QtCore.QEvent) -> bool: ...
    def setClearBeforeRendering(self, enabled: bool) -> None: ...
    def setColor(self, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @classmethod
    def setDefaultAlphaBuffer(cls, useAlpha: bool) -> None: ...
    def setPersistentOpenGLContext(self, persistent: bool) -> None: ...
    def setPersistentSceneGraph(self, persistent: bool) -> None: ...
    @overload
    def setRenderTarget(self, fbo: PySide2.QtGui.QOpenGLFramebufferObject) -> None: ...
    @overload
    def setRenderTarget(self, fboId: int, size: PySide2.QtCore.QSize) -> None: ...
    @classmethod
    def setSceneGraphBackend(cls, backend: str) -> None: ...
    @classmethod
    def setTextRenderType(cls, renderType: QQuickWindow.TextRenderType) -> None: ...
    def showEvent(self, arg__1: PySide2.QtGui.QShowEvent) -> None: ...
    def tabletEvent(self, arg__1: PySide2.QtGui.QTabletEvent) -> None: ...
    @classmethod
    def textRenderType(cls) -> QQuickWindow.TextRenderType: ...
    def update(self) -> None: ...
    def wheelEvent(self, arg__1: PySide2.QtGui.QWheelEvent) -> None: ...

class QSGAbstractRenderer(PySide2.QtCore.QObject):
    class ClearMode:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.ClearMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSGAbstractRenderer.ClearMode: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.ClearMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.ClearMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.ClearMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.ClearMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.ClearMode: ...

    class ClearModeBit:
        ClearColorBuffer: ClassVar[QSGAbstractRenderer.ClearModeBit] = ...
        ClearDepthBuffer: ClassVar[QSGAbstractRenderer.ClearModeBit] = ...
        ClearStencilBuffer: ClassVar[QSGAbstractRenderer.ClearModeBit] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.ClearMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSGAbstractRenderer.ClearModeBit: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.ClearMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.ClearMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.ClearMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.ClearMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.ClearMode: ...

    class MatrixTransformFlag:
        MatrixTransformFlipY: ClassVar[QSGAbstractRenderer.MatrixTransformFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.MatrixTransformFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSGAbstractRenderer.MatrixTransformFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.MatrixTransformFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.MatrixTransformFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.MatrixTransformFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.MatrixTransformFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.MatrixTransformFlags: ...

    class MatrixTransformFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.MatrixTransformFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSGAbstractRenderer.MatrixTransformFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.MatrixTransformFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.MatrixTransformFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.MatrixTransformFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.MatrixTransformFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGAbstractRenderer.MatrixTransformFlags: ...
    ClearColorBuffer: ClassVar[QSGAbstractRenderer.ClearModeBit] = ...
    ClearDepthBuffer: ClassVar[QSGAbstractRenderer.ClearModeBit] = ...
    ClearStencilBuffer: ClassVar[QSGAbstractRenderer.ClearModeBit] = ...
    MatrixTransformFlipY: ClassVar[QSGAbstractRenderer.MatrixTransformFlag] = ...
    sceneGraphChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def clearColor(self) -> PySide2.QtGui.QColor: ...
    def clearMode(self) -> typing.Union[QSGAbstractRenderer.ClearMode,QSGAbstractRenderer.ClearModeBit]: ...
    def deviceRect(self) -> PySide2.QtCore.QRect: ...
    def nodeChanged(self, node: QSGNode, state: typing.Union[QSGNode.DirtyState,QSGNode.DirtyStateBit]) -> None: ...
    def projectionMatrix(self) -> PySide2.QtGui.QMatrix4x4: ...
    def projectionMatrixWithNativeNDC(self) -> PySide2.QtGui.QMatrix4x4: ...
    def renderScene(self, fboId: int = ...) -> None: ...
    def setClearColor(self, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setClearMode(self, mode: typing.Union[QSGAbstractRenderer.ClearMode,QSGAbstractRenderer.ClearModeBit]) -> None: ...
    @overload
    def setDeviceRect(self, rect: PySide2.QtCore.QRect) -> None: ...
    @overload
    def setDeviceRect(self, size: PySide2.QtCore.QSize) -> None: ...
    def setProjectionMatrix(self, matrix: PySide2.QtGui.QMatrix4x4) -> None: ...
    @overload
    def setProjectionMatrixToRect(self, rect: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def setProjectionMatrixToRect(self, rect: PySide2.QtCore.QRectF, flags: typing.Union[QSGAbstractRenderer.MatrixTransformFlags,QSGAbstractRenderer.MatrixTransformFlag]) -> None: ...
    def setProjectionMatrixWithNativeNDC(self, matrix: PySide2.QtGui.QMatrix4x4) -> None: ...
    @overload
    def setViewportRect(self, rect: PySide2.QtCore.QRect) -> None: ...
    @overload
    def setViewportRect(self, size: PySide2.QtCore.QSize) -> None: ...
    def viewportRect(self) -> PySide2.QtCore.QRect: ...

class QSGBasicGeometryNode(QSGNode):
    def __init__(self, type: QSGNode.NodeType) -> None: ...
    def clipList(self) -> QSGClipNode: ...
    def geometry(self) -> QSGGeometry: ...
    def matrix(self) -> PySide2.QtGui.QMatrix4x4: ...
    def setGeometry(self, geometry: QSGGeometry) -> None: ...
    def setRendererClipList(self, c: QSGClipNode) -> None: ...
    def setRendererMatrix(self, m: PySide2.QtGui.QMatrix4x4) -> None: ...

class QSGClipNode(QSGBasicGeometryNode):
    def __init__(self) -> None: ...
    def clipRect(self) -> PySide2.QtCore.QRectF: ...
    def isRectangular(self) -> bool: ...
    def setClipRect(self, arg__1: PySide2.QtCore.QRectF) -> None: ...
    def setIsRectangular(self, rectHint: bool) -> None: ...

class QSGDynamicTexture(QSGTexture):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def updateTexture(self) -> bool: ...

class QSGEngine(PySide2.QtCore.QObject):
    class CreateTextureOption:
        TextureCanUseAtlas: ClassVar[QSGEngine.CreateTextureOption] = ...
        TextureHasAlphaChannel: ClassVar[QSGEngine.CreateTextureOption] = ...
        TextureIsOpaque: ClassVar[QSGEngine.CreateTextureOption] = ...
        TextureOwnsGLTexture: ClassVar[QSGEngine.CreateTextureOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSGEngine.CreateTextureOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSGEngine.CreateTextureOption: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGEngine.CreateTextureOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGEngine.CreateTextureOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGEngine.CreateTextureOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGEngine.CreateTextureOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGEngine.CreateTextureOptions: ...

    class CreateTextureOptions:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSGEngine.CreateTextureOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSGEngine.CreateTextureOptions: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGEngine.CreateTextureOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGEngine.CreateTextureOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGEngine.CreateTextureOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGEngine.CreateTextureOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGEngine.CreateTextureOptions: ...
    TextureCanUseAtlas: ClassVar[QSGEngine.CreateTextureOption] = ...
    TextureHasAlphaChannel: ClassVar[QSGEngine.CreateTextureOption] = ...
    TextureIsOpaque: ClassVar[QSGEngine.CreateTextureOption] = ...
    TextureOwnsGLTexture: ClassVar[QSGEngine.CreateTextureOption] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def createRenderer(self) -> QSGAbstractRenderer: ...
    def createTextureFromId(self, id: int, size: PySide2.QtCore.QSize, options: typing.Union[QSGEngine.CreateTextureOptions,QSGEngine.CreateTextureOption] = ...) -> QSGTexture: ...
    def createTextureFromImage(self, image: PySide2.QtGui.QImage, options: typing.Union[QSGEngine.CreateTextureOptions,QSGEngine.CreateTextureOption] = ...) -> QSGTexture: ...
    def initialize(self, context: PySide2.QtGui.QOpenGLContext) -> None: ...
    def invalidate(self) -> None: ...

class QSGGeometry(shiboken2.Object):
    class Attribute(shiboken2.Object):
        attributeType: Any
        isVertexCoordinate: Any
        position: Any
        reserved: Any
        tupleSize: Any
        type: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, Attribute: QSGGeometry.Attribute) -> None: ...
        @classmethod
        def create(cls, pos: int, tupleSize: int, primitiveType: int, isPosition: bool = ...) -> QSGGeometry.Attribute: ...
        @classmethod
        def createWithAttributeType(cls, pos: int, tupleSize: int, primitiveType: int, attributeType: QSGGeometry.AttributeType) -> QSGGeometry.Attribute: ...
        def __copy__(self) -> None: ...

    class AttributeSet(shiboken2.Object):
        attributes: Any
        count: Any
        stride: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, AttributeSet: QSGGeometry.AttributeSet) -> None: ...
        def __copy__(self) -> None: ...

    class AttributeType:
        ColorAttribute: ClassVar[QSGGeometry.AttributeType] = ...
        PositionAttribute: ClassVar[QSGGeometry.AttributeType] = ...
        TexCoord1Attribute: ClassVar[QSGGeometry.AttributeType] = ...
        TexCoord2Attribute: ClassVar[QSGGeometry.AttributeType] = ...
        TexCoordAttribute: ClassVar[QSGGeometry.AttributeType] = ...
        UnknownAttribute: ClassVar[QSGGeometry.AttributeType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSGGeometry.AttributeType: ...
        def __and__(self, other: typing.SupportsInt) -> QSGGeometry.AttributeType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSGGeometry.AttributeType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGGeometry.AttributeType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSGGeometry.AttributeType: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGGeometry.AttributeType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSGGeometry.AttributeType: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGGeometry.AttributeType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSGGeometry.AttributeType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGGeometry.AttributeType: ...
        def __sub__(self, other: typing.SupportsInt) -> QSGGeometry.AttributeType: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGGeometry.AttributeType: ...

    class ColoredPoint2D(shiboken2.Object):
        a: Any
        b: Any
        g: Any
        r: Any
        x: Any
        y: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, ColoredPoint2D: QSGGeometry.ColoredPoint2D) -> None: ...
        def set(self, nx: float, ny: float, nr: int, ng: int, nb: int, na: int) -> None: ...
        def __copy__(self) -> None: ...

    class DataPattern:
        AlwaysUploadPattern: ClassVar[QSGGeometry.DataPattern] = ...
        DynamicPattern: ClassVar[QSGGeometry.DataPattern] = ...
        StaticPattern: ClassVar[QSGGeometry.DataPattern] = ...
        StreamPattern: ClassVar[QSGGeometry.DataPattern] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSGGeometry.DataPattern: ...
        def __and__(self, other: typing.SupportsInt) -> QSGGeometry.DataPattern: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSGGeometry.DataPattern: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGGeometry.DataPattern: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSGGeometry.DataPattern: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGGeometry.DataPattern: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSGGeometry.DataPattern: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGGeometry.DataPattern: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSGGeometry.DataPattern: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGGeometry.DataPattern: ...
        def __sub__(self, other: typing.SupportsInt) -> QSGGeometry.DataPattern: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGGeometry.DataPattern: ...

    class DrawingMode:
        DrawLineLoop: ClassVar[QSGGeometry.DrawingMode] = ...
        DrawLineStrip: ClassVar[QSGGeometry.DrawingMode] = ...
        DrawLines: ClassVar[QSGGeometry.DrawingMode] = ...
        DrawPoints: ClassVar[QSGGeometry.DrawingMode] = ...
        DrawTriangleFan: ClassVar[QSGGeometry.DrawingMode] = ...
        DrawTriangleStrip: ClassVar[QSGGeometry.DrawingMode] = ...
        DrawTriangles: ClassVar[QSGGeometry.DrawingMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSGGeometry.DrawingMode: ...
        def __and__(self, other: typing.SupportsInt) -> QSGGeometry.DrawingMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSGGeometry.DrawingMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGGeometry.DrawingMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSGGeometry.DrawingMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGGeometry.DrawingMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSGGeometry.DrawingMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGGeometry.DrawingMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSGGeometry.DrawingMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGGeometry.DrawingMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QSGGeometry.DrawingMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGGeometry.DrawingMode: ...

    class Point2D(shiboken2.Object):
        x: Any
        y: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, Point2D: QSGGeometry.Point2D) -> None: ...
        def set(self, nx: float, ny: float) -> None: ...
        def __copy__(self) -> None: ...

    class TexturedPoint2D(shiboken2.Object):
        tx: Any
        ty: Any
        x: Any
        y: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, TexturedPoint2D: QSGGeometry.TexturedPoint2D) -> None: ...
        def set(self, nx: float, ny: float, ntx: float, nty: float) -> None: ...
        def __copy__(self) -> None: ...

    class Type:
        ByteType: ClassVar[QSGGeometry.Type] = ...
        Bytes2Type: ClassVar[QSGGeometry.Type] = ...
        Bytes3Type: ClassVar[QSGGeometry.Type] = ...
        Bytes4Type: ClassVar[QSGGeometry.Type] = ...
        DoubleType: ClassVar[QSGGeometry.Type] = ...
        FloatType: ClassVar[QSGGeometry.Type] = ...
        IntType: ClassVar[QSGGeometry.Type] = ...
        ShortType: ClassVar[QSGGeometry.Type] = ...
        UnsignedByteType: ClassVar[QSGGeometry.Type] = ...
        UnsignedIntType: ClassVar[QSGGeometry.Type] = ...
        UnsignedShortType: ClassVar[QSGGeometry.Type] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSGGeometry.Type: ...
        def __and__(self, other: typing.SupportsInt) -> QSGGeometry.Type: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSGGeometry.Type: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGGeometry.Type: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSGGeometry.Type: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGGeometry.Type: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSGGeometry.Type: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGGeometry.Type: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSGGeometry.Type: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGGeometry.Type: ...
        def __sub__(self, other: typing.SupportsInt) -> QSGGeometry.Type: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGGeometry.Type: ...
    AlwaysUploadPattern: ClassVar[QSGGeometry.DataPattern] = ...
    ByteType: ClassVar[QSGGeometry.Type] = ...
    Bytes2Type: ClassVar[QSGGeometry.Type] = ...
    Bytes3Type: ClassVar[QSGGeometry.Type] = ...
    Bytes4Type: ClassVar[QSGGeometry.Type] = ...
    ColorAttribute: ClassVar[QSGGeometry.AttributeType] = ...
    DoubleType: ClassVar[QSGGeometry.Type] = ...
    DrawLineLoop: ClassVar[QSGGeometry.DrawingMode] = ...
    DrawLineStrip: ClassVar[QSGGeometry.DrawingMode] = ...
    DrawLines: ClassVar[QSGGeometry.DrawingMode] = ...
    DrawPoints: ClassVar[QSGGeometry.DrawingMode] = ...
    DrawTriangleFan: ClassVar[QSGGeometry.DrawingMode] = ...
    DrawTriangleStrip: ClassVar[QSGGeometry.DrawingMode] = ...
    DrawTriangles: ClassVar[QSGGeometry.DrawingMode] = ...
    DynamicPattern: ClassVar[QSGGeometry.DataPattern] = ...
    FloatType: ClassVar[QSGGeometry.Type] = ...
    IntType: ClassVar[QSGGeometry.Type] = ...
    PositionAttribute: ClassVar[QSGGeometry.AttributeType] = ...
    ShortType: ClassVar[QSGGeometry.Type] = ...
    StaticPattern: ClassVar[QSGGeometry.DataPattern] = ...
    StreamPattern: ClassVar[QSGGeometry.DataPattern] = ...
    TexCoord1Attribute: ClassVar[QSGGeometry.AttributeType] = ...
    TexCoord2Attribute: ClassVar[QSGGeometry.AttributeType] = ...
    TexCoordAttribute: ClassVar[QSGGeometry.AttributeType] = ...
    UnknownAttribute: ClassVar[QSGGeometry.AttributeType] = ...
    UnsignedByteType: ClassVar[QSGGeometry.Type] = ...
    UnsignedIntType: ClassVar[QSGGeometry.Type] = ...
    UnsignedShortType: ClassVar[QSGGeometry.Type] = ...
    def __init__(self, attribs: QSGGeometry.AttributeSet, vertexCount: int, indexCount: int = ..., indexType: int = ...) -> None: ...
    def allocate(self, vertexCount: int, indexCount: int = ...) -> None: ...
    def attributeCount(self) -> int: ...
    def attributes(self) -> QSGGeometry.Attribute: ...
    @classmethod
    def defaultAttributes_ColoredPoint2D(cls) -> QSGGeometry.AttributeSet: ...
    @classmethod
    def defaultAttributes_Point2D(cls) -> QSGGeometry.AttributeSet: ...
    @classmethod
    def defaultAttributes_TexturedPoint2D(cls) -> QSGGeometry.AttributeSet: ...
    def drawingMode(self) -> int: ...
    def indexCount(self) -> int: ...
    def indexData(self) -> int: ...
    def indexDataAsUInt(self) -> typing.List[int]: ...
    def indexDataAsUShort(self) -> typing.List[int]: ...
    def indexDataPattern(self) -> QSGGeometry.DataPattern: ...
    def indexType(self) -> int: ...
    def lineWidth(self) -> float: ...
    def markIndexDataDirty(self) -> None: ...
    def markVertexDataDirty(self) -> None: ...
    def setDrawingMode(self, mode: int) -> None: ...
    def setIndexDataPattern(self, p: QSGGeometry.DataPattern) -> None: ...
    def setLineWidth(self, w: float) -> None: ...
    def setVertexDataPattern(self, p: QSGGeometry.DataPattern) -> None: ...
    def sizeOfIndex(self) -> int: ...
    def sizeOfVertex(self) -> int: ...
    @classmethod
    def updateColoredRectGeometry(cls, g: QSGGeometry, rect: PySide2.QtCore.QRectF) -> None: ...
    @classmethod
    def updateRectGeometry(cls, g: QSGGeometry, rect: PySide2.QtCore.QRectF) -> None: ...
    @classmethod
    def updateTexturedRectGeometry(cls, g: QSGGeometry, rect: PySide2.QtCore.QRectF, sourceRect: PySide2.QtCore.QRectF) -> None: ...
    def vertexCount(self) -> int: ...
    def vertexData(self) -> int: ...
    def vertexDataAsColoredPoint2D(self) -> QSGGeometry.ColoredPoint2D: ...
    def vertexDataAsPoint2D(self) -> QSGGeometry.Point2D: ...
    def vertexDataAsTexturedPoint2D(self) -> QSGGeometry.TexturedPoint2D: ...
    def vertexDataPattern(self) -> QSGGeometry.DataPattern: ...

class QSGGeometryNode(QSGBasicGeometryNode):
    def __init__(self) -> None: ...
    def inheritedOpacity(self) -> float: ...
    def renderOrder(self) -> int: ...
    def setInheritedOpacity(self, opacity: float) -> None: ...
    def setRenderOrder(self, order: int) -> None: ...

class QSGMaterialType(shiboken2.Object):
    def __init__(self) -> None: ...

class QSGNode(shiboken2.Object):
    class DirtyState:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSGNode.DirtyState: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSGNode.DirtyState: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGNode.DirtyState: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGNode.DirtyState: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGNode.DirtyState: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGNode.DirtyState: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGNode.DirtyState: ...

    class DirtyStateBit:
        DirtyForceUpdate: ClassVar[QSGNode.DirtyStateBit] = ...
        DirtyGeometry: ClassVar[QSGNode.DirtyStateBit] = ...
        DirtyMaterial: ClassVar[QSGNode.DirtyStateBit] = ...
        DirtyMatrix: ClassVar[QSGNode.DirtyStateBit] = ...
        DirtyNodeAdded: ClassVar[QSGNode.DirtyStateBit] = ...
        DirtyNodeRemoved: ClassVar[QSGNode.DirtyStateBit] = ...
        DirtyOpacity: ClassVar[QSGNode.DirtyStateBit] = ...
        DirtyPropagationMask: ClassVar[QSGNode.DirtyStateBit] = ...
        DirtySubtreeBlocked: ClassVar[QSGNode.DirtyStateBit] = ...
        DirtyUsePreprocess: ClassVar[QSGNode.DirtyStateBit] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSGNode.DirtyState: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSGNode.DirtyStateBit: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGNode.DirtyState: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGNode.DirtyState: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGNode.DirtyState: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGNode.DirtyState: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGNode.DirtyState: ...

    class Flag:
        IsVisitableNode: ClassVar[QSGNode.Flag] = ...
        OwnedByParent: ClassVar[QSGNode.Flag] = ...
        OwnsGeometry: ClassVar[QSGNode.Flag] = ...
        OwnsMaterial: ClassVar[QSGNode.Flag] = ...
        OwnsOpaqueMaterial: ClassVar[QSGNode.Flag] = ...
        UsePreprocess: ClassVar[QSGNode.Flag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSGNode.Flags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSGNode.Flag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGNode.Flags: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGNode.Flags: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGNode.Flags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGNode.Flags: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGNode.Flags: ...

    class Flags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSGNode.Flags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSGNode.Flags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGNode.Flags: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGNode.Flags: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGNode.Flags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGNode.Flags: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGNode.Flags: ...

    class NodeType:
        BasicNodeType: ClassVar[QSGNode.NodeType] = ...
        ClipNodeType: ClassVar[QSGNode.NodeType] = ...
        GeometryNodeType: ClassVar[QSGNode.NodeType] = ...
        OpacityNodeType: ClassVar[QSGNode.NodeType] = ...
        RenderNodeType: ClassVar[QSGNode.NodeType] = ...
        RootNodeType: ClassVar[QSGNode.NodeType] = ...
        TransformNodeType: ClassVar[QSGNode.NodeType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSGNode.NodeType: ...
        def __and__(self, other: typing.SupportsInt) -> QSGNode.NodeType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSGNode.NodeType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGNode.NodeType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSGNode.NodeType: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGNode.NodeType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSGNode.NodeType: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGNode.NodeType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSGNode.NodeType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGNode.NodeType: ...
        def __sub__(self, other: typing.SupportsInt) -> QSGNode.NodeType: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGNode.NodeType: ...
    BasicNodeType: ClassVar[QSGNode.NodeType] = ...
    ClipNodeType: ClassVar[QSGNode.NodeType] = ...
    DirtyForceUpdate: ClassVar[QSGNode.DirtyStateBit] = ...
    DirtyGeometry: ClassVar[QSGNode.DirtyStateBit] = ...
    DirtyMaterial: ClassVar[QSGNode.DirtyStateBit] = ...
    DirtyMatrix: ClassVar[QSGNode.DirtyStateBit] = ...
    DirtyNodeAdded: ClassVar[QSGNode.DirtyStateBit] = ...
    DirtyNodeRemoved: ClassVar[QSGNode.DirtyStateBit] = ...
    DirtyOpacity: ClassVar[QSGNode.DirtyStateBit] = ...
    DirtyPropagationMask: ClassVar[QSGNode.DirtyStateBit] = ...
    DirtySubtreeBlocked: ClassVar[QSGNode.DirtyStateBit] = ...
    DirtyUsePreprocess: ClassVar[QSGNode.DirtyStateBit] = ...
    GeometryNodeType: ClassVar[QSGNode.NodeType] = ...
    IsVisitableNode: ClassVar[QSGNode.Flag] = ...
    OpacityNodeType: ClassVar[QSGNode.NodeType] = ...
    OwnedByParent: ClassVar[QSGNode.Flag] = ...
    OwnsGeometry: ClassVar[QSGNode.Flag] = ...
    OwnsMaterial: ClassVar[QSGNode.Flag] = ...
    OwnsOpaqueMaterial: ClassVar[QSGNode.Flag] = ...
    RenderNodeType: ClassVar[QSGNode.NodeType] = ...
    RootNodeType: ClassVar[QSGNode.NodeType] = ...
    TransformNodeType: ClassVar[QSGNode.NodeType] = ...
    UsePreprocess: ClassVar[QSGNode.Flag] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, type: QSGNode.NodeType) -> None: ...
    def appendChildNode(self, node: QSGNode) -> None: ...
    def childAtIndex(self, i: int) -> QSGNode: ...
    def childCount(self) -> int: ...
    def clearDirty(self) -> None: ...
    def dirtyState(self) -> typing.Union[QSGNode.DirtyState,QSGNode.DirtyStateBit]: ...
    def firstChild(self) -> QSGNode: ...
    def flags(self) -> typing.Union[QSGNode.Flags,QSGNode.Flag]: ...
    def insertChildNodeAfter(self, node: QSGNode, after: QSGNode) -> None: ...
    def insertChildNodeBefore(self, node: QSGNode, before: QSGNode) -> None: ...
    def isSubtreeBlocked(self) -> bool: ...
    def lastChild(self) -> QSGNode: ...
    def markDirty(self, bits: typing.Union[QSGNode.DirtyState,QSGNode.DirtyStateBit]) -> None: ...
    def nextSibling(self) -> QSGNode: ...
    def parent(self) -> QSGNode: ...
    def prependChildNode(self, node: QSGNode) -> None: ...
    def preprocess(self) -> None: ...
    def previousSibling(self) -> QSGNode: ...
    def removeAllChildNodes(self) -> None: ...
    def removeChildNode(self, node: QSGNode) -> None: ...
    def reparentChildNodesTo(self, newParent: QSGNode) -> None: ...
    def setFlag(self, arg__1: QSGNode.Flag, arg__2: bool = ...) -> None: ...
    def setFlags(self, arg__1: typing.Union[QSGNode.Flags,QSGNode.Flag], arg__2: bool = ...) -> None: ...
    def type(self) -> QSGNode.NodeType: ...

class QSGOpacityNode(QSGNode):
    def __init__(self) -> None: ...
    def combinedOpacity(self) -> float: ...
    def isSubtreeBlocked(self) -> bool: ...
    def opacity(self) -> float: ...
    def setCombinedOpacity(self, opacity: float) -> None: ...
    def setOpacity(self, opacity: float) -> None: ...

class QSGSimpleRectNode(QSGGeometryNode):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, rect: PySide2.QtCore.QRectF, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def color(self) -> PySide2.QtGui.QColor: ...
    def rect(self) -> PySide2.QtCore.QRectF: ...
    def setColor(self, color: typing.Union[PySide2.QtGui.QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def setRect(self, rect: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def setRect(self, x: float, y: float, w: float, h: float) -> None: ...

class QSGSimpleTextureNode(QSGGeometryNode):
    class TextureCoordinatesTransformFlag:
        MirrorHorizontally: ClassVar[QSGSimpleTextureNode.TextureCoordinatesTransformFlag] = ...
        MirrorVertically: ClassVar[QSGSimpleTextureNode.TextureCoordinatesTransformFlag] = ...
        NoTransform: ClassVar[QSGSimpleTextureNode.TextureCoordinatesTransformFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSGSimpleTextureNode.TextureCoordinatesTransformMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSGSimpleTextureNode.TextureCoordinatesTransformFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGSimpleTextureNode.TextureCoordinatesTransformMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGSimpleTextureNode.TextureCoordinatesTransformMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGSimpleTextureNode.TextureCoordinatesTransformMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGSimpleTextureNode.TextureCoordinatesTransformMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGSimpleTextureNode.TextureCoordinatesTransformMode: ...

    class TextureCoordinatesTransformMode:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSGSimpleTextureNode.TextureCoordinatesTransformMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSGSimpleTextureNode.TextureCoordinatesTransformMode: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGSimpleTextureNode.TextureCoordinatesTransformMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGSimpleTextureNode.TextureCoordinatesTransformMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGSimpleTextureNode.TextureCoordinatesTransformMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGSimpleTextureNode.TextureCoordinatesTransformMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGSimpleTextureNode.TextureCoordinatesTransformMode: ...
    MirrorHorizontally: ClassVar[QSGSimpleTextureNode.TextureCoordinatesTransformFlag] = ...
    MirrorVertically: ClassVar[QSGSimpleTextureNode.TextureCoordinatesTransformFlag] = ...
    NoTransform: ClassVar[QSGSimpleTextureNode.TextureCoordinatesTransformFlag] = ...
    def __init__(self) -> None: ...
    def filtering(self) -> QSGTexture.Filtering: ...
    def ownsTexture(self) -> bool: ...
    def rect(self) -> PySide2.QtCore.QRectF: ...
    def setFiltering(self, filtering: QSGTexture.Filtering) -> None: ...
    def setOwnsTexture(self, owns: bool) -> None: ...
    @overload
    def setRect(self, rect: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def setRect(self, x: float, y: float, w: float, h: float) -> None: ...
    @overload
    def setSourceRect(self, r: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def setSourceRect(self, x: float, y: float, w: float, h: float) -> None: ...
    def setTexture(self, texture: QSGTexture) -> None: ...
    def setTextureCoordinatesTransform(self, mode: typing.Union[QSGSimpleTextureNode.TextureCoordinatesTransformMode,QSGSimpleTextureNode.TextureCoordinatesTransformFlag]) -> None: ...
    def sourceRect(self) -> PySide2.QtCore.QRectF: ...
    def texture(self) -> QSGTexture: ...
    def textureCoordinatesTransform(self) -> typing.Union[QSGSimpleTextureNode.TextureCoordinatesTransformMode,QSGSimpleTextureNode.TextureCoordinatesTransformFlag]: ...

class QSGTexture(PySide2.QtCore.QObject):
    class AnisotropyLevel:
        Anisotropy16x: ClassVar[QSGTexture.AnisotropyLevel] = ...
        Anisotropy2x: ClassVar[QSGTexture.AnisotropyLevel] = ...
        Anisotropy4x: ClassVar[QSGTexture.AnisotropyLevel] = ...
        Anisotropy8x: ClassVar[QSGTexture.AnisotropyLevel] = ...
        AnisotropyNone: ClassVar[QSGTexture.AnisotropyLevel] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSGTexture.AnisotropyLevel: ...
        def __and__(self, other: typing.SupportsInt) -> QSGTexture.AnisotropyLevel: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSGTexture.AnisotropyLevel: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGTexture.AnisotropyLevel: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSGTexture.AnisotropyLevel: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGTexture.AnisotropyLevel: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSGTexture.AnisotropyLevel: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGTexture.AnisotropyLevel: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSGTexture.AnisotropyLevel: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGTexture.AnisotropyLevel: ...
        def __sub__(self, other: typing.SupportsInt) -> QSGTexture.AnisotropyLevel: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGTexture.AnisotropyLevel: ...

    class Filtering:
        Linear: ClassVar[QSGTexture.Filtering] = ...
        Nearest: ClassVar[QSGTexture.Filtering] = ...
        None_: ClassVar[QSGTexture.Filtering] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSGTexture.Filtering: ...
        def __and__(self, other: typing.SupportsInt) -> QSGTexture.Filtering: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSGTexture.Filtering: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGTexture.Filtering: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSGTexture.Filtering: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGTexture.Filtering: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSGTexture.Filtering: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGTexture.Filtering: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSGTexture.Filtering: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGTexture.Filtering: ...
        def __sub__(self, other: typing.SupportsInt) -> QSGTexture.Filtering: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGTexture.Filtering: ...

    class WrapMode:
        ClampToEdge: ClassVar[QSGTexture.WrapMode] = ...
        MirroredRepeat: ClassVar[QSGTexture.WrapMode] = ...
        Repeat: ClassVar[QSGTexture.WrapMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSGTexture.WrapMode: ...
        def __and__(self, other: typing.SupportsInt) -> QSGTexture.WrapMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSGTexture.WrapMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSGTexture.WrapMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSGTexture.WrapMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QSGTexture.WrapMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSGTexture.WrapMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QSGTexture.WrapMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSGTexture.WrapMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSGTexture.WrapMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QSGTexture.WrapMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QSGTexture.WrapMode: ...
    Anisotropy16x: ClassVar[QSGTexture.AnisotropyLevel] = ...
    Anisotropy2x: ClassVar[QSGTexture.AnisotropyLevel] = ...
    Anisotropy4x: ClassVar[QSGTexture.AnisotropyLevel] = ...
    Anisotropy8x: ClassVar[QSGTexture.AnisotropyLevel] = ...
    AnisotropyNone: ClassVar[QSGTexture.AnisotropyLevel] = ...
    ClampToEdge: ClassVar[QSGTexture.WrapMode] = ...
    Linear: ClassVar[QSGTexture.Filtering] = ...
    MirroredRepeat: ClassVar[QSGTexture.WrapMode] = ...
    Nearest: ClassVar[QSGTexture.Filtering] = ...
    None_: ClassVar[QSGTexture.Filtering] = ...
    Repeat: ClassVar[QSGTexture.WrapMode] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def anisotropyLevel(self) -> QSGTexture.AnisotropyLevel: ...
    def bind(self) -> None: ...
    def comparisonKey(self) -> int: ...
    def convertToNormalizedSourceRect(self, rect: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def filtering(self) -> QSGTexture.Filtering: ...
    def hasAlphaChannel(self) -> bool: ...
    def hasMipmaps(self) -> bool: ...
    def horizontalWrapMode(self) -> QSGTexture.WrapMode: ...
    def isAtlasTexture(self) -> bool: ...
    def mipmapFiltering(self) -> QSGTexture.Filtering: ...
    def normalizedTextureSubRect(self) -> PySide2.QtCore.QRectF: ...
    def removedFromAtlas(self) -> QSGTexture: ...
    def setAnisotropyLevel(self, level: QSGTexture.AnisotropyLevel) -> None: ...
    def setFiltering(self, filter: QSGTexture.Filtering) -> None: ...
    def setHorizontalWrapMode(self, hwrap: QSGTexture.WrapMode) -> None: ...
    def setMipmapFiltering(self, filter: QSGTexture.Filtering) -> None: ...
    def setVerticalWrapMode(self, vwrap: QSGTexture.WrapMode) -> None: ...
    def textureId(self) -> int: ...
    def textureSize(self) -> PySide2.QtCore.QSize: ...
    def updateBindOptions(self, force: bool = ...) -> None: ...
    def verticalWrapMode(self) -> QSGTexture.WrapMode: ...

class QSGTextureProvider(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    textureChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def texture(self) -> QSGTexture: ...

class QSGTransformNode(QSGNode):
    def __init__(self) -> None: ...
    def combinedMatrix(self) -> PySide2.QtGui.QMatrix4x4: ...
    def matrix(self) -> PySide2.QtGui.QMatrix4x4: ...
    def setCombinedMatrix(self, matrix: PySide2.QtGui.QMatrix4x4) -> None: ...
    def setMatrix(self, matrix: PySide2.QtGui.QMatrix4x4) -> None: ...
