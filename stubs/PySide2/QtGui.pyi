from typing import Any, Callable, ClassVar, Dict, Iterable, List, Optional, Tuple, Union

from typing import overload
import PySide2.QtCore
import shiboken2
import typing
T = typing.TypeVar('T')

class QAbstractOpenGLFunctions(shiboken2.Object):
    def __init__(self) -> None: ...
    def initializeOpenGLFunctions(self) -> bool: ...
    def isInitialized(self) -> bool: ...
    def owningContext(self) -> QOpenGLContext: ...
    def setOwningContext(self, context: QOpenGLContext) -> None: ...

class QAbstractTextDocumentLayout(PySide2.QtCore.QObject):
    class PaintContext(shiboken2.Object):
        clip: Any
        cursorPosition: Any
        palette: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, PaintContext: QAbstractTextDocumentLayout.PaintContext) -> None: ...
        def __copy__(self) -> None: ...

    class Selection(shiboken2.Object):
        cursor: Any
        format: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, Selection: QAbstractTextDocumentLayout.Selection) -> None: ...
        def __copy__(self) -> None: ...
    documentSizeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    pageCountChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    update: ClassVar[PySide2.QtCore.Signal] = ...
    updateBlock: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, doc: QTextDocument, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def anchorAt(self, pos: PySide2.QtCore.QPointF) -> str: ...
    def blockBoundingRect(self, block: QTextBlock) -> PySide2.QtCore.QRectF: ...
    def blockWithMarkerAt(self, pos: PySide2.QtCore.QPointF) -> QTextBlock: ...
    def document(self) -> QTextDocument: ...
    def documentChanged(self, from_: int, charsRemoved: int, charsAdded: int) -> None: ...
    def documentSize(self) -> PySide2.QtCore.QSizeF: ...
    def draw(self, painter: QPainter, context: QAbstractTextDocumentLayout.PaintContext) -> None: ...
    def drawInlineObject(self, painter: QPainter, rect: PySide2.QtCore.QRectF, object: QTextInlineObject, posInDocument: int, format: QTextFormat) -> None: ...
    def format(self, pos: int) -> QTextCharFormat: ...
    def formatAt(self, pos: PySide2.QtCore.QPointF) -> QTextFormat: ...
    def formatIndex(self, pos: int) -> int: ...
    def frameBoundingRect(self, frame: QTextFrame) -> PySide2.QtCore.QRectF: ...
    def handlerForObject(self, objectType: int) -> QTextObjectInterface: ...
    def hitTest(self, point: PySide2.QtCore.QPointF, accuracy: PySide2.QtCore.Qt.HitTestAccuracy) -> int: ...
    def imageAt(self, pos: PySide2.QtCore.QPointF) -> str: ...
    def pageCount(self) -> int: ...
    def paintDevice(self) -> QPaintDevice: ...
    def positionInlineObject(self, item: QTextInlineObject, posInDocument: int, format: QTextFormat) -> None: ...
    def registerHandler(self, objectType: int, component: PySide2.QtCore.QObject) -> None: ...
    def resizeInlineObject(self, item: QTextInlineObject, posInDocument: int, format: QTextFormat) -> None: ...
    def setPaintDevice(self, device: QPaintDevice) -> None: ...
    def unregisterHandler(self, objectType: int, component: typing.Union[PySide2.QtCore.QObject,None] = ...) -> None: ...

class QAccessible(shiboken2.Object):
    class Event:
        AcceleratorChanged: ClassVar[QAccessible.Event] = ...
        ActionChanged: ClassVar[QAccessible.Event] = ...
        ActiveDescendantChanged: ClassVar[QAccessible.Event] = ...
        Alert: ClassVar[QAccessible.Event] = ...
        AttributeChanged: ClassVar[QAccessible.Event] = ...
        ContextHelpEnd: ClassVar[QAccessible.Event] = ...
        ContextHelpStart: ClassVar[QAccessible.Event] = ...
        DefaultActionChanged: ClassVar[QAccessible.Event] = ...
        DescriptionChanged: ClassVar[QAccessible.Event] = ...
        DialogEnd: ClassVar[QAccessible.Event] = ...
        DialogStart: ClassVar[QAccessible.Event] = ...
        DocumentContentChanged: ClassVar[QAccessible.Event] = ...
        DocumentLoadComplete: ClassVar[QAccessible.Event] = ...
        DocumentLoadStopped: ClassVar[QAccessible.Event] = ...
        DocumentReload: ClassVar[QAccessible.Event] = ...
        DragDropEnd: ClassVar[QAccessible.Event] = ...
        DragDropStart: ClassVar[QAccessible.Event] = ...
        Focus: ClassVar[QAccessible.Event] = ...
        ForegroundChanged: ClassVar[QAccessible.Event] = ...
        HelpChanged: ClassVar[QAccessible.Event] = ...
        HyperlinkEndIndexChanged: ClassVar[QAccessible.Event] = ...
        HyperlinkNumberOfAnchorsChanged: ClassVar[QAccessible.Event] = ...
        HyperlinkSelectedLinkChanged: ClassVar[QAccessible.Event] = ...
        HyperlinkStartIndexChanged: ClassVar[QAccessible.Event] = ...
        HypertextChanged: ClassVar[QAccessible.Event] = ...
        HypertextLinkActivated: ClassVar[QAccessible.Event] = ...
        HypertextLinkSelected: ClassVar[QAccessible.Event] = ...
        HypertextNLinksChanged: ClassVar[QAccessible.Event] = ...
        InvalidEvent: ClassVar[QAccessible.Event] = ...
        LocationChanged: ClassVar[QAccessible.Event] = ...
        MenuCommand: ClassVar[QAccessible.Event] = ...
        MenuEnd: ClassVar[QAccessible.Event] = ...
        MenuStart: ClassVar[QAccessible.Event] = ...
        NameChanged: ClassVar[QAccessible.Event] = ...
        ObjectAttributeChanged: ClassVar[QAccessible.Event] = ...
        ObjectCreated: ClassVar[QAccessible.Event] = ...
        ObjectDestroyed: ClassVar[QAccessible.Event] = ...
        ObjectHide: ClassVar[QAccessible.Event] = ...
        ObjectReorder: ClassVar[QAccessible.Event] = ...
        ObjectShow: ClassVar[QAccessible.Event] = ...
        PageChanged: ClassVar[QAccessible.Event] = ...
        ParentChanged: ClassVar[QAccessible.Event] = ...
        PopupMenuEnd: ClassVar[QAccessible.Event] = ...
        PopupMenuStart: ClassVar[QAccessible.Event] = ...
        ScrollingEnd: ClassVar[QAccessible.Event] = ...
        ScrollingStart: ClassVar[QAccessible.Event] = ...
        SectionChanged: ClassVar[QAccessible.Event] = ...
        Selection: ClassVar[QAccessible.Event] = ...
        SelectionAdd: ClassVar[QAccessible.Event] = ...
        SelectionRemove: ClassVar[QAccessible.Event] = ...
        SelectionWithin: ClassVar[QAccessible.Event] = ...
        SoundPlayed: ClassVar[QAccessible.Event] = ...
        StateChanged: ClassVar[QAccessible.Event] = ...
        TableCaptionChanged: ClassVar[QAccessible.Event] = ...
        TableColumnDescriptionChanged: ClassVar[QAccessible.Event] = ...
        TableColumnHeaderChanged: ClassVar[QAccessible.Event] = ...
        TableModelChanged: ClassVar[QAccessible.Event] = ...
        TableRowDescriptionChanged: ClassVar[QAccessible.Event] = ...
        TableRowHeaderChanged: ClassVar[QAccessible.Event] = ...
        TableSummaryChanged: ClassVar[QAccessible.Event] = ...
        TextAttributeChanged: ClassVar[QAccessible.Event] = ...
        TextCaretMoved: ClassVar[QAccessible.Event] = ...
        TextColumnChanged: ClassVar[QAccessible.Event] = ...
        TextInserted: ClassVar[QAccessible.Event] = ...
        TextRemoved: ClassVar[QAccessible.Event] = ...
        TextSelectionChanged: ClassVar[QAccessible.Event] = ...
        TextUpdated: ClassVar[QAccessible.Event] = ...
        ValueChanged: ClassVar[QAccessible.Event] = ...
        VisibleDataChanged: ClassVar[QAccessible.Event] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAccessible.Event: ...
        def __and__(self, other: typing.SupportsInt) -> QAccessible.Event: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAccessible.Event: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAccessible.Event: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAccessible.Event: ...
        def __rand__(self, other: typing.SupportsInt) -> QAccessible.Event: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAccessible.Event: ...
        def __ror__(self, other: typing.SupportsInt) -> QAccessible.Event: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAccessible.Event: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAccessible.Event: ...
        def __sub__(self, other: typing.SupportsInt) -> QAccessible.Event: ...
        def __xor__(self, other: typing.SupportsInt) -> QAccessible.Event: ...

    class InterfaceType:
        ActionInterface: ClassVar[QAccessible.InterfaceType] = ...
        EditableTextInterface: ClassVar[QAccessible.InterfaceType] = ...
        ImageInterface: ClassVar[QAccessible.InterfaceType] = ...
        TableCellInterface: ClassVar[QAccessible.InterfaceType] = ...
        TableInterface: ClassVar[QAccessible.InterfaceType] = ...
        TextInterface: ClassVar[QAccessible.InterfaceType] = ...
        ValueInterface: ClassVar[QAccessible.InterfaceType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAccessible.InterfaceType: ...
        def __and__(self, other: typing.SupportsInt) -> QAccessible.InterfaceType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAccessible.InterfaceType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAccessible.InterfaceType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAccessible.InterfaceType: ...
        def __rand__(self, other: typing.SupportsInt) -> QAccessible.InterfaceType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAccessible.InterfaceType: ...
        def __ror__(self, other: typing.SupportsInt) -> QAccessible.InterfaceType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAccessible.InterfaceType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAccessible.InterfaceType: ...
        def __sub__(self, other: typing.SupportsInt) -> QAccessible.InterfaceType: ...
        def __xor__(self, other: typing.SupportsInt) -> QAccessible.InterfaceType: ...

    class Relation:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QAccessible.Relation: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QAccessible.Relation: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAccessible.Relation: ...
        def __rand__(self, other: typing.SupportsInt) -> QAccessible.Relation: ...
        def __ror__(self, other: typing.SupportsInt) -> QAccessible.Relation: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAccessible.Relation: ...
        def __xor__(self, other: typing.SupportsInt) -> QAccessible.Relation: ...

    class RelationFlag:
        AllRelations: ClassVar[QAccessible.RelationFlag] = ...
        Controlled: ClassVar[QAccessible.RelationFlag] = ...
        Controller: ClassVar[QAccessible.RelationFlag] = ...
        Label: ClassVar[QAccessible.RelationFlag] = ...
        Labelled: ClassVar[QAccessible.RelationFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QAccessible.Relation: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QAccessible.RelationFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAccessible.Relation: ...
        def __rand__(self, other: typing.SupportsInt) -> QAccessible.Relation: ...
        def __ror__(self, other: typing.SupportsInt) -> QAccessible.Relation: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAccessible.Relation: ...
        def __xor__(self, other: typing.SupportsInt) -> QAccessible.Relation: ...

    class Role:
        AlertMessage: ClassVar[QAccessible.Role] = ...
        Animation: ClassVar[QAccessible.Role] = ...
        Application: ClassVar[QAccessible.Role] = ...
        Assistant: ClassVar[QAccessible.Role] = ...
        Border: ClassVar[QAccessible.Role] = ...
        Button: ClassVar[QAccessible.Role] = ...
        ButtonDropDown: ClassVar[QAccessible.Role] = ...
        ButtonDropGrid: ClassVar[QAccessible.Role] = ...
        ButtonMenu: ClassVar[QAccessible.Role] = ...
        Canvas: ClassVar[QAccessible.Role] = ...
        Caret: ClassVar[QAccessible.Role] = ...
        Cell: ClassVar[QAccessible.Role] = ...
        Chart: ClassVar[QAccessible.Role] = ...
        CheckBox: ClassVar[QAccessible.Role] = ...
        Client: ClassVar[QAccessible.Role] = ...
        Clock: ClassVar[QAccessible.Role] = ...
        ColorChooser: ClassVar[QAccessible.Role] = ...
        Column: ClassVar[QAccessible.Role] = ...
        ColumnHeader: ClassVar[QAccessible.Role] = ...
        ComboBox: ClassVar[QAccessible.Role] = ...
        ComplementaryContent: ClassVar[QAccessible.Role] = ...
        Cursor: ClassVar[QAccessible.Role] = ...
        Desktop: ClassVar[QAccessible.Role] = ...
        Dial: ClassVar[QAccessible.Role] = ...
        Dialog: ClassVar[QAccessible.Role] = ...
        Document: ClassVar[QAccessible.Role] = ...
        EditableText: ClassVar[QAccessible.Role] = ...
        Equation: ClassVar[QAccessible.Role] = ...
        Footer: ClassVar[QAccessible.Role] = ...
        Form: ClassVar[QAccessible.Role] = ...
        Graphic: ClassVar[QAccessible.Role] = ...
        Grip: ClassVar[QAccessible.Role] = ...
        Grouping: ClassVar[QAccessible.Role] = ...
        Heading: ClassVar[QAccessible.Role] = ...
        HelpBalloon: ClassVar[QAccessible.Role] = ...
        HotkeyField: ClassVar[QAccessible.Role] = ...
        Indicator: ClassVar[QAccessible.Role] = ...
        LayeredPane: ClassVar[QAccessible.Role] = ...
        Link: ClassVar[QAccessible.Role] = ...
        List: ClassVar[QAccessible.Role] = ...
        ListItem: ClassVar[QAccessible.Role] = ...
        MenuBar: ClassVar[QAccessible.Role] = ...
        MenuItem: ClassVar[QAccessible.Role] = ...
        NoRole: ClassVar[QAccessible.Role] = ...
        Note: ClassVar[QAccessible.Role] = ...
        Notification: ClassVar[QAccessible.Role] = ...
        PageTab: ClassVar[QAccessible.Role] = ...
        PageTabList: ClassVar[QAccessible.Role] = ...
        Pane: ClassVar[QAccessible.Role] = ...
        Paragraph: ClassVar[QAccessible.Role] = ...
        PopupMenu: ClassVar[QAccessible.Role] = ...
        ProgressBar: ClassVar[QAccessible.Role] = ...
        PropertyPage: ClassVar[QAccessible.Role] = ...
        PushButton: ClassVar[QAccessible.Role] = ...
        RadioButton: ClassVar[QAccessible.Role] = ...
        Row: ClassVar[QAccessible.Role] = ...
        RowHeader: ClassVar[QAccessible.Role] = ...
        ScrollBar: ClassVar[QAccessible.Role] = ...
        Section: ClassVar[QAccessible.Role] = ...
        Separator: ClassVar[QAccessible.Role] = ...
        Slider: ClassVar[QAccessible.Role] = ...
        Sound: ClassVar[QAccessible.Role] = ...
        SpinBox: ClassVar[QAccessible.Role] = ...
        Splitter: ClassVar[QAccessible.Role] = ...
        StaticText: ClassVar[QAccessible.Role] = ...
        StatusBar: ClassVar[QAccessible.Role] = ...
        Table: ClassVar[QAccessible.Role] = ...
        Terminal: ClassVar[QAccessible.Role] = ...
        TitleBar: ClassVar[QAccessible.Role] = ...
        ToolBar: ClassVar[QAccessible.Role] = ...
        ToolTip: ClassVar[QAccessible.Role] = ...
        Tree: ClassVar[QAccessible.Role] = ...
        TreeItem: ClassVar[QAccessible.Role] = ...
        UserRole: ClassVar[QAccessible.Role] = ...
        WebDocument: ClassVar[QAccessible.Role] = ...
        Whitespace: ClassVar[QAccessible.Role] = ...
        Window: ClassVar[QAccessible.Role] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAccessible.Role: ...
        def __and__(self, other: typing.SupportsInt) -> QAccessible.Role: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAccessible.Role: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAccessible.Role: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAccessible.Role: ...
        def __rand__(self, other: typing.SupportsInt) -> QAccessible.Role: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAccessible.Role: ...
        def __ror__(self, other: typing.SupportsInt) -> QAccessible.Role: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAccessible.Role: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAccessible.Role: ...
        def __sub__(self, other: typing.SupportsInt) -> QAccessible.Role: ...
        def __xor__(self, other: typing.SupportsInt) -> QAccessible.Role: ...

    class State(shiboken2.Object):
        active: Any
        animated: Any
        busy: Any
        checkStateMixed: Any
        checkable: Any
        checked: Any
        collapsed: Any
        defaultButton: Any
        disabled: Any
        editable: Any
        expandable: Any
        expanded: Any
        extSelectable: Any
        focusable: Any
        focused: Any
        hasPopup: Any
        hotTracked: Any
        invalid: Any
        invisible: Any
        linked: Any
        marqueed: Any
        modal: Any
        movable: Any
        multiLine: Any
        multiSelectable: Any
        offscreen: Any
        passwordEdit: Any
        pressed: Any
        readOnly: Any
        searchEdit: Any
        selectable: Any
        selectableText: Any
        selected: Any
        selfVoicing: Any
        sizeable: Any
        supportsAutoCompletion: Any
        traversed: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, State: QAccessible.State) -> None: ...
        def __copy__(self) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...

    class Text:
        Accelerator: ClassVar[QAccessible.Text] = ...
        DebugDescription: ClassVar[QAccessible.Text] = ...
        Description: ClassVar[QAccessible.Text] = ...
        Help: ClassVar[QAccessible.Text] = ...
        Name: ClassVar[QAccessible.Text] = ...
        UserText: ClassVar[QAccessible.Text] = ...
        Value: ClassVar[QAccessible.Text] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAccessible.Text: ...
        def __and__(self, other: typing.SupportsInt) -> QAccessible.Text: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAccessible.Text: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAccessible.Text: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAccessible.Text: ...
        def __rand__(self, other: typing.SupportsInt) -> QAccessible.Text: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAccessible.Text: ...
        def __ror__(self, other: typing.SupportsInt) -> QAccessible.Text: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAccessible.Text: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAccessible.Text: ...
        def __sub__(self, other: typing.SupportsInt) -> QAccessible.Text: ...
        def __xor__(self, other: typing.SupportsInt) -> QAccessible.Text: ...

    class TextBoundaryType:
        CharBoundary: ClassVar[QAccessible.TextBoundaryType] = ...
        LineBoundary: ClassVar[QAccessible.TextBoundaryType] = ...
        NoBoundary: ClassVar[QAccessible.TextBoundaryType] = ...
        ParagraphBoundary: ClassVar[QAccessible.TextBoundaryType] = ...
        SentenceBoundary: ClassVar[QAccessible.TextBoundaryType] = ...
        WordBoundary: ClassVar[QAccessible.TextBoundaryType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAccessible.TextBoundaryType: ...
        def __and__(self, other: typing.SupportsInt) -> QAccessible.TextBoundaryType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAccessible.TextBoundaryType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAccessible.TextBoundaryType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAccessible.TextBoundaryType: ...
        def __rand__(self, other: typing.SupportsInt) -> QAccessible.TextBoundaryType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAccessible.TextBoundaryType: ...
        def __ror__(self, other: typing.SupportsInt) -> QAccessible.TextBoundaryType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAccessible.TextBoundaryType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAccessible.TextBoundaryType: ...
        def __sub__(self, other: typing.SupportsInt) -> QAccessible.TextBoundaryType: ...
        def __xor__(self, other: typing.SupportsInt) -> QAccessible.TextBoundaryType: ...
    Accelerator: ClassVar[QAccessible.Text] = ...
    AcceleratorChanged: ClassVar[QAccessible.Event] = ...
    ActionChanged: ClassVar[QAccessible.Event] = ...
    ActionInterface: ClassVar[QAccessible.InterfaceType] = ...
    ActiveDescendantChanged: ClassVar[QAccessible.Event] = ...
    Alert: ClassVar[QAccessible.Event] = ...
    AlertMessage: ClassVar[QAccessible.Role] = ...
    AllRelations: ClassVar[QAccessible.RelationFlag] = ...
    Animation: ClassVar[QAccessible.Role] = ...
    Application: ClassVar[QAccessible.Role] = ...
    Assistant: ClassVar[QAccessible.Role] = ...
    AttributeChanged: ClassVar[QAccessible.Event] = ...
    Border: ClassVar[QAccessible.Role] = ...
    Button: ClassVar[QAccessible.Role] = ...
    ButtonDropDown: ClassVar[QAccessible.Role] = ...
    ButtonDropGrid: ClassVar[QAccessible.Role] = ...
    ButtonMenu: ClassVar[QAccessible.Role] = ...
    Canvas: ClassVar[QAccessible.Role] = ...
    Caret: ClassVar[QAccessible.Role] = ...
    Cell: ClassVar[QAccessible.Role] = ...
    CharBoundary: ClassVar[QAccessible.TextBoundaryType] = ...
    Chart: ClassVar[QAccessible.Role] = ...
    CheckBox: ClassVar[QAccessible.Role] = ...
    Client: ClassVar[QAccessible.Role] = ...
    Clock: ClassVar[QAccessible.Role] = ...
    ColorChooser: ClassVar[QAccessible.Role] = ...
    Column: ClassVar[QAccessible.Role] = ...
    ColumnHeader: ClassVar[QAccessible.Role] = ...
    ComboBox: ClassVar[QAccessible.Role] = ...
    ComplementaryContent: ClassVar[QAccessible.Role] = ...
    ContextHelpEnd: ClassVar[QAccessible.Event] = ...
    ContextHelpStart: ClassVar[QAccessible.Event] = ...
    Controlled: ClassVar[QAccessible.RelationFlag] = ...
    Controller: ClassVar[QAccessible.RelationFlag] = ...
    Cursor: ClassVar[QAccessible.Role] = ...
    DebugDescription: ClassVar[QAccessible.Text] = ...
    DefaultActionChanged: ClassVar[QAccessible.Event] = ...
    Description: ClassVar[QAccessible.Text] = ...
    DescriptionChanged: ClassVar[QAccessible.Event] = ...
    Desktop: ClassVar[QAccessible.Role] = ...
    Dial: ClassVar[QAccessible.Role] = ...
    Dialog: ClassVar[QAccessible.Role] = ...
    DialogEnd: ClassVar[QAccessible.Event] = ...
    DialogStart: ClassVar[QAccessible.Event] = ...
    Document: ClassVar[QAccessible.Role] = ...
    DocumentContentChanged: ClassVar[QAccessible.Event] = ...
    DocumentLoadComplete: ClassVar[QAccessible.Event] = ...
    DocumentLoadStopped: ClassVar[QAccessible.Event] = ...
    DocumentReload: ClassVar[QAccessible.Event] = ...
    DragDropEnd: ClassVar[QAccessible.Event] = ...
    DragDropStart: ClassVar[QAccessible.Event] = ...
    EditableText: ClassVar[QAccessible.Role] = ...
    EditableTextInterface: ClassVar[QAccessible.InterfaceType] = ...
    Equation: ClassVar[QAccessible.Role] = ...
    Focus: ClassVar[QAccessible.Event] = ...
    Footer: ClassVar[QAccessible.Role] = ...
    ForegroundChanged: ClassVar[QAccessible.Event] = ...
    Form: ClassVar[QAccessible.Role] = ...
    Graphic: ClassVar[QAccessible.Role] = ...
    Grip: ClassVar[QAccessible.Role] = ...
    Grouping: ClassVar[QAccessible.Role] = ...
    Heading: ClassVar[QAccessible.Role] = ...
    Help: ClassVar[QAccessible.Text] = ...
    HelpBalloon: ClassVar[QAccessible.Role] = ...
    HelpChanged: ClassVar[QAccessible.Event] = ...
    HotkeyField: ClassVar[QAccessible.Role] = ...
    HyperlinkEndIndexChanged: ClassVar[QAccessible.Event] = ...
    HyperlinkNumberOfAnchorsChanged: ClassVar[QAccessible.Event] = ...
    HyperlinkSelectedLinkChanged: ClassVar[QAccessible.Event] = ...
    HyperlinkStartIndexChanged: ClassVar[QAccessible.Event] = ...
    HypertextChanged: ClassVar[QAccessible.Event] = ...
    HypertextLinkActivated: ClassVar[QAccessible.Event] = ...
    HypertextLinkSelected: ClassVar[QAccessible.Event] = ...
    HypertextNLinksChanged: ClassVar[QAccessible.Event] = ...
    ImageInterface: ClassVar[QAccessible.InterfaceType] = ...
    Indicator: ClassVar[QAccessible.Role] = ...
    InvalidEvent: ClassVar[QAccessible.Event] = ...
    Label: ClassVar[QAccessible.RelationFlag] = ...
    Labelled: ClassVar[QAccessible.RelationFlag] = ...
    LayeredPane: ClassVar[QAccessible.Role] = ...
    LineBoundary: ClassVar[QAccessible.TextBoundaryType] = ...
    Link: ClassVar[QAccessible.Role] = ...
    List: ClassVar[QAccessible.Role] = ...
    ListItem: ClassVar[QAccessible.Role] = ...
    LocationChanged: ClassVar[QAccessible.Event] = ...
    MenuBar: ClassVar[QAccessible.Role] = ...
    MenuCommand: ClassVar[QAccessible.Event] = ...
    MenuEnd: ClassVar[QAccessible.Event] = ...
    MenuItem: ClassVar[QAccessible.Role] = ...
    MenuStart: ClassVar[QAccessible.Event] = ...
    Name: ClassVar[QAccessible.Text] = ...
    NameChanged: ClassVar[QAccessible.Event] = ...
    NoBoundary: ClassVar[QAccessible.TextBoundaryType] = ...
    NoRole: ClassVar[QAccessible.Role] = ...
    Note: ClassVar[QAccessible.Role] = ...
    Notification: ClassVar[QAccessible.Role] = ...
    ObjectAttributeChanged: ClassVar[QAccessible.Event] = ...
    ObjectCreated: ClassVar[QAccessible.Event] = ...
    ObjectDestroyed: ClassVar[QAccessible.Event] = ...
    ObjectHide: ClassVar[QAccessible.Event] = ...
    ObjectReorder: ClassVar[QAccessible.Event] = ...
    ObjectShow: ClassVar[QAccessible.Event] = ...
    PageChanged: ClassVar[QAccessible.Event] = ...
    PageTab: ClassVar[QAccessible.Role] = ...
    PageTabList: ClassVar[QAccessible.Role] = ...
    Pane: ClassVar[QAccessible.Role] = ...
    Paragraph: ClassVar[QAccessible.Role] = ...
    ParagraphBoundary: ClassVar[QAccessible.TextBoundaryType] = ...
    ParentChanged: ClassVar[QAccessible.Event] = ...
    PopupMenu: ClassVar[QAccessible.Role] = ...
    PopupMenuEnd: ClassVar[QAccessible.Event] = ...
    PopupMenuStart: ClassVar[QAccessible.Event] = ...
    ProgressBar: ClassVar[QAccessible.Role] = ...
    PropertyPage: ClassVar[QAccessible.Role] = ...
    PushButton: ClassVar[QAccessible.Role] = ...
    RadioButton: ClassVar[QAccessible.Role] = ...
    Row: ClassVar[QAccessible.Role] = ...
    RowHeader: ClassVar[QAccessible.Role] = ...
    ScrollBar: ClassVar[QAccessible.Role] = ...
    ScrollingEnd: ClassVar[QAccessible.Event] = ...
    ScrollingStart: ClassVar[QAccessible.Event] = ...
    Section: ClassVar[QAccessible.Role] = ...
    SectionChanged: ClassVar[QAccessible.Event] = ...
    Selection: ClassVar[QAccessible.Event] = ...
    SelectionAdd: ClassVar[QAccessible.Event] = ...
    SelectionRemove: ClassVar[QAccessible.Event] = ...
    SelectionWithin: ClassVar[QAccessible.Event] = ...
    SentenceBoundary: ClassVar[QAccessible.TextBoundaryType] = ...
    Separator: ClassVar[QAccessible.Role] = ...
    Slider: ClassVar[QAccessible.Role] = ...
    Sound: ClassVar[QAccessible.Role] = ...
    SoundPlayed: ClassVar[QAccessible.Event] = ...
    SpinBox: ClassVar[QAccessible.Role] = ...
    Splitter: ClassVar[QAccessible.Role] = ...
    StateChanged: ClassVar[QAccessible.Event] = ...
    StaticText: ClassVar[QAccessible.Role] = ...
    StatusBar: ClassVar[QAccessible.Role] = ...
    Table: ClassVar[QAccessible.Role] = ...
    TableCaptionChanged: ClassVar[QAccessible.Event] = ...
    TableCellInterface: ClassVar[QAccessible.InterfaceType] = ...
    TableColumnDescriptionChanged: ClassVar[QAccessible.Event] = ...
    TableColumnHeaderChanged: ClassVar[QAccessible.Event] = ...
    TableInterface: ClassVar[QAccessible.InterfaceType] = ...
    TableModelChanged: ClassVar[QAccessible.Event] = ...
    TableRowDescriptionChanged: ClassVar[QAccessible.Event] = ...
    TableRowHeaderChanged: ClassVar[QAccessible.Event] = ...
    TableSummaryChanged: ClassVar[QAccessible.Event] = ...
    Terminal: ClassVar[QAccessible.Role] = ...
    TextAttributeChanged: ClassVar[QAccessible.Event] = ...
    TextCaretMoved: ClassVar[QAccessible.Event] = ...
    TextColumnChanged: ClassVar[QAccessible.Event] = ...
    TextInserted: ClassVar[QAccessible.Event] = ...
    TextInterface: ClassVar[QAccessible.InterfaceType] = ...
    TextRemoved: ClassVar[QAccessible.Event] = ...
    TextSelectionChanged: ClassVar[QAccessible.Event] = ...
    TextUpdated: ClassVar[QAccessible.Event] = ...
    TitleBar: ClassVar[QAccessible.Role] = ...
    ToolBar: ClassVar[QAccessible.Role] = ...
    ToolTip: ClassVar[QAccessible.Role] = ...
    Tree: ClassVar[QAccessible.Role] = ...
    TreeItem: ClassVar[QAccessible.Role] = ...
    UserRole: ClassVar[QAccessible.Role] = ...
    UserText: ClassVar[QAccessible.Text] = ...
    Value: ClassVar[QAccessible.Text] = ...
    ValueChanged: ClassVar[QAccessible.Event] = ...
    ValueInterface: ClassVar[QAccessible.InterfaceType] = ...
    VisibleDataChanged: ClassVar[QAccessible.Event] = ...
    WebDocument: ClassVar[QAccessible.Role] = ...
    Whitespace: ClassVar[QAccessible.Role] = ...
    Window: ClassVar[QAccessible.Role] = ...
    WordBoundary: ClassVar[QAccessible.TextBoundaryType] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def accessibleInterface(cls, uniqueId: int) -> QAccessibleInterface: ...
    @classmethod
    def cleanup(cls) -> None: ...
    @classmethod
    def deleteAccessibleInterface(cls, uniqueId: int) -> None: ...
    @classmethod
    def isActive(cls) -> bool: ...
    @classmethod
    def qAccessibleTextBoundaryHelper(cls, cursor: QTextCursor, boundaryType: QAccessible.TextBoundaryType) -> typing.Tuple[int,int]: ...
    @classmethod
    def queryAccessibleInterface(cls, arg__1: PySide2.QtCore.QObject) -> QAccessibleInterface: ...
    @classmethod
    def registerAccessibleInterface(cls, iface: QAccessibleInterface) -> int: ...
    @classmethod
    def setActive(cls, active: bool) -> None: ...
    @classmethod
    def setRootObject(cls, object: PySide2.QtCore.QObject) -> None: ...
    @classmethod
    def uniqueId(cls, iface: QAccessibleInterface) -> int: ...
    @classmethod
    def updateAccessibility(cls, event: QAccessibleEvent) -> None: ...
    def __copy__(self) -> None: ...

class QAccessibleEditableTextInterface(shiboken2.Object):
    def __init__(self) -> None: ...
    def deleteText(self, startOffset: int, endOffset: int) -> None: ...
    def insertText(self, offset: int, text: str) -> None: ...
    def replaceText(self, startOffset: int, endOffset: int, text: str) -> None: ...

class QAccessibleEvent(shiboken2.Object):
    @overload
    def __init__(self, iface: QAccessibleInterface, typ: QAccessible.Event) -> None: ...
    @overload
    def __init__(self, obj: PySide2.QtCore.QObject, typ: QAccessible.Event) -> None: ...
    def accessibleInterface(self) -> QAccessibleInterface: ...
    def child(self) -> int: ...
    def object(self) -> PySide2.QtCore.QObject: ...
    def setChild(self, chld: int) -> None: ...
    def type(self) -> QAccessible.Event: ...
    def uniqueId(self) -> int: ...

class QAccessibleInterface(shiboken2.Object):
    def __init__(self) -> None: ...
    def backgroundColor(self) -> QColor: ...
    def child(self, index: int) -> QAccessibleInterface: ...
    def childAt(self, x: int, y: int) -> QAccessibleInterface: ...
    def childCount(self) -> int: ...
    def editableTextInterface(self) -> QAccessibleEditableTextInterface: ...
    def focusChild(self) -> QAccessibleInterface: ...
    def foregroundColor(self) -> QColor: ...
    def indexOfChild(self, arg__1: QAccessibleInterface) -> int: ...
    def interface_cast(self, arg__1: QAccessible.InterfaceType) -> int: ...
    def isValid(self) -> bool: ...
    def object(self) -> PySide2.QtCore.QObject: ...
    def parent(self) -> QAccessibleInterface: ...
    def rect(self) -> PySide2.QtCore.QRect: ...
    def relations(self, match: typing.Union[QAccessible.Relation,QAccessible.RelationFlag] = ...) -> typing.List[typing.Tuple[QAccessibleInterface,QAccessible.Relation]]: ...
    def role(self) -> QAccessible.Role: ...
    def setText(self, t: QAccessible.Text, text: str) -> None: ...
    def state(self) -> QAccessible.State: ...
    def tableCellInterface(self) -> QAccessibleTableCellInterface: ...
    def text(self, t: QAccessible.Text) -> str: ...
    def textInterface(self) -> QAccessibleTextInterface: ...
    def valueInterface(self) -> QAccessibleValueInterface: ...
    def virtual_hook(self, id: int, data: int) -> None: ...
    def window(self) -> QWindow: ...

class QAccessibleObject(QAccessibleInterface):
    def __init__(self, object: PySide2.QtCore.QObject) -> None: ...
    def childAt(self, x: int, y: int) -> QAccessibleInterface: ...
    def isValid(self) -> bool: ...
    def object(self) -> PySide2.QtCore.QObject: ...
    def rect(self) -> PySide2.QtCore.QRect: ...
    def setText(self, t: QAccessible.Text, text: str) -> None: ...

class QAccessibleStateChangeEvent(QAccessibleEvent):
    @overload
    def __init__(self, iface: QAccessibleInterface, state: QAccessible.State) -> None: ...
    @overload
    def __init__(self, obj: PySide2.QtCore.QObject, state: QAccessible.State) -> None: ...
    def changedStates(self) -> QAccessible.State: ...

class QAccessibleTableCellInterface(shiboken2.Object):
    def __init__(self) -> None: ...
    def columnExtent(self) -> int: ...
    def columnHeaderCells(self) -> typing.List[QAccessibleInterface]: ...
    def columnIndex(self) -> int: ...
    def isSelected(self) -> bool: ...
    def rowExtent(self) -> int: ...
    def rowHeaderCells(self) -> typing.List[QAccessibleInterface]: ...
    def rowIndex(self) -> int: ...
    def table(self) -> QAccessibleInterface: ...

class QAccessibleTableModelChangeEvent(QAccessibleEvent):
    class ModelChangeType:
        ColumnsInserted: ClassVar[QAccessibleTableModelChangeEvent.ModelChangeType] = ...
        ColumnsRemoved: ClassVar[QAccessibleTableModelChangeEvent.ModelChangeType] = ...
        DataChanged: ClassVar[QAccessibleTableModelChangeEvent.ModelChangeType] = ...
        ModelReset: ClassVar[QAccessibleTableModelChangeEvent.ModelChangeType] = ...
        RowsInserted: ClassVar[QAccessibleTableModelChangeEvent.ModelChangeType] = ...
        RowsRemoved: ClassVar[QAccessibleTableModelChangeEvent.ModelChangeType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QAccessibleTableModelChangeEvent.ModelChangeType: ...
        def __and__(self, other: typing.SupportsInt) -> QAccessibleTableModelChangeEvent.ModelChangeType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QAccessibleTableModelChangeEvent.ModelChangeType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QAccessibleTableModelChangeEvent.ModelChangeType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QAccessibleTableModelChangeEvent.ModelChangeType: ...
        def __rand__(self, other: typing.SupportsInt) -> QAccessibleTableModelChangeEvent.ModelChangeType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QAccessibleTableModelChangeEvent.ModelChangeType: ...
        def __ror__(self, other: typing.SupportsInt) -> QAccessibleTableModelChangeEvent.ModelChangeType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QAccessibleTableModelChangeEvent.ModelChangeType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QAccessibleTableModelChangeEvent.ModelChangeType: ...
        def __sub__(self, other: typing.SupportsInt) -> QAccessibleTableModelChangeEvent.ModelChangeType: ...
        def __xor__(self, other: typing.SupportsInt) -> QAccessibleTableModelChangeEvent.ModelChangeType: ...
    ColumnsInserted: ClassVar[QAccessibleTableModelChangeEvent.ModelChangeType] = ...
    ColumnsRemoved: ClassVar[QAccessibleTableModelChangeEvent.ModelChangeType] = ...
    DataChanged: ClassVar[QAccessibleTableModelChangeEvent.ModelChangeType] = ...
    ModelReset: ClassVar[QAccessibleTableModelChangeEvent.ModelChangeType] = ...
    RowsInserted: ClassVar[QAccessibleTableModelChangeEvent.ModelChangeType] = ...
    RowsRemoved: ClassVar[QAccessibleTableModelChangeEvent.ModelChangeType] = ...
    @overload
    def __init__(self, iface: QAccessibleInterface, changeType: QAccessibleTableModelChangeEvent.ModelChangeType) -> None: ...
    @overload
    def __init__(self, obj: PySide2.QtCore.QObject, changeType: QAccessibleTableModelChangeEvent.ModelChangeType) -> None: ...
    def firstColumn(self) -> int: ...
    def firstRow(self) -> int: ...
    def lastColumn(self) -> int: ...
    def lastRow(self) -> int: ...
    def modelChangeType(self) -> QAccessibleTableModelChangeEvent.ModelChangeType: ...
    def setFirstColumn(self, col: int) -> None: ...
    def setFirstRow(self, row: int) -> None: ...
    def setLastColumn(self, col: int) -> None: ...
    def setLastRow(self, row: int) -> None: ...
    def setModelChangeType(self, changeType: QAccessibleTableModelChangeEvent.ModelChangeType) -> None: ...

class QAccessibleTextCursorEvent(QAccessibleEvent):
    @overload
    def __init__(self, iface: QAccessibleInterface, cursorPos: int) -> None: ...
    @overload
    def __init__(self, obj: PySide2.QtCore.QObject, cursorPos: int) -> None: ...
    def cursorPosition(self) -> int: ...
    def setCursorPosition(self, position: int) -> None: ...

class QAccessibleTextInsertEvent(QAccessibleTextCursorEvent):
    @overload
    def __init__(self, iface: QAccessibleInterface, position: int, text: str) -> None: ...
    @overload
    def __init__(self, obj: PySide2.QtCore.QObject, position: int, text: str) -> None: ...
    def changePosition(self) -> int: ...
    def textInserted(self) -> str: ...

class QAccessibleTextInterface(shiboken2.Object):
    def __init__(self) -> None: ...
    def addSelection(self, startOffset: int, endOffset: int) -> None: ...
    def attributes(self, offset: int) -> typing.Tuple[str,int,int]: ...
    def characterCount(self) -> int: ...
    def characterRect(self, offset: int) -> PySide2.QtCore.QRect: ...
    def cursorPosition(self) -> int: ...
    def offsetAtPoint(self, point: PySide2.QtCore.QPoint) -> int: ...
    def removeSelection(self, selectionIndex: int) -> None: ...
    def scrollToSubstring(self, startIndex: int, endIndex: int) -> None: ...
    def selection(self, selectionIndex: int) -> typing.Tuple[int,int]: ...
    def selectionCount(self) -> int: ...
    def setCursorPosition(self, position: int) -> None: ...
    def setSelection(self, selectionIndex: int, startOffset: int, endOffset: int) -> None: ...
    def text(self, startOffset: int, endOffset: int) -> str: ...
    def textAfterOffset(self, offset: int, boundaryType: QAccessible.TextBoundaryType) -> typing.Tuple[str,int,int]: ...
    def textAtOffset(self, offset: int, boundaryType: QAccessible.TextBoundaryType) -> typing.Tuple[str,int,int]: ...
    def textBeforeOffset(self, offset: int, boundaryType: QAccessible.TextBoundaryType) -> typing.Tuple[str,int,int]: ...

class QAccessibleTextRemoveEvent(QAccessibleTextCursorEvent):
    @overload
    def __init__(self, iface: QAccessibleInterface, position: int, text: str) -> None: ...
    @overload
    def __init__(self, obj: PySide2.QtCore.QObject, position: int, text: str) -> None: ...
    def changePosition(self) -> int: ...
    def textRemoved(self) -> str: ...

class QAccessibleTextSelectionEvent(QAccessibleTextCursorEvent):
    @overload
    def __init__(self, iface: QAccessibleInterface, start: int, end: int) -> None: ...
    @overload
    def __init__(self, obj: PySide2.QtCore.QObject, start: int, end: int) -> None: ...
    def selectionEnd(self) -> int: ...
    def selectionStart(self) -> int: ...
    def setSelection(self, start: int, end: int) -> None: ...

class QAccessibleTextUpdateEvent(QAccessibleTextCursorEvent):
    @overload
    def __init__(self, iface: QAccessibleInterface, position: int, oldText: str, text: str) -> None: ...
    @overload
    def __init__(self, obj: PySide2.QtCore.QObject, position: int, oldText: str, text: str) -> None: ...
    def changePosition(self) -> int: ...
    def textInserted(self) -> str: ...
    def textRemoved(self) -> str: ...

class QAccessibleValueChangeEvent(QAccessibleEvent):
    @overload
    def __init__(self, iface: QAccessibleInterface, val: typing.Any) -> None: ...
    @overload
    def __init__(self, obj: PySide2.QtCore.QObject, val: typing.Any) -> None: ...
    def setValue(self, val: typing.Any) -> None: ...
    def value(self) -> typing.Any: ...

class QAccessibleValueInterface(shiboken2.Object):
    def __init__(self) -> None: ...
    def currentValue(self) -> typing.Any: ...
    def maximumValue(self) -> typing.Any: ...
    def minimumStepSize(self) -> typing.Any: ...
    def minimumValue(self) -> typing.Any: ...
    def setCurrentValue(self, value: typing.Any) -> None: ...

class QActionEvent(PySide2.QtCore.QEvent):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class QBackingStore(shiboken2.Object):
    def __init__(self, window: QWindow) -> None: ...
    def beginPaint(self, arg__1: QRegion) -> None: ...
    def endPaint(self) -> None: ...
    def flush(self, region: QRegion, window: typing.Union[QWindow,None] = ..., offset: PySide2.QtCore.QPoint = ...) -> None: ...
    def hasStaticContents(self) -> bool: ...
    def paintDevice(self) -> QPaintDevice: ...
    def resize(self, size: PySide2.QtCore.QSize) -> None: ...
    def scroll(self, area: QRegion, dx: int, dy: int) -> bool: ...
    def setStaticContents(self, region: QRegion) -> None: ...
    def size(self) -> PySide2.QtCore.QSize: ...
    def staticContents(self) -> QRegion: ...
    def window(self) -> QWindow: ...

class QBitmap(QPixmap):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: PySide2.QtCore.QSize) -> None: ...
    @overload
    def __init__(self, arg__1: QPixmap) -> None: ...
    @overload
    def __init__(self, fileName: str, format: typing.Optional[str] = ...) -> None: ...
    @overload
    def __init__(self, other: QBitmap) -> None: ...
    @overload
    def __init__(self, w: int, h: int) -> None: ...
    def clear(self) -> None: ...
    @classmethod
    def fromData(cls, size: PySide2.QtCore.QSize, bits: bytes, monoFormat: QImage.Format = ...) -> QBitmap: ...
    @classmethod
    @overload
    def fromImage(cls, image: QImage, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> QBitmap: ...
    @classmethod
    @overload
    def fromImage(cls, image: QImage, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> QPixmap: ...
    @overload
    def swap(self, other: QBitmap) -> None: ...
    @overload
    def swap(self, other: QPixmap) -> None: ...
    @overload
    def transformed(self, arg__1: QMatrix) -> QBitmap: ...
    @overload
    def transformed(self, arg__1: QMatrix, mode: PySide2.QtCore.Qt.TransformationMode = ...) -> QPixmap: ...
    @overload
    def transformed(self, matrix: QTransform) -> QBitmap: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...

class QBrush(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, brush: QBrush) -> None: ...
    @overload
    def __init__(self, bs: PySide2.QtCore.Qt.BrushStyle) -> None: ...
    @overload
    def __init__(self, color: PySide2.QtCore.Qt.GlobalColor, bs: PySide2.QtCore.Qt.BrushStyle = ...) -> None: ...
    @overload
    def __init__(self, color: PySide2.QtCore.Qt.GlobalColor, pixmap: QPixmap) -> None: ...
    @overload
    def __init__(self, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor], bs: PySide2.QtCore.Qt.BrushStyle = ...) -> None: ...
    @overload
    def __init__(self, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor], pixmap: QPixmap) -> None: ...
    @overload
    def __init__(self, gradient: QGradient) -> None: ...
    @overload
    def __init__(self, image: QImage) -> None: ...
    @overload
    def __init__(self, pixmap: QPixmap) -> None: ...
    def color(self) -> QColor: ...
    def gradient(self) -> QGradient: ...
    def isOpaque(self) -> bool: ...
    def matrix(self) -> QMatrix: ...
    @overload
    def setColor(self, color: PySide2.QtCore.Qt.GlobalColor) -> None: ...
    @overload
    def setColor(self, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setMatrix(self, mat: QMatrix) -> None: ...
    def setStyle(self, arg__1: PySide2.QtCore.Qt.BrushStyle) -> None: ...
    def setTexture(self, pixmap: QPixmap) -> None: ...
    def setTextureImage(self, image: QImage) -> None: ...
    def setTransform(self, arg__1: QTransform) -> None: ...
    def style(self) -> PySide2.QtCore.Qt.BrushStyle: ...
    def swap(self, other: QBrush) -> None: ...
    def texture(self) -> QPixmap: ...
    def textureImage(self) -> QImage: ...
    def transform(self) -> QTransform: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QClipboard(PySide2.QtCore.QObject):
    class Mode:
        Clipboard: ClassVar[QClipboard.Mode] = ...
        FindBuffer: ClassVar[QClipboard.Mode] = ...
        LastMode: ClassVar[QClipboard.Mode] = ...
        Selection: ClassVar[QClipboard.Mode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QClipboard.Mode: ...
        def __and__(self, other: typing.SupportsInt) -> QClipboard.Mode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QClipboard.Mode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QClipboard.Mode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QClipboard.Mode: ...
        def __rand__(self, other: typing.SupportsInt) -> QClipboard.Mode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QClipboard.Mode: ...
        def __ror__(self, other: typing.SupportsInt) -> QClipboard.Mode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QClipboard.Mode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QClipboard.Mode: ...
        def __sub__(self, other: typing.SupportsInt) -> QClipboard.Mode: ...
        def __xor__(self, other: typing.SupportsInt) -> QClipboard.Mode: ...
    Clipboard: ClassVar[QClipboard.Mode] = ...
    FindBuffer: ClassVar[QClipboard.Mode] = ...
    LastMode: ClassVar[QClipboard.Mode] = ...
    Selection: ClassVar[QClipboard.Mode] = ...
    changed: ClassVar[PySide2.QtCore.Signal] = ...
    dataChanged: ClassVar[PySide2.QtCore.Signal] = ...
    findBufferChanged: ClassVar[PySide2.QtCore.Signal] = ...
    selectionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def clear(self, mode: QClipboard.Mode = ...) -> None: ...
    def image(self, mode: QClipboard.Mode = ...) -> QImage: ...
    def mimeData(self, mode: QClipboard.Mode = ...) -> PySide2.QtCore.QMimeData: ...
    def ownsClipboard(self) -> bool: ...
    def ownsFindBuffer(self) -> bool: ...
    def ownsSelection(self) -> bool: ...
    def pixmap(self, mode: QClipboard.Mode = ...) -> QPixmap: ...
    def setImage(self, arg__1: QImage, mode: QClipboard.Mode = ...) -> None: ...
    def setMimeData(self, data: PySide2.QtCore.QMimeData, mode: QClipboard.Mode = ...) -> None: ...
    def setPixmap(self, arg__1: QPixmap, mode: QClipboard.Mode = ...) -> None: ...
    def setText(self, arg__1: str, mode: QClipboard.Mode = ...) -> None: ...
    def supportsFindBuffer(self) -> bool: ...
    def supportsSelection(self) -> bool: ...
    @overload
    def text(self, mode: QClipboard.Mode = ...) -> str: ...
    @overload
    def text(self, subtype: str, mode: QClipboard.Mode = ...) -> str: ...

class QCloseEvent(PySide2.QtCore.QEvent):
    def __init__(self) -> None: ...

class QColor(shiboken2.Object):
    class NameFormat:
        HexArgb: ClassVar[QColor.NameFormat] = ...
        HexRgb: ClassVar[QColor.NameFormat] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QColor.NameFormat: ...
        def __and__(self, other: typing.SupportsInt) -> QColor.NameFormat: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QColor.NameFormat: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QColor.NameFormat: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QColor.NameFormat: ...
        def __rand__(self, other: typing.SupportsInt) -> QColor.NameFormat: ...
        def __rmul__(self, other: typing.SupportsInt) -> QColor.NameFormat: ...
        def __ror__(self, other: typing.SupportsInt) -> QColor.NameFormat: ...
        def __rsub__(self, other: typing.SupportsInt) -> QColor.NameFormat: ...
        def __rxor__(self, other: typing.SupportsInt) -> QColor.NameFormat: ...
        def __sub__(self, other: typing.SupportsInt) -> QColor.NameFormat: ...
        def __xor__(self, other: typing.SupportsInt) -> QColor.NameFormat: ...

    class Spec:
        Cmyk: ClassVar[QColor.Spec] = ...
        ExtendedRgb: ClassVar[QColor.Spec] = ...
        Hsl: ClassVar[QColor.Spec] = ...
        Hsv: ClassVar[QColor.Spec] = ...
        Invalid: ClassVar[QColor.Spec] = ...
        Rgb: ClassVar[QColor.Spec] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QColor.Spec: ...
        def __and__(self, other: typing.SupportsInt) -> QColor.Spec: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QColor.Spec: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QColor.Spec: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QColor.Spec: ...
        def __rand__(self, other: typing.SupportsInt) -> QColor.Spec: ...
        def __rmul__(self, other: typing.SupportsInt) -> QColor.Spec: ...
        def __ror__(self, other: typing.SupportsInt) -> QColor.Spec: ...
        def __rsub__(self, other: typing.SupportsInt) -> QColor.Spec: ...
        def __rxor__(self, other: typing.SupportsInt) -> QColor.Spec: ...
        def __sub__(self, other: typing.SupportsInt) -> QColor.Spec: ...
        def __xor__(self, other: typing.SupportsInt) -> QColor.Spec: ...
    Cmyk: ClassVar[QColor.Spec] = ...
    ExtendedRgb: ClassVar[QColor.Spec] = ...
    HexArgb: ClassVar[QColor.NameFormat] = ...
    HexRgb: ClassVar[QColor.NameFormat] = ...
    Hsl: ClassVar[QColor.Spec] = ...
    Hsv: ClassVar[QColor.Spec] = ...
    Invalid: ClassVar[QColor.Spec] = ...
    Rgb: ClassVar[QColor.Spec] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: typing.Any) -> None: ...
    @overload
    def __init__(self, color: PySide2.QtCore.Qt.GlobalColor) -> None: ...
    @overload
    def __init__(self, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, r: int, g: int, b: int, a: int = ...) -> None: ...
    @overload
    def __init__(self, rgb: int) -> None: ...
    @overload
    def __init__(self, spec: QColor.Spec, a1: int, a2: int, a3: int, a4: int, a5: int = ...) -> None: ...
    def alpha(self) -> int: ...
    def alphaF(self) -> float: ...
    def black(self) -> int: ...
    def blackF(self) -> float: ...
    def blue(self) -> int: ...
    def blueF(self) -> float: ...
    @classmethod
    def colorNames(cls) -> typing.List[str]: ...
    def convertTo(self, colorSpec: QColor.Spec) -> QColor: ...
    def cyan(self) -> int: ...
    def cyanF(self) -> float: ...
    def dark(self, f: int = ...) -> QColor: ...
    def darker(self, f: int = ...) -> QColor: ...
    @classmethod
    def fromCmyk(cls, c: int, m: int, y: int, k: int, a: int = ...) -> QColor: ...
    @classmethod
    def fromCmykF(cls, c: float, m: float, y: float, k: float, a: float = ...) -> QColor: ...
    @classmethod
    def fromHsl(cls, h: int, s: int, l: int, a: int = ...) -> QColor: ...
    @classmethod
    def fromHslF(cls, h: float, s: float, l: float, a: float = ...) -> QColor: ...
    @classmethod
    def fromHsv(cls, h: int, s: int, v: int, a: int = ...) -> QColor: ...
    @classmethod
    def fromHsvF(cls, h: float, s: float, v: float, a: float = ...) -> QColor: ...
    @classmethod
    @overload
    def fromRgb(cls, r: int, g: int, b: int, a: int = ...) -> QColor: ...
    @classmethod
    @overload
    def fromRgb(cls, rgb: int) -> QColor: ...
    @classmethod
    def fromRgbF(cls, r: float, g: float, b: float, a: float = ...) -> QColor: ...
    @classmethod
    def fromRgba(cls, rgba: int) -> QColor: ...
    @classmethod
    def fromRgba64(cls, r: int, g: int, b: int, a: int = ...) -> QColor: ...
    def getCmyk(self) -> typing.Tuple[int,int,int,int,int]: ...
    def getCmykF(self) -> typing.Tuple[float,float,float,float,float]: ...
    def getHsl(self) -> typing.Tuple[int,int,int,int]: ...
    def getHslF(self) -> typing.Tuple[float,float,float,float]: ...
    def getHsv(self) -> typing.Tuple[int,int,int,int]: ...
    def getHsvF(self) -> typing.Tuple[float,float,float,float]: ...
    def getRgb(self) -> typing.Tuple[int,int,int,int]: ...
    def getRgbF(self) -> typing.Tuple[float,float,float,float]: ...
    def green(self) -> int: ...
    def greenF(self) -> float: ...
    def hslHue(self) -> int: ...
    def hslHueF(self) -> float: ...
    def hslSaturation(self) -> int: ...
    def hslSaturationF(self) -> float: ...
    def hsvHue(self) -> int: ...
    def hsvHueF(self) -> float: ...
    def hsvSaturation(self) -> int: ...
    def hsvSaturationF(self) -> float: ...
    def hue(self) -> int: ...
    def hueF(self) -> float: ...
    def isValid(self) -> bool: ...
    @classmethod
    def isValidColor(cls, name: str) -> bool: ...
    def light(self, f: int = ...) -> QColor: ...
    def lighter(self, f: int = ...) -> QColor: ...
    def lightness(self) -> int: ...
    def lightnessF(self) -> float: ...
    def magenta(self) -> int: ...
    def magentaF(self) -> float: ...
    @overload
    def name(self) -> str: ...
    @overload
    def name(self, format: QColor.NameFormat) -> str: ...
    def red(self) -> int: ...
    def redF(self) -> float: ...
    def rgb(self) -> int: ...
    def rgba(self) -> int: ...
    def saturation(self) -> int: ...
    def saturationF(self) -> float: ...
    def setAlpha(self, alpha: int) -> None: ...
    def setAlphaF(self, alpha: float) -> None: ...
    def setBlue(self, blue: int) -> None: ...
    def setBlueF(self, blue: float) -> None: ...
    def setCmyk(self, c: int, m: int, y: int, k: int, a: int = ...) -> None: ...
    def setCmykF(self, c: float, m: float, y: float, k: float, a: float = ...) -> None: ...
    def setGreen(self, green: int) -> None: ...
    def setGreenF(self, green: float) -> None: ...
    def setHsl(self, h: int, s: int, l: int, a: int = ...) -> None: ...
    def setHslF(self, h: float, s: float, l: float, a: float = ...) -> None: ...
    def setHsv(self, h: int, s: int, v: int, a: int = ...) -> None: ...
    def setHsvF(self, h: float, s: float, v: float, a: float = ...) -> None: ...
    def setNamedColor(self, name: str) -> None: ...
    def setRed(self, red: int) -> None: ...
    def setRedF(self, red: float) -> None: ...
    @overload
    def setRgb(self, r: int, g: int, b: int, a: int = ...) -> None: ...
    @overload
    def setRgb(self, rgb: int) -> None: ...
    def setRgbF(self, r: float, g: float, b: float, a: float = ...) -> None: ...
    def setRgba(self, rgba: int) -> None: ...
    def spec(self) -> QColor.Spec: ...
    def toCmyk(self) -> QColor: ...
    def toExtendedRgb(self) -> QColor: ...
    def toHsl(self) -> QColor: ...
    def toHsv(self) -> QColor: ...
    def toRgb(self) -> QColor: ...
    def toTuple(self) -> object: ...
    def value(self) -> int: ...
    def valueF(self) -> float: ...
    def yellow(self) -> int: ...
    def yellowF(self) -> float: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __setstate__(self, arg__1: object) -> object: ...

class QColorConstants(shiboken2.Object):
    class Svg(shiboken2.Object):
        aliceblue: ClassVar[QColor] = ...
        antiquewhite: ClassVar[QColor] = ...
        aqua: ClassVar[QColor] = ...
        aquamarine: ClassVar[QColor] = ...
        azure: ClassVar[QColor] = ...
        beige: ClassVar[QColor] = ...
        bisque: ClassVar[QColor] = ...
        black: ClassVar[QColor] = ...
        blanchedalmond: ClassVar[QColor] = ...
        blue: ClassVar[QColor] = ...
        blueviolet: ClassVar[QColor] = ...
        brown: ClassVar[QColor] = ...
        burlywood: ClassVar[QColor] = ...
        cadetblue: ClassVar[QColor] = ...
        chartreuse: ClassVar[QColor] = ...
        chocolate: ClassVar[QColor] = ...
        coral: ClassVar[QColor] = ...
        cornflowerblue: ClassVar[QColor] = ...
        cornsilk: ClassVar[QColor] = ...
        crimson: ClassVar[QColor] = ...
        cyan: ClassVar[QColor] = ...
        darkblue: ClassVar[QColor] = ...
        darkcyan: ClassVar[QColor] = ...
        darkgoldenrod: ClassVar[QColor] = ...
        darkgray: ClassVar[QColor] = ...
        darkgreen: ClassVar[QColor] = ...
        darkgrey: ClassVar[QColor] = ...
        darkkhaki: ClassVar[QColor] = ...
        darkmagenta: ClassVar[QColor] = ...
        darkolivegreen: ClassVar[QColor] = ...
        darkorange: ClassVar[QColor] = ...
        darkorchid: ClassVar[QColor] = ...
        darkred: ClassVar[QColor] = ...
        darksalmon: ClassVar[QColor] = ...
        darkseagreen: ClassVar[QColor] = ...
        darkslateblue: ClassVar[QColor] = ...
        darkslategray: ClassVar[QColor] = ...
        darkslategrey: ClassVar[QColor] = ...
        darkturquoise: ClassVar[QColor] = ...
        darkviolet: ClassVar[QColor] = ...
        deeppink: ClassVar[QColor] = ...
        deepskyblue: ClassVar[QColor] = ...
        dimgray: ClassVar[QColor] = ...
        dimgrey: ClassVar[QColor] = ...
        dodgerblue: ClassVar[QColor] = ...
        firebrick: ClassVar[QColor] = ...
        floralwhite: ClassVar[QColor] = ...
        forestgreen: ClassVar[QColor] = ...
        fuchsia: ClassVar[QColor] = ...
        gainsboro: ClassVar[QColor] = ...
        ghostwhite: ClassVar[QColor] = ...
        gold: ClassVar[QColor] = ...
        goldenrod: ClassVar[QColor] = ...
        gray: ClassVar[QColor] = ...
        green: ClassVar[QColor] = ...
        greenyellow: ClassVar[QColor] = ...
        grey: ClassVar[QColor] = ...
        honeydew: ClassVar[QColor] = ...
        hotpink: ClassVar[QColor] = ...
        indianred: ClassVar[QColor] = ...
        indigo: ClassVar[QColor] = ...
        ivory: ClassVar[QColor] = ...
        khaki: ClassVar[QColor] = ...
        lavender: ClassVar[QColor] = ...
        lavenderblush: ClassVar[QColor] = ...
        lawngreen: ClassVar[QColor] = ...
        lemonchiffon: ClassVar[QColor] = ...
        lightblue: ClassVar[QColor] = ...
        lightcoral: ClassVar[QColor] = ...
        lightcyan: ClassVar[QColor] = ...
        lightgoldenrodyellow: ClassVar[QColor] = ...
        lightgray: ClassVar[QColor] = ...
        lightgreen: ClassVar[QColor] = ...
        lightgrey: ClassVar[QColor] = ...
        lightpink: ClassVar[QColor] = ...
        lightsalmon: ClassVar[QColor] = ...
        lightseagreen: ClassVar[QColor] = ...
        lightskyblue: ClassVar[QColor] = ...
        lightslategray: ClassVar[QColor] = ...
        lightslategrey: ClassVar[QColor] = ...
        lightsteelblue: ClassVar[QColor] = ...
        lightyellow: ClassVar[QColor] = ...
        lime: ClassVar[QColor] = ...
        limegreen: ClassVar[QColor] = ...
        linen: ClassVar[QColor] = ...
        magenta: ClassVar[QColor] = ...
        maroon: ClassVar[QColor] = ...
        mediumaquamarine: ClassVar[QColor] = ...
        mediumblue: ClassVar[QColor] = ...
        mediumorchid: ClassVar[QColor] = ...
        mediumpurple: ClassVar[QColor] = ...
        mediumseagreen: ClassVar[QColor] = ...
        mediumslateblue: ClassVar[QColor] = ...
        mediumspringgreen: ClassVar[QColor] = ...
        mediumturquoise: ClassVar[QColor] = ...
        mediumvioletred: ClassVar[QColor] = ...
        midnightblue: ClassVar[QColor] = ...
        mintcream: ClassVar[QColor] = ...
        mistyrose: ClassVar[QColor] = ...
        moccasin: ClassVar[QColor] = ...
        navajowhite: ClassVar[QColor] = ...
        navy: ClassVar[QColor] = ...
        oldlace: ClassVar[QColor] = ...
        olive: ClassVar[QColor] = ...
        olivedrab: ClassVar[QColor] = ...
        orange: ClassVar[QColor] = ...
        orangered: ClassVar[QColor] = ...
        orchid: ClassVar[QColor] = ...
        palegoldenrod: ClassVar[QColor] = ...
        palegreen: ClassVar[QColor] = ...
        paleturquoise: ClassVar[QColor] = ...
        palevioletred: ClassVar[QColor] = ...
        papayawhip: ClassVar[QColor] = ...
        peachpuff: ClassVar[QColor] = ...
        peru: ClassVar[QColor] = ...
        pink: ClassVar[QColor] = ...
        plum: ClassVar[QColor] = ...
        powderblue: ClassVar[QColor] = ...
        purple: ClassVar[QColor] = ...
        red: ClassVar[QColor] = ...
        rosybrown: ClassVar[QColor] = ...
        royalblue: ClassVar[QColor] = ...
        saddlebrown: ClassVar[QColor] = ...
        salmon: ClassVar[QColor] = ...
        sandybrown: ClassVar[QColor] = ...
        seagreen: ClassVar[QColor] = ...
        seashell: ClassVar[QColor] = ...
        sienna: ClassVar[QColor] = ...
        silver: ClassVar[QColor] = ...
        skyblue: ClassVar[QColor] = ...
        slateblue: ClassVar[QColor] = ...
        slategray: ClassVar[QColor] = ...
        slategrey: ClassVar[QColor] = ...
        snow: ClassVar[QColor] = ...
        springgreen: ClassVar[QColor] = ...
        steelblue: ClassVar[QColor] = ...
        tan: ClassVar[QColor] = ...
        teal: ClassVar[QColor] = ...
        thistle: ClassVar[QColor] = ...
        tomato: ClassVar[QColor] = ...
        turquoise: ClassVar[QColor] = ...
        violet: ClassVar[QColor] = ...
        wheat: ClassVar[QColor] = ...
        white: ClassVar[QColor] = ...
        whitesmoke: ClassVar[QColor] = ...
        yellow: ClassVar[QColor] = ...
        yellowgreen: ClassVar[QColor] = ...
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
    Black: ClassVar[QColor] = ...
    Blue: ClassVar[QColor] = ...
    Color0: ClassVar[QColor] = ...
    Color1: ClassVar[QColor] = ...
    Cyan: ClassVar[QColor] = ...
    DarkBlue: ClassVar[QColor] = ...
    DarkCyan: ClassVar[QColor] = ...
    DarkGray: ClassVar[QColor] = ...
    DarkGreen: ClassVar[QColor] = ...
    DarkMagenta: ClassVar[QColor] = ...
    DarkRed: ClassVar[QColor] = ...
    DarkYellow: ClassVar[QColor] = ...
    Gray: ClassVar[QColor] = ...
    Green: ClassVar[QColor] = ...
    LightGray: ClassVar[QColor] = ...
    Magenta: ClassVar[QColor] = ...
    Red: ClassVar[QColor] = ...
    Transparent: ClassVar[QColor] = ...
    White: ClassVar[QColor] = ...
    Yellow: ClassVar[QColor] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class QColorSpace(shiboken2.Object):
    class NamedColorSpace:
        AdobeRgb: ClassVar[QColorSpace.NamedColorSpace] = ...
        DisplayP3: ClassVar[QColorSpace.NamedColorSpace] = ...
        ProPhotoRgb: ClassVar[QColorSpace.NamedColorSpace] = ...
        SRgb: ClassVar[QColorSpace.NamedColorSpace] = ...
        SRgbLinear: ClassVar[QColorSpace.NamedColorSpace] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QColorSpace.NamedColorSpace: ...
        def __and__(self, other: typing.SupportsInt) -> QColorSpace.NamedColorSpace: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QColorSpace.NamedColorSpace: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QColorSpace.NamedColorSpace: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QColorSpace.NamedColorSpace: ...
        def __rand__(self, other: typing.SupportsInt) -> QColorSpace.NamedColorSpace: ...
        def __rmul__(self, other: typing.SupportsInt) -> QColorSpace.NamedColorSpace: ...
        def __ror__(self, other: typing.SupportsInt) -> QColorSpace.NamedColorSpace: ...
        def __rsub__(self, other: typing.SupportsInt) -> QColorSpace.NamedColorSpace: ...
        def __rxor__(self, other: typing.SupportsInt) -> QColorSpace.NamedColorSpace: ...
        def __sub__(self, other: typing.SupportsInt) -> QColorSpace.NamedColorSpace: ...
        def __xor__(self, other: typing.SupportsInt) -> QColorSpace.NamedColorSpace: ...

    class Primaries:
        AdobeRgb: ClassVar[QColorSpace.Primaries] = ...
        Custom: ClassVar[QColorSpace.Primaries] = ...
        DciP3D65: ClassVar[QColorSpace.Primaries] = ...
        ProPhotoRgb: ClassVar[QColorSpace.Primaries] = ...
        SRgb: ClassVar[QColorSpace.Primaries] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QColorSpace.Primaries: ...
        def __and__(self, other: typing.SupportsInt) -> QColorSpace.Primaries: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QColorSpace.Primaries: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QColorSpace.Primaries: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QColorSpace.Primaries: ...
        def __rand__(self, other: typing.SupportsInt) -> QColorSpace.Primaries: ...
        def __rmul__(self, other: typing.SupportsInt) -> QColorSpace.Primaries: ...
        def __ror__(self, other: typing.SupportsInt) -> QColorSpace.Primaries: ...
        def __rsub__(self, other: typing.SupportsInt) -> QColorSpace.Primaries: ...
        def __rxor__(self, other: typing.SupportsInt) -> QColorSpace.Primaries: ...
        def __sub__(self, other: typing.SupportsInt) -> QColorSpace.Primaries: ...
        def __xor__(self, other: typing.SupportsInt) -> QColorSpace.Primaries: ...

    class TransferFunction:
        Custom: ClassVar[QColorSpace.TransferFunction] = ...
        Gamma: ClassVar[QColorSpace.TransferFunction] = ...
        Linear: ClassVar[QColorSpace.TransferFunction] = ...
        ProPhotoRgb: ClassVar[QColorSpace.TransferFunction] = ...
        SRgb: ClassVar[QColorSpace.TransferFunction] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QColorSpace.TransferFunction: ...
        def __and__(self, other: typing.SupportsInt) -> QColorSpace.TransferFunction: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QColorSpace.TransferFunction: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QColorSpace.TransferFunction: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QColorSpace.TransferFunction: ...
        def __rand__(self, other: typing.SupportsInt) -> QColorSpace.TransferFunction: ...
        def __rmul__(self, other: typing.SupportsInt) -> QColorSpace.TransferFunction: ...
        def __ror__(self, other: typing.SupportsInt) -> QColorSpace.TransferFunction: ...
        def __rsub__(self, other: typing.SupportsInt) -> QColorSpace.TransferFunction: ...
        def __rxor__(self, other: typing.SupportsInt) -> QColorSpace.TransferFunction: ...
        def __sub__(self, other: typing.SupportsInt) -> QColorSpace.TransferFunction: ...
        def __xor__(self, other: typing.SupportsInt) -> QColorSpace.TransferFunction: ...
    AdobeRgb: ClassVar[QColorSpace.NamedColorSpace] = ...
    DisplayP3: ClassVar[QColorSpace.NamedColorSpace] = ...
    ProPhotoRgb: ClassVar[QColorSpace.NamedColorSpace] = ...
    SRgb: ClassVar[QColorSpace.NamedColorSpace] = ...
    SRgbLinear: ClassVar[QColorSpace.NamedColorSpace] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, colorSpace: QColorSpace) -> None: ...
    @overload
    def __init__(self, namedColorSpace: QColorSpace.NamedColorSpace) -> None: ...
    @overload
    def __init__(self, primaries: QColorSpace.Primaries, fun: QColorSpace.TransferFunction, gamma: float = ...) -> None: ...
    @overload
    def __init__(self, primaries: QColorSpace.Primaries, gamma: float) -> None: ...
    @overload
    def __init__(self, whitePoint: PySide2.QtCore.QPointF, redPoint: PySide2.QtCore.QPointF, greenPoint: PySide2.QtCore.QPointF, bluePoint: PySide2.QtCore.QPointF, fun: QColorSpace.TransferFunction, gamma: float = ...) -> None: ...
    @classmethod
    def fromIccProfile(cls, iccProfile: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> QColorSpace: ...
    def gamma(self) -> float: ...
    def iccProfile(self) -> PySide2.QtCore.QByteArray: ...
    def isValid(self) -> bool: ...
    def primaries(self) -> QColorSpace.Primaries: ...
    @overload
    def setPrimaries(self, primariesId: QColorSpace.Primaries) -> None: ...
    @overload
    def setPrimaries(self, whitePoint: PySide2.QtCore.QPointF, redPoint: PySide2.QtCore.QPointF, greenPoint: PySide2.QtCore.QPointF, bluePoint: PySide2.QtCore.QPointF) -> None: ...
    def setTransferFunction(self, transferFunction: QColorSpace.TransferFunction, gamma: float = ...) -> None: ...
    def swap(self, colorSpace: QColorSpace) -> None: ...
    def transferFunction(self) -> QColorSpace.TransferFunction: ...
    def withTransferFunction(self, transferFunction: QColorSpace.TransferFunction, gamma: float = ...) -> QColorSpace: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QConicalGradient(QGradient):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QConicalGradient: QConicalGradient) -> None: ...
    @overload
    def __init__(self, center: PySide2.QtCore.QPointF, startAngle: float) -> None: ...
    @overload
    def __init__(self, cx: float, cy: float, startAngle: float) -> None: ...
    def angle(self) -> float: ...
    def center(self) -> PySide2.QtCore.QPointF: ...
    def setAngle(self, angle: float) -> None: ...
    @overload
    def setCenter(self, center: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def setCenter(self, x: float, y: float) -> None: ...
    def __copy__(self) -> None: ...

class QContextMenuEvent(QInputEvent):
    class Reason:
        Keyboard: ClassVar[QContextMenuEvent.Reason] = ...
        Mouse: ClassVar[QContextMenuEvent.Reason] = ...
        Other: ClassVar[QContextMenuEvent.Reason] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QContextMenuEvent.Reason: ...
        def __and__(self, other: typing.SupportsInt) -> QContextMenuEvent.Reason: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QContextMenuEvent.Reason: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QContextMenuEvent.Reason: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QContextMenuEvent.Reason: ...
        def __rand__(self, other: typing.SupportsInt) -> QContextMenuEvent.Reason: ...
        def __rmul__(self, other: typing.SupportsInt) -> QContextMenuEvent.Reason: ...
        def __ror__(self, other: typing.SupportsInt) -> QContextMenuEvent.Reason: ...
        def __rsub__(self, other: typing.SupportsInt) -> QContextMenuEvent.Reason: ...
        def __rxor__(self, other: typing.SupportsInt) -> QContextMenuEvent.Reason: ...
        def __sub__(self, other: typing.SupportsInt) -> QContextMenuEvent.Reason: ...
        def __xor__(self, other: typing.SupportsInt) -> QContextMenuEvent.Reason: ...
    Keyboard: ClassVar[QContextMenuEvent.Reason] = ...
    Mouse: ClassVar[QContextMenuEvent.Reason] = ...
    Other: ClassVar[QContextMenuEvent.Reason] = ...
    @overload
    def __init__(self, reason: QContextMenuEvent.Reason, pos: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def __init__(self, reason: QContextMenuEvent.Reason, pos: PySide2.QtCore.QPoint, globalPos: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def __init__(self, reason: QContextMenuEvent.Reason, pos: PySide2.QtCore.QPoint, globalPos: PySide2.QtCore.QPoint, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> None: ...
    def globalPos(self) -> PySide2.QtCore.QPoint: ...
    def globalX(self) -> int: ...
    def globalY(self) -> int: ...
    def pos(self) -> PySide2.QtCore.QPoint: ...
    def reason(self) -> QContextMenuEvent.Reason: ...
    def x(self) -> int: ...
    def y(self) -> int: ...

class QCursor(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, bitmap: QBitmap, mask: QBitmap, hotX: int = ..., hotY: int = ...) -> None: ...
    @overload
    def __init__(self, cursor: QCursor) -> None: ...
    @overload
    def __init__(self, pixmap: QPixmap, hotX: int = ..., hotY: int = ...) -> None: ...
    @overload
    def __init__(self, shape: PySide2.QtCore.Qt.CursorShape) -> None: ...
    def bitmap(self) -> QBitmap: ...
    def hotSpot(self) -> PySide2.QtCore.QPoint: ...
    def mask(self) -> QBitmap: ...
    def pixmap(self) -> QPixmap: ...
    @classmethod
    @overload
    def pos(cls) -> PySide2.QtCore.QPoint: ...
    @classmethod
    @overload
    def pos(cls, screen: QScreen) -> PySide2.QtCore.QPoint: ...
    @classmethod
    @overload
    def setPos(cls, p: PySide2.QtCore.QPoint) -> None: ...
    @classmethod
    @overload
    def setPos(cls, screen: QScreen, p: PySide2.QtCore.QPoint) -> None: ...
    @classmethod
    @overload
    def setPos(cls, screen: QScreen, x: int, y: int) -> None: ...
    @classmethod
    @overload
    def setPos(cls, x: int, y: int) -> None: ...
    def setShape(self, newShape: PySide2.QtCore.Qt.CursorShape) -> None: ...
    def shape(self) -> PySide2.QtCore.Qt.CursorShape: ...
    def swap(self, other: QCursor) -> None: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, outS: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, inS: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QDesktopServices(shiboken2.Object):
    def __init__(self) -> None: ...
    @classmethod
    def openUrl(cls, url: PySide2.QtCore.QUrl) -> bool: ...
    @classmethod
    def setUrlHandler(cls, scheme: str, receiver: PySide2.QtCore.QObject, method: bytes) -> None: ...
    @classmethod
    def unsetUrlHandler(cls, scheme: str) -> None: ...

class QDoubleValidator(QValidator):
    class Notation:
        ScientificNotation: ClassVar[QDoubleValidator.Notation] = ...
        StandardNotation: ClassVar[QDoubleValidator.Notation] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QDoubleValidator.Notation: ...
        def __and__(self, other: typing.SupportsInt) -> QDoubleValidator.Notation: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QDoubleValidator.Notation: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QDoubleValidator.Notation: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QDoubleValidator.Notation: ...
        def __rand__(self, other: typing.SupportsInt) -> QDoubleValidator.Notation: ...
        def __rmul__(self, other: typing.SupportsInt) -> QDoubleValidator.Notation: ...
        def __ror__(self, other: typing.SupportsInt) -> QDoubleValidator.Notation: ...
        def __rsub__(self, other: typing.SupportsInt) -> QDoubleValidator.Notation: ...
        def __rxor__(self, other: typing.SupportsInt) -> QDoubleValidator.Notation: ...
        def __sub__(self, other: typing.SupportsInt) -> QDoubleValidator.Notation: ...
        def __xor__(self, other: typing.SupportsInt) -> QDoubleValidator.Notation: ...
    ScientificNotation: ClassVar[QDoubleValidator.Notation] = ...
    StandardNotation: ClassVar[QDoubleValidator.Notation] = ...
    bottomChanged: ClassVar[PySide2.QtCore.Signal] = ...
    decimalsChanged: ClassVar[PySide2.QtCore.Signal] = ...
    notationChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    topChanged: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, bottom: float, top: float, decimals: int, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., bottomChanged: typing.Callable = ..., changed: typing.Callable = ..., decimalsChanged: typing.Callable = ..., destroyed: typing.Callable = ..., notation: QDoubleValidator.Notation = ..., notationChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., topChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., bottom: float = ..., bottomChanged: typing.Callable = ..., changed: typing.Callable = ..., decimals: int = ..., decimalsChanged: typing.Callable = ..., destroyed: typing.Callable = ..., notation: QDoubleValidator.Notation = ..., notationChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., top: float = ..., topChanged: typing.Callable = ...) -> None: ...
    def bottom(self) -> float: ...
    def decimals(self) -> int: ...
    def notation(self) -> QDoubleValidator.Notation: ...
    def setBottom(self, arg__1: float) -> None: ...
    def setDecimals(self, arg__1: int) -> None: ...
    def setNotation(self, arg__1: QDoubleValidator.Notation) -> None: ...
    def setRange(self, bottom: float, top: float, decimals: int = ...) -> None: ...
    def setTop(self, arg__1: float) -> None: ...
    def top(self) -> float: ...
    def validate(self, arg__1: str, arg__2: int) -> QValidator.State: ...

class QDrag(PySide2.QtCore.QObject):
    actionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    targetChanged: ClassVar[PySide2.QtCore.Signal] = ...
    def __init__(self, dragSource: PySide2.QtCore.QObject, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @classmethod
    def cancel(cls) -> None: ...
    def defaultAction(self) -> PySide2.QtCore.Qt.DropAction: ...
    def dragCursor(self, action: PySide2.QtCore.Qt.DropAction) -> QPixmap: ...
    @overload
    def exec_(self, supportedActions: typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction], defaultAction: PySide2.QtCore.Qt.DropAction) -> PySide2.QtCore.Qt.DropAction: ...
    @overload
    def exec_(self, supportedActions: typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction] = ...) -> PySide2.QtCore.Qt.DropAction: ...
    def hotSpot(self) -> PySide2.QtCore.QPoint: ...
    def mimeData(self) -> PySide2.QtCore.QMimeData: ...
    def pixmap(self) -> QPixmap: ...
    def setDragCursor(self, cursor: QPixmap, action: PySide2.QtCore.Qt.DropAction) -> None: ...
    def setHotSpot(self, hotspot: PySide2.QtCore.QPoint) -> None: ...
    def setMimeData(self, data: PySide2.QtCore.QMimeData) -> None: ...
    def setPixmap(self, arg__1: QPixmap) -> None: ...
    def source(self) -> PySide2.QtCore.QObject: ...
    def start(self, supportedActions: typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction] = ...) -> PySide2.QtCore.Qt.DropAction: ...
    def supportedActions(self) -> typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction]: ...
    def target(self) -> PySide2.QtCore.QObject: ...

class QDragEnterEvent(QDragMoveEvent):
    def __init__(self, pos: PySide2.QtCore.QPoint, actions: typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction], data: PySide2.QtCore.QMimeData, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton], modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> None: ...

class QDragLeaveEvent(PySide2.QtCore.QEvent):
    def __init__(self) -> None: ...

class QDragMoveEvent(QDropEvent):
    def __init__(self, pos: PySide2.QtCore.QPoint, actions: typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction], data: PySide2.QtCore.QMimeData, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton], modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier], type: PySide2.QtCore.QEvent.Type = ...) -> None: ...
    @overload
    def accept(self) -> None: ...
    @overload
    def accept(self, r: PySide2.QtCore.QRect) -> None: ...
    def answerRect(self) -> PySide2.QtCore.QRect: ...
    @overload
    def ignore(self) -> None: ...
    @overload
    def ignore(self, r: PySide2.QtCore.QRect) -> None: ...

class QDropEvent(PySide2.QtCore.QEvent):
    def __init__(self, pos: PySide2.QtCore.QPointF, actions: typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction], data: PySide2.QtCore.QMimeData, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton], modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier], type: PySide2.QtCore.QEvent.Type = ...) -> None: ...
    def acceptProposedAction(self) -> None: ...
    def dropAction(self) -> PySide2.QtCore.Qt.DropAction: ...
    def keyboardModifiers(self) -> typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]: ...
    def mimeData(self) -> PySide2.QtCore.QMimeData: ...
    def mouseButtons(self) -> typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]: ...
    def pos(self) -> PySide2.QtCore.QPoint: ...
    def posF(self) -> PySide2.QtCore.QPointF: ...
    def possibleActions(self) -> typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction]: ...
    def proposedAction(self) -> PySide2.QtCore.Qt.DropAction: ...
    def setDropAction(self, action: PySide2.QtCore.Qt.DropAction) -> None: ...
    def source(self) -> PySide2.QtCore.QObject: ...

class QEnterEvent(PySide2.QtCore.QEvent):
    def __init__(self, localPos: PySide2.QtCore.QPointF, windowPos: PySide2.QtCore.QPointF, screenPos: PySide2.QtCore.QPointF) -> None: ...
    def globalPos(self) -> PySide2.QtCore.QPoint: ...
    def globalX(self) -> int: ...
    def globalY(self) -> int: ...
    def localPos(self) -> PySide2.QtCore.QPointF: ...
    def pos(self) -> PySide2.QtCore.QPoint: ...
    def screenPos(self) -> PySide2.QtCore.QPointF: ...
    def windowPos(self) -> PySide2.QtCore.QPointF: ...
    def x(self) -> int: ...
    def y(self) -> int: ...

class QExposeEvent(PySide2.QtCore.QEvent):
    rgn: Any
    def __init__(self, rgn: QRegion) -> None: ...
    def region(self) -> QRegion: ...

class QFileOpenEvent(PySide2.QtCore.QEvent):
    @overload
    def __init__(self, file: str) -> None: ...
    @overload
    def __init__(self, url: PySide2.QtCore.QUrl) -> None: ...
    def file(self) -> str: ...
    def openFile(self, file: PySide2.QtCore.QFile, flags: typing.Union[PySide2.QtCore.QIODevice.OpenMode,PySide2.QtCore.QIODevice.OpenModeFlag]) -> bool: ...
    def url(self) -> PySide2.QtCore.QUrl: ...

class QFocusEvent(PySide2.QtCore.QEvent):
    def __init__(self, type: PySide2.QtCore.QEvent.Type, reason: PySide2.QtCore.Qt.FocusReason = ...) -> None: ...
    def gotFocus(self) -> bool: ...
    def lostFocus(self) -> bool: ...
    def reason(self) -> PySide2.QtCore.Qt.FocusReason: ...

class QFont(shiboken2.Object):
    class Capitalization:
        AllLowercase: ClassVar[QFont.Capitalization] = ...
        AllUppercase: ClassVar[QFont.Capitalization] = ...
        Capitalize: ClassVar[QFont.Capitalization] = ...
        MixedCase: ClassVar[QFont.Capitalization] = ...
        SmallCaps: ClassVar[QFont.Capitalization] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFont.Capitalization: ...
        def __and__(self, other: typing.SupportsInt) -> QFont.Capitalization: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFont.Capitalization: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFont.Capitalization: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFont.Capitalization: ...
        def __rand__(self, other: typing.SupportsInt) -> QFont.Capitalization: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFont.Capitalization: ...
        def __ror__(self, other: typing.SupportsInt) -> QFont.Capitalization: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFont.Capitalization: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFont.Capitalization: ...
        def __sub__(self, other: typing.SupportsInt) -> QFont.Capitalization: ...
        def __xor__(self, other: typing.SupportsInt) -> QFont.Capitalization: ...

    class HintingPreference:
        PreferDefaultHinting: ClassVar[QFont.HintingPreference] = ...
        PreferFullHinting: ClassVar[QFont.HintingPreference] = ...
        PreferNoHinting: ClassVar[QFont.HintingPreference] = ...
        PreferVerticalHinting: ClassVar[QFont.HintingPreference] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFont.HintingPreference: ...
        def __and__(self, other: typing.SupportsInt) -> QFont.HintingPreference: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFont.HintingPreference: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFont.HintingPreference: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFont.HintingPreference: ...
        def __rand__(self, other: typing.SupportsInt) -> QFont.HintingPreference: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFont.HintingPreference: ...
        def __ror__(self, other: typing.SupportsInt) -> QFont.HintingPreference: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFont.HintingPreference: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFont.HintingPreference: ...
        def __sub__(self, other: typing.SupportsInt) -> QFont.HintingPreference: ...
        def __xor__(self, other: typing.SupportsInt) -> QFont.HintingPreference: ...

    class SpacingType:
        AbsoluteSpacing: ClassVar[QFont.SpacingType] = ...
        PercentageSpacing: ClassVar[QFont.SpacingType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFont.SpacingType: ...
        def __and__(self, other: typing.SupportsInt) -> QFont.SpacingType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFont.SpacingType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFont.SpacingType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFont.SpacingType: ...
        def __rand__(self, other: typing.SupportsInt) -> QFont.SpacingType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFont.SpacingType: ...
        def __ror__(self, other: typing.SupportsInt) -> QFont.SpacingType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFont.SpacingType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFont.SpacingType: ...
        def __sub__(self, other: typing.SupportsInt) -> QFont.SpacingType: ...
        def __xor__(self, other: typing.SupportsInt) -> QFont.SpacingType: ...

    class Stretch:
        AnyStretch: ClassVar[QFont.Stretch] = ...
        Condensed: ClassVar[QFont.Stretch] = ...
        Expanded: ClassVar[QFont.Stretch] = ...
        ExtraCondensed: ClassVar[QFont.Stretch] = ...
        ExtraExpanded: ClassVar[QFont.Stretch] = ...
        SemiCondensed: ClassVar[QFont.Stretch] = ...
        SemiExpanded: ClassVar[QFont.Stretch] = ...
        UltraCondensed: ClassVar[QFont.Stretch] = ...
        UltraExpanded: ClassVar[QFont.Stretch] = ...
        Unstretched: ClassVar[QFont.Stretch] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFont.Stretch: ...
        def __and__(self, other: typing.SupportsInt) -> QFont.Stretch: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFont.Stretch: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFont.Stretch: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFont.Stretch: ...
        def __rand__(self, other: typing.SupportsInt) -> QFont.Stretch: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFont.Stretch: ...
        def __ror__(self, other: typing.SupportsInt) -> QFont.Stretch: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFont.Stretch: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFont.Stretch: ...
        def __sub__(self, other: typing.SupportsInt) -> QFont.Stretch: ...
        def __xor__(self, other: typing.SupportsInt) -> QFont.Stretch: ...

    class Style:
        StyleItalic: ClassVar[QFont.Style] = ...
        StyleNormal: ClassVar[QFont.Style] = ...
        StyleOblique: ClassVar[QFont.Style] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFont.Style: ...
        def __and__(self, other: typing.SupportsInt) -> QFont.Style: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFont.Style: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFont.Style: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFont.Style: ...
        def __rand__(self, other: typing.SupportsInt) -> QFont.Style: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFont.Style: ...
        def __ror__(self, other: typing.SupportsInt) -> QFont.Style: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFont.Style: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFont.Style: ...
        def __sub__(self, other: typing.SupportsInt) -> QFont.Style: ...
        def __xor__(self, other: typing.SupportsInt) -> QFont.Style: ...

    class StyleHint:
        AnyStyle: ClassVar[QFont.StyleHint] = ...
        Courier: ClassVar[QFont.StyleHint] = ...
        Cursive: ClassVar[QFont.StyleHint] = ...
        Decorative: ClassVar[QFont.StyleHint] = ...
        Fantasy: ClassVar[QFont.StyleHint] = ...
        Helvetica: ClassVar[QFont.StyleHint] = ...
        Monospace: ClassVar[QFont.StyleHint] = ...
        OldEnglish: ClassVar[QFont.StyleHint] = ...
        SansSerif: ClassVar[QFont.StyleHint] = ...
        Serif: ClassVar[QFont.StyleHint] = ...
        System: ClassVar[QFont.StyleHint] = ...
        Times: ClassVar[QFont.StyleHint] = ...
        TypeWriter: ClassVar[QFont.StyleHint] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFont.StyleHint: ...
        def __and__(self, other: typing.SupportsInt) -> QFont.StyleHint: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFont.StyleHint: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFont.StyleHint: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFont.StyleHint: ...
        def __rand__(self, other: typing.SupportsInt) -> QFont.StyleHint: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFont.StyleHint: ...
        def __ror__(self, other: typing.SupportsInt) -> QFont.StyleHint: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFont.StyleHint: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFont.StyleHint: ...
        def __sub__(self, other: typing.SupportsInt) -> QFont.StyleHint: ...
        def __xor__(self, other: typing.SupportsInt) -> QFont.StyleHint: ...

    class StyleStrategy:
        ForceIntegerMetrics: ClassVar[QFont.StyleStrategy] = ...
        ForceOutline: ClassVar[QFont.StyleStrategy] = ...
        NoAntialias: ClassVar[QFont.StyleStrategy] = ...
        NoFontMerging: ClassVar[QFont.StyleStrategy] = ...
        NoSubpixelAntialias: ClassVar[QFont.StyleStrategy] = ...
        OpenGLCompatible: ClassVar[QFont.StyleStrategy] = ...
        PreferAntialias: ClassVar[QFont.StyleStrategy] = ...
        PreferBitmap: ClassVar[QFont.StyleStrategy] = ...
        PreferDefault: ClassVar[QFont.StyleStrategy] = ...
        PreferDevice: ClassVar[QFont.StyleStrategy] = ...
        PreferMatch: ClassVar[QFont.StyleStrategy] = ...
        PreferNoShaping: ClassVar[QFont.StyleStrategy] = ...
        PreferOutline: ClassVar[QFont.StyleStrategy] = ...
        PreferQuality: ClassVar[QFont.StyleStrategy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFont.StyleStrategy: ...
        def __and__(self, other: typing.SupportsInt) -> QFont.StyleStrategy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFont.StyleStrategy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFont.StyleStrategy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFont.StyleStrategy: ...
        def __rand__(self, other: typing.SupportsInt) -> QFont.StyleStrategy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFont.StyleStrategy: ...
        def __ror__(self, other: typing.SupportsInt) -> QFont.StyleStrategy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFont.StyleStrategy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFont.StyleStrategy: ...
        def __sub__(self, other: typing.SupportsInt) -> QFont.StyleStrategy: ...
        def __xor__(self, other: typing.SupportsInt) -> QFont.StyleStrategy: ...

    class Weight:
        Black: ClassVar[QFont.Weight] = ...
        Bold: ClassVar[QFont.Weight] = ...
        DemiBold: ClassVar[QFont.Weight] = ...
        ExtraBold: ClassVar[QFont.Weight] = ...
        ExtraLight: ClassVar[QFont.Weight] = ...
        Light: ClassVar[QFont.Weight] = ...
        Medium: ClassVar[QFont.Weight] = ...
        Normal: ClassVar[QFont.Weight] = ...
        Thin: ClassVar[QFont.Weight] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFont.Weight: ...
        def __and__(self, other: typing.SupportsInt) -> QFont.Weight: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFont.Weight: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFont.Weight: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFont.Weight: ...
        def __rand__(self, other: typing.SupportsInt) -> QFont.Weight: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFont.Weight: ...
        def __ror__(self, other: typing.SupportsInt) -> QFont.Weight: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFont.Weight: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFont.Weight: ...
        def __sub__(self, other: typing.SupportsInt) -> QFont.Weight: ...
        def __xor__(self, other: typing.SupportsInt) -> QFont.Weight: ...
    AbsoluteSpacing: ClassVar[QFont.SpacingType] = ...
    AllLowercase: ClassVar[QFont.Capitalization] = ...
    AllUppercase: ClassVar[QFont.Capitalization] = ...
    AnyStretch: ClassVar[QFont.Stretch] = ...
    AnyStyle: ClassVar[QFont.StyleHint] = ...
    Black: ClassVar[QFont.Weight] = ...
    Bold: ClassVar[QFont.Weight] = ...
    Capitalize: ClassVar[QFont.Capitalization] = ...
    Condensed: ClassVar[QFont.Stretch] = ...
    Courier: ClassVar[QFont.StyleHint] = ...
    Cursive: ClassVar[QFont.StyleHint] = ...
    Decorative: ClassVar[QFont.StyleHint] = ...
    DemiBold: ClassVar[QFont.Weight] = ...
    Expanded: ClassVar[QFont.Stretch] = ...
    ExtraBold: ClassVar[QFont.Weight] = ...
    ExtraCondensed: ClassVar[QFont.Stretch] = ...
    ExtraExpanded: ClassVar[QFont.Stretch] = ...
    ExtraLight: ClassVar[QFont.Weight] = ...
    Fantasy: ClassVar[QFont.StyleHint] = ...
    ForceIntegerMetrics: ClassVar[QFont.StyleStrategy] = ...
    ForceOutline: ClassVar[QFont.StyleStrategy] = ...
    Helvetica: ClassVar[QFont.StyleHint] = ...
    Light: ClassVar[QFont.Weight] = ...
    Medium: ClassVar[QFont.Weight] = ...
    MixedCase: ClassVar[QFont.Capitalization] = ...
    Monospace: ClassVar[QFont.StyleHint] = ...
    NoAntialias: ClassVar[QFont.StyleStrategy] = ...
    NoFontMerging: ClassVar[QFont.StyleStrategy] = ...
    NoSubpixelAntialias: ClassVar[QFont.StyleStrategy] = ...
    Normal: ClassVar[QFont.Weight] = ...
    OldEnglish: ClassVar[QFont.StyleHint] = ...
    OpenGLCompatible: ClassVar[QFont.StyleStrategy] = ...
    PercentageSpacing: ClassVar[QFont.SpacingType] = ...
    PreferAntialias: ClassVar[QFont.StyleStrategy] = ...
    PreferBitmap: ClassVar[QFont.StyleStrategy] = ...
    PreferDefault: ClassVar[QFont.StyleStrategy] = ...
    PreferDefaultHinting: ClassVar[QFont.HintingPreference] = ...
    PreferDevice: ClassVar[QFont.StyleStrategy] = ...
    PreferFullHinting: ClassVar[QFont.HintingPreference] = ...
    PreferMatch: ClassVar[QFont.StyleStrategy] = ...
    PreferNoHinting: ClassVar[QFont.HintingPreference] = ...
    PreferNoShaping: ClassVar[QFont.StyleStrategy] = ...
    PreferOutline: ClassVar[QFont.StyleStrategy] = ...
    PreferQuality: ClassVar[QFont.StyleStrategy] = ...
    PreferVerticalHinting: ClassVar[QFont.HintingPreference] = ...
    SansSerif: ClassVar[QFont.StyleHint] = ...
    SemiCondensed: ClassVar[QFont.Stretch] = ...
    SemiExpanded: ClassVar[QFont.Stretch] = ...
    Serif: ClassVar[QFont.StyleHint] = ...
    SmallCaps: ClassVar[QFont.Capitalization] = ...
    StyleItalic: ClassVar[QFont.Style] = ...
    StyleNormal: ClassVar[QFont.Style] = ...
    StyleOblique: ClassVar[QFont.Style] = ...
    System: ClassVar[QFont.StyleHint] = ...
    Thin: ClassVar[QFont.Weight] = ...
    Times: ClassVar[QFont.StyleHint] = ...
    TypeWriter: ClassVar[QFont.StyleHint] = ...
    UltraCondensed: ClassVar[QFont.Stretch] = ...
    UltraExpanded: ClassVar[QFont.Stretch] = ...
    Unstretched: ClassVar[QFont.Stretch] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, family: str, pointSize: int = ..., weight: typing.SupportsInt = ..., italic: bool = ...) -> None: ...
    @overload
    def __init__(self, font: QFont) -> None: ...
    @overload
    def __init__(self, font: QFont, pd: QPaintDevice) -> None: ...
    def bold(self) -> bool: ...
    @classmethod
    def cacheStatistics(cls) -> None: ...
    def capitalization(self) -> QFont.Capitalization: ...
    @classmethod
    def cleanup(cls) -> None: ...
    def defaultFamily(self) -> str: ...
    def exactMatch(self) -> bool: ...
    def families(self) -> typing.List[str]: ...
    def family(self) -> str: ...
    def fixedPitch(self) -> bool: ...
    def fromString(self, arg__1: str) -> bool: ...
    def hintingPreference(self) -> QFont.HintingPreference: ...
    @classmethod
    def initialize(cls) -> None: ...
    @classmethod
    def insertSubstitution(cls, arg__1: str, arg__2: str) -> None: ...
    @classmethod
    def insertSubstitutions(cls, arg__1: str, arg__2: typing.Sequence[str]) -> None: ...
    def isCopyOf(self, arg__1: QFont) -> bool: ...
    def italic(self) -> bool: ...
    def kerning(self) -> bool: ...
    def key(self) -> str: ...
    def lastResortFamily(self) -> str: ...
    def lastResortFont(self) -> str: ...
    def letterSpacing(self) -> float: ...
    def letterSpacingType(self) -> QFont.SpacingType: ...
    def overline(self) -> bool: ...
    def pixelSize(self) -> int: ...
    def pointSize(self) -> int: ...
    def pointSizeF(self) -> float: ...
    def rawMode(self) -> bool: ...
    def rawName(self) -> str: ...
    @classmethod
    def removeSubstitutions(cls, arg__1: str) -> None: ...
    @overload
    def resolve(self) -> int: ...
    @overload
    def resolve(self, arg__1: QFont) -> QFont: ...
    @overload
    def resolve(self, mask: int) -> None: ...
    def setBold(self, arg__1: bool) -> None: ...
    def setCapitalization(self, arg__1: QFont.Capitalization) -> None: ...
    def setFamilies(self, arg__1: typing.Sequence[str]) -> None: ...
    def setFamily(self, arg__1: str) -> None: ...
    def setFixedPitch(self, arg__1: bool) -> None: ...
    def setHintingPreference(self, hintingPreference: QFont.HintingPreference) -> None: ...
    def setItalic(self, b: bool) -> None: ...
    def setKerning(self, arg__1: bool) -> None: ...
    def setLetterSpacing(self, type: QFont.SpacingType, spacing: float) -> None: ...
    def setOverline(self, arg__1: bool) -> None: ...
    def setPixelSize(self, arg__1: int) -> None: ...
    def setPointSize(self, arg__1: int) -> None: ...
    def setPointSizeF(self, arg__1: float) -> None: ...
    def setRawMode(self, arg__1: bool) -> None: ...
    def setRawName(self, arg__1: str) -> None: ...
    def setStretch(self, arg__1: int) -> None: ...
    def setStrikeOut(self, arg__1: bool) -> None: ...
    def setStyle(self, style: QFont.Style) -> None: ...
    def setStyleHint(self, arg__1: QFont.StyleHint, strategy: QFont.StyleStrategy = ...) -> None: ...
    def setStyleName(self, arg__1: str) -> None: ...
    def setStyleStrategy(self, s: QFont.StyleStrategy) -> None: ...
    def setUnderline(self, arg__1: bool) -> None: ...
    def setWeight(self, arg__1: typing.Union[int,QFont.Weight]) -> None: ...
    def setWordSpacing(self, spacing: float) -> None: ...
    def stretch(self) -> int: ...
    def strikeOut(self) -> bool: ...
    def style(self) -> QFont.Style: ...
    def styleHint(self) -> QFont.StyleHint: ...
    def styleName(self) -> str: ...
    def styleStrategy(self) -> QFont.StyleStrategy: ...
    @classmethod
    def substitute(cls, arg__1: str) -> str: ...
    @classmethod
    def substitutes(cls, arg__1: str) -> typing.List[str]: ...
    @classmethod
    def substitutions(cls) -> typing.List[str]: ...
    def swap(self, other: QFont) -> None: ...
    def toString(self) -> str: ...
    def underline(self) -> bool: ...
    def weight(self) -> int: ...
    def wordSpacing(self) -> float: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QFontDatabase(shiboken2.Object):
    class SystemFont:
        FixedFont: ClassVar[QFontDatabase.SystemFont] = ...
        GeneralFont: ClassVar[QFontDatabase.SystemFont] = ...
        SmallestReadableFont: ClassVar[QFontDatabase.SystemFont] = ...
        TitleFont: ClassVar[QFontDatabase.SystemFont] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFontDatabase.SystemFont: ...
        def __and__(self, other: typing.SupportsInt) -> QFontDatabase.SystemFont: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFontDatabase.SystemFont: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFontDatabase.SystemFont: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFontDatabase.SystemFont: ...
        def __rand__(self, other: typing.SupportsInt) -> QFontDatabase.SystemFont: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFontDatabase.SystemFont: ...
        def __ror__(self, other: typing.SupportsInt) -> QFontDatabase.SystemFont: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFontDatabase.SystemFont: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFontDatabase.SystemFont: ...
        def __sub__(self, other: typing.SupportsInt) -> QFontDatabase.SystemFont: ...
        def __xor__(self, other: typing.SupportsInt) -> QFontDatabase.SystemFont: ...

    class WritingSystem:
        Any: ClassVar[QFontDatabase.WritingSystem] = ...
        Arabic: ClassVar[QFontDatabase.WritingSystem] = ...
        Armenian: ClassVar[QFontDatabase.WritingSystem] = ...
        Bengali: ClassVar[QFontDatabase.WritingSystem] = ...
        Cyrillic: ClassVar[QFontDatabase.WritingSystem] = ...
        Devanagari: ClassVar[QFontDatabase.WritingSystem] = ...
        Georgian: ClassVar[QFontDatabase.WritingSystem] = ...
        Greek: ClassVar[QFontDatabase.WritingSystem] = ...
        Gujarati: ClassVar[QFontDatabase.WritingSystem] = ...
        Gurmukhi: ClassVar[QFontDatabase.WritingSystem] = ...
        Hebrew: ClassVar[QFontDatabase.WritingSystem] = ...
        Japanese: ClassVar[QFontDatabase.WritingSystem] = ...
        Kannada: ClassVar[QFontDatabase.WritingSystem] = ...
        Khmer: ClassVar[QFontDatabase.WritingSystem] = ...
        Korean: ClassVar[QFontDatabase.WritingSystem] = ...
        Lao: ClassVar[QFontDatabase.WritingSystem] = ...
        Latin: ClassVar[QFontDatabase.WritingSystem] = ...
        Malayalam: ClassVar[QFontDatabase.WritingSystem] = ...
        Myanmar: ClassVar[QFontDatabase.WritingSystem] = ...
        Nko: ClassVar[QFontDatabase.WritingSystem] = ...
        Ogham: ClassVar[QFontDatabase.WritingSystem] = ...
        Oriya: ClassVar[QFontDatabase.WritingSystem] = ...
        Other: ClassVar[QFontDatabase.WritingSystem] = ...
        Runic: ClassVar[QFontDatabase.WritingSystem] = ...
        SimplifiedChinese: ClassVar[QFontDatabase.WritingSystem] = ...
        Sinhala: ClassVar[QFontDatabase.WritingSystem] = ...
        Symbol: ClassVar[QFontDatabase.WritingSystem] = ...
        Syriac: ClassVar[QFontDatabase.WritingSystem] = ...
        Tamil: ClassVar[QFontDatabase.WritingSystem] = ...
        Telugu: ClassVar[QFontDatabase.WritingSystem] = ...
        Thaana: ClassVar[QFontDatabase.WritingSystem] = ...
        Thai: ClassVar[QFontDatabase.WritingSystem] = ...
        Tibetan: ClassVar[QFontDatabase.WritingSystem] = ...
        TraditionalChinese: ClassVar[QFontDatabase.WritingSystem] = ...
        Vietnamese: ClassVar[QFontDatabase.WritingSystem] = ...
        WritingSystemsCount: ClassVar[QFontDatabase.WritingSystem] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QFontDatabase.WritingSystem: ...
        def __and__(self, other: typing.SupportsInt) -> QFontDatabase.WritingSystem: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QFontDatabase.WritingSystem: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QFontDatabase.WritingSystem: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QFontDatabase.WritingSystem: ...
        def __rand__(self, other: typing.SupportsInt) -> QFontDatabase.WritingSystem: ...
        def __rmul__(self, other: typing.SupportsInt) -> QFontDatabase.WritingSystem: ...
        def __ror__(self, other: typing.SupportsInt) -> QFontDatabase.WritingSystem: ...
        def __rsub__(self, other: typing.SupportsInt) -> QFontDatabase.WritingSystem: ...
        def __rxor__(self, other: typing.SupportsInt) -> QFontDatabase.WritingSystem: ...
        def __sub__(self, other: typing.SupportsInt) -> QFontDatabase.WritingSystem: ...
        def __xor__(self, other: typing.SupportsInt) -> QFontDatabase.WritingSystem: ...
    Any: ClassVar[QFontDatabase.WritingSystem] = ...
    Arabic: ClassVar[QFontDatabase.WritingSystem] = ...
    Armenian: ClassVar[QFontDatabase.WritingSystem] = ...
    Bengali: ClassVar[QFontDatabase.WritingSystem] = ...
    Cyrillic: ClassVar[QFontDatabase.WritingSystem] = ...
    Devanagari: ClassVar[QFontDatabase.WritingSystem] = ...
    FixedFont: ClassVar[QFontDatabase.SystemFont] = ...
    GeneralFont: ClassVar[QFontDatabase.SystemFont] = ...
    Georgian: ClassVar[QFontDatabase.WritingSystem] = ...
    Greek: ClassVar[QFontDatabase.WritingSystem] = ...
    Gujarati: ClassVar[QFontDatabase.WritingSystem] = ...
    Gurmukhi: ClassVar[QFontDatabase.WritingSystem] = ...
    Hebrew: ClassVar[QFontDatabase.WritingSystem] = ...
    Japanese: ClassVar[QFontDatabase.WritingSystem] = ...
    Kannada: ClassVar[QFontDatabase.WritingSystem] = ...
    Khmer: ClassVar[QFontDatabase.WritingSystem] = ...
    Korean: ClassVar[QFontDatabase.WritingSystem] = ...
    Lao: ClassVar[QFontDatabase.WritingSystem] = ...
    Latin: ClassVar[QFontDatabase.WritingSystem] = ...
    Malayalam: ClassVar[QFontDatabase.WritingSystem] = ...
    Myanmar: ClassVar[QFontDatabase.WritingSystem] = ...
    Nko: ClassVar[QFontDatabase.WritingSystem] = ...
    Ogham: ClassVar[QFontDatabase.WritingSystem] = ...
    Oriya: ClassVar[QFontDatabase.WritingSystem] = ...
    Other: ClassVar[QFontDatabase.WritingSystem] = ...
    Runic: ClassVar[QFontDatabase.WritingSystem] = ...
    SimplifiedChinese: ClassVar[QFontDatabase.WritingSystem] = ...
    Sinhala: ClassVar[QFontDatabase.WritingSystem] = ...
    SmallestReadableFont: ClassVar[QFontDatabase.SystemFont] = ...
    Symbol: ClassVar[QFontDatabase.WritingSystem] = ...
    Syriac: ClassVar[QFontDatabase.WritingSystem] = ...
    Tamil: ClassVar[QFontDatabase.WritingSystem] = ...
    Telugu: ClassVar[QFontDatabase.WritingSystem] = ...
    Thaana: ClassVar[QFontDatabase.WritingSystem] = ...
    Thai: ClassVar[QFontDatabase.WritingSystem] = ...
    Tibetan: ClassVar[QFontDatabase.WritingSystem] = ...
    TitleFont: ClassVar[QFontDatabase.SystemFont] = ...
    TraditionalChinese: ClassVar[QFontDatabase.WritingSystem] = ...
    Vietnamese: ClassVar[QFontDatabase.WritingSystem] = ...
    WritingSystemsCount: ClassVar[QFontDatabase.WritingSystem] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QFontDatabase: QFontDatabase) -> None: ...
    @classmethod
    def addApplicationFont(cls, fileName: str) -> int: ...
    @classmethod
    def addApplicationFontFromData(cls, fontData: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> int: ...
    @classmethod
    def applicationFontFamilies(cls, id: int) -> typing.List[str]: ...
    def bold(self, family: str, style: str) -> bool: ...
    def families(self, writingSystem: QFontDatabase.WritingSystem = ...) -> typing.List[str]: ...
    def font(self, family: str, style: str, pointSize: int) -> QFont: ...
    def hasFamily(self, family: str) -> bool: ...
    def isBitmapScalable(self, family: str, style: str = ...) -> bool: ...
    def isFixedPitch(self, family: str, style: str = ...) -> bool: ...
    def isPrivateFamily(self, family: str) -> bool: ...
    def isScalable(self, family: str, style: str = ...) -> bool: ...
    def isSmoothlyScalable(self, family: str, style: str = ...) -> bool: ...
    def italic(self, family: str, style: str) -> bool: ...
    def pointSizes(self, family: str, style: str = ...) -> typing.List[int]: ...
    @classmethod
    def removeAllApplicationFonts(cls) -> bool: ...
    @classmethod
    def removeApplicationFont(cls, id: int) -> bool: ...
    def smoothSizes(self, family: str, style: str) -> typing.List[int]: ...
    @classmethod
    def standardSizes(cls) -> typing.List[int]: ...
    @overload
    def styleString(self, font: QFont) -> str: ...
    @overload
    def styleString(self, fontInfo: QFontInfo) -> str: ...
    def styles(self, family: str) -> typing.List[str]: ...
    @classmethod
    def supportsThreadedFontRendering(cls) -> bool: ...
    @classmethod
    def systemFont(cls, type: QFontDatabase.SystemFont) -> QFont: ...
    def weight(self, family: str, style: str) -> int: ...
    @classmethod
    def writingSystemName(cls, writingSystem: QFontDatabase.WritingSystem) -> str: ...
    @classmethod
    def writingSystemSample(cls, writingSystem: QFontDatabase.WritingSystem) -> str: ...
    @overload
    def writingSystems(self) -> typing.List[QFontDatabase.WritingSystem]: ...
    @overload
    def writingSystems(self, family: str) -> typing.List[QFontDatabase.WritingSystem]: ...
    def __copy__(self) -> None: ...

class QFontInfo(shiboken2.Object):
    @overload
    def __init__(self, arg__1: QFont) -> None: ...
    @overload
    def __init__(self, arg__1: QFontInfo) -> None: ...
    def bold(self) -> bool: ...
    def exactMatch(self) -> bool: ...
    def family(self) -> str: ...
    def fixedPitch(self) -> bool: ...
    def italic(self) -> bool: ...
    def overline(self) -> bool: ...
    def pixelSize(self) -> int: ...
    def pointSize(self) -> int: ...
    def pointSizeF(self) -> float: ...
    def rawMode(self) -> bool: ...
    def strikeOut(self) -> bool: ...
    def style(self) -> QFont.Style: ...
    def styleHint(self) -> QFont.StyleHint: ...
    def styleName(self) -> str: ...
    def swap(self, other: QFontInfo) -> None: ...
    def underline(self) -> bool: ...
    def weight(self) -> int: ...
    def __copy__(self) -> None: ...

class QFontMetrics(shiboken2.Object):
    @overload
    def __init__(self, arg__1: QFont) -> None: ...
    @overload
    def __init__(self, arg__1: QFontMetrics) -> None: ...
    @overload
    def __init__(self, font: QFont, pd: QPaintDevice) -> None: ...
    def ascent(self) -> int: ...
    def averageCharWidth(self) -> int: ...
    @overload
    def boundingRect(self, r: PySide2.QtCore.QRect, flags: typing.SupportsInt, text: str, tabstops: int = ..., tabarray: typing.Union[typing.Sequence[int],None] = ...) -> PySide2.QtCore.QRect: ...
    @overload
    def boundingRect(self, text: str) -> PySide2.QtCore.QRect: ...
    @overload
    def boundingRect(self, x: int, y: int, w: int, h: int, flags: typing.SupportsInt, text: str, tabstops: int = ..., tabarray: typing.Union[typing.Sequence[int],None] = ...) -> PySide2.QtCore.QRect: ...
    def boundingRectChar(self, arg__1: str) -> PySide2.QtCore.QRect: ...
    def capHeight(self) -> int: ...
    def charWidth(self, str: str, pos: int) -> int: ...
    def descent(self) -> int: ...
    def elidedText(self, text: str, mode: PySide2.QtCore.Qt.TextElideMode, width: int, flags: typing.SupportsInt = ...) -> str: ...
    def fontDpi(self) -> float: ...
    def height(self) -> int: ...
    def horizontalAdvance(self, arg__1: str, len: int = ...) -> int: ...
    def inFont(self, arg__1: str) -> bool: ...
    def inFontUcs4(self, ucs4: int) -> bool: ...
    def leading(self) -> int: ...
    def leftBearing(self, arg__1: str) -> int: ...
    def lineSpacing(self) -> int: ...
    def lineWidth(self) -> int: ...
    def maxWidth(self) -> int: ...
    def minLeftBearing(self) -> int: ...
    def minRightBearing(self) -> int: ...
    def overlinePos(self) -> int: ...
    def rightBearing(self, arg__1: str) -> int: ...
    def size(self, flags: typing.SupportsInt, str: str, tabstops: int = ..., tabarray: typing.Union[typing.Sequence[int],None] = ...) -> PySide2.QtCore.QSize: ...
    def strikeOutPos(self) -> int: ...
    def swap(self, other: QFontMetrics) -> None: ...
    def tightBoundingRect(self, text: str) -> PySide2.QtCore.QRect: ...
    def underlinePos(self) -> int: ...
    @overload
    def width(self, arg__1: str, len: int, flags: typing.SupportsInt) -> int: ...
    @overload
    def width(self, arg__1: str, len: int = ...) -> int: ...
    def widthChar(self, arg__1: str) -> int: ...
    def xHeight(self) -> int: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QFontMetricsF(shiboken2.Object):
    @overload
    def __init__(self, arg__1: QFontMetrics) -> None: ...
    @overload
    def __init__(self, arg__1: QFontMetricsF) -> None: ...
    @overload
    def __init__(self, font: QFont) -> None: ...
    @overload
    def __init__(self, font: QFont, pd: QPaintDevice) -> None: ...
    def ascent(self) -> float: ...
    def averageCharWidth(self) -> float: ...
    @overload
    def boundingRect(self, r: PySide2.QtCore.QRectF, flags: typing.SupportsInt, string: str, tabstops: int = ..., tabarray: typing.Union[typing.Sequence[int],None] = ...) -> PySide2.QtCore.QRectF: ...
    @overload
    def boundingRect(self, string: str) -> PySide2.QtCore.QRectF: ...
    def boundingRectChar(self, arg__1: str) -> PySide2.QtCore.QRectF: ...
    def capHeight(self) -> float: ...
    def descent(self) -> float: ...
    def elidedText(self, text: str, mode: PySide2.QtCore.Qt.TextElideMode, width: float, flags: typing.SupportsInt = ...) -> str: ...
    def fontDpi(self) -> float: ...
    def height(self) -> float: ...
    @overload
    def horizontalAdvance(self, arg__1: str) -> float: ...
    @overload
    def horizontalAdvance(self, string: str, length: int = ...) -> float: ...
    def inFont(self, arg__1: str) -> bool: ...
    def inFontUcs4(self, ucs4: int) -> bool: ...
    def leading(self) -> float: ...
    def leftBearing(self, arg__1: str) -> float: ...
    def lineSpacing(self) -> float: ...
    def lineWidth(self) -> float: ...
    def maxWidth(self) -> float: ...
    def minLeftBearing(self) -> float: ...
    def minRightBearing(self) -> float: ...
    def overlinePos(self) -> float: ...
    def rightBearing(self, arg__1: str) -> float: ...
    def size(self, flags: typing.SupportsInt, str: str, tabstops: int = ..., tabarray: typing.Union[typing.Sequence[int],None] = ...) -> PySide2.QtCore.QSizeF: ...
    def strikeOutPos(self) -> float: ...
    def swap(self, other: QFontMetricsF) -> None: ...
    def tightBoundingRect(self, text: str) -> PySide2.QtCore.QRectF: ...
    def underlinePos(self) -> float: ...
    def width(self, string: str) -> float: ...
    def widthChar(self, arg__1: str) -> float: ...
    def xHeight(self) -> float: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QGradient(shiboken2.Object):
    class CoordinateMode:
        LogicalMode: ClassVar[QGradient.CoordinateMode] = ...
        ObjectBoundingMode: ClassVar[QGradient.CoordinateMode] = ...
        ObjectMode: ClassVar[QGradient.CoordinateMode] = ...
        StretchToDeviceMode: ClassVar[QGradient.CoordinateMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGradient.CoordinateMode: ...
        def __and__(self, other: typing.SupportsInt) -> QGradient.CoordinateMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGradient.CoordinateMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGradient.CoordinateMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGradient.CoordinateMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QGradient.CoordinateMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGradient.CoordinateMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QGradient.CoordinateMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGradient.CoordinateMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGradient.CoordinateMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QGradient.CoordinateMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QGradient.CoordinateMode: ...

    class InterpolationMode:
        ColorInterpolation: ClassVar[QGradient.InterpolationMode] = ...
        ComponentInterpolation: ClassVar[QGradient.InterpolationMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGradient.InterpolationMode: ...
        def __and__(self, other: typing.SupportsInt) -> QGradient.InterpolationMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGradient.InterpolationMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGradient.InterpolationMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGradient.InterpolationMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QGradient.InterpolationMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGradient.InterpolationMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QGradient.InterpolationMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGradient.InterpolationMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGradient.InterpolationMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QGradient.InterpolationMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QGradient.InterpolationMode: ...

    class Preset:
        AboveTheSky: ClassVar[QGradient.Preset] = ...
        AfricanField: ClassVar[QGradient.Preset] = ...
        AlchemistLab: ClassVar[QGradient.Preset] = ...
        AmourAmour: ClassVar[QGradient.Preset] = ...
        AmyCrisp: ClassVar[QGradient.Preset] = ...
        AngelCare: ClassVar[QGradient.Preset] = ...
        AquaGuidance: ClassVar[QGradient.Preset] = ...
        AquaSplash: ClassVar[QGradient.Preset] = ...
        AwesomePine: ClassVar[QGradient.Preset] = ...
        BigMango: ClassVar[QGradient.Preset] = ...
        BlackSea: ClassVar[QGradient.Preset] = ...
        Blessing: ClassVar[QGradient.Preset] = ...
        BurningSpring: ClassVar[QGradient.Preset] = ...
        CheerfulCaramel: ClassVar[QGradient.Preset] = ...
        ChildCare: ClassVar[QGradient.Preset] = ...
        CleanMirror: ClassVar[QGradient.Preset] = ...
        CloudyApple: ClassVar[QGradient.Preset] = ...
        CloudyKnoxville: ClassVar[QGradient.Preset] = ...
        CochitiLake: ClassVar[QGradient.Preset] = ...
        ColdEvening: ClassVar[QGradient.Preset] = ...
        ColorfulPeach: ClassVar[QGradient.Preset] = ...
        ConfidentCloud: ClassVar[QGradient.Preset] = ...
        CrystalRiver: ClassVar[QGradient.Preset] = ...
        Crystalline: ClassVar[QGradient.Preset] = ...
        DeepBlue: ClassVar[QGradient.Preset] = ...
        DeepRelief: ClassVar[QGradient.Preset] = ...
        DenseWater: ClassVar[QGradient.Preset] = ...
        DesertHump: ClassVar[QGradient.Preset] = ...
        DirtyBeauty: ClassVar[QGradient.Preset] = ...
        DustyGrass: ClassVar[QGradient.Preset] = ...
        EternalConstance: ClassVar[QGradient.Preset] = ...
        EverlastingSky: ClassVar[QGradient.Preset] = ...
        FabledSunset: ClassVar[QGradient.Preset] = ...
        FarawayRiver: ClassVar[QGradient.Preset] = ...
        FebruaryInk: ClassVar[QGradient.Preset] = ...
        FlyHigh: ClassVar[QGradient.Preset] = ...
        FlyingLemon: ClassVar[QGradient.Preset] = ...
        ForestInei: ClassVar[QGradient.Preset] = ...
        FreshMilk: ClassVar[QGradient.Preset] = ...
        FreshOasis: ClassVar[QGradient.Preset] = ...
        FrozenBerry: ClassVar[QGradient.Preset] = ...
        FrozenDreams: ClassVar[QGradient.Preset] = ...
        FrozenHeat: ClassVar[QGradient.Preset] = ...
        FruitBlend: ClassVar[QGradient.Preset] = ...
        GagarinView: ClassVar[QGradient.Preset] = ...
        GentleCare: ClassVar[QGradient.Preset] = ...
        GlassWater: ClassVar[QGradient.Preset] = ...
        GrassShampoo: ClassVar[QGradient.Preset] = ...
        GreatWhale: ClassVar[QGradient.Preset] = ...
        GrownEarly: ClassVar[QGradient.Preset] = ...
        HappyAcid: ClassVar[QGradient.Preset] = ...
        HappyFisher: ClassVar[QGradient.Preset] = ...
        HappyMemories: ClassVar[QGradient.Preset] = ...
        HappyUnicorn: ClassVar[QGradient.Preset] = ...
        HealthyWater: ClassVar[QGradient.Preset] = ...
        HeavenPeach: ClassVar[QGradient.Preset] = ...
        HeavyRain: ClassVar[QGradient.Preset] = ...
        HiddenJaguar: ClassVar[QGradient.Preset] = ...
        HighFlight: ClassVar[QGradient.Preset] = ...
        ItmeoBranding: ClassVar[QGradient.Preset] = ...
        JapanBlush: ClassVar[QGradient.Preset] = ...
        JuicyCake: ClassVar[QGradient.Preset] = ...
        JuicyPeach: ClassVar[QGradient.Preset] = ...
        JungleDay: ClassVar[QGradient.Preset] = ...
        KindSteel: ClassVar[QGradient.Preset] = ...
        LadogaBottom: ClassVar[QGradient.Preset] = ...
        LadyLips: ClassVar[QGradient.Preset] = ...
        LandingAircraft: ClassVar[QGradient.Preset] = ...
        LeCocktail: ClassVar[QGradient.Preset] = ...
        LemonGate: ClassVar[QGradient.Preset] = ...
        LightBlue: ClassVar[QGradient.Preset] = ...
        LilyMeadow: ClassVar[QGradient.Preset] = ...
        LoveKiss: ClassVar[QGradient.Preset] = ...
        MagicLake: ClassVar[QGradient.Preset] = ...
        MagicRay: ClassVar[QGradient.Preset] = ...
        MalibuBeach: ClassVar[QGradient.Preset] = ...
        MarbleWall: ClassVar[QGradient.Preset] = ...
        MarsParty: ClassVar[QGradient.Preset] = ...
        MeanFruit: ClassVar[QGradient.Preset] = ...
        MidnightBloom: ClassVar[QGradient.Preset] = ...
        MillenniumPine: ClassVar[QGradient.Preset] = ...
        MindCrawl: ClassVar[QGradient.Preset] = ...
        MixedHopes: ClassVar[QGradient.Preset] = ...
        MoleHall: ClassVar[QGradient.Preset] = ...
        MorningSalad: ClassVar[QGradient.Preset] = ...
        MorpheusDen: ClassVar[QGradient.Preset] = ...
        MountainRock: ClassVar[QGradient.Preset] = ...
        NearMoon: ClassVar[QGradient.Preset] = ...
        Nega: ClassVar[QGradient.Preset] = ...
        NewLife: ClassVar[QGradient.Preset] = ...
        NewRetrowave: ClassVar[QGradient.Preset] = ...
        NewYork: ClassVar[QGradient.Preset] = ...
        NightCall: ClassVar[QGradient.Preset] = ...
        NightFade: ClassVar[QGradient.Preset] = ...
        NightParty: ClassVar[QGradient.Preset] = ...
        NightSky: ClassVar[QGradient.Preset] = ...
        NorseBeauty: ClassVar[QGradient.Preset] = ...
        NorthMiracle: ClassVar[QGradient.Preset] = ...
        NumPresets: ClassVar[QGradient.Preset] = ...
        OctoberSilence: ClassVar[QGradient.Preset] = ...
        OldHat: ClassVar[QGradient.Preset] = ...
        OrangeJuice: ClassVar[QGradient.Preset] = ...
        OverSun: ClassVar[QGradient.Preset] = ...
        PaloAlto: ClassVar[QGradient.Preset] = ...
        PartyBliss: ClassVar[QGradient.Preset] = ...
        PassionateBed: ClassVar[QGradient.Preset] = ...
        PerfectBlue: ClassVar[QGradient.Preset] = ...
        PerfectWhite: ClassVar[QGradient.Preset] = ...
        PhoenixStart: ClassVar[QGradient.Preset] = ...
        PlumBath: ClassVar[QGradient.Preset] = ...
        PlumPlate: ClassVar[QGradient.Preset] = ...
        PoliteRumors: ClassVar[QGradient.Preset] = ...
        PremiumDark: ClassVar[QGradient.Preset] = ...
        PremiumWhite: ClassVar[QGradient.Preset] = ...
        PurpleDivision: ClassVar[QGradient.Preset] = ...
        RainyAshville: ClassVar[QGradient.Preset] = ...
        RareWind: ClassVar[QGradient.Preset] = ...
        RedSalvation: ClassVar[QGradient.Preset] = ...
        RichMetal: ClassVar[QGradient.Preset] = ...
        RipeMalinka: ClassVar[QGradient.Preset] = ...
        RiskyConcrete: ClassVar[QGradient.Preset] = ...
        RiverCity: ClassVar[QGradient.Preset] = ...
        RoyalGarden: ClassVar[QGradient.Preset] = ...
        SaintPetersburg: ClassVar[QGradient.Preset] = ...
        SaltMountain: ClassVar[QGradient.Preset] = ...
        SandStrike: ClassVar[QGradient.Preset] = ...
        SeaLord: ClassVar[QGradient.Preset] = ...
        SeaStrike: ClassVar[QGradient.Preset] = ...
        Seashore: ClassVar[QGradient.Preset] = ...
        ShadyWater: ClassVar[QGradient.Preset] = ...
        SharpBlues: ClassVar[QGradient.Preset] = ...
        SharpeyeEagle: ClassVar[QGradient.Preset] = ...
        ShyRainbow: ClassVar[QGradient.Preset] = ...
        SkyGlider: ClassVar[QGradient.Preset] = ...
        SleeplessNight: ClassVar[QGradient.Preset] = ...
        SmartIndigo: ClassVar[QGradient.Preset] = ...
        SmilingRain: ClassVar[QGradient.Preset] = ...
        SnowAgain: ClassVar[QGradient.Preset] = ...
        SoftCherish: ClassVar[QGradient.Preset] = ...
        SoftGrass: ClassVar[QGradient.Preset] = ...
        SoftLipstick: ClassVar[QGradient.Preset] = ...
        SolidStone: ClassVar[QGradient.Preset] = ...
        SpaceShift: ClassVar[QGradient.Preset] = ...
        SpikyNaga: ClassVar[QGradient.Preset] = ...
        SpringWarmth: ClassVar[QGradient.Preset] = ...
        StarWine: ClassVar[QGradient.Preset] = ...
        StrictNovember: ClassVar[QGradient.Preset] = ...
        StrongBliss: ClassVar[QGradient.Preset] = ...
        StrongStick: ClassVar[QGradient.Preset] = ...
        SugarLollipop: ClassVar[QGradient.Preset] = ...
        SummerGames: ClassVar[QGradient.Preset] = ...
        SunVeggie: ClassVar[QGradient.Preset] = ...
        SunnyMorning: ClassVar[QGradient.Preset] = ...
        SupremeSky: ClassVar[QGradient.Preset] = ...
        SweetDessert: ClassVar[QGradient.Preset] = ...
        SweetPeriod: ClassVar[QGradient.Preset] = ...
        TeenNotebook: ClassVar[QGradient.Preset] = ...
        TeenParty: ClassVar[QGradient.Preset] = ...
        TemptingAzure: ClassVar[QGradient.Preset] = ...
        TrueSunset: ClassVar[QGradient.Preset] = ...
        ViciousStance: ClassVar[QGradient.Preset] = ...
        WarmFlame: ClassVar[QGradient.Preset] = ...
        WideMatrix: ClassVar[QGradient.Preset] = ...
        WildApple: ClassVar[QGradient.Preset] = ...
        WinterNeva: ClassVar[QGradient.Preset] = ...
        WitchDance: ClassVar[QGradient.Preset] = ...
        YoungGrass: ClassVar[QGradient.Preset] = ...
        YoungPassion: ClassVar[QGradient.Preset] = ...
        ZeusMiracle: ClassVar[QGradient.Preset] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGradient.Preset: ...
        def __and__(self, other: typing.SupportsInt) -> QGradient.Preset: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGradient.Preset: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGradient.Preset: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGradient.Preset: ...
        def __rand__(self, other: typing.SupportsInt) -> QGradient.Preset: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGradient.Preset: ...
        def __ror__(self, other: typing.SupportsInt) -> QGradient.Preset: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGradient.Preset: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGradient.Preset: ...
        def __sub__(self, other: typing.SupportsInt) -> QGradient.Preset: ...
        def __xor__(self, other: typing.SupportsInt) -> QGradient.Preset: ...

    class Spread:
        PadSpread: ClassVar[QGradient.Spread] = ...
        ReflectSpread: ClassVar[QGradient.Spread] = ...
        RepeatSpread: ClassVar[QGradient.Spread] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGradient.Spread: ...
        def __and__(self, other: typing.SupportsInt) -> QGradient.Spread: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGradient.Spread: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGradient.Spread: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGradient.Spread: ...
        def __rand__(self, other: typing.SupportsInt) -> QGradient.Spread: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGradient.Spread: ...
        def __ror__(self, other: typing.SupportsInt) -> QGradient.Spread: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGradient.Spread: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGradient.Spread: ...
        def __sub__(self, other: typing.SupportsInt) -> QGradient.Spread: ...
        def __xor__(self, other: typing.SupportsInt) -> QGradient.Spread: ...

    class Type:
        ConicalGradient: ClassVar[QGradient.Type] = ...
        LinearGradient: ClassVar[QGradient.Type] = ...
        NoGradient: ClassVar[QGradient.Type] = ...
        RadialGradient: ClassVar[QGradient.Type] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QGradient.Type: ...
        def __and__(self, other: typing.SupportsInt) -> QGradient.Type: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QGradient.Type: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QGradient.Type: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QGradient.Type: ...
        def __rand__(self, other: typing.SupportsInt) -> QGradient.Type: ...
        def __rmul__(self, other: typing.SupportsInt) -> QGradient.Type: ...
        def __ror__(self, other: typing.SupportsInt) -> QGradient.Type: ...
        def __rsub__(self, other: typing.SupportsInt) -> QGradient.Type: ...
        def __rxor__(self, other: typing.SupportsInt) -> QGradient.Type: ...
        def __sub__(self, other: typing.SupportsInt) -> QGradient.Type: ...
        def __xor__(self, other: typing.SupportsInt) -> QGradient.Type: ...
    AboveTheSky: ClassVar[QGradient.Preset] = ...
    AfricanField: ClassVar[QGradient.Preset] = ...
    AlchemistLab: ClassVar[QGradient.Preset] = ...
    AmourAmour: ClassVar[QGradient.Preset] = ...
    AmyCrisp: ClassVar[QGradient.Preset] = ...
    AngelCare: ClassVar[QGradient.Preset] = ...
    AquaGuidance: ClassVar[QGradient.Preset] = ...
    AquaSplash: ClassVar[QGradient.Preset] = ...
    AwesomePine: ClassVar[QGradient.Preset] = ...
    BigMango: ClassVar[QGradient.Preset] = ...
    BlackSea: ClassVar[QGradient.Preset] = ...
    Blessing: ClassVar[QGradient.Preset] = ...
    BurningSpring: ClassVar[QGradient.Preset] = ...
    CheerfulCaramel: ClassVar[QGradient.Preset] = ...
    ChildCare: ClassVar[QGradient.Preset] = ...
    CleanMirror: ClassVar[QGradient.Preset] = ...
    CloudyApple: ClassVar[QGradient.Preset] = ...
    CloudyKnoxville: ClassVar[QGradient.Preset] = ...
    CochitiLake: ClassVar[QGradient.Preset] = ...
    ColdEvening: ClassVar[QGradient.Preset] = ...
    ColorInterpolation: ClassVar[QGradient.InterpolationMode] = ...
    ColorfulPeach: ClassVar[QGradient.Preset] = ...
    ComponentInterpolation: ClassVar[QGradient.InterpolationMode] = ...
    ConfidentCloud: ClassVar[QGradient.Preset] = ...
    ConicalGradient: ClassVar[QGradient.Type] = ...
    CrystalRiver: ClassVar[QGradient.Preset] = ...
    Crystalline: ClassVar[QGradient.Preset] = ...
    DeepBlue: ClassVar[QGradient.Preset] = ...
    DeepRelief: ClassVar[QGradient.Preset] = ...
    DenseWater: ClassVar[QGradient.Preset] = ...
    DesertHump: ClassVar[QGradient.Preset] = ...
    DirtyBeauty: ClassVar[QGradient.Preset] = ...
    DustyGrass: ClassVar[QGradient.Preset] = ...
    EternalConstance: ClassVar[QGradient.Preset] = ...
    EverlastingSky: ClassVar[QGradient.Preset] = ...
    FabledSunset: ClassVar[QGradient.Preset] = ...
    FarawayRiver: ClassVar[QGradient.Preset] = ...
    FebruaryInk: ClassVar[QGradient.Preset] = ...
    FlyHigh: ClassVar[QGradient.Preset] = ...
    FlyingLemon: ClassVar[QGradient.Preset] = ...
    ForestInei: ClassVar[QGradient.Preset] = ...
    FreshMilk: ClassVar[QGradient.Preset] = ...
    FreshOasis: ClassVar[QGradient.Preset] = ...
    FrozenBerry: ClassVar[QGradient.Preset] = ...
    FrozenDreams: ClassVar[QGradient.Preset] = ...
    FrozenHeat: ClassVar[QGradient.Preset] = ...
    FruitBlend: ClassVar[QGradient.Preset] = ...
    GagarinView: ClassVar[QGradient.Preset] = ...
    GentleCare: ClassVar[QGradient.Preset] = ...
    GlassWater: ClassVar[QGradient.Preset] = ...
    GrassShampoo: ClassVar[QGradient.Preset] = ...
    GreatWhale: ClassVar[QGradient.Preset] = ...
    GrownEarly: ClassVar[QGradient.Preset] = ...
    HappyAcid: ClassVar[QGradient.Preset] = ...
    HappyFisher: ClassVar[QGradient.Preset] = ...
    HappyMemories: ClassVar[QGradient.Preset] = ...
    HappyUnicorn: ClassVar[QGradient.Preset] = ...
    HealthyWater: ClassVar[QGradient.Preset] = ...
    HeavenPeach: ClassVar[QGradient.Preset] = ...
    HeavyRain: ClassVar[QGradient.Preset] = ...
    HiddenJaguar: ClassVar[QGradient.Preset] = ...
    HighFlight: ClassVar[QGradient.Preset] = ...
    ItmeoBranding: ClassVar[QGradient.Preset] = ...
    JapanBlush: ClassVar[QGradient.Preset] = ...
    JuicyCake: ClassVar[QGradient.Preset] = ...
    JuicyPeach: ClassVar[QGradient.Preset] = ...
    JungleDay: ClassVar[QGradient.Preset] = ...
    KindSteel: ClassVar[QGradient.Preset] = ...
    LadogaBottom: ClassVar[QGradient.Preset] = ...
    LadyLips: ClassVar[QGradient.Preset] = ...
    LandingAircraft: ClassVar[QGradient.Preset] = ...
    LeCocktail: ClassVar[QGradient.Preset] = ...
    LemonGate: ClassVar[QGradient.Preset] = ...
    LightBlue: ClassVar[QGradient.Preset] = ...
    LilyMeadow: ClassVar[QGradient.Preset] = ...
    LinearGradient: ClassVar[QGradient.Type] = ...
    LogicalMode: ClassVar[QGradient.CoordinateMode] = ...
    LoveKiss: ClassVar[QGradient.Preset] = ...
    MagicLake: ClassVar[QGradient.Preset] = ...
    MagicRay: ClassVar[QGradient.Preset] = ...
    MalibuBeach: ClassVar[QGradient.Preset] = ...
    MarbleWall: ClassVar[QGradient.Preset] = ...
    MarsParty: ClassVar[QGradient.Preset] = ...
    MeanFruit: ClassVar[QGradient.Preset] = ...
    MidnightBloom: ClassVar[QGradient.Preset] = ...
    MillenniumPine: ClassVar[QGradient.Preset] = ...
    MindCrawl: ClassVar[QGradient.Preset] = ...
    MixedHopes: ClassVar[QGradient.Preset] = ...
    MoleHall: ClassVar[QGradient.Preset] = ...
    MorningSalad: ClassVar[QGradient.Preset] = ...
    MorpheusDen: ClassVar[QGradient.Preset] = ...
    MountainRock: ClassVar[QGradient.Preset] = ...
    NearMoon: ClassVar[QGradient.Preset] = ...
    Nega: ClassVar[QGradient.Preset] = ...
    NewLife: ClassVar[QGradient.Preset] = ...
    NewRetrowave: ClassVar[QGradient.Preset] = ...
    NewYork: ClassVar[QGradient.Preset] = ...
    NightCall: ClassVar[QGradient.Preset] = ...
    NightFade: ClassVar[QGradient.Preset] = ...
    NightParty: ClassVar[QGradient.Preset] = ...
    NightSky: ClassVar[QGradient.Preset] = ...
    NoGradient: ClassVar[QGradient.Type] = ...
    NorseBeauty: ClassVar[QGradient.Preset] = ...
    NorthMiracle: ClassVar[QGradient.Preset] = ...
    NumPresets: ClassVar[QGradient.Preset] = ...
    ObjectBoundingMode: ClassVar[QGradient.CoordinateMode] = ...
    ObjectMode: ClassVar[QGradient.CoordinateMode] = ...
    OctoberSilence: ClassVar[QGradient.Preset] = ...
    OldHat: ClassVar[QGradient.Preset] = ...
    OrangeJuice: ClassVar[QGradient.Preset] = ...
    OverSun: ClassVar[QGradient.Preset] = ...
    PadSpread: ClassVar[QGradient.Spread] = ...
    PaloAlto: ClassVar[QGradient.Preset] = ...
    PartyBliss: ClassVar[QGradient.Preset] = ...
    PassionateBed: ClassVar[QGradient.Preset] = ...
    PerfectBlue: ClassVar[QGradient.Preset] = ...
    PerfectWhite: ClassVar[QGradient.Preset] = ...
    PhoenixStart: ClassVar[QGradient.Preset] = ...
    PlumBath: ClassVar[QGradient.Preset] = ...
    PlumPlate: ClassVar[QGradient.Preset] = ...
    PoliteRumors: ClassVar[QGradient.Preset] = ...
    PremiumDark: ClassVar[QGradient.Preset] = ...
    PremiumWhite: ClassVar[QGradient.Preset] = ...
    PurpleDivision: ClassVar[QGradient.Preset] = ...
    RadialGradient: ClassVar[QGradient.Type] = ...
    RainyAshville: ClassVar[QGradient.Preset] = ...
    RareWind: ClassVar[QGradient.Preset] = ...
    RedSalvation: ClassVar[QGradient.Preset] = ...
    ReflectSpread: ClassVar[QGradient.Spread] = ...
    RepeatSpread: ClassVar[QGradient.Spread] = ...
    RichMetal: ClassVar[QGradient.Preset] = ...
    RipeMalinka: ClassVar[QGradient.Preset] = ...
    RiskyConcrete: ClassVar[QGradient.Preset] = ...
    RiverCity: ClassVar[QGradient.Preset] = ...
    RoyalGarden: ClassVar[QGradient.Preset] = ...
    SaintPetersburg: ClassVar[QGradient.Preset] = ...
    SaltMountain: ClassVar[QGradient.Preset] = ...
    SandStrike: ClassVar[QGradient.Preset] = ...
    SeaLord: ClassVar[QGradient.Preset] = ...
    SeaStrike: ClassVar[QGradient.Preset] = ...
    Seashore: ClassVar[QGradient.Preset] = ...
    ShadyWater: ClassVar[QGradient.Preset] = ...
    SharpBlues: ClassVar[QGradient.Preset] = ...
    SharpeyeEagle: ClassVar[QGradient.Preset] = ...
    ShyRainbow: ClassVar[QGradient.Preset] = ...
    SkyGlider: ClassVar[QGradient.Preset] = ...
    SleeplessNight: ClassVar[QGradient.Preset] = ...
    SmartIndigo: ClassVar[QGradient.Preset] = ...
    SmilingRain: ClassVar[QGradient.Preset] = ...
    SnowAgain: ClassVar[QGradient.Preset] = ...
    SoftCherish: ClassVar[QGradient.Preset] = ...
    SoftGrass: ClassVar[QGradient.Preset] = ...
    SoftLipstick: ClassVar[QGradient.Preset] = ...
    SolidStone: ClassVar[QGradient.Preset] = ...
    SpaceShift: ClassVar[QGradient.Preset] = ...
    SpikyNaga: ClassVar[QGradient.Preset] = ...
    SpringWarmth: ClassVar[QGradient.Preset] = ...
    StarWine: ClassVar[QGradient.Preset] = ...
    StretchToDeviceMode: ClassVar[QGradient.CoordinateMode] = ...
    StrictNovember: ClassVar[QGradient.Preset] = ...
    StrongBliss: ClassVar[QGradient.Preset] = ...
    StrongStick: ClassVar[QGradient.Preset] = ...
    SugarLollipop: ClassVar[QGradient.Preset] = ...
    SummerGames: ClassVar[QGradient.Preset] = ...
    SunVeggie: ClassVar[QGradient.Preset] = ...
    SunnyMorning: ClassVar[QGradient.Preset] = ...
    SupremeSky: ClassVar[QGradient.Preset] = ...
    SweetDessert: ClassVar[QGradient.Preset] = ...
    SweetPeriod: ClassVar[QGradient.Preset] = ...
    TeenNotebook: ClassVar[QGradient.Preset] = ...
    TeenParty: ClassVar[QGradient.Preset] = ...
    TemptingAzure: ClassVar[QGradient.Preset] = ...
    TrueSunset: ClassVar[QGradient.Preset] = ...
    ViciousStance: ClassVar[QGradient.Preset] = ...
    WarmFlame: ClassVar[QGradient.Preset] = ...
    WideMatrix: ClassVar[QGradient.Preset] = ...
    WildApple: ClassVar[QGradient.Preset] = ...
    WinterNeva: ClassVar[QGradient.Preset] = ...
    WitchDance: ClassVar[QGradient.Preset] = ...
    YoungGrass: ClassVar[QGradient.Preset] = ...
    YoungPassion: ClassVar[QGradient.Preset] = ...
    ZeusMiracle: ClassVar[QGradient.Preset] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QGradient: QGradient) -> None: ...
    @overload
    def __init__(self, arg__1: QGradient.Preset) -> None: ...
    def coordinateMode(self) -> QGradient.CoordinateMode: ...
    def interpolationMode(self) -> QGradient.InterpolationMode: ...
    def setColorAt(self, pos: float, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setCoordinateMode(self, mode: QGradient.CoordinateMode) -> None: ...
    def setInterpolationMode(self, mode: QGradient.InterpolationMode) -> None: ...
    def setSpread(self, spread: QGradient.Spread) -> None: ...
    def setStops(self, stops: typing.List[typing.Tuple[float,QColor]]) -> None: ...
    def spread(self) -> QGradient.Spread: ...
    def stops(self) -> typing.List[typing.Tuple[float,QColor]]: ...
    def type(self) -> QGradient.Type: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QGuiApplication(PySide2.QtCore.QCoreApplication):
    applicationDisplayNameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    applicationStateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    commitDataRequest: ClassVar[PySide2.QtCore.Signal] = ...
    focusObjectChanged: ClassVar[PySide2.QtCore.Signal] = ...
    focusWindowChanged: ClassVar[PySide2.QtCore.Signal] = ...
    fontChanged: ClassVar[PySide2.QtCore.Signal] = ...
    fontDatabaseChanged: ClassVar[PySide2.QtCore.Signal] = ...
    lastWindowClosed: ClassVar[PySide2.QtCore.Signal] = ...
    layoutDirectionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    paletteChanged: ClassVar[PySide2.QtCore.Signal] = ...
    primaryScreenChanged: ClassVar[PySide2.QtCore.Signal] = ...
    saveStateRequest: ClassVar[PySide2.QtCore.Signal] = ...
    screenAdded: ClassVar[PySide2.QtCore.Signal] = ...
    screenRemoved: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, arg__1: typing.Sequence[str], destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @classmethod
    def allWindows(cls) -> typing.List[QWindow]: ...
    @classmethod
    def applicationDisplayName(cls) -> str: ...
    @classmethod
    def applicationState(cls) -> PySide2.QtCore.Qt.ApplicationState: ...
    @classmethod
    def changeOverrideCursor(cls, arg__1: QCursor) -> None: ...
    @classmethod
    def clipboard(cls) -> QClipboard: ...
    @classmethod
    def desktopFileName(cls) -> str: ...
    @classmethod
    def desktopSettingsAware(cls) -> bool: ...
    def devicePixelRatio(self) -> float: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    @classmethod
    def exec_(cls) -> int: ...
    @classmethod
    def focusObject(cls) -> PySide2.QtCore.QObject: ...
    @classmethod
    def focusWindow(cls) -> QWindow: ...
    @classmethod
    def font(cls) -> QFont: ...
    @classmethod
    def highDpiScaleFactorRoundingPolicy(cls) -> PySide2.QtCore.Qt.HighDpiScaleFactorRoundingPolicy: ...
    @classmethod
    def inputMethod(cls) -> QInputMethod: ...
    @classmethod
    def isFallbackSessionManagementEnabled(cls) -> bool: ...
    @classmethod
    def isLeftToRight(cls) -> bool: ...
    @classmethod
    def isRightToLeft(cls) -> bool: ...
    def isSavingSession(self) -> bool: ...
    def isSessionRestored(self) -> bool: ...
    @classmethod
    def keyboardModifiers(cls) -> typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]: ...
    @classmethod
    def layoutDirection(cls) -> PySide2.QtCore.Qt.LayoutDirection: ...
    @classmethod
    def modalWindow(cls) -> QWindow: ...
    @classmethod
    def mouseButtons(cls) -> typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]: ...
    def notify(self, arg__1: PySide2.QtCore.QObject, arg__2: PySide2.QtCore.QEvent) -> bool: ...
    @classmethod
    def overrideCursor(cls) -> QCursor: ...
    @classmethod
    def palette(cls) -> QPalette: ...
    @classmethod
    def platformName(cls) -> str: ...
    @classmethod
    def primaryScreen(cls) -> QScreen: ...
    @classmethod
    def queryKeyboardModifiers(cls) -> typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]: ...
    @classmethod
    def quitOnLastWindowClosed(cls) -> bool: ...
    @classmethod
    def restoreOverrideCursor(cls) -> None: ...
    @classmethod
    def screenAt(cls, point: PySide2.QtCore.QPoint) -> QScreen: ...
    @classmethod
    def screens(cls) -> typing.List[QScreen]: ...
    def sessionId(self) -> str: ...
    def sessionKey(self) -> str: ...
    @classmethod
    def setApplicationDisplayName(cls, name: str) -> None: ...
    @classmethod
    def setDesktopFileName(cls, name: str) -> None: ...
    @classmethod
    def setDesktopSettingsAware(cls, on: bool) -> None: ...
    @classmethod
    def setFallbackSessionManagementEnabled(cls, arg__1: bool) -> None: ...
    @classmethod
    def setFont(cls, arg__1: QFont) -> None: ...
    @classmethod
    def setHighDpiScaleFactorRoundingPolicy(cls, policy: PySide2.QtCore.Qt.HighDpiScaleFactorRoundingPolicy) -> None: ...
    @classmethod
    def setLayoutDirection(cls, direction: PySide2.QtCore.Qt.LayoutDirection) -> None: ...
    @classmethod
    def setOverrideCursor(cls, arg__1: QCursor) -> None: ...
    @classmethod
    def setPalette(cls, pal: QPalette) -> None: ...
    @classmethod
    def setQuitOnLastWindowClosed(cls, quit: bool) -> None: ...
    @classmethod
    def setWindowIcon(cls, icon: QIcon) -> None: ...
    @classmethod
    def styleHints(cls) -> QStyleHints: ...
    @classmethod
    def sync(cls) -> None: ...
    @classmethod
    def topLevelAt(cls, pos: PySide2.QtCore.QPoint) -> QWindow: ...
    @classmethod
    def topLevelWindows(cls) -> typing.List[QWindow]: ...
    @classmethod
    def windowIcon(cls) -> QIcon: ...

class QHelpEvent(PySide2.QtCore.QEvent):
    def __init__(self, type: PySide2.QtCore.QEvent.Type, pos: PySide2.QtCore.QPoint, globalPos: PySide2.QtCore.QPoint) -> None: ...
    def globalPos(self) -> PySide2.QtCore.QPoint: ...
    def globalX(self) -> int: ...
    def globalY(self) -> int: ...
    def pos(self) -> PySide2.QtCore.QPoint: ...
    def x(self) -> int: ...
    def y(self) -> int: ...

class QHideEvent(PySide2.QtCore.QEvent):
    def __init__(self) -> None: ...

class QHoverEvent(QInputEvent):
    def __init__(self, type: PySide2.QtCore.QEvent.Type, pos: PySide2.QtCore.QPointF, oldPos: PySide2.QtCore.QPointF, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier] = ...) -> None: ...
    def oldPos(self) -> PySide2.QtCore.QPoint: ...
    def oldPosF(self) -> PySide2.QtCore.QPointF: ...
    def pos(self) -> PySide2.QtCore.QPoint: ...
    def posF(self) -> PySide2.QtCore.QPointF: ...

class QIcon(shiboken2.Object):
    class Mode:
        Active: ClassVar[QIcon.Mode] = ...
        Disabled: ClassVar[QIcon.Mode] = ...
        Normal: ClassVar[QIcon.Mode] = ...
        Selected: ClassVar[QIcon.Mode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QIcon.Mode: ...
        def __and__(self, other: typing.SupportsInt) -> QIcon.Mode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QIcon.Mode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QIcon.Mode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QIcon.Mode: ...
        def __rand__(self, other: typing.SupportsInt) -> QIcon.Mode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QIcon.Mode: ...
        def __ror__(self, other: typing.SupportsInt) -> QIcon.Mode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QIcon.Mode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QIcon.Mode: ...
        def __sub__(self, other: typing.SupportsInt) -> QIcon.Mode: ...
        def __xor__(self, other: typing.SupportsInt) -> QIcon.Mode: ...

    class State:
        Off: ClassVar[QIcon.State] = ...
        On: ClassVar[QIcon.State] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QIcon.State: ...
        def __and__(self, other: typing.SupportsInt) -> QIcon.State: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QIcon.State: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QIcon.State: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QIcon.State: ...
        def __rand__(self, other: typing.SupportsInt) -> QIcon.State: ...
        def __rmul__(self, other: typing.SupportsInt) -> QIcon.State: ...
        def __ror__(self, other: typing.SupportsInt) -> QIcon.State: ...
        def __rsub__(self, other: typing.SupportsInt) -> QIcon.State: ...
        def __rxor__(self, other: typing.SupportsInt) -> QIcon.State: ...
        def __sub__(self, other: typing.SupportsInt) -> QIcon.State: ...
        def __xor__(self, other: typing.SupportsInt) -> QIcon.State: ...
    Active: ClassVar[QIcon.Mode] = ...
    Disabled: ClassVar[QIcon.Mode] = ...
    Normal: ClassVar[QIcon.Mode] = ...
    Off: ClassVar[QIcon.State] = ...
    On: ClassVar[QIcon.State] = ...
    Selected: ClassVar[QIcon.Mode] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, engine: QIconEngine) -> None: ...
    @overload
    def __init__(self, fileName: str) -> None: ...
    @overload
    def __init__(self, other: QIcon) -> None: ...
    @overload
    def __init__(self, pixmap: QPixmap) -> None: ...
    @overload
    def actualSize(self, size: PySide2.QtCore.QSize, mode: QIcon.Mode = ..., state: QIcon.State = ...) -> PySide2.QtCore.QSize: ...
    @overload
    def actualSize(self, window: QWindow, size: PySide2.QtCore.QSize, mode: QIcon.Mode = ..., state: QIcon.State = ...) -> PySide2.QtCore.QSize: ...
    def addFile(self, fileName: str, size: PySide2.QtCore.QSize = ..., mode: QIcon.Mode = ..., state: QIcon.State = ...) -> None: ...
    def addPixmap(self, pixmap: QPixmap, mode: QIcon.Mode = ..., state: QIcon.State = ...) -> None: ...
    def availableSizes(self, mode: QIcon.Mode = ..., state: QIcon.State = ...) -> typing.List[PySide2.QtCore.QSize]: ...
    def cacheKey(self) -> int: ...
    @classmethod
    def fallbackSearchPaths(cls) -> typing.List[str]: ...
    @classmethod
    def fallbackThemeName(cls) -> str: ...
    @classmethod
    @overload
    def fromTheme(cls, name: str) -> QIcon: ...
    @classmethod
    @overload
    def fromTheme(cls, name: str, fallback: QIcon) -> QIcon: ...
    @classmethod
    def hasThemeIcon(cls, name: str) -> bool: ...
    def isMask(self) -> bool: ...
    def isNull(self) -> bool: ...
    def name(self) -> str: ...
    @overload
    def paint(self, painter: QPainter, rect: PySide2.QtCore.QRect, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., mode: QIcon.Mode = ..., state: QIcon.State = ...) -> None: ...
    @overload
    def paint(self, painter: QPainter, x: int, y: int, w: int, h: int, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag] = ..., mode: QIcon.Mode = ..., state: QIcon.State = ...) -> None: ...
    @overload
    def pixmap(self, extent: int, mode: QIcon.Mode = ..., state: QIcon.State = ...) -> QPixmap: ...
    @overload
    def pixmap(self, size: PySide2.QtCore.QSize, mode: QIcon.Mode = ..., state: QIcon.State = ...) -> QPixmap: ...
    @overload
    def pixmap(self, w: int, h: int, mode: QIcon.Mode = ..., state: QIcon.State = ...) -> QPixmap: ...
    @overload
    def pixmap(self, window: QWindow, size: PySide2.QtCore.QSize, mode: QIcon.Mode = ..., state: QIcon.State = ...) -> QPixmap: ...
    @classmethod
    def setFallbackSearchPaths(cls, paths: typing.Sequence[str]) -> None: ...
    @classmethod
    def setFallbackThemeName(cls, name: str) -> None: ...
    def setIsMask(self, isMask: bool) -> None: ...
    @classmethod
    def setThemeName(cls, path: str) -> None: ...
    @classmethod
    def setThemeSearchPaths(cls, searchpath: typing.Sequence[str]) -> None: ...
    def swap(self, other: QIcon) -> None: ...
    @classmethod
    def themeName(cls) -> str: ...
    @classmethod
    def themeSearchPaths(cls) -> typing.List[str]: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QIconDragEvent(PySide2.QtCore.QEvent):
    def __init__(self) -> None: ...

class QIconEngine(shiboken2.Object):
    class AvailableSizesArgument(shiboken2.Object):
        mode: Any
        sizes: Any
        state: Any
        def __init__(self) -> None: ...

    class IconEngineHook:
        AvailableSizesHook: ClassVar[QIconEngine.IconEngineHook] = ...
        IconNameHook: ClassVar[QIconEngine.IconEngineHook] = ...
        IsNullHook: ClassVar[QIconEngine.IconEngineHook] = ...
        ScaledPixmapHook: ClassVar[QIconEngine.IconEngineHook] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QIconEngine.IconEngineHook: ...
        def __and__(self, other: typing.SupportsInt) -> QIconEngine.IconEngineHook: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QIconEngine.IconEngineHook: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QIconEngine.IconEngineHook: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QIconEngine.IconEngineHook: ...
        def __rand__(self, other: typing.SupportsInt) -> QIconEngine.IconEngineHook: ...
        def __rmul__(self, other: typing.SupportsInt) -> QIconEngine.IconEngineHook: ...
        def __ror__(self, other: typing.SupportsInt) -> QIconEngine.IconEngineHook: ...
        def __rsub__(self, other: typing.SupportsInt) -> QIconEngine.IconEngineHook: ...
        def __rxor__(self, other: typing.SupportsInt) -> QIconEngine.IconEngineHook: ...
        def __sub__(self, other: typing.SupportsInt) -> QIconEngine.IconEngineHook: ...
        def __xor__(self, other: typing.SupportsInt) -> QIconEngine.IconEngineHook: ...
    AvailableSizesHook: ClassVar[QIconEngine.IconEngineHook] = ...
    IconNameHook: ClassVar[QIconEngine.IconEngineHook] = ...
    IsNullHook: ClassVar[QIconEngine.IconEngineHook] = ...
    ScaledPixmapHook: ClassVar[QIconEngine.IconEngineHook] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QIconEngine) -> None: ...
    def actualSize(self, size: PySide2.QtCore.QSize, mode: QIcon.Mode, state: QIcon.State) -> PySide2.QtCore.QSize: ...
    def addFile(self, fileName: str, size: PySide2.QtCore.QSize, mode: QIcon.Mode, state: QIcon.State) -> None: ...
    def addPixmap(self, pixmap: QPixmap, mode: QIcon.Mode, state: QIcon.State) -> None: ...
    def availableSizes(self, mode: QIcon.Mode = ..., state: QIcon.State = ...) -> typing.List[PySide2.QtCore.QSize]: ...
    def clone(self) -> QIconEngine: ...
    def iconName(self) -> str: ...
    def isNull(self) -> bool: ...
    def key(self) -> str: ...
    def paint(self, painter: QPainter, rect: PySide2.QtCore.QRect, mode: QIcon.Mode, state: QIcon.State) -> None: ...
    def pixmap(self, size: PySide2.QtCore.QSize, mode: QIcon.Mode, state: QIcon.State) -> QPixmap: ...
    def read(self, in_: PySide2.QtCore.QDataStream) -> bool: ...
    def scaledPixmap(self, size: PySide2.QtCore.QSize, mode: QIcon.Mode, state: QIcon.State, scale: float) -> QPixmap: ...
    def write(self, out: PySide2.QtCore.QDataStream) -> bool: ...
    def __bool__(self) -> bool: ...

class QImage(QPaintDevice):
    class Format:
        Format_A2BGR30_Premultiplied: ClassVar[QImage.Format] = ...
        Format_A2RGB30_Premultiplied: ClassVar[QImage.Format] = ...
        Format_ARGB32: ClassVar[QImage.Format] = ...
        Format_ARGB32_Premultiplied: ClassVar[QImage.Format] = ...
        Format_ARGB4444_Premultiplied: ClassVar[QImage.Format] = ...
        Format_ARGB6666_Premultiplied: ClassVar[QImage.Format] = ...
        Format_ARGB8555_Premultiplied: ClassVar[QImage.Format] = ...
        Format_ARGB8565_Premultiplied: ClassVar[QImage.Format] = ...
        Format_Alpha8: ClassVar[QImage.Format] = ...
        Format_BGR30: ClassVar[QImage.Format] = ...
        Format_BGR888: ClassVar[QImage.Format] = ...
        Format_Grayscale16: ClassVar[QImage.Format] = ...
        Format_Grayscale8: ClassVar[QImage.Format] = ...
        Format_Indexed8: ClassVar[QImage.Format] = ...
        Format_Invalid: ClassVar[QImage.Format] = ...
        Format_Mono: ClassVar[QImage.Format] = ...
        Format_MonoLSB: ClassVar[QImage.Format] = ...
        Format_RGB16: ClassVar[QImage.Format] = ...
        Format_RGB30: ClassVar[QImage.Format] = ...
        Format_RGB32: ClassVar[QImage.Format] = ...
        Format_RGB444: ClassVar[QImage.Format] = ...
        Format_RGB555: ClassVar[QImage.Format] = ...
        Format_RGB666: ClassVar[QImage.Format] = ...
        Format_RGB888: ClassVar[QImage.Format] = ...
        Format_RGBA64: ClassVar[QImage.Format] = ...
        Format_RGBA64_Premultiplied: ClassVar[QImage.Format] = ...
        Format_RGBA8888: ClassVar[QImage.Format] = ...
        Format_RGBA8888_Premultiplied: ClassVar[QImage.Format] = ...
        Format_RGBX64: ClassVar[QImage.Format] = ...
        Format_RGBX8888: ClassVar[QImage.Format] = ...
        NImageFormats: ClassVar[QImage.Format] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QImage.Format: ...
        def __and__(self, other: typing.SupportsInt) -> QImage.Format: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QImage.Format: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QImage.Format: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QImage.Format: ...
        def __rand__(self, other: typing.SupportsInt) -> QImage.Format: ...
        def __rmul__(self, other: typing.SupportsInt) -> QImage.Format: ...
        def __ror__(self, other: typing.SupportsInt) -> QImage.Format: ...
        def __rsub__(self, other: typing.SupportsInt) -> QImage.Format: ...
        def __rxor__(self, other: typing.SupportsInt) -> QImage.Format: ...
        def __sub__(self, other: typing.SupportsInt) -> QImage.Format: ...
        def __xor__(self, other: typing.SupportsInt) -> QImage.Format: ...

    class InvertMode:
        InvertRgb: ClassVar[QImage.InvertMode] = ...
        InvertRgba: ClassVar[QImage.InvertMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QImage.InvertMode: ...
        def __and__(self, other: typing.SupportsInt) -> QImage.InvertMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QImage.InvertMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QImage.InvertMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QImage.InvertMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QImage.InvertMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QImage.InvertMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QImage.InvertMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QImage.InvertMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QImage.InvertMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QImage.InvertMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QImage.InvertMode: ...
    Format_A2BGR30_Premultiplied: ClassVar[QImage.Format] = ...
    Format_A2RGB30_Premultiplied: ClassVar[QImage.Format] = ...
    Format_ARGB32: ClassVar[QImage.Format] = ...
    Format_ARGB32_Premultiplied: ClassVar[QImage.Format] = ...
    Format_ARGB4444_Premultiplied: ClassVar[QImage.Format] = ...
    Format_ARGB6666_Premultiplied: ClassVar[QImage.Format] = ...
    Format_ARGB8555_Premultiplied: ClassVar[QImage.Format] = ...
    Format_ARGB8565_Premultiplied: ClassVar[QImage.Format] = ...
    Format_Alpha8: ClassVar[QImage.Format] = ...
    Format_BGR30: ClassVar[QImage.Format] = ...
    Format_BGR888: ClassVar[QImage.Format] = ...
    Format_Grayscale16: ClassVar[QImage.Format] = ...
    Format_Grayscale8: ClassVar[QImage.Format] = ...
    Format_Indexed8: ClassVar[QImage.Format] = ...
    Format_Invalid: ClassVar[QImage.Format] = ...
    Format_Mono: ClassVar[QImage.Format] = ...
    Format_MonoLSB: ClassVar[QImage.Format] = ...
    Format_RGB16: ClassVar[QImage.Format] = ...
    Format_RGB30: ClassVar[QImage.Format] = ...
    Format_RGB32: ClassVar[QImage.Format] = ...
    Format_RGB444: ClassVar[QImage.Format] = ...
    Format_RGB555: ClassVar[QImage.Format] = ...
    Format_RGB666: ClassVar[QImage.Format] = ...
    Format_RGB888: ClassVar[QImage.Format] = ...
    Format_RGBA64: ClassVar[QImage.Format] = ...
    Format_RGBA64_Premultiplied: ClassVar[QImage.Format] = ...
    Format_RGBA8888: ClassVar[QImage.Format] = ...
    Format_RGBA8888_Premultiplied: ClassVar[QImage.Format] = ...
    Format_RGBX64: ClassVar[QImage.Format] = ...
    Format_RGBX8888: ClassVar[QImage.Format] = ...
    InvertRgb: ClassVar[QImage.InvertMode] = ...
    InvertRgba: ClassVar[QImage.InvertMode] = ...
    NImageFormats: ClassVar[QImage.Format] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: QImage) -> None: ...
    @overload
    def __init__(self, arg__1: str, arg__2: int, arg__3: int, arg__4: QImage.Format) -> None: ...
    @overload
    def __init__(self, arg__1: str, arg__2: int, arg__3: int, arg__4: int, arg__5: QImage.Format) -> None: ...
    @overload
    def __init__(self, data: bytes, width: int, height: int, bytesPerLine: int, format: QImage.Format, cleanupFunction: typing.Union[typing.Callable,None] = ..., cleanupInfo: typing.Union[int,None] = ...) -> None: ...
    @overload
    def __init__(self, data: bytes, width: int, height: int, format: QImage.Format, cleanupFunction: typing.Union[typing.Callable,None] = ..., cleanupInfo: typing.Union[int,None] = ...) -> None: ...
    @overload
    def __init__(self, fileName: str, format: typing.Optional[str] = ...) -> None: ...
    @overload
    def __init__(self, size: PySide2.QtCore.QSize, format: QImage.Format) -> None: ...
    @overload
    def __init__(self, width: int, height: int, format: QImage.Format) -> None: ...
    @overload
    def __init__(self, xpm: typing.Sequence[str]) -> None: ...
    def allGray(self) -> bool: ...
    def alphaChannel(self) -> QImage: ...
    def bitPlaneCount(self) -> int: ...
    def bits(self) -> bytes: ...
    def byteCount(self) -> int: ...
    def bytesPerLine(self) -> int: ...
    def cacheKey(self) -> int: ...
    def color(self, i: int) -> int: ...
    def colorCount(self) -> int: ...
    def colorSpace(self) -> QColorSpace: ...
    def colorTable(self) -> typing.List[int]: ...
    def constBits(self) -> bytes: ...
    def constScanLine(self, arg__1: int) -> bytes: ...
    def convertTo(self, f: QImage.Format, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> None: ...
    def convertToColorSpace(self, arg__1: QColorSpace) -> None: ...
    @overload
    def convertToFormat(self, f: QImage.Format, colorTable: typing.List[int], flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> QImage: ...
    @overload
    def convertToFormat(self, f: QImage.Format, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> QImage: ...
    def convertToFormat_helper(self, format: QImage.Format, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag]) -> QImage: ...
    def convertToFormat_inplace(self, format: QImage.Format, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag]) -> bool: ...
    def convertedToColorSpace(self, arg__1: QColorSpace) -> QImage: ...
    @overload
    def copy(self, rect: PySide2.QtCore.QRect = ...) -> QImage: ...
    @overload
    def copy(self, x: int, y: int, w: int, h: int) -> QImage: ...
    def createAlphaMask(self, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> QImage: ...
    def createHeuristicMask(self, clipTight: bool = ...) -> QImage: ...
    def createMaskFromColor(self, color: int, mode: PySide2.QtCore.Qt.MaskMode = ...) -> QImage: ...
    def depth(self) -> int: ...
    def devType(self) -> int: ...
    def devicePixelRatio(self) -> float: ...
    def dotsPerMeterX(self) -> int: ...
    def dotsPerMeterY(self) -> int: ...
    @overload
    def fill(self, color: PySide2.QtCore.Qt.GlobalColor) -> None: ...
    @overload
    def fill(self, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def fill(self, pixel: int) -> None: ...
    def format(self) -> QImage.Format: ...
    @classmethod
    def fromData(cls, data: typing.Union[PySide2.QtCore.QByteArray,bytes], format: typing.Optional[str] = ...) -> QImage: ...
    def hasAlphaChannel(self) -> bool: ...
    def height(self) -> int: ...
    def invertPixels(self, mode: QImage.InvertMode = ...) -> None: ...
    def isGrayscale(self) -> bool: ...
    def isNull(self) -> bool: ...
    @overload
    def load(self, device: PySide2.QtCore.QIODevice, format: bytes) -> bool: ...
    @overload
    def load(self, fileName: str, format: typing.Optional[str] = ...) -> bool: ...
    def loadFromData(self, data: typing.Union[PySide2.QtCore.QByteArray,bytes], aformat: typing.Union[bytes,None] = ...) -> bool: ...
    def metric(self, metric: QPaintDevice.PaintDeviceMetric) -> int: ...
    def mirrored(self, horizontally: bool = ..., vertically: bool = ...) -> QImage: ...
    def mirrored_helper(self, horizontal: bool, vertical: bool) -> QImage: ...
    def mirrored_inplace(self, horizontal: bool, vertical: bool) -> None: ...
    def offset(self) -> PySide2.QtCore.QPoint: ...
    def paintEngine(self) -> QPaintEngine: ...
    @overload
    def pixel(self, pt: PySide2.QtCore.QPoint) -> int: ...
    @overload
    def pixel(self, x: int, y: int) -> int: ...
    @overload
    def pixelColor(self, pt: PySide2.QtCore.QPoint) -> QColor: ...
    @overload
    def pixelColor(self, x: int, y: int) -> QColor: ...
    def pixelFormat(self) -> QPixelFormat: ...
    @overload
    def pixelIndex(self, pt: PySide2.QtCore.QPoint) -> int: ...
    @overload
    def pixelIndex(self, x: int, y: int) -> int: ...
    def rect(self) -> PySide2.QtCore.QRect: ...
    def reinterpretAsFormat(self, f: QImage.Format) -> bool: ...
    def rgbSwapped(self) -> QImage: ...
    def rgbSwapped_helper(self) -> QImage: ...
    def rgbSwapped_inplace(self) -> None: ...
    @overload
    def save(self, device: PySide2.QtCore.QIODevice, format: typing.Optional[str] = ..., quality: int = ...) -> bool: ...
    @overload
    def save(self, fileName: str, format: typing.Optional[str] = ..., quality: int = ...) -> bool: ...
    @overload
    def scaled(self, s: PySide2.QtCore.QSize, aspectMode: PySide2.QtCore.Qt.AspectRatioMode = ..., mode: PySide2.QtCore.Qt.TransformationMode = ...) -> QImage: ...
    @overload
    def scaled(self, w: int, h: int, aspectMode: PySide2.QtCore.Qt.AspectRatioMode = ..., mode: PySide2.QtCore.Qt.TransformationMode = ...) -> QImage: ...
    def scaledToHeight(self, h: int, mode: PySide2.QtCore.Qt.TransformationMode = ...) -> QImage: ...
    def scaledToWidth(self, w: int, mode: PySide2.QtCore.Qt.TransformationMode = ...) -> QImage: ...
    def scanLine(self, arg__1: int) -> bytes: ...
    def setAlphaChannel(self, alphaChannel: QImage) -> None: ...
    def setColor(self, i: int, c: int) -> None: ...
    def setColorCount(self, arg__1: int) -> None: ...
    def setColorSpace(self, arg__1: QColorSpace) -> None: ...
    def setColorTable(self, colors: typing.List[int]) -> None: ...
    def setDevicePixelRatio(self, scaleFactor: float) -> None: ...
    def setDotsPerMeterX(self, arg__1: int) -> None: ...
    def setDotsPerMeterY(self, arg__1: int) -> None: ...
    def setOffset(self, arg__1: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def setPixel(self, pt: PySide2.QtCore.QPoint, index_or_rgb: int) -> None: ...
    @overload
    def setPixel(self, x: int, y: int, index_or_rgb: int) -> None: ...
    @overload
    def setPixelColor(self, pt: PySide2.QtCore.QPoint, c: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def setPixelColor(self, x: int, y: int, c: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setText(self, key: str, value: str) -> None: ...
    def size(self) -> PySide2.QtCore.QSize: ...
    def sizeInBytes(self) -> int: ...
    def smoothScaled(self, w: int, h: int) -> QImage: ...
    def swap(self, other: QImage) -> None: ...
    def text(self, key: str = ...) -> str: ...
    def textKeys(self) -> typing.List[str]: ...
    @classmethod
    def toImageFormat(cls, format: QPixelFormat) -> QImage.Format: ...
    @classmethod
    def toPixelFormat(cls, format: QImage.Format) -> QPixelFormat: ...
    @overload
    def transformed(self, matrix: QMatrix, mode: PySide2.QtCore.Qt.TransformationMode = ...) -> QImage: ...
    @overload
    def transformed(self, matrix: QTransform, mode: PySide2.QtCore.Qt.TransformationMode = ...) -> QImage: ...
    @classmethod
    @overload
    def trueMatrix(cls, arg__1: QMatrix, w: int, h: int) -> QMatrix: ...
    @classmethod
    @overload
    def trueMatrix(cls, arg__1: QTransform, w: int, h: int) -> QTransform: ...
    @overload
    def valid(self, pt: PySide2.QtCore.QPoint) -> bool: ...
    @overload
    def valid(self, x: int, y: int) -> bool: ...
    def width(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QImageIOHandler(shiboken2.Object):
    class ImageOption:
        Animation: ClassVar[QImageIOHandler.ImageOption] = ...
        BackgroundColor: ClassVar[QImageIOHandler.ImageOption] = ...
        ClipRect: ClassVar[QImageIOHandler.ImageOption] = ...
        CompressionRatio: ClassVar[QImageIOHandler.ImageOption] = ...
        Description: ClassVar[QImageIOHandler.ImageOption] = ...
        Endianness: ClassVar[QImageIOHandler.ImageOption] = ...
        Gamma: ClassVar[QImageIOHandler.ImageOption] = ...
        ImageFormat: ClassVar[QImageIOHandler.ImageOption] = ...
        ImageTransformation: ClassVar[QImageIOHandler.ImageOption] = ...
        IncrementalReading: ClassVar[QImageIOHandler.ImageOption] = ...
        Name: ClassVar[QImageIOHandler.ImageOption] = ...
        OptimizedWrite: ClassVar[QImageIOHandler.ImageOption] = ...
        ProgressiveScanWrite: ClassVar[QImageIOHandler.ImageOption] = ...
        Quality: ClassVar[QImageIOHandler.ImageOption] = ...
        ScaledClipRect: ClassVar[QImageIOHandler.ImageOption] = ...
        ScaledSize: ClassVar[QImageIOHandler.ImageOption] = ...
        Size: ClassVar[QImageIOHandler.ImageOption] = ...
        SubType: ClassVar[QImageIOHandler.ImageOption] = ...
        SupportedSubTypes: ClassVar[QImageIOHandler.ImageOption] = ...
        TransformedByDefault: ClassVar[QImageIOHandler.ImageOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QImageIOHandler.ImageOption: ...
        def __and__(self, other: typing.SupportsInt) -> QImageIOHandler.ImageOption: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QImageIOHandler.ImageOption: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QImageIOHandler.ImageOption: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QImageIOHandler.ImageOption: ...
        def __rand__(self, other: typing.SupportsInt) -> QImageIOHandler.ImageOption: ...
        def __rmul__(self, other: typing.SupportsInt) -> QImageIOHandler.ImageOption: ...
        def __ror__(self, other: typing.SupportsInt) -> QImageIOHandler.ImageOption: ...
        def __rsub__(self, other: typing.SupportsInt) -> QImageIOHandler.ImageOption: ...
        def __rxor__(self, other: typing.SupportsInt) -> QImageIOHandler.ImageOption: ...
        def __sub__(self, other: typing.SupportsInt) -> QImageIOHandler.ImageOption: ...
        def __xor__(self, other: typing.SupportsInt) -> QImageIOHandler.ImageOption: ...

    class Transformation:
        TransformationFlip: ClassVar[QImageIOHandler.Transformation] = ...
        TransformationFlipAndRotate90: ClassVar[QImageIOHandler.Transformation] = ...
        TransformationMirror: ClassVar[QImageIOHandler.Transformation] = ...
        TransformationMirrorAndRotate90: ClassVar[QImageIOHandler.Transformation] = ...
        TransformationNone: ClassVar[QImageIOHandler.Transformation] = ...
        TransformationRotate180: ClassVar[QImageIOHandler.Transformation] = ...
        TransformationRotate270: ClassVar[QImageIOHandler.Transformation] = ...
        TransformationRotate90: ClassVar[QImageIOHandler.Transformation] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QImageIOHandler.Transformations: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QImageIOHandler.Transformation: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QImageIOHandler.Transformations: ...
        def __rand__(self, other: typing.SupportsInt) -> QImageIOHandler.Transformations: ...
        def __ror__(self, other: typing.SupportsInt) -> QImageIOHandler.Transformations: ...
        def __rxor__(self, other: typing.SupportsInt) -> QImageIOHandler.Transformations: ...
        def __xor__(self, other: typing.SupportsInt) -> QImageIOHandler.Transformations: ...

    class Transformations:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QImageIOHandler.Transformations: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QImageIOHandler.Transformations: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QImageIOHandler.Transformations: ...
        def __rand__(self, other: typing.SupportsInt) -> QImageIOHandler.Transformations: ...
        def __ror__(self, other: typing.SupportsInt) -> QImageIOHandler.Transformations: ...
        def __rxor__(self, other: typing.SupportsInt) -> QImageIOHandler.Transformations: ...
        def __xor__(self, other: typing.SupportsInt) -> QImageIOHandler.Transformations: ...
    Animation: ClassVar[QImageIOHandler.ImageOption] = ...
    BackgroundColor: ClassVar[QImageIOHandler.ImageOption] = ...
    ClipRect: ClassVar[QImageIOHandler.ImageOption] = ...
    CompressionRatio: ClassVar[QImageIOHandler.ImageOption] = ...
    Description: ClassVar[QImageIOHandler.ImageOption] = ...
    Endianness: ClassVar[QImageIOHandler.ImageOption] = ...
    Gamma: ClassVar[QImageIOHandler.ImageOption] = ...
    ImageFormat: ClassVar[QImageIOHandler.ImageOption] = ...
    ImageTransformation: ClassVar[QImageIOHandler.ImageOption] = ...
    IncrementalReading: ClassVar[QImageIOHandler.ImageOption] = ...
    Name: ClassVar[QImageIOHandler.ImageOption] = ...
    OptimizedWrite: ClassVar[QImageIOHandler.ImageOption] = ...
    ProgressiveScanWrite: ClassVar[QImageIOHandler.ImageOption] = ...
    Quality: ClassVar[QImageIOHandler.ImageOption] = ...
    ScaledClipRect: ClassVar[QImageIOHandler.ImageOption] = ...
    ScaledSize: ClassVar[QImageIOHandler.ImageOption] = ...
    Size: ClassVar[QImageIOHandler.ImageOption] = ...
    SubType: ClassVar[QImageIOHandler.ImageOption] = ...
    SupportedSubTypes: ClassVar[QImageIOHandler.ImageOption] = ...
    TransformationFlip: ClassVar[QImageIOHandler.Transformation] = ...
    TransformationFlipAndRotate90: ClassVar[QImageIOHandler.Transformation] = ...
    TransformationMirror: ClassVar[QImageIOHandler.Transformation] = ...
    TransformationMirrorAndRotate90: ClassVar[QImageIOHandler.Transformation] = ...
    TransformationNone: ClassVar[QImageIOHandler.Transformation] = ...
    TransformationRotate180: ClassVar[QImageIOHandler.Transformation] = ...
    TransformationRotate270: ClassVar[QImageIOHandler.Transformation] = ...
    TransformationRotate90: ClassVar[QImageIOHandler.Transformation] = ...
    TransformedByDefault: ClassVar[QImageIOHandler.ImageOption] = ...
    def __init__(self) -> None: ...
    def canRead(self) -> bool: ...
    def currentImageNumber(self) -> int: ...
    def currentImageRect(self) -> PySide2.QtCore.QRect: ...
    def device(self) -> PySide2.QtCore.QIODevice: ...
    def format(self) -> PySide2.QtCore.QByteArray: ...
    def imageCount(self) -> int: ...
    def jumpToImage(self, imageNumber: int) -> bool: ...
    def jumpToNextImage(self) -> bool: ...
    def loopCount(self) -> int: ...
    def name(self) -> PySide2.QtCore.QByteArray: ...
    def nextImageDelay(self) -> int: ...
    def option(self, option: QImageIOHandler.ImageOption) -> typing.Any: ...
    def read(self, image: QImage) -> bool: ...
    def setDevice(self, device: PySide2.QtCore.QIODevice) -> None: ...
    def setFormat(self, format: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setOption(self, option: QImageIOHandler.ImageOption, value: typing.Any) -> None: ...
    def supportsOption(self, option: QImageIOHandler.ImageOption) -> bool: ...
    def write(self, image: QImage) -> bool: ...

class QImageReader(shiboken2.Object):
    class ImageReaderError:
        DeviceError: ClassVar[QImageReader.ImageReaderError] = ...
        FileNotFoundError: ClassVar[QImageReader.ImageReaderError] = ...
        InvalidDataError: ClassVar[QImageReader.ImageReaderError] = ...
        UnknownError: ClassVar[QImageReader.ImageReaderError] = ...
        UnsupportedFormatError: ClassVar[QImageReader.ImageReaderError] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QImageReader.ImageReaderError: ...
        def __and__(self, other: typing.SupportsInt) -> QImageReader.ImageReaderError: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QImageReader.ImageReaderError: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QImageReader.ImageReaderError: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QImageReader.ImageReaderError: ...
        def __rand__(self, other: typing.SupportsInt) -> QImageReader.ImageReaderError: ...
        def __rmul__(self, other: typing.SupportsInt) -> QImageReader.ImageReaderError: ...
        def __ror__(self, other: typing.SupportsInt) -> QImageReader.ImageReaderError: ...
        def __rsub__(self, other: typing.SupportsInt) -> QImageReader.ImageReaderError: ...
        def __rxor__(self, other: typing.SupportsInt) -> QImageReader.ImageReaderError: ...
        def __sub__(self, other: typing.SupportsInt) -> QImageReader.ImageReaderError: ...
        def __xor__(self, other: typing.SupportsInt) -> QImageReader.ImageReaderError: ...
    DeviceError: ClassVar[QImageReader.ImageReaderError] = ...
    FileNotFoundError: ClassVar[QImageReader.ImageReaderError] = ...
    InvalidDataError: ClassVar[QImageReader.ImageReaderError] = ...
    UnknownError: ClassVar[QImageReader.ImageReaderError] = ...
    UnsupportedFormatError: ClassVar[QImageReader.ImageReaderError] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, device: PySide2.QtCore.QIODevice, format: typing.Union[PySide2.QtCore.QByteArray,bytes] = ...) -> None: ...
    @overload
    def __init__(self, fileName: str, format: typing.Union[PySide2.QtCore.QByteArray,bytes] = ...) -> None: ...
    def autoDetectImageFormat(self) -> bool: ...
    def autoTransform(self) -> bool: ...
    def backgroundColor(self) -> QColor: ...
    def canRead(self) -> bool: ...
    def clipRect(self) -> PySide2.QtCore.QRect: ...
    def currentImageNumber(self) -> int: ...
    def currentImageRect(self) -> PySide2.QtCore.QRect: ...
    def decideFormatFromContent(self) -> bool: ...
    def device(self) -> PySide2.QtCore.QIODevice: ...
    def error(self) -> QImageReader.ImageReaderError: ...
    def errorString(self) -> str: ...
    def fileName(self) -> str: ...
    def format(self) -> PySide2.QtCore.QByteArray: ...
    def gamma(self) -> float: ...
    def imageCount(self) -> int: ...
    @classmethod
    @overload
    def imageFormat(cls, device: PySide2.QtCore.QIODevice) -> PySide2.QtCore.QByteArray: ...
    @classmethod
    @overload
    def imageFormat(cls, fileName: str) -> PySide2.QtCore.QByteArray: ...
    @classmethod
    @overload
    def imageFormat(cls, self) -> QImage.Format: ...
    @classmethod
    def imageFormatsForMimeType(cls, mimeType: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def jumpToImage(self, imageNumber: int) -> bool: ...
    def jumpToNextImage(self) -> bool: ...
    def loopCount(self) -> int: ...
    def nextImageDelay(self) -> int: ...
    def quality(self) -> int: ...
    def read(self) -> QImage: ...
    def scaledClipRect(self) -> PySide2.QtCore.QRect: ...
    def scaledSize(self) -> PySide2.QtCore.QSize: ...
    def setAutoDetectImageFormat(self, enabled: bool) -> None: ...
    def setAutoTransform(self, enabled: bool) -> None: ...
    def setBackgroundColor(self, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setClipRect(self, rect: PySide2.QtCore.QRect) -> None: ...
    def setDecideFormatFromContent(self, ignored: bool) -> None: ...
    def setDevice(self, device: PySide2.QtCore.QIODevice) -> None: ...
    def setFileName(self, fileName: str) -> None: ...
    def setFormat(self, format: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setGamma(self, gamma: float) -> None: ...
    def setQuality(self, quality: int) -> None: ...
    def setScaledClipRect(self, rect: PySide2.QtCore.QRect) -> None: ...
    def setScaledSize(self, size: PySide2.QtCore.QSize) -> None: ...
    def size(self) -> PySide2.QtCore.QSize: ...
    def subType(self) -> PySide2.QtCore.QByteArray: ...
    @classmethod
    def supportedImageFormats(cls) -> typing.List[PySide2.QtCore.QByteArray]: ...
    @classmethod
    def supportedMimeTypes(cls) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def supportedSubTypes(self) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def supportsAnimation(self) -> bool: ...
    def supportsOption(self, option: QImageIOHandler.ImageOption) -> bool: ...
    def text(self, key: str) -> str: ...
    def textKeys(self) -> typing.List[str]: ...
    def transformation(self) -> typing.Union[QImageIOHandler.Transformations,QImageIOHandler.Transformation]: ...

class QImageWriter(shiboken2.Object):
    class ImageWriterError:
        DeviceError: ClassVar[QImageWriter.ImageWriterError] = ...
        InvalidImageError: ClassVar[QImageWriter.ImageWriterError] = ...
        UnknownError: ClassVar[QImageWriter.ImageWriterError] = ...
        UnsupportedFormatError: ClassVar[QImageWriter.ImageWriterError] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QImageWriter.ImageWriterError: ...
        def __and__(self, other: typing.SupportsInt) -> QImageWriter.ImageWriterError: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QImageWriter.ImageWriterError: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QImageWriter.ImageWriterError: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QImageWriter.ImageWriterError: ...
        def __rand__(self, other: typing.SupportsInt) -> QImageWriter.ImageWriterError: ...
        def __rmul__(self, other: typing.SupportsInt) -> QImageWriter.ImageWriterError: ...
        def __ror__(self, other: typing.SupportsInt) -> QImageWriter.ImageWriterError: ...
        def __rsub__(self, other: typing.SupportsInt) -> QImageWriter.ImageWriterError: ...
        def __rxor__(self, other: typing.SupportsInt) -> QImageWriter.ImageWriterError: ...
        def __sub__(self, other: typing.SupportsInt) -> QImageWriter.ImageWriterError: ...
        def __xor__(self, other: typing.SupportsInt) -> QImageWriter.ImageWriterError: ...
    DeviceError: ClassVar[QImageWriter.ImageWriterError] = ...
    InvalidImageError: ClassVar[QImageWriter.ImageWriterError] = ...
    UnknownError: ClassVar[QImageWriter.ImageWriterError] = ...
    UnsupportedFormatError: ClassVar[QImageWriter.ImageWriterError] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, device: PySide2.QtCore.QIODevice, format: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    @overload
    def __init__(self, fileName: str, format: typing.Union[PySide2.QtCore.QByteArray,bytes] = ...) -> None: ...
    def canWrite(self) -> bool: ...
    def compression(self) -> int: ...
    def description(self) -> str: ...
    def device(self) -> PySide2.QtCore.QIODevice: ...
    def error(self) -> QImageWriter.ImageWriterError: ...
    def errorString(self) -> str: ...
    def fileName(self) -> str: ...
    def format(self) -> PySide2.QtCore.QByteArray: ...
    def gamma(self) -> float: ...
    @classmethod
    def imageFormatsForMimeType(cls, mimeType: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def optimizedWrite(self) -> bool: ...
    def progressiveScanWrite(self) -> bool: ...
    def quality(self) -> int: ...
    def setCompression(self, compression: int) -> None: ...
    def setDescription(self, description: str) -> None: ...
    def setDevice(self, device: PySide2.QtCore.QIODevice) -> None: ...
    def setFileName(self, fileName: str) -> None: ...
    def setFormat(self, format: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setGamma(self, gamma: float) -> None: ...
    def setOptimizedWrite(self, optimize: bool) -> None: ...
    def setProgressiveScanWrite(self, progressive: bool) -> None: ...
    def setQuality(self, quality: int) -> None: ...
    def setSubType(self, type: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setText(self, key: str, text: str) -> None: ...
    def setTransformation(self, orientation: typing.Union[QImageIOHandler.Transformations,QImageIOHandler.Transformation]) -> None: ...
    def subType(self) -> PySide2.QtCore.QByteArray: ...
    @classmethod
    def supportedImageFormats(cls) -> typing.List[PySide2.QtCore.QByteArray]: ...
    @classmethod
    def supportedMimeTypes(cls) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def supportedSubTypes(self) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def supportsOption(self, option: QImageIOHandler.ImageOption) -> bool: ...
    def transformation(self) -> typing.Union[QImageIOHandler.Transformations,QImageIOHandler.Transformation]: ...
    def write(self, image: QImage) -> bool: ...

class QInputEvent(PySide2.QtCore.QEvent):
    ts: Any
    def __init__(self, type: PySide2.QtCore.QEvent.Type, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier] = ...) -> None: ...
    def modifiers(self) -> typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]: ...
    def setModifiers(self, amodifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> None: ...
    def setTimestamp(self, atimestamp: int) -> None: ...
    def timestamp(self) -> int: ...

class QInputMethod(PySide2.QtCore.QObject):
    class Action:
        Click: ClassVar[QInputMethod.Action] = ...
        ContextMenu: ClassVar[QInputMethod.Action] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QInputMethod.Action: ...
        def __and__(self, other: typing.SupportsInt) -> QInputMethod.Action: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QInputMethod.Action: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QInputMethod.Action: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QInputMethod.Action: ...
        def __rand__(self, other: typing.SupportsInt) -> QInputMethod.Action: ...
        def __rmul__(self, other: typing.SupportsInt) -> QInputMethod.Action: ...
        def __ror__(self, other: typing.SupportsInt) -> QInputMethod.Action: ...
        def __rsub__(self, other: typing.SupportsInt) -> QInputMethod.Action: ...
        def __rxor__(self, other: typing.SupportsInt) -> QInputMethod.Action: ...
        def __sub__(self, other: typing.SupportsInt) -> QInputMethod.Action: ...
        def __xor__(self, other: typing.SupportsInt) -> QInputMethod.Action: ...
    Click: ClassVar[QInputMethod.Action] = ...
    ContextMenu: ClassVar[QInputMethod.Action] = ...
    anchorRectangleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    animatingChanged: ClassVar[PySide2.QtCore.Signal] = ...
    cursorRectangleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    inputDirectionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    inputItemClipRectangleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    keyboardRectangleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    localeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    visibleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def anchorRectangle(self) -> PySide2.QtCore.QRectF: ...
    def commit(self) -> None: ...
    def cursorRectangle(self) -> PySide2.QtCore.QRectF: ...
    def hide(self) -> None: ...
    def inputDirection(self) -> PySide2.QtCore.Qt.LayoutDirection: ...
    def inputItemClipRectangle(self) -> PySide2.QtCore.QRectF: ...
    def inputItemRectangle(self) -> PySide2.QtCore.QRectF: ...
    def inputItemTransform(self) -> QTransform: ...
    def invokeAction(self, a: QInputMethod.Action, cursorPosition: int) -> None: ...
    def isAnimating(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def keyboardRectangle(self) -> PySide2.QtCore.QRectF: ...
    def locale(self) -> PySide2.QtCore.QLocale: ...
    @classmethod
    def queryFocusObject(cls, query: PySide2.QtCore.Qt.InputMethodQuery, argument: typing.Any) -> typing.Any: ...
    def reset(self) -> None: ...
    def setInputItemRectangle(self, rect: PySide2.QtCore.QRectF) -> None: ...
    def setInputItemTransform(self, transform: QTransform) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def show(self) -> None: ...
    def update(self, queries: typing.Union[PySide2.QtCore.Qt.InputMethodQueries,PySide2.QtCore.Qt.InputMethodQuery]) -> None: ...

class QInputMethodEvent(PySide2.QtCore.QEvent):
    class Attribute(shiboken2.Object):
        length: Any
        start: Any
        type: Any
        value: Any
        @overload
        def __init__(self, Attribute: QInputMethodEvent.Attribute) -> None: ...
        @overload
        def __init__(self, typ: QInputMethodEvent.AttributeType, s: int, l: int) -> None: ...
        @overload
        def __init__(self, typ: QInputMethodEvent.AttributeType, s: int, l: int, val: typing.Any) -> None: ...
        def __copy__(self) -> None: ...

    class AttributeType:
        Cursor: ClassVar[QInputMethodEvent.AttributeType] = ...
        Language: ClassVar[QInputMethodEvent.AttributeType] = ...
        Ruby: ClassVar[QInputMethodEvent.AttributeType] = ...
        Selection: ClassVar[QInputMethodEvent.AttributeType] = ...
        TextFormat: ClassVar[QInputMethodEvent.AttributeType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QInputMethodEvent.AttributeType: ...
        def __and__(self, other: typing.SupportsInt) -> QInputMethodEvent.AttributeType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QInputMethodEvent.AttributeType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QInputMethodEvent.AttributeType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QInputMethodEvent.AttributeType: ...
        def __rand__(self, other: typing.SupportsInt) -> QInputMethodEvent.AttributeType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QInputMethodEvent.AttributeType: ...
        def __ror__(self, other: typing.SupportsInt) -> QInputMethodEvent.AttributeType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QInputMethodEvent.AttributeType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QInputMethodEvent.AttributeType: ...
        def __sub__(self, other: typing.SupportsInt) -> QInputMethodEvent.AttributeType: ...
        def __xor__(self, other: typing.SupportsInt) -> QInputMethodEvent.AttributeType: ...
    Cursor: ClassVar[QInputMethodEvent.AttributeType] = ...
    Language: ClassVar[QInputMethodEvent.AttributeType] = ...
    Ruby: ClassVar[QInputMethodEvent.AttributeType] = ...
    Selection: ClassVar[QInputMethodEvent.AttributeType] = ...
    TextFormat: ClassVar[QInputMethodEvent.AttributeType] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QInputMethodEvent) -> None: ...
    @overload
    def __init__(self, preeditText: str, attributes: typing.Sequence[QInputMethodEvent.Attribute]) -> None: ...
    def attributes(self) -> typing.List[QInputMethodEvent.Attribute]: ...
    def commitString(self) -> str: ...
    def preeditString(self) -> str: ...
    def replacementLength(self) -> int: ...
    def replacementStart(self) -> int: ...
    def setCommitString(self, commitString: str, replaceFrom: int = ..., replaceLength: int = ...) -> None: ...

class QInputMethodQueryEvent(PySide2.QtCore.QEvent):
    def __init__(self, queries: typing.Union[PySide2.QtCore.Qt.InputMethodQueries,PySide2.QtCore.Qt.InputMethodQuery]) -> None: ...
    def queries(self) -> typing.Union[PySide2.QtCore.Qt.InputMethodQueries,PySide2.QtCore.Qt.InputMethodQuery]: ...
    def setValue(self, query: PySide2.QtCore.Qt.InputMethodQuery, value: typing.Any) -> None: ...
    def value(self, query: PySide2.QtCore.Qt.InputMethodQuery) -> typing.Any: ...

class QIntValidator(QValidator):
    bottomChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    topChanged: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, bottom: int, top: int, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., bottomChanged: typing.Callable = ..., changed: typing.Callable = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., topChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., bottom: int = ..., bottomChanged: typing.Callable = ..., changed: typing.Callable = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., top: int = ..., topChanged: typing.Callable = ...) -> None: ...
    def bottom(self) -> int: ...
    def fixup(self, input: str) -> None: ...
    def setBottom(self, arg__1: int) -> None: ...
    def setRange(self, bottom: int, top: int) -> None: ...
    def setTop(self, arg__1: int) -> None: ...
    def top(self) -> int: ...
    def validate(self, arg__1: str, arg__2: int) -> QValidator.State: ...

class QKeyEvent(QInputEvent):
    autor: Any
    nModifiers: Any
    nScanCode: Any
    nVirtualKey: Any
    @overload
    def __init__(self, type: PySide2.QtCore.QEvent.Type, key: int, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier], nativeScanCode: int, nativeVirtualKey: int, nativeModifiers: int, text: str = ..., autorep: bool = ..., count: int = ...) -> None: ...
    @overload
    def __init__(self, type: PySide2.QtCore.QEvent.Type, key: int, modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier], text: str = ..., autorep: bool = ..., count: int = ...) -> None: ...
    def count(self) -> int: ...
    def isAutoRepeat(self) -> bool: ...
    def key(self) -> int: ...
    def matches(self, key: QKeySequence.StandardKey) -> bool: ...
    def modifiers(self) -> typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]: ...
    def nativeModifiers(self) -> int: ...
    def nativeScanCode(self) -> int: ...
    def nativeVirtualKey(self) -> int: ...
    def text(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QKeySequence(shiboken2.Object):
    class SequenceFormat:
        NativeText: ClassVar[QKeySequence.SequenceFormat] = ...
        PortableText: ClassVar[QKeySequence.SequenceFormat] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QKeySequence.SequenceFormat: ...
        def __and__(self, other: typing.SupportsInt) -> QKeySequence.SequenceFormat: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QKeySequence.SequenceFormat: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QKeySequence.SequenceFormat: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QKeySequence.SequenceFormat: ...
        def __rand__(self, other: typing.SupportsInt) -> QKeySequence.SequenceFormat: ...
        def __rmul__(self, other: typing.SupportsInt) -> QKeySequence.SequenceFormat: ...
        def __ror__(self, other: typing.SupportsInt) -> QKeySequence.SequenceFormat: ...
        def __rsub__(self, other: typing.SupportsInt) -> QKeySequence.SequenceFormat: ...
        def __rxor__(self, other: typing.SupportsInt) -> QKeySequence.SequenceFormat: ...
        def __sub__(self, other: typing.SupportsInt) -> QKeySequence.SequenceFormat: ...
        def __xor__(self, other: typing.SupportsInt) -> QKeySequence.SequenceFormat: ...

    class SequenceMatch:
        ExactMatch: ClassVar[QKeySequence.SequenceMatch] = ...
        NoMatch: ClassVar[QKeySequence.SequenceMatch] = ...
        PartialMatch: ClassVar[QKeySequence.SequenceMatch] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QKeySequence.SequenceMatch: ...
        def __and__(self, other: typing.SupportsInt) -> QKeySequence.SequenceMatch: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QKeySequence.SequenceMatch: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QKeySequence.SequenceMatch: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QKeySequence.SequenceMatch: ...
        def __rand__(self, other: typing.SupportsInt) -> QKeySequence.SequenceMatch: ...
        def __rmul__(self, other: typing.SupportsInt) -> QKeySequence.SequenceMatch: ...
        def __ror__(self, other: typing.SupportsInt) -> QKeySequence.SequenceMatch: ...
        def __rsub__(self, other: typing.SupportsInt) -> QKeySequence.SequenceMatch: ...
        def __rxor__(self, other: typing.SupportsInt) -> QKeySequence.SequenceMatch: ...
        def __sub__(self, other: typing.SupportsInt) -> QKeySequence.SequenceMatch: ...
        def __xor__(self, other: typing.SupportsInt) -> QKeySequence.SequenceMatch: ...

    class StandardKey:
        AddTab: ClassVar[QKeySequence.StandardKey] = ...
        Back: ClassVar[QKeySequence.StandardKey] = ...
        Backspace: ClassVar[QKeySequence.StandardKey] = ...
        Bold: ClassVar[QKeySequence.StandardKey] = ...
        Cancel: ClassVar[QKeySequence.StandardKey] = ...
        Close: ClassVar[QKeySequence.StandardKey] = ...
        Copy: ClassVar[QKeySequence.StandardKey] = ...
        Cut: ClassVar[QKeySequence.StandardKey] = ...
        Delete: ClassVar[QKeySequence.StandardKey] = ...
        DeleteCompleteLine: ClassVar[QKeySequence.StandardKey] = ...
        DeleteEndOfLine: ClassVar[QKeySequence.StandardKey] = ...
        DeleteEndOfWord: ClassVar[QKeySequence.StandardKey] = ...
        DeleteStartOfWord: ClassVar[QKeySequence.StandardKey] = ...
        Deselect: ClassVar[QKeySequence.StandardKey] = ...
        Find: ClassVar[QKeySequence.StandardKey] = ...
        FindNext: ClassVar[QKeySequence.StandardKey] = ...
        FindPrevious: ClassVar[QKeySequence.StandardKey] = ...
        Forward: ClassVar[QKeySequence.StandardKey] = ...
        FullScreen: ClassVar[QKeySequence.StandardKey] = ...
        HelpContents: ClassVar[QKeySequence.StandardKey] = ...
        InsertLineSeparator: ClassVar[QKeySequence.StandardKey] = ...
        InsertParagraphSeparator: ClassVar[QKeySequence.StandardKey] = ...
        Italic: ClassVar[QKeySequence.StandardKey] = ...
        MoveToEndOfBlock: ClassVar[QKeySequence.StandardKey] = ...
        MoveToEndOfDocument: ClassVar[QKeySequence.StandardKey] = ...
        MoveToEndOfLine: ClassVar[QKeySequence.StandardKey] = ...
        MoveToNextChar: ClassVar[QKeySequence.StandardKey] = ...
        MoveToNextLine: ClassVar[QKeySequence.StandardKey] = ...
        MoveToNextPage: ClassVar[QKeySequence.StandardKey] = ...
        MoveToNextWord: ClassVar[QKeySequence.StandardKey] = ...
        MoveToPreviousChar: ClassVar[QKeySequence.StandardKey] = ...
        MoveToPreviousLine: ClassVar[QKeySequence.StandardKey] = ...
        MoveToPreviousPage: ClassVar[QKeySequence.StandardKey] = ...
        MoveToPreviousWord: ClassVar[QKeySequence.StandardKey] = ...
        MoveToStartOfBlock: ClassVar[QKeySequence.StandardKey] = ...
        MoveToStartOfDocument: ClassVar[QKeySequence.StandardKey] = ...
        MoveToStartOfLine: ClassVar[QKeySequence.StandardKey] = ...
        New: ClassVar[QKeySequence.StandardKey] = ...
        NextChild: ClassVar[QKeySequence.StandardKey] = ...
        Open: ClassVar[QKeySequence.StandardKey] = ...
        Paste: ClassVar[QKeySequence.StandardKey] = ...
        Preferences: ClassVar[QKeySequence.StandardKey] = ...
        PreviousChild: ClassVar[QKeySequence.StandardKey] = ...
        Print: ClassVar[QKeySequence.StandardKey] = ...
        Quit: ClassVar[QKeySequence.StandardKey] = ...
        Redo: ClassVar[QKeySequence.StandardKey] = ...
        Refresh: ClassVar[QKeySequence.StandardKey] = ...
        Replace: ClassVar[QKeySequence.StandardKey] = ...
        Save: ClassVar[QKeySequence.StandardKey] = ...
        SaveAs: ClassVar[QKeySequence.StandardKey] = ...
        SelectAll: ClassVar[QKeySequence.StandardKey] = ...
        SelectEndOfBlock: ClassVar[QKeySequence.StandardKey] = ...
        SelectEndOfDocument: ClassVar[QKeySequence.StandardKey] = ...
        SelectEndOfLine: ClassVar[QKeySequence.StandardKey] = ...
        SelectNextChar: ClassVar[QKeySequence.StandardKey] = ...
        SelectNextLine: ClassVar[QKeySequence.StandardKey] = ...
        SelectNextPage: ClassVar[QKeySequence.StandardKey] = ...
        SelectNextWord: ClassVar[QKeySequence.StandardKey] = ...
        SelectPreviousChar: ClassVar[QKeySequence.StandardKey] = ...
        SelectPreviousLine: ClassVar[QKeySequence.StandardKey] = ...
        SelectPreviousPage: ClassVar[QKeySequence.StandardKey] = ...
        SelectPreviousWord: ClassVar[QKeySequence.StandardKey] = ...
        SelectStartOfBlock: ClassVar[QKeySequence.StandardKey] = ...
        SelectStartOfDocument: ClassVar[QKeySequence.StandardKey] = ...
        SelectStartOfLine: ClassVar[QKeySequence.StandardKey] = ...
        Underline: ClassVar[QKeySequence.StandardKey] = ...
        Undo: ClassVar[QKeySequence.StandardKey] = ...
        UnknownKey: ClassVar[QKeySequence.StandardKey] = ...
        WhatsThis: ClassVar[QKeySequence.StandardKey] = ...
        ZoomIn: ClassVar[QKeySequence.StandardKey] = ...
        ZoomOut: ClassVar[QKeySequence.StandardKey] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QKeySequence.StandardKey: ...
        def __and__(self, other: typing.SupportsInt) -> QKeySequence.StandardKey: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QKeySequence.StandardKey: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QKeySequence.StandardKey: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QKeySequence.StandardKey: ...
        def __rand__(self, other: typing.SupportsInt) -> QKeySequence.StandardKey: ...
        def __rmul__(self, other: typing.SupportsInt) -> QKeySequence.StandardKey: ...
        def __ror__(self, other: typing.SupportsInt) -> QKeySequence.StandardKey: ...
        def __rsub__(self, other: typing.SupportsInt) -> QKeySequence.StandardKey: ...
        def __rxor__(self, other: typing.SupportsInt) -> QKeySequence.StandardKey: ...
        def __sub__(self, other: typing.SupportsInt) -> QKeySequence.StandardKey: ...
        def __xor__(self, other: typing.SupportsInt) -> QKeySequence.StandardKey: ...
    AddTab: ClassVar[QKeySequence.StandardKey] = ...
    Back: ClassVar[QKeySequence.StandardKey] = ...
    Backspace: ClassVar[QKeySequence.StandardKey] = ...
    Bold: ClassVar[QKeySequence.StandardKey] = ...
    Cancel: ClassVar[QKeySequence.StandardKey] = ...
    Close: ClassVar[QKeySequence.StandardKey] = ...
    Copy: ClassVar[QKeySequence.StandardKey] = ...
    Cut: ClassVar[QKeySequence.StandardKey] = ...
    Delete: ClassVar[QKeySequence.StandardKey] = ...
    DeleteCompleteLine: ClassVar[QKeySequence.StandardKey] = ...
    DeleteEndOfLine: ClassVar[QKeySequence.StandardKey] = ...
    DeleteEndOfWord: ClassVar[QKeySequence.StandardKey] = ...
    DeleteStartOfWord: ClassVar[QKeySequence.StandardKey] = ...
    Deselect: ClassVar[QKeySequence.StandardKey] = ...
    ExactMatch: ClassVar[QKeySequence.SequenceMatch] = ...
    Find: ClassVar[QKeySequence.StandardKey] = ...
    FindNext: ClassVar[QKeySequence.StandardKey] = ...
    FindPrevious: ClassVar[QKeySequence.StandardKey] = ...
    Forward: ClassVar[QKeySequence.StandardKey] = ...
    FullScreen: ClassVar[QKeySequence.StandardKey] = ...
    HelpContents: ClassVar[QKeySequence.StandardKey] = ...
    InsertLineSeparator: ClassVar[QKeySequence.StandardKey] = ...
    InsertParagraphSeparator: ClassVar[QKeySequence.StandardKey] = ...
    Italic: ClassVar[QKeySequence.StandardKey] = ...
    MoveToEndOfBlock: ClassVar[QKeySequence.StandardKey] = ...
    MoveToEndOfDocument: ClassVar[QKeySequence.StandardKey] = ...
    MoveToEndOfLine: ClassVar[QKeySequence.StandardKey] = ...
    MoveToNextChar: ClassVar[QKeySequence.StandardKey] = ...
    MoveToNextLine: ClassVar[QKeySequence.StandardKey] = ...
    MoveToNextPage: ClassVar[QKeySequence.StandardKey] = ...
    MoveToNextWord: ClassVar[QKeySequence.StandardKey] = ...
    MoveToPreviousChar: ClassVar[QKeySequence.StandardKey] = ...
    MoveToPreviousLine: ClassVar[QKeySequence.StandardKey] = ...
    MoveToPreviousPage: ClassVar[QKeySequence.StandardKey] = ...
    MoveToPreviousWord: ClassVar[QKeySequence.StandardKey] = ...
    MoveToStartOfBlock: ClassVar[QKeySequence.StandardKey] = ...
    MoveToStartOfDocument: ClassVar[QKeySequence.StandardKey] = ...
    MoveToStartOfLine: ClassVar[QKeySequence.StandardKey] = ...
    NativeText: ClassVar[QKeySequence.SequenceFormat] = ...
    New: ClassVar[QKeySequence.StandardKey] = ...
    NextChild: ClassVar[QKeySequence.StandardKey] = ...
    NoMatch: ClassVar[QKeySequence.SequenceMatch] = ...
    Open: ClassVar[QKeySequence.StandardKey] = ...
    PartialMatch: ClassVar[QKeySequence.SequenceMatch] = ...
    Paste: ClassVar[QKeySequence.StandardKey] = ...
    PortableText: ClassVar[QKeySequence.SequenceFormat] = ...
    Preferences: ClassVar[QKeySequence.StandardKey] = ...
    PreviousChild: ClassVar[QKeySequence.StandardKey] = ...
    Print: ClassVar[QKeySequence.StandardKey] = ...
    Quit: ClassVar[QKeySequence.StandardKey] = ...
    Redo: ClassVar[QKeySequence.StandardKey] = ...
    Refresh: ClassVar[QKeySequence.StandardKey] = ...
    Replace: ClassVar[QKeySequence.StandardKey] = ...
    Save: ClassVar[QKeySequence.StandardKey] = ...
    SaveAs: ClassVar[QKeySequence.StandardKey] = ...
    SelectAll: ClassVar[QKeySequence.StandardKey] = ...
    SelectEndOfBlock: ClassVar[QKeySequence.StandardKey] = ...
    SelectEndOfDocument: ClassVar[QKeySequence.StandardKey] = ...
    SelectEndOfLine: ClassVar[QKeySequence.StandardKey] = ...
    SelectNextChar: ClassVar[QKeySequence.StandardKey] = ...
    SelectNextLine: ClassVar[QKeySequence.StandardKey] = ...
    SelectNextPage: ClassVar[QKeySequence.StandardKey] = ...
    SelectNextWord: ClassVar[QKeySequence.StandardKey] = ...
    SelectPreviousChar: ClassVar[QKeySequence.StandardKey] = ...
    SelectPreviousLine: ClassVar[QKeySequence.StandardKey] = ...
    SelectPreviousPage: ClassVar[QKeySequence.StandardKey] = ...
    SelectPreviousWord: ClassVar[QKeySequence.StandardKey] = ...
    SelectStartOfBlock: ClassVar[QKeySequence.StandardKey] = ...
    SelectStartOfDocument: ClassVar[QKeySequence.StandardKey] = ...
    SelectStartOfLine: ClassVar[QKeySequence.StandardKey] = ...
    Underline: ClassVar[QKeySequence.StandardKey] = ...
    Undo: ClassVar[QKeySequence.StandardKey] = ...
    UnknownKey: ClassVar[QKeySequence.StandardKey] = ...
    WhatsThis: ClassVar[QKeySequence.StandardKey] = ...
    ZoomIn: ClassVar[QKeySequence.StandardKey] = ...
    ZoomOut: ClassVar[QKeySequence.StandardKey] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, k1: int, k2: int = ..., k3: int = ..., k4: int = ...) -> None: ...
    @overload
    def __init__(self, key: QKeySequence.StandardKey) -> None: ...
    @overload
    def __init__(self, key: str, format: QKeySequence.SequenceFormat = ...) -> None: ...
    @overload
    def __init__(self, ks: typing.Union[QKeySequence,str]) -> None: ...
    def count(self) -> int: ...
    @classmethod
    def fromString(cls, str: str, format: QKeySequence.SequenceFormat = ...) -> QKeySequence: ...
    def isEmpty(self) -> bool: ...
    @classmethod
    def keyBindings(cls, key: QKeySequence.StandardKey) -> typing.List[QKeySequence]: ...
    @classmethod
    def listFromString(cls, str: str, format: QKeySequence.SequenceFormat = ...) -> typing.List[QKeySequence]: ...
    @classmethod
    def listToString(cls, list: typing.Sequence[QKeySequence], format: QKeySequence.SequenceFormat = ...) -> str: ...
    def matches(self, seq: typing.Union[QKeySequence,str]) -> QKeySequence.SequenceMatch: ...
    @classmethod
    def mnemonic(cls, text: str) -> QKeySequence: ...
    def swap(self, other: typing.Union[QKeySequence,str]) -> None: ...
    def toString(self, format: QKeySequence.SequenceFormat = ...) -> str: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, in_: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, out: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QLinearGradient(QGradient):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QLinearGradient: QLinearGradient) -> None: ...
    @overload
    def __init__(self, start: PySide2.QtCore.QPointF, finalStop: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def __init__(self, xStart: float, yStart: float, xFinalStop: float, yFinalStop: float) -> None: ...
    def finalStop(self) -> PySide2.QtCore.QPointF: ...
    @overload
    def setFinalStop(self, stop: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def setFinalStop(self, x: float, y: float) -> None: ...
    @overload
    def setStart(self, start: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def setStart(self, x: float, y: float) -> None: ...
    def start(self) -> PySide2.QtCore.QPointF: ...
    def __copy__(self) -> None: ...

class QMatrix(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, m11: float, m12: float, m21: float, m22: float, dx: float, dy: float) -> None: ...
    @overload
    def __init__(self, other: QMatrix) -> None: ...
    def determinant(self) -> float: ...
    def dx(self) -> float: ...
    def dy(self) -> float: ...
    def inverted(self) -> typing.Tuple[QMatrix,bool]: ...
    def isIdentity(self) -> bool: ...
    def isInvertible(self) -> bool: ...
    def m11(self) -> float: ...
    def m12(self) -> float: ...
    def m21(self) -> float: ...
    def m22(self) -> float: ...
    @overload
    def map(self, a: QPolygon) -> QPolygon: ...
    @overload
    def map(self, a: QPolygonF) -> QPolygonF: ...
    @overload
    def map(self, l: PySide2.QtCore.QLine) -> PySide2.QtCore.QLine: ...
    @overload
    def map(self, l: PySide2.QtCore.QLineF) -> PySide2.QtCore.QLineF: ...
    @overload
    def map(self, p: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    @overload
    def map(self, p: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    @overload
    def map(self, p: QPainterPath) -> QPainterPath: ...
    @overload
    def map(self, r: QRegion) -> QRegion: ...
    @overload
    def map(self, x: int, y: int) -> typing.Tuple[int,int]: ...
    @overload
    def map(self, x: float, y: float) -> typing.Tuple[float,float]: ...
    @overload
    def mapRect(self, arg__1: PySide2.QtCore.QRect) -> PySide2.QtCore.QRect: ...
    @overload
    def mapRect(self, arg__1: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def mapToPolygon(self, r: PySide2.QtCore.QRect) -> QPolygon: ...
    def reset(self) -> None: ...
    def rotate(self, a: float) -> QMatrix: ...
    def scale(self, sx: float, sy: float) -> QMatrix: ...
    def setMatrix(self, m11: float, m12: float, m21: float, m22: float, dx: float, dy: float) -> None: ...
    def shear(self, sh: float, sv: float) -> QMatrix: ...
    def translate(self, dx: float, dy: float) -> QMatrix: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __imul__(self, arg__1: QMatrix) -> QMatrix: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    @overload
    def __mul__(self, l: PySide2.QtCore.QLine) -> PySide2.QtCore.QLine: ...
    @overload
    def __mul__(self, l: PySide2.QtCore.QLineF) -> PySide2.QtCore.QLineF: ...
    @overload
    def __mul__(self, o: QMatrix) -> QMatrix: ...
    @overload
    def __mul__(self, p: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    @overload
    def __mul__(self, p: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QMatrix2x2(shiboken2.Object):
    constData: ClassVar[function] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QMatrix2x2: QMatrix2x2) -> None: ...
    @overload
    def __init__(self, arg__1: typing.Iterable) -> None: ...
    def data(self) -> float: ...
    def fill(self, value: float) -> None: ...
    def isIdentity(self) -> bool: ...
    def setToIdentity(self) -> None: ...
    def transposed(self) -> QMatrix2x2: ...
    def __call__(self, row: int, column: int) -> float: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other: QMatrix2x2) -> QMatrix2x2: ...
    def __imul__(self, factor: float) -> QMatrix2x2: ...
    def __isub__(self, other: QMatrix2x2) -> QMatrix2x2: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QMatrix2x3(shiboken2.Object):
    constData: ClassVar[function] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QMatrix2x3: QMatrix2x3) -> None: ...
    @overload
    def __init__(self, arg__1: typing.Iterable) -> None: ...
    def data(self) -> float: ...
    def fill(self, value: float) -> None: ...
    def isIdentity(self) -> bool: ...
    def setToIdentity(self) -> None: ...
    def transposed(self) -> QMatrix3x2: ...
    def __call__(self, row: int, column: int) -> float: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other: QMatrix2x3) -> QMatrix2x3: ...
    def __imul__(self, factor: float) -> QMatrix2x3: ...
    def __isub__(self, other: QMatrix2x3) -> QMatrix2x3: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QMatrix2x4(shiboken2.Object):
    constData: ClassVar[function] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QMatrix2x4: QMatrix2x4) -> None: ...
    @overload
    def __init__(self, arg__1: typing.Iterable) -> None: ...
    def data(self) -> float: ...
    def fill(self, value: float) -> None: ...
    def isIdentity(self) -> bool: ...
    def setToIdentity(self) -> None: ...
    def transposed(self) -> QMatrix4x2: ...
    def __call__(self, row: int, column: int) -> float: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other: QMatrix2x4) -> QMatrix2x4: ...
    def __imul__(self, factor: float) -> QMatrix2x4: ...
    def __isub__(self, other: QMatrix2x4) -> QMatrix2x4: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QMatrix3x2(shiboken2.Object):
    constData: ClassVar[function] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QMatrix3x2: QMatrix3x2) -> None: ...
    @overload
    def __init__(self, arg__1: typing.Iterable) -> None: ...
    def data(self) -> float: ...
    def fill(self, value: float) -> None: ...
    def isIdentity(self) -> bool: ...
    def setToIdentity(self) -> None: ...
    def transposed(self) -> QMatrix2x3: ...
    def __call__(self, row: int, column: int) -> float: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other: QMatrix3x2) -> QMatrix3x2: ...
    def __imul__(self, factor: float) -> QMatrix3x2: ...
    def __isub__(self, other: QMatrix3x2) -> QMatrix3x2: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QMatrix3x3(shiboken2.Object):
    constData: ClassVar[function] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QMatrix3x3: QMatrix3x3) -> None: ...
    @overload
    def __init__(self, arg__1: typing.Iterable) -> None: ...
    def data(self) -> float: ...
    def fill(self, value: float) -> None: ...
    def isIdentity(self) -> bool: ...
    def setToIdentity(self) -> None: ...
    def transposed(self) -> QMatrix3x3: ...
    def __call__(self, row: int, column: int) -> float: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other: QMatrix3x3) -> QMatrix3x3: ...
    def __imul__(self, factor: float) -> QMatrix3x3: ...
    def __isub__(self, other: QMatrix3x3) -> QMatrix3x3: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QMatrix3x4(shiboken2.Object):
    constData: ClassVar[function] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QMatrix3x4: QMatrix3x4) -> None: ...
    @overload
    def __init__(self, arg__1: typing.Iterable) -> None: ...
    def data(self) -> float: ...
    def fill(self, value: float) -> None: ...
    def isIdentity(self) -> bool: ...
    def setToIdentity(self) -> None: ...
    def transposed(self) -> QMatrix4x3: ...
    def __call__(self, row: int, column: int) -> float: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other: QMatrix3x4) -> QMatrix3x4: ...
    def __imul__(self, factor: float) -> QMatrix3x4: ...
    def __isub__(self, other: QMatrix3x4) -> QMatrix3x4: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QMatrix4x2(shiboken2.Object):
    constData: ClassVar[function] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QMatrix4x2: QMatrix4x2) -> None: ...
    @overload
    def __init__(self, arg__1: typing.Iterable) -> None: ...
    def data(self) -> float: ...
    def fill(self, value: float) -> None: ...
    def isIdentity(self) -> bool: ...
    def setToIdentity(self) -> None: ...
    def transposed(self) -> QMatrix2x4: ...
    def __call__(self, row: int, column: int) -> float: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other: QMatrix4x2) -> QMatrix4x2: ...
    def __imul__(self, factor: float) -> QMatrix4x2: ...
    def __isub__(self, other: QMatrix4x2) -> QMatrix4x2: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QMatrix4x3(shiboken2.Object):
    constData: ClassVar[function] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QMatrix4x3: QMatrix4x3) -> None: ...
    @overload
    def __init__(self, arg__1: typing.Iterable) -> None: ...
    def data(self) -> float: ...
    def fill(self, value: float) -> None: ...
    def isIdentity(self) -> bool: ...
    def setToIdentity(self) -> None: ...
    def transposed(self) -> QMatrix3x4: ...
    def __call__(self, row: int, column: int) -> float: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other: QMatrix4x3) -> QMatrix4x3: ...
    def __imul__(self, factor: float) -> QMatrix4x3: ...
    def __isub__(self, other: QMatrix4x3) -> QMatrix4x3: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QMatrix4x4(shiboken2.Object):
    constData: ClassVar[function] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, m11: float, m12: float, m13: float, m14: float, m21: float, m22: float, m23: float, m24: float, m31: float, m32: float, m33: float, m34: float, m41: float, m42: float, m43: float, m44: float) -> None: ...
    @overload
    def __init__(self, matrix: QMatrix) -> None: ...
    @overload
    def __init__(self, transform: QTransform) -> None: ...
    @overload
    def __init__(self, values: typing.Sequence[float]) -> None: ...
    def __dummy(self, arg__1: typing.Sequence[float]) -> None: ...
    def column(self, index: int) -> QVector4D: ...
    def copyDataTo(self) -> float: ...
    def data(self) -> typing.List[float]: ...
    def determinant(self) -> float: ...
    def fill(self, value: float) -> None: ...
    def flipCoordinates(self) -> None: ...
    def frustum(self, left: float, right: float, bottom: float, top: float, nearPlane: float, farPlane: float) -> None: ...
    def inverted(self) -> typing.Tuple[QMatrix4x4,bool]: ...
    def isAffine(self) -> bool: ...
    def isIdentity(self) -> bool: ...
    def lookAt(self, eye: QVector3D, center: QVector3D, up: QVector3D) -> None: ...
    @overload
    def map(self, point: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    @overload
    def map(self, point: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    @overload
    def map(self, point: QVector3D) -> QVector3D: ...
    @overload
    def map(self, point: QVector4D) -> QVector4D: ...
    @overload
    def mapRect(self, rect: PySide2.QtCore.QRect) -> PySide2.QtCore.QRect: ...
    @overload
    def mapRect(self, rect: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def mapVector(self, vector: QVector3D) -> QVector3D: ...
    def normalMatrix(self) -> QMatrix3x3: ...
    def optimize(self) -> None: ...
    @overload
    def ortho(self, left: float, right: float, bottom: float, top: float, nearPlane: float, farPlane: float) -> None: ...
    @overload
    def ortho(self, rect: PySide2.QtCore.QRect) -> None: ...
    @overload
    def ortho(self, rect: PySide2.QtCore.QRectF) -> None: ...
    def perspective(self, verticalAngle: float, aspectRatio: float, nearPlane: float, farPlane: float) -> None: ...
    @overload
    def rotate(self, angle: float, vector: QVector3D) -> None: ...
    @overload
    def rotate(self, angle: float, x: float, y: float, z: float = ...) -> None: ...
    @overload
    def rotate(self, quaternion: QQuaternion) -> None: ...
    def row(self, index: int) -> QVector4D: ...
    @overload
    def scale(self, factor: float) -> None: ...
    @overload
    def scale(self, vector: QVector3D) -> None: ...
    @overload
    def scale(self, x: float, y: float) -> None: ...
    @overload
    def scale(self, x: float, y: float, z: float) -> None: ...
    def setColumn(self, index: int, value: QVector4D) -> None: ...
    def setRow(self, index: int, value: QVector4D) -> None: ...
    def setToIdentity(self) -> None: ...
    def toAffine(self) -> QMatrix: ...
    @overload
    def toTransform(self) -> QTransform: ...
    @overload
    def toTransform(self, distanceToPlane: float) -> QTransform: ...
    @overload
    def translate(self, vector: QVector3D) -> None: ...
    @overload
    def translate(self, x: float, y: float) -> None: ...
    @overload
    def translate(self, x: float, y: float, z: float) -> None: ...
    def transposed(self) -> QMatrix4x4: ...
    @overload
    def viewport(self, left: float, bottom: float, width: float, height: float, nearPlane: float = ..., farPlane: float = ...) -> None: ...
    @overload
    def viewport(self, rect: PySide2.QtCore.QRectF) -> None: ...
    def __add__(self, m2: QMatrix4x4) -> QMatrix4x4: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other: QMatrix4x4) -> QMatrix4x4: ...
    @overload
    def __imul__(self, factor: float) -> QMatrix4x4: ...
    @overload
    def __imul__(self, other: QMatrix4x4) -> QMatrix4x4: ...
    def __isub__(self, other: QMatrix4x4) -> QMatrix4x4: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    @overload
    def __mul__(self, factor: float) -> QMatrix4x4: ...
    @overload
    def __mul__(self, m2: QMatrix4x4) -> QMatrix4x4: ...
    @overload
    def __mul__(self, point: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    @overload
    def __mul__(self, point: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> QMatrix4x4: ...
    def __radd__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sub__(self, m2: QMatrix4x4) -> QMatrix4x4: ...
    def __truediv__(self, other) -> Any: ...

class QMouseEvent(QInputEvent):
    caps: Any
    l: Any
    s: Any
    velocity: Any
    w: Any
    @overload
    def __init__(self, type: PySide2.QtCore.QEvent.Type, localPos: PySide2.QtCore.QPointF, button: PySide2.QtCore.Qt.MouseButton, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton], modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> None: ...
    @overload
    def __init__(self, type: PySide2.QtCore.QEvent.Type, localPos: PySide2.QtCore.QPointF, screenPos: PySide2.QtCore.QPointF, button: PySide2.QtCore.Qt.MouseButton, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton], modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> None: ...
    @overload
    def __init__(self, type: PySide2.QtCore.QEvent.Type, localPos: PySide2.QtCore.QPointF, windowPos: PySide2.QtCore.QPointF, screenPos: PySide2.QtCore.QPointF, button: PySide2.QtCore.Qt.MouseButton, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton], modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> None: ...
    @overload
    def __init__(self, type: PySide2.QtCore.QEvent.Type, localPos: PySide2.QtCore.QPointF, windowPos: PySide2.QtCore.QPointF, screenPos: PySide2.QtCore.QPointF, button: PySide2.QtCore.Qt.MouseButton, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton], modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier], source: PySide2.QtCore.Qt.MouseEventSource) -> None: ...
    def button(self) -> PySide2.QtCore.Qt.MouseButton: ...
    def buttons(self) -> typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]: ...
    def flags(self) -> typing.Union[PySide2.QtCore.Qt.MouseEventFlags,PySide2.QtCore.Qt.MouseEventFlag]: ...
    def globalPos(self) -> PySide2.QtCore.QPoint: ...
    def globalX(self) -> int: ...
    def globalY(self) -> int: ...
    def localPos(self) -> PySide2.QtCore.QPointF: ...
    def pos(self) -> PySide2.QtCore.QPoint: ...
    def screenPos(self) -> PySide2.QtCore.QPointF: ...
    def setLocalPos(self, localPosition: PySide2.QtCore.QPointF) -> None: ...
    def source(self) -> PySide2.QtCore.Qt.MouseEventSource: ...
    def windowPos(self) -> PySide2.QtCore.QPointF: ...
    def x(self) -> int: ...
    def y(self) -> int: ...

class QMoveEvent(PySide2.QtCore.QEvent):
    def __init__(self, pos: PySide2.QtCore.QPoint, oldPos: PySide2.QtCore.QPoint) -> None: ...
    def oldPos(self) -> PySide2.QtCore.QPoint: ...
    def pos(self) -> PySide2.QtCore.QPoint: ...

class QMovie(PySide2.QtCore.QObject):
    class CacheMode:
        CacheAll: ClassVar[QMovie.CacheMode] = ...
        CacheNone: ClassVar[QMovie.CacheMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QMovie.CacheMode: ...
        def __and__(self, other: typing.SupportsInt) -> QMovie.CacheMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QMovie.CacheMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QMovie.CacheMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QMovie.CacheMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QMovie.CacheMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QMovie.CacheMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QMovie.CacheMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QMovie.CacheMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QMovie.CacheMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QMovie.CacheMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QMovie.CacheMode: ...

    class MovieState:
        NotRunning: ClassVar[QMovie.MovieState] = ...
        Paused: ClassVar[QMovie.MovieState] = ...
        Running: ClassVar[QMovie.MovieState] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QMovie.MovieState: ...
        def __and__(self, other: typing.SupportsInt) -> QMovie.MovieState: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QMovie.MovieState: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QMovie.MovieState: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QMovie.MovieState: ...
        def __rand__(self, other: typing.SupportsInt) -> QMovie.MovieState: ...
        def __rmul__(self, other: typing.SupportsInt) -> QMovie.MovieState: ...
        def __ror__(self, other: typing.SupportsInt) -> QMovie.MovieState: ...
        def __rsub__(self, other: typing.SupportsInt) -> QMovie.MovieState: ...
        def __rxor__(self, other: typing.SupportsInt) -> QMovie.MovieState: ...
        def __sub__(self, other: typing.SupportsInt) -> QMovie.MovieState: ...
        def __xor__(self, other: typing.SupportsInt) -> QMovie.MovieState: ...
    CacheAll: ClassVar[QMovie.CacheMode] = ...
    CacheNone: ClassVar[QMovie.CacheMode] = ...
    NotRunning: ClassVar[QMovie.MovieState] = ...
    Paused: ClassVar[QMovie.MovieState] = ...
    Running: ClassVar[QMovie.MovieState] = ...
    error: ClassVar[PySide2.QtCore.Signal] = ...
    finished: ClassVar[PySide2.QtCore.Signal] = ...
    frameChanged: ClassVar[PySide2.QtCore.Signal] = ...
    resized: ClassVar[PySide2.QtCore.Signal] = ...
    started: ClassVar[PySide2.QtCore.Signal] = ...
    stateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    updated: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, device: PySide2.QtCore.QIODevice, format: typing.Union[PySide2.QtCore.QByteArray,bytes] = ..., parent: typing.Union[PySide2.QtCore.QObject,None] = ..., cacheMode: QMovie.CacheMode = ..., destroyed: typing.Callable = ..., error: typing.Callable = ..., finished: typing.Callable = ..., frameChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., resized: typing.Callable = ..., speed: int = ..., started: typing.Callable = ..., stateChanged: typing.Callable = ..., updated: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, fileName: str, format: typing.Union[PySide2.QtCore.QByteArray,bytes] = ..., parent: typing.Union[PySide2.QtCore.QObject,None] = ..., cacheMode: QMovie.CacheMode = ..., destroyed: typing.Callable = ..., error: typing.Callable = ..., finished: typing.Callable = ..., frameChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., resized: typing.Callable = ..., speed: int = ..., started: typing.Callable = ..., stateChanged: typing.Callable = ..., updated: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., cacheMode: QMovie.CacheMode = ..., destroyed: typing.Callable = ..., error: typing.Callable = ..., finished: typing.Callable = ..., frameChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., resized: typing.Callable = ..., speed: int = ..., started: typing.Callable = ..., stateChanged: typing.Callable = ..., updated: typing.Callable = ...) -> None: ...
    def backgroundColor(self) -> QColor: ...
    def cacheMode(self) -> QMovie.CacheMode: ...
    def currentFrameNumber(self) -> int: ...
    def currentImage(self) -> QImage: ...
    def currentPixmap(self) -> QPixmap: ...
    def device(self) -> PySide2.QtCore.QIODevice: ...
    def fileName(self) -> str: ...
    def format(self) -> PySide2.QtCore.QByteArray: ...
    def frameCount(self) -> int: ...
    def frameRect(self) -> PySide2.QtCore.QRect: ...
    def isValid(self) -> bool: ...
    def jumpToFrame(self, frameNumber: int) -> bool: ...
    def jumpToNextFrame(self) -> bool: ...
    def lastError(self) -> QImageReader.ImageReaderError: ...
    def lastErrorString(self) -> str: ...
    def loopCount(self) -> int: ...
    def nextFrameDelay(self) -> int: ...
    def scaledSize(self) -> PySide2.QtCore.QSize: ...
    def setBackgroundColor(self, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setCacheMode(self, mode: QMovie.CacheMode) -> None: ...
    def setDevice(self, device: PySide2.QtCore.QIODevice) -> None: ...
    def setFileName(self, fileName: str) -> None: ...
    def setFormat(self, format: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setPaused(self, paused: bool) -> None: ...
    def setScaledSize(self, size: PySide2.QtCore.QSize) -> None: ...
    def setSpeed(self, percentSpeed: int) -> None: ...
    def speed(self) -> int: ...
    def start(self) -> None: ...
    def state(self) -> QMovie.MovieState: ...
    def stop(self) -> None: ...
    @classmethod
    def supportedFormats(cls) -> typing.List[PySide2.QtCore.QByteArray]: ...

class QNativeGestureEvent(QInputEvent):
    @overload
    def __init__(self, type: PySide2.QtCore.Qt.NativeGestureType, dev: QTouchDevice, localPos: PySide2.QtCore.QPointF, windowPos: PySide2.QtCore.QPointF, screenPos: PySide2.QtCore.QPointF, value: float, sequenceId: int, intArgument: int) -> None: ...
    @overload
    def __init__(self, type: PySide2.QtCore.Qt.NativeGestureType, localPos: PySide2.QtCore.QPointF, windowPos: PySide2.QtCore.QPointF, screenPos: PySide2.QtCore.QPointF, value: float, sequenceId: int, intArgument: int) -> None: ...
    def device(self) -> QTouchDevice: ...
    def gestureType(self) -> PySide2.QtCore.Qt.NativeGestureType: ...
    def globalPos(self) -> PySide2.QtCore.QPoint: ...
    def localPos(self) -> PySide2.QtCore.QPointF: ...
    def pos(self) -> PySide2.QtCore.QPoint: ...
    def screenPos(self) -> PySide2.QtCore.QPointF: ...
    def value(self) -> float: ...
    def windowPos(self) -> PySide2.QtCore.QPointF: ...

class QOffscreenSurface(PySide2.QtCore.QObject, QSurface):
    screenChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, screen: QScreen, parent: typing.Optional[PySide2.QtCore.QObject], destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., screenChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, screen: typing.Union[QScreen,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., screenChanged: typing.Callable = ...) -> None: ...
    def create(self) -> None: ...
    def destroy(self) -> None: ...
    def format(self) -> QSurfaceFormat: ...
    def isValid(self) -> bool: ...
    def nativeHandle(self) -> int: ...
    def requestedFormat(self) -> QSurfaceFormat: ...
    def screen(self) -> QScreen: ...
    def setFormat(self, format: QSurfaceFormat) -> None: ...
    def setNativeHandle(self, handle: int) -> None: ...
    def setScreen(self, screen: QScreen) -> None: ...
    def size(self) -> PySide2.QtCore.QSize: ...
    def surfaceHandle(self) -> int: ...
    def surfaceType(self) -> QSurface.SurfaceType: ...

class QOpenGLBuffer(shiboken2.Object):
    class Access:
        ReadOnly: ClassVar[QOpenGLBuffer.Access] = ...
        ReadWrite: ClassVar[QOpenGLBuffer.Access] = ...
        WriteOnly: ClassVar[QOpenGLBuffer.Access] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Access: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Access: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Access: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Access: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Access: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Access: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Access: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Access: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Access: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Access: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Access: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Access: ...

    class RangeAccessFlag:
        RangeFlushExplicit: ClassVar[QOpenGLBuffer.RangeAccessFlag] = ...
        RangeInvalidate: ClassVar[QOpenGLBuffer.RangeAccessFlag] = ...
        RangeInvalidateBuffer: ClassVar[QOpenGLBuffer.RangeAccessFlag] = ...
        RangeRead: ClassVar[QOpenGLBuffer.RangeAccessFlag] = ...
        RangeUnsynchronized: ClassVar[QOpenGLBuffer.RangeAccessFlag] = ...
        RangeWrite: ClassVar[QOpenGLBuffer.RangeAccessFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLBuffer.RangeAccessFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QOpenGLBuffer.RangeAccessFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLBuffer.RangeAccessFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLBuffer.RangeAccessFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLBuffer.RangeAccessFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLBuffer.RangeAccessFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLBuffer.RangeAccessFlags: ...

    class RangeAccessFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLBuffer.RangeAccessFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QOpenGLBuffer.RangeAccessFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLBuffer.RangeAccessFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLBuffer.RangeAccessFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLBuffer.RangeAccessFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLBuffer.RangeAccessFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLBuffer.RangeAccessFlags: ...

    class Type:
        IndexBuffer: ClassVar[QOpenGLBuffer.Type] = ...
        PixelPackBuffer: ClassVar[QOpenGLBuffer.Type] = ...
        PixelUnpackBuffer: ClassVar[QOpenGLBuffer.Type] = ...
        VertexBuffer: ClassVar[QOpenGLBuffer.Type] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Type: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Type: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Type: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Type: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Type: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Type: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Type: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Type: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Type: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Type: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Type: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLBuffer.Type: ...

    class UsagePattern:
        DynamicCopy: ClassVar[QOpenGLBuffer.UsagePattern] = ...
        DynamicDraw: ClassVar[QOpenGLBuffer.UsagePattern] = ...
        DynamicRead: ClassVar[QOpenGLBuffer.UsagePattern] = ...
        StaticCopy: ClassVar[QOpenGLBuffer.UsagePattern] = ...
        StaticDraw: ClassVar[QOpenGLBuffer.UsagePattern] = ...
        StaticRead: ClassVar[QOpenGLBuffer.UsagePattern] = ...
        StreamCopy: ClassVar[QOpenGLBuffer.UsagePattern] = ...
        StreamDraw: ClassVar[QOpenGLBuffer.UsagePattern] = ...
        StreamRead: ClassVar[QOpenGLBuffer.UsagePattern] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLBuffer.UsagePattern: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLBuffer.UsagePattern: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLBuffer.UsagePattern: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLBuffer.UsagePattern: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLBuffer.UsagePattern: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLBuffer.UsagePattern: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLBuffer.UsagePattern: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLBuffer.UsagePattern: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLBuffer.UsagePattern: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLBuffer.UsagePattern: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLBuffer.UsagePattern: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLBuffer.UsagePattern: ...
    DynamicCopy: ClassVar[QOpenGLBuffer.UsagePattern] = ...
    DynamicDraw: ClassVar[QOpenGLBuffer.UsagePattern] = ...
    DynamicRead: ClassVar[QOpenGLBuffer.UsagePattern] = ...
    IndexBuffer: ClassVar[QOpenGLBuffer.Type] = ...
    PixelPackBuffer: ClassVar[QOpenGLBuffer.Type] = ...
    PixelUnpackBuffer: ClassVar[QOpenGLBuffer.Type] = ...
    RangeFlushExplicit: ClassVar[QOpenGLBuffer.RangeAccessFlag] = ...
    RangeInvalidate: ClassVar[QOpenGLBuffer.RangeAccessFlag] = ...
    RangeInvalidateBuffer: ClassVar[QOpenGLBuffer.RangeAccessFlag] = ...
    RangeRead: ClassVar[QOpenGLBuffer.RangeAccessFlag] = ...
    RangeUnsynchronized: ClassVar[QOpenGLBuffer.RangeAccessFlag] = ...
    RangeWrite: ClassVar[QOpenGLBuffer.RangeAccessFlag] = ...
    ReadOnly: ClassVar[QOpenGLBuffer.Access] = ...
    ReadWrite: ClassVar[QOpenGLBuffer.Access] = ...
    StaticCopy: ClassVar[QOpenGLBuffer.UsagePattern] = ...
    StaticDraw: ClassVar[QOpenGLBuffer.UsagePattern] = ...
    StaticRead: ClassVar[QOpenGLBuffer.UsagePattern] = ...
    StreamCopy: ClassVar[QOpenGLBuffer.UsagePattern] = ...
    StreamDraw: ClassVar[QOpenGLBuffer.UsagePattern] = ...
    StreamRead: ClassVar[QOpenGLBuffer.UsagePattern] = ...
    VertexBuffer: ClassVar[QOpenGLBuffer.Type] = ...
    WriteOnly: ClassVar[QOpenGLBuffer.Access] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QOpenGLBuffer) -> None: ...
    @overload
    def __init__(self, type: QOpenGLBuffer.Type) -> None: ...
    @overload
    def allocate(self, count: int) -> None: ...
    @overload
    def allocate(self, data: int, count: int) -> None: ...
    def bind(self) -> bool: ...
    def bufferId(self) -> int: ...
    def create(self) -> bool: ...
    def destroy(self) -> None: ...
    def isCreated(self) -> bool: ...
    def map(self, access: QOpenGLBuffer.Access) -> int: ...
    def mapRange(self, offset: int, count: int, access: typing.Union[QOpenGLBuffer.RangeAccessFlags,QOpenGLBuffer.RangeAccessFlag]) -> int: ...
    def read(self, offset: int, data: int, count: int) -> bool: ...
    @classmethod
    @overload
    def release(cls, self) -> None: ...
    @classmethod
    @overload
    def release(cls, type: QOpenGLBuffer.Type) -> None: ...
    def setUsagePattern(self, value: QOpenGLBuffer.UsagePattern) -> None: ...
    def size(self) -> int: ...
    def type(self) -> QOpenGLBuffer.Type: ...
    def unmap(self) -> bool: ...
    def usagePattern(self) -> QOpenGLBuffer.UsagePattern: ...
    def write(self, offset: int, data: int, count: int) -> None: ...

class QOpenGLContext(PySide2.QtCore.QObject):
    class OpenGLModuleType:
        LibGL: ClassVar[QOpenGLContext.OpenGLModuleType] = ...
        LibGLES: ClassVar[QOpenGLContext.OpenGLModuleType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLContext.OpenGLModuleType: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLContext.OpenGLModuleType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLContext.OpenGLModuleType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLContext.OpenGLModuleType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLContext.OpenGLModuleType: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLContext.OpenGLModuleType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLContext.OpenGLModuleType: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLContext.OpenGLModuleType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLContext.OpenGLModuleType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLContext.OpenGLModuleType: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLContext.OpenGLModuleType: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLContext.OpenGLModuleType: ...
    LibGL: ClassVar[QOpenGLContext.OpenGLModuleType] = ...
    LibGLES: ClassVar[QOpenGLContext.OpenGLModuleType] = ...
    aboutToBeDestroyed: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., aboutToBeDestroyed: typing.Callable = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @classmethod
    def areSharing(cls, first: QOpenGLContext, second: QOpenGLContext) -> bool: ...
    def create(self) -> bool: ...
    @classmethod
    def currentContext(cls) -> QOpenGLContext: ...
    def defaultFramebufferObject(self) -> int: ...
    def doneCurrent(self) -> None: ...
    def extensions(self) -> typing.Set[PySide2.QtCore.QByteArray]: ...
    def extraFunctions(self) -> QOpenGLExtraFunctions: ...
    def format(self) -> QSurfaceFormat: ...
    def functions(self) -> QOpenGLFunctions: ...
    @classmethod
    def globalShareContext(cls) -> QOpenGLContext: ...
    def hasExtension(self, extension: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> bool: ...
    def isOpenGLES(self) -> bool: ...
    def isValid(self) -> bool: ...
    def makeCurrent(self, surface: QSurface) -> bool: ...
    def nativeHandle(self) -> typing.Any: ...
    @classmethod
    def openGLModuleHandle(cls) -> int: ...
    @classmethod
    def openGLModuleType(cls) -> QOpenGLContext.OpenGLModuleType: ...
    def screen(self) -> QScreen: ...
    def setFormat(self, format: QSurfaceFormat) -> None: ...
    def setNativeHandle(self, handle: typing.Any) -> None: ...
    def setScreen(self, screen: QScreen) -> None: ...
    def setShareContext(self, shareContext: QOpenGLContext) -> None: ...
    def shareContext(self) -> QOpenGLContext: ...
    def shareGroup(self) -> QOpenGLContextGroup: ...
    @classmethod
    def supportsThreadedOpenGL(cls) -> bool: ...
    def surface(self) -> QSurface: ...
    def swapBuffers(self, surface: QSurface) -> None: ...
    def versionFunctions(self, versionProfile: QOpenGLVersionProfile = ...) -> QAbstractOpenGLFunctions: ...

class QOpenGLContextGroup(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def currentContextGroup(cls) -> QOpenGLContextGroup: ...
    def shares(self) -> typing.List[QOpenGLContext]: ...

class QOpenGLDebugLogger(PySide2.QtCore.QObject):
    class LoggingMode:
        AsynchronousLogging: ClassVar[QOpenGLDebugLogger.LoggingMode] = ...
        SynchronousLogging: ClassVar[QOpenGLDebugLogger.LoggingMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLDebugLogger.LoggingMode: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLDebugLogger.LoggingMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLDebugLogger.LoggingMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLDebugLogger.LoggingMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLDebugLogger.LoggingMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLDebugLogger.LoggingMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLDebugLogger.LoggingMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLDebugLogger.LoggingMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLDebugLogger.LoggingMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLDebugLogger.LoggingMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLDebugLogger.LoggingMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLDebugLogger.LoggingMode: ...
    AsynchronousLogging: ClassVar[QOpenGLDebugLogger.LoggingMode] = ...
    SynchronousLogging: ClassVar[QOpenGLDebugLogger.LoggingMode] = ...
    messageLogged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., loggingMode: QOpenGLDebugLogger.LoggingMode = ..., messageLogged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @overload
    def disableMessages(self, ids: typing.List[int], sources: typing.Union[QOpenGLDebugMessage.Sources,QOpenGLDebugMessage.Source] = ..., types: typing.Union[QOpenGLDebugMessage.Types,QOpenGLDebugMessage.Type] = ...) -> None: ...
    @overload
    def disableMessages(self, sources: typing.Union[QOpenGLDebugMessage.Sources,QOpenGLDebugMessage.Source] = ..., types: typing.Union[QOpenGLDebugMessage.Types,QOpenGLDebugMessage.Type] = ..., severities: typing.Union[QOpenGLDebugMessage.Severities,QOpenGLDebugMessage.Severity] = ...) -> None: ...
    @overload
    def enableMessages(self, ids: typing.List[int], sources: typing.Union[QOpenGLDebugMessage.Sources,QOpenGLDebugMessage.Source] = ..., types: typing.Union[QOpenGLDebugMessage.Types,QOpenGLDebugMessage.Type] = ...) -> None: ...
    @overload
    def enableMessages(self, sources: typing.Union[QOpenGLDebugMessage.Sources,QOpenGLDebugMessage.Source] = ..., types: typing.Union[QOpenGLDebugMessage.Types,QOpenGLDebugMessage.Type] = ..., severities: typing.Union[QOpenGLDebugMessage.Severities,QOpenGLDebugMessage.Severity] = ...) -> None: ...
    def initialize(self) -> bool: ...
    def isLogging(self) -> bool: ...
    def logMessage(self, debugMessage: QOpenGLDebugMessage) -> None: ...
    def loggedMessages(self) -> typing.List[QOpenGLDebugMessage]: ...
    def loggingMode(self) -> QOpenGLDebugLogger.LoggingMode: ...
    def maximumMessageLength(self) -> int: ...
    def popGroup(self) -> None: ...
    def pushGroup(self, name: str, id: int = ..., source: QOpenGLDebugMessage.Source = ...) -> None: ...
    def startLogging(self, loggingMode: QOpenGLDebugLogger.LoggingMode = ...) -> None: ...
    def stopLogging(self) -> None: ...

class QOpenGLDebugMessage(shiboken2.Object):
    class Severities:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Severities: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QOpenGLDebugMessage.Severities: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Severities: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Severities: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Severities: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Severities: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Severities: ...

    class Severity:
        AnySeverity: ClassVar[QOpenGLDebugMessage.Severity] = ...
        HighSeverity: ClassVar[QOpenGLDebugMessage.Severity] = ...
        InvalidSeverity: ClassVar[QOpenGLDebugMessage.Severity] = ...
        LastSeverity: ClassVar[QOpenGLDebugMessage.Severity] = ...
        LowSeverity: ClassVar[QOpenGLDebugMessage.Severity] = ...
        MediumSeverity: ClassVar[QOpenGLDebugMessage.Severity] = ...
        NotificationSeverity: ClassVar[QOpenGLDebugMessage.Severity] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Severities: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QOpenGLDebugMessage.Severity: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Severities: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Severities: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Severities: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Severities: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Severities: ...

    class Source:
        APISource: ClassVar[QOpenGLDebugMessage.Source] = ...
        AnySource: ClassVar[QOpenGLDebugMessage.Source] = ...
        ApplicationSource: ClassVar[QOpenGLDebugMessage.Source] = ...
        InvalidSource: ClassVar[QOpenGLDebugMessage.Source] = ...
        LastSource: ClassVar[QOpenGLDebugMessage.Source] = ...
        OtherSource: ClassVar[QOpenGLDebugMessage.Source] = ...
        ShaderCompilerSource: ClassVar[QOpenGLDebugMessage.Source] = ...
        ThirdPartySource: ClassVar[QOpenGLDebugMessage.Source] = ...
        WindowSystemSource: ClassVar[QOpenGLDebugMessage.Source] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Sources: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QOpenGLDebugMessage.Source: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Sources: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Sources: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Sources: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Sources: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Sources: ...

    class Sources:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Sources: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QOpenGLDebugMessage.Sources: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Sources: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Sources: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Sources: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Sources: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Sources: ...

    class Type:
        AnyType: ClassVar[QOpenGLDebugMessage.Type] = ...
        DeprecatedBehaviorType: ClassVar[QOpenGLDebugMessage.Type] = ...
        ErrorType: ClassVar[QOpenGLDebugMessage.Type] = ...
        GroupPopType: ClassVar[QOpenGLDebugMessage.Type] = ...
        GroupPushType: ClassVar[QOpenGLDebugMessage.Type] = ...
        InvalidType: ClassVar[QOpenGLDebugMessage.Type] = ...
        LastType: ClassVar[QOpenGLDebugMessage.Type] = ...
        MarkerType: ClassVar[QOpenGLDebugMessage.Type] = ...
        OtherType: ClassVar[QOpenGLDebugMessage.Type] = ...
        PerformanceType: ClassVar[QOpenGLDebugMessage.Type] = ...
        PortabilityType: ClassVar[QOpenGLDebugMessage.Type] = ...
        UndefinedBehaviorType: ClassVar[QOpenGLDebugMessage.Type] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Types: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QOpenGLDebugMessage.Type: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Types: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Types: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Types: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Types: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Types: ...

    class Types:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Types: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QOpenGLDebugMessage.Types: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Types: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Types: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Types: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Types: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLDebugMessage.Types: ...
    APISource: ClassVar[QOpenGLDebugMessage.Source] = ...
    AnySeverity: ClassVar[QOpenGLDebugMessage.Severity] = ...
    AnySource: ClassVar[QOpenGLDebugMessage.Source] = ...
    AnyType: ClassVar[QOpenGLDebugMessage.Type] = ...
    ApplicationSource: ClassVar[QOpenGLDebugMessage.Source] = ...
    DeprecatedBehaviorType: ClassVar[QOpenGLDebugMessage.Type] = ...
    ErrorType: ClassVar[QOpenGLDebugMessage.Type] = ...
    GroupPopType: ClassVar[QOpenGLDebugMessage.Type] = ...
    GroupPushType: ClassVar[QOpenGLDebugMessage.Type] = ...
    HighSeverity: ClassVar[QOpenGLDebugMessage.Severity] = ...
    InvalidSeverity: ClassVar[QOpenGLDebugMessage.Severity] = ...
    InvalidSource: ClassVar[QOpenGLDebugMessage.Source] = ...
    InvalidType: ClassVar[QOpenGLDebugMessage.Type] = ...
    LastSeverity: ClassVar[QOpenGLDebugMessage.Severity] = ...
    LastSource: ClassVar[QOpenGLDebugMessage.Source] = ...
    LastType: ClassVar[QOpenGLDebugMessage.Type] = ...
    LowSeverity: ClassVar[QOpenGLDebugMessage.Severity] = ...
    MarkerType: ClassVar[QOpenGLDebugMessage.Type] = ...
    MediumSeverity: ClassVar[QOpenGLDebugMessage.Severity] = ...
    NotificationSeverity: ClassVar[QOpenGLDebugMessage.Severity] = ...
    OtherSource: ClassVar[QOpenGLDebugMessage.Source] = ...
    OtherType: ClassVar[QOpenGLDebugMessage.Type] = ...
    PerformanceType: ClassVar[QOpenGLDebugMessage.Type] = ...
    PortabilityType: ClassVar[QOpenGLDebugMessage.Type] = ...
    ShaderCompilerSource: ClassVar[QOpenGLDebugMessage.Source] = ...
    ThirdPartySource: ClassVar[QOpenGLDebugMessage.Source] = ...
    UndefinedBehaviorType: ClassVar[QOpenGLDebugMessage.Type] = ...
    WindowSystemSource: ClassVar[QOpenGLDebugMessage.Source] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, debugMessage: QOpenGLDebugMessage) -> None: ...
    @classmethod
    def createApplicationMessage(cls, text: str, id: int = ..., severity: QOpenGLDebugMessage.Severity = ..., type: QOpenGLDebugMessage.Type = ...) -> QOpenGLDebugMessage: ...
    @classmethod
    def createThirdPartyMessage(cls, text: str, id: int = ..., severity: QOpenGLDebugMessage.Severity = ..., type: QOpenGLDebugMessage.Type = ...) -> QOpenGLDebugMessage: ...
    def id(self) -> int: ...
    def message(self) -> str: ...
    def severity(self) -> QOpenGLDebugMessage.Severity: ...
    def source(self) -> QOpenGLDebugMessage.Source: ...
    def swap(self, other: QOpenGLDebugMessage) -> None: ...
    def type(self) -> QOpenGLDebugMessage.Type: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QOpenGLExtraFunctions(QOpenGLFunctions):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, context: QOpenGLContext) -> None: ...
    def glActiveShaderProgram(self, pipeline: int, program: int) -> None: ...
    def glBeginQuery(self, target: int, id: int) -> None: ...
    def glBeginTransformFeedback(self, primitiveMode: int) -> None: ...
    def glBindBufferBase(self, target: int, index: int, buffer: int) -> None: ...
    def glBindImageTexture(self, unit: int, texture: int, level: int, layered: int, layer: int, access: int, format: int) -> None: ...
    def glBindProgramPipeline(self, pipeline: int) -> None: ...
    def glBindSampler(self, unit: int, sampler: int) -> None: ...
    def glBindTransformFeedback(self, target: int, id: int) -> None: ...
    def glBindVertexArray(self, array: int) -> None: ...
    def glBlendBarrier(self) -> None: ...
    def glBlendEquationSeparatei(self, buf: int, modeRGB: int, modeAlpha: int) -> None: ...
    def glBlendEquationi(self, buf: int, mode: int) -> None: ...
    def glBlendFuncSeparatei(self, buf: int, srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int) -> None: ...
    def glBlendFunci(self, buf: int, src: int, dst: int) -> None: ...
    def glBlitFramebuffer(self, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: int, filter: int) -> None: ...
    def glClearBufferfi(self, buffer: int, drawbuffer: int, depth: float, stencil: int) -> None: ...
    def glClearBufferfv(self, buffer: int, drawbuffer: int, value: typing.Sequence[float]) -> None: ...
    def glClearBufferiv(self, buffer: int, drawbuffer: int, value: typing.Sequence[int]) -> None: ...
    def glClearBufferuiv(self, buffer: int, drawbuffer: int, value: typing.Sequence[int]) -> None: ...
    def glColorMaski(self, index: int, r: int, g: int, b: int, a: int) -> None: ...
    def glCompressedTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, imageSize: int, data: int) -> None: ...
    def glCompressedTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, imageSize: int, data: int) -> None: ...
    def glCopyImageSubData(self, srcName: int, srcTarget: int, srcLevel: int, srcX: int, srcY: int, srcZ: int, dstName: int, dstTarget: int, dstLevel: int, dstX: int, dstY: int, dstZ: int, srcWidth: int, srcHeight: int, srcDepth: int) -> None: ...
    def glCopyTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: int, height: int) -> None: ...
    def glDebugMessageControl(self, source: int, type: int, severity: int, count: int, ids: typing.Sequence[int], enabled: int) -> None: ...
    def glDebugMessageInsert(self, source: int, type: int, id: int, severity: int, length: int, buf: bytes) -> None: ...
    def glDeleteProgramPipelines(self, n: int, pipelines: typing.Sequence[int]) -> None: ...
    def glDeleteQueries(self, n: int, ids: typing.Sequence[int]) -> None: ...
    def glDeleteSamplers(self, count: int, samplers: typing.Sequence[int]) -> None: ...
    def glDeleteTransformFeedbacks(self, n: int, ids: typing.Sequence[int]) -> None: ...
    def glDeleteVertexArrays(self, n: int, arrays: typing.Sequence[int]) -> None: ...
    def glDisablei(self, target: int, index: int) -> None: ...
    def glDispatchCompute(self, num_groups_x: int, num_groups_y: int, num_groups_z: int) -> None: ...
    def glDrawArraysIndirect(self, mode: int, indirect: int) -> None: ...
    def glDrawArraysInstanced(self, mode: int, first: int, count: int, instancecount: int) -> None: ...
    def glDrawBuffers(self, n: int, bufs: typing.Sequence[int]) -> None: ...
    def glDrawElementsBaseVertex(self, mode: int, count: int, type: int, indices: int, basevertex: int) -> None: ...
    def glDrawElementsIndirect(self, mode: int, type: int, indirect: int) -> None: ...
    def glDrawElementsInstanced(self, mode: int, count: int, type: int, indices: int, instancecount: int) -> None: ...
    def glDrawElementsInstancedBaseVertex(self, mode: int, count: int, type: int, indices: int, instancecount: int, basevertex: int) -> None: ...
    def glDrawRangeElements(self, mode: int, start: int, end: int, count: int, type: int, indices: int) -> None: ...
    def glDrawRangeElementsBaseVertex(self, mode: int, start: int, end: int, count: int, type: int, indices: int, basevertex: int) -> None: ...
    def glEnablei(self, target: int, index: int) -> None: ...
    def glEndQuery(self, target: int) -> None: ...
    def glFramebufferParameteri(self, target: int, pname: int, param: int) -> None: ...
    def glFramebufferTexture(self, target: int, attachment: int, texture: int, level: int) -> None: ...
    def glFramebufferTextureLayer(self, target: int, attachment: int, texture: int, level: int, layer: int) -> None: ...
    def glGenProgramPipelines(self, n: int, pipelines: typing.Sequence[int]) -> None: ...
    def glGenQueries(self, n: int, ids: typing.Sequence[int]) -> None: ...
    def glGenSamplers(self, count: int, samplers: typing.Sequence[int]) -> None: ...
    def glGenTransformFeedbacks(self, n: int, ids: typing.Sequence[int]) -> None: ...
    def glGenVertexArrays(self, n: int, arrays: typing.Sequence[int]) -> None: ...
    def glGetActiveUniformBlockiv(self, program: int, uniformBlockIndex: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetActiveUniformsiv(self, program: int, uniformCount: int, uniformIndices: typing.Sequence[int], pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetBufferParameteri64v(self, target: int, pname: int) -> int: ...
    def glGetFragDataLocation(self, program: int, name: bytes) -> int: ...
    def glGetFramebufferParameteriv(self, target: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetGraphicsResetStatus(self) -> int: ...
    def glGetInteger64i_v(self, target: int, index: int) -> int: ...
    def glGetInteger64v(self, pname: int) -> int: ...
    def glGetIntegeri_v(self, target: int, index: int, data: typing.Sequence[int]) -> None: ...
    def glGetInternalformativ(self, target: int, internalformat: int, pname: int, bufSize: int, params: typing.Sequence[int]) -> None: ...
    def glGetMultisamplefv(self, pname: int, index: int, val: typing.Sequence[float]) -> None: ...
    def glGetProgramBinary(self, program: int, bufSize: int, binary: int) -> typing.Tuple[int,int]: ...
    def glGetProgramInterfaceiv(self, program: int, programInterface: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetProgramPipelineiv(self, pipeline: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetProgramResourceIndex(self, program: int, programInterface: int, name: bytes) -> int: ...
    def glGetProgramResourceLocation(self, program: int, programInterface: int, name: bytes) -> int: ...
    def glGetProgramResourceiv(self, program: int, programInterface: int, index: int, propCount: int, props: typing.Sequence[int], bufSize: int, length: typing.Sequence[int], params: typing.Sequence[int]) -> None: ...
    def glGetQueryObjectuiv(self, id: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetQueryiv(self, target: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetSamplerParameterIiv(self, sampler: int, pname: int) -> int: ...
    def glGetSamplerParameterIuiv(self, sampler: int, pname: int) -> int: ...
    def glGetSamplerParameterfv(self, sampler: int, pname: int, params: typing.Sequence[float]) -> None: ...
    def glGetSamplerParameteriv(self, sampler: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetStringi(self, name: int, index: int) -> bytes: ...
    def glGetTexLevelParameterfv(self, target: int, level: int, pname: int, params: typing.Sequence[float]) -> None: ...
    def glGetTexLevelParameteriv(self, target: int, level: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetTexParameterIiv(self, target: int, pname: int) -> int: ...
    def glGetTexParameterIuiv(self, target: int, pname: int) -> int: ...
    def glGetUniformBlockIndex(self, program: int, uniformBlockName: bytes) -> int: ...
    def glGetUniformuiv(self, program: int, location: int, params: typing.Sequence[int]) -> None: ...
    def glGetVertexAttribIiv(self, index: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetVertexAttribIuiv(self, index: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetnUniformfv(self, program: int, location: int, bufSize: int) -> float: ...
    def glGetnUniformiv(self, program: int, location: int, bufSize: int) -> int: ...
    def glGetnUniformuiv(self, program: int, location: int, bufSize: int) -> int: ...
    def glInvalidateFramebuffer(self, target: int, numAttachments: int, attachments: typing.Sequence[int]) -> None: ...
    def glInvalidateSubFramebuffer(self, target: int, numAttachments: int, attachments: typing.Sequence[int], x: int, y: int, width: int, height: int) -> None: ...
    def glIsEnabledi(self, target: int, index: int) -> int: ...
    def glIsProgramPipeline(self, pipeline: int) -> int: ...
    def glIsQuery(self, id: int) -> int: ...
    def glIsSampler(self, sampler: int) -> int: ...
    def glIsTransformFeedback(self, id: int) -> int: ...
    def glIsVertexArray(self, array: int) -> int: ...
    def glMemoryBarrier(self, barriers: int) -> None: ...
    def glMemoryBarrierByRegion(self, barriers: int) -> None: ...
    def glMinSampleShading(self, value: float) -> None: ...
    def glObjectLabel(self, identifier: int, name: int, length: int, label: bytes) -> None: ...
    def glObjectPtrLabel(self, ptr: int, length: int, label: bytes) -> None: ...
    def glPatchParameteri(self, pname: int, value: int) -> None: ...
    def glPopDebugGroup(self) -> None: ...
    def glPrimitiveBoundingBox(self, minX: float, minY: float, minZ: float, minW: float, maxX: float, maxY: float, maxZ: float, maxW: float) -> None: ...
    def glProgramBinary(self, program: int, binaryFormat: int, binary: int, length: int) -> None: ...
    def glProgramParameteri(self, program: int, pname: int, value: int) -> None: ...
    def glProgramUniform1f(self, program: int, location: int, v0: float) -> None: ...
    def glProgramUniform1fv(self, program: int, location: int, count: int, value: typing.Sequence[float]) -> None: ...
    def glProgramUniform1i(self, program: int, location: int, v0: int) -> None: ...
    def glProgramUniform1iv(self, program: int, location: int, count: int, value: typing.Sequence[int]) -> None: ...
    def glProgramUniform1ui(self, program: int, location: int, v0: int) -> None: ...
    def glProgramUniform1uiv(self, program: int, location: int, count: int, value: typing.Sequence[int]) -> None: ...
    def glProgramUniform2f(self, program: int, location: int, v0: float, v1: float) -> None: ...
    def glProgramUniform2fv(self, program: int, location: int, count: int, value: typing.Sequence[float]) -> None: ...
    def glProgramUniform2i(self, program: int, location: int, v0: int, v1: int) -> None: ...
    def glProgramUniform2iv(self, program: int, location: int, count: int, value: typing.Sequence[int]) -> None: ...
    def glProgramUniform2ui(self, program: int, location: int, v0: int, v1: int) -> None: ...
    def glProgramUniform2uiv(self, program: int, location: int, count: int, value: typing.Sequence[int]) -> None: ...
    def glProgramUniform3f(self, program: int, location: int, v0: float, v1: float, v2: float) -> None: ...
    def glProgramUniform3fv(self, program: int, location: int, count: int, value: typing.Sequence[float]) -> None: ...
    def glProgramUniform3i(self, program: int, location: int, v0: int, v1: int, v2: int) -> None: ...
    def glProgramUniform3iv(self, program: int, location: int, count: int, value: typing.Sequence[int]) -> None: ...
    def glProgramUniform3ui(self, program: int, location: int, v0: int, v1: int, v2: int) -> None: ...
    def glProgramUniform3uiv(self, program: int, location: int, count: int, value: typing.Sequence[int]) -> None: ...
    def glProgramUniform4f(self, program: int, location: int, v0: float, v1: float, v2: float, v3: float) -> None: ...
    def glProgramUniform4fv(self, program: int, location: int, count: int, value: typing.Sequence[float]) -> None: ...
    def glProgramUniform4i(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int) -> None: ...
    def glProgramUniform4iv(self, program: int, location: int, count: int, value: typing.Sequence[int]) -> None: ...
    def glProgramUniform4ui(self, program: int, location: int, v0: int, v1: int, v2: int, v3: int) -> None: ...
    def glProgramUniform4uiv(self, program: int, location: int, count: int, value: typing.Sequence[int]) -> None: ...
    def glProgramUniformMatrix2fv(self, program: int, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x3fv(self, program: int, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glProgramUniformMatrix2x4fv(self, program: int, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glProgramUniformMatrix3fv(self, program: int, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x2fv(self, program: int, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glProgramUniformMatrix3x4fv(self, program: int, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glProgramUniformMatrix4fv(self, program: int, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x2fv(self, program: int, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glProgramUniformMatrix4x3fv(self, program: int, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glPushDebugGroup(self, source: int, id: int, length: int, message: bytes) -> None: ...
    def glReadBuffer(self, mode: int) -> None: ...
    def glReadnPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, bufSize: int, data: int) -> None: ...
    def glRenderbufferStorageMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int) -> None: ...
    def glSampleMaski(self, maskNumber: int, mask: int) -> None: ...
    def glSamplerParameterIiv(self, sampler: int, pname: int, param: typing.Sequence[int]) -> None: ...
    def glSamplerParameterIuiv(self, sampler: int, pname: int, param: typing.Sequence[int]) -> None: ...
    def glSamplerParameterf(self, sampler: int, pname: int, param: float) -> None: ...
    def glSamplerParameterfv(self, sampler: int, pname: int, param: typing.Sequence[float]) -> None: ...
    def glSamplerParameteri(self, sampler: int, pname: int, param: int) -> None: ...
    def glSamplerParameteriv(self, sampler: int, pname: int, param: typing.Sequence[int]) -> None: ...
    def glTexBuffer(self, target: int, internalformat: int, buffer: int) -> None: ...
    def glTexImage3D(self, target: int, level: int, internalformat: int, width: int, height: int, depth: int, border: int, format: int, type: int, pixels: int) -> None: ...
    def glTexParameterIiv(self, target: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glTexParameterIuiv(self, target: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glTexStorage2D(self, target: int, levels: int, internalformat: int, width: int, height: int) -> None: ...
    def glTexStorage2DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, fixedsamplelocations: int) -> None: ...
    def glTexStorage3D(self, target: int, levels: int, internalformat: int, width: int, height: int, depth: int) -> None: ...
    def glTexStorage3DMultisample(self, target: int, samples: int, internalformat: int, width: int, height: int, depth: int, fixedsamplelocations: int) -> None: ...
    def glTexSubImage3D(self, target: int, level: int, xoffset: int, yoffset: int, zoffset: int, width: int, height: int, depth: int, format: int, type: int, pixels: int) -> None: ...
    def glUniform1ui(self, location: int, v0: int) -> None: ...
    def glUniform1uiv(self, location: int, count: int, value: typing.Sequence[int]) -> None: ...
    def glUniform2ui(self, location: int, v0: int, v1: int) -> None: ...
    def glUniform2uiv(self, location: int, count: int, value: typing.Sequence[int]) -> None: ...
    def glUniform3ui(self, location: int, v0: int, v1: int, v2: int) -> None: ...
    def glUniform3uiv(self, location: int, count: int, value: typing.Sequence[int]) -> None: ...
    def glUniform4ui(self, location: int, v0: int, v1: int, v2: int, v3: int) -> None: ...
    def glUniform4uiv(self, location: int, count: int, value: typing.Sequence[int]) -> None: ...
    def glUniformBlockBinding(self, program: int, uniformBlockIndex: int, uniformBlockBinding: int) -> None: ...
    def glUniformMatrix2x3fv(self, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glUniformMatrix2x4fv(self, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glUniformMatrix3x2fv(self, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glUniformMatrix3x4fv(self, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glUniformMatrix4x2fv(self, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glUniformMatrix4x3fv(self, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glUnmapBuffer(self, target: int) -> int: ...
    def glUseProgramStages(self, pipeline: int, stages: int, program: int) -> None: ...
    def glValidateProgramPipeline(self, pipeline: int) -> None: ...
    def glVertexAttribBinding(self, attribindex: int, bindingindex: int) -> None: ...
    def glVertexAttribDivisor(self, index: int, divisor: int) -> None: ...
    def glVertexAttribFormat(self, attribindex: int, size: int, type: int, normalized: int, relativeoffset: int) -> None: ...
    def glVertexAttribI4i(self, index: int, x: int, y: int, z: int, w: int) -> None: ...
    def glVertexAttribI4iv(self, index: int, v: typing.Sequence[int]) -> None: ...
    def glVertexAttribI4ui(self, index: int, x: int, y: int, z: int, w: int) -> None: ...
    def glVertexAttribI4uiv(self, index: int, v: typing.Sequence[int]) -> None: ...
    def glVertexAttribIFormat(self, attribindex: int, size: int, type: int, relativeoffset: int) -> None: ...
    def glVertexAttribIPointer(self, index: int, size: int, type: int, stride: int, pointer: int) -> None: ...
    def glVertexBindingDivisor(self, bindingindex: int, divisor: int) -> None: ...

class QOpenGLFramebufferObject(shiboken2.Object):
    class Attachment:
        CombinedDepthStencil: ClassVar[QOpenGLFramebufferObject.Attachment] = ...
        Depth: ClassVar[QOpenGLFramebufferObject.Attachment] = ...
        NoAttachment: ClassVar[QOpenGLFramebufferObject.Attachment] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.Attachment: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.Attachment: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.Attachment: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.Attachment: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.Attachment: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.Attachment: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.Attachment: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.Attachment: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.Attachment: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.Attachment: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.Attachment: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.Attachment: ...

    class FramebufferRestorePolicy:
        DontRestoreFramebufferBinding: ClassVar[QOpenGLFramebufferObject.FramebufferRestorePolicy] = ...
        RestoreFrameBufferBinding: ClassVar[QOpenGLFramebufferObject.FramebufferRestorePolicy] = ...
        RestoreFramebufferBindingToDefault: ClassVar[QOpenGLFramebufferObject.FramebufferRestorePolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.FramebufferRestorePolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.FramebufferRestorePolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.FramebufferRestorePolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.FramebufferRestorePolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.FramebufferRestorePolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.FramebufferRestorePolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.FramebufferRestorePolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.FramebufferRestorePolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.FramebufferRestorePolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.FramebufferRestorePolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.FramebufferRestorePolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLFramebufferObject.FramebufferRestorePolicy: ...
    CombinedDepthStencil: ClassVar[QOpenGLFramebufferObject.Attachment] = ...
    Depth: ClassVar[QOpenGLFramebufferObject.Attachment] = ...
    DontRestoreFramebufferBinding: ClassVar[QOpenGLFramebufferObject.FramebufferRestorePolicy] = ...
    NoAttachment: ClassVar[QOpenGLFramebufferObject.Attachment] = ...
    RestoreFrameBufferBinding: ClassVar[QOpenGLFramebufferObject.FramebufferRestorePolicy] = ...
    RestoreFramebufferBindingToDefault: ClassVar[QOpenGLFramebufferObject.FramebufferRestorePolicy] = ...
    @overload
    def __init__(self, size: PySide2.QtCore.QSize, attachment: QOpenGLFramebufferObject.Attachment, target: int = ..., internalFormat: int = ...) -> None: ...
    @overload
    def __init__(self, size: PySide2.QtCore.QSize, format: QOpenGLFramebufferObjectFormat) -> None: ...
    @overload
    def __init__(self, size: PySide2.QtCore.QSize, target: int = ...) -> None: ...
    @overload
    def __init__(self, width: int, height: int, attachment: QOpenGLFramebufferObject.Attachment, target: int = ..., internalFormat: int = ...) -> None: ...
    @overload
    def __init__(self, width: int, height: int, format: QOpenGLFramebufferObjectFormat) -> None: ...
    @overload
    def __init__(self, width: int, height: int, target: int = ...) -> None: ...
    @overload
    def addColorAttachment(self, size: PySide2.QtCore.QSize, internalFormat: int = ...) -> None: ...
    @overload
    def addColorAttachment(self, width: int, height: int, internalFormat: int = ...) -> None: ...
    def attachment(self) -> QOpenGLFramebufferObject.Attachment: ...
    def bind(self) -> bool: ...
    @classmethod
    def bindDefault(cls) -> bool: ...
    @classmethod
    @overload
    def blitFramebuffer(cls, target: QOpenGLFramebufferObject, source: QOpenGLFramebufferObject, buffers: int = ..., filter: int = ...) -> None: ...
    @classmethod
    @overload
    def blitFramebuffer(cls, target: QOpenGLFramebufferObject, targetRect: PySide2.QtCore.QRect, source: QOpenGLFramebufferObject, sourceRect: PySide2.QtCore.QRect, buffers: int, filter: int, readColorAttachmentIndex: int, drawColorAttachmentIndex: int) -> None: ...
    @classmethod
    @overload
    def blitFramebuffer(cls, target: QOpenGLFramebufferObject, targetRect: PySide2.QtCore.QRect, source: QOpenGLFramebufferObject, sourceRect: PySide2.QtCore.QRect, buffers: int, filter: int, readColorAttachmentIndex: int, drawColorAttachmentIndex: int, restorePolicy: QOpenGLFramebufferObject.FramebufferRestorePolicy) -> None: ...
    @classmethod
    @overload
    def blitFramebuffer(cls, target: QOpenGLFramebufferObject, targetRect: PySide2.QtCore.QRect, source: QOpenGLFramebufferObject, sourceRect: PySide2.QtCore.QRect, buffers: int = ..., filter: int = ...) -> None: ...
    def format(self) -> QOpenGLFramebufferObjectFormat: ...
    def handle(self) -> int: ...
    @classmethod
    def hasOpenGLFramebufferBlit(cls) -> bool: ...
    @classmethod
    def hasOpenGLFramebufferObjects(cls) -> bool: ...
    def height(self) -> int: ...
    def isBound(self) -> bool: ...
    def isValid(self) -> bool: ...
    def release(self) -> bool: ...
    def setAttachment(self, attachment: QOpenGLFramebufferObject.Attachment) -> None: ...
    def size(self) -> PySide2.QtCore.QSize: ...
    def sizes(self) -> typing.List[PySide2.QtCore.QSize]: ...
    @overload
    def takeTexture(self) -> int: ...
    @overload
    def takeTexture(self, colorAttachmentIndex: int) -> int: ...
    def texture(self) -> int: ...
    def textures(self) -> typing.List[int]: ...
    @overload
    def toImage(self) -> QImage: ...
    @overload
    def toImage(self, flipped: bool) -> QImage: ...
    @overload
    def toImage(self, flipped: bool, colorAttachmentIndex: int) -> QImage: ...
    def width(self) -> int: ...

class QOpenGLFramebufferObjectFormat(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QOpenGLFramebufferObjectFormat) -> None: ...
    def attachment(self) -> QOpenGLFramebufferObject.Attachment: ...
    def internalTextureFormat(self) -> int: ...
    def mipmap(self) -> bool: ...
    def samples(self) -> int: ...
    def setAttachment(self, attachment: QOpenGLFramebufferObject.Attachment) -> None: ...
    def setInternalTextureFormat(self, internalTextureFormat: int) -> None: ...
    def setMipmap(self, enabled: bool) -> None: ...
    def setSamples(self, samples: int) -> None: ...
    def setTextureTarget(self, target: int) -> None: ...
    def textureTarget(self) -> int: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QOpenGLFunctions(shiboken2.Object):
    class OpenGLFeature:
        BlendColor: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        BlendEquation: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        BlendEquationAdvanced: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        BlendEquationSeparate: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        BlendFuncSeparate: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        BlendSubtract: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        Buffers: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        CompressedTextures: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        FixedFunctionPipeline: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        Framebuffers: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        MultipleRenderTargets: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        Multisample: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        Multitexture: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        NPOTTextureRepeat: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        NPOTTextures: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        Shaders: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        StencilSeparate: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        TextureRGFormats: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLFunctions.OpenGLFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QOpenGLFunctions.OpenGLFeature: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLFunctions.OpenGLFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLFunctions.OpenGLFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLFunctions.OpenGLFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLFunctions.OpenGLFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLFunctions.OpenGLFeatures: ...

    class OpenGLFeatures:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLFunctions.OpenGLFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QOpenGLFunctions.OpenGLFeatures: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLFunctions.OpenGLFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLFunctions.OpenGLFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLFunctions.OpenGLFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLFunctions.OpenGLFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLFunctions.OpenGLFeatures: ...
    BlendColor: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    BlendEquation: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    BlendEquationAdvanced: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    BlendEquationSeparate: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    BlendFuncSeparate: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    BlendSubtract: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    Buffers: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    CompressedTextures: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    FixedFunctionPipeline: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    Framebuffers: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    MultipleRenderTargets: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    Multisample: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    Multitexture: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    NPOTTextureRepeat: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    NPOTTextures: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    Shaders: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    StencilSeparate: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    TextureRGFormats: ClassVar[QOpenGLFunctions.OpenGLFeature] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, context: QOpenGLContext) -> None: ...
    def glActiveTexture(self, texture: int) -> None: ...
    def glAttachShader(self, program: int, shader: int) -> None: ...
    def glBindAttribLocation(self, program: int, index: int, name: bytes) -> None: ...
    def glBindBuffer(self, target: int, buffer: int) -> None: ...
    def glBindFramebuffer(self, target: int, framebuffer: int) -> None: ...
    def glBindRenderbuffer(self, target: int, renderbuffer: int) -> None: ...
    def glBindTexture(self, target: int, texture: int) -> None: ...
    def glBlendColor(self, red: float, green: float, blue: float, alpha: float) -> None: ...
    def glBlendEquation(self, mode: int) -> None: ...
    def glBlendEquationSeparate(self, modeRGB: int, modeAlpha: int) -> None: ...
    def glBlendFunc(self, sfactor: int, dfactor: int) -> None: ...
    def glBlendFuncSeparate(self, srcRGB: int, dstRGB: int, srcAlpha: int, dstAlpha: int) -> None: ...
    def glCheckFramebufferStatus(self, target: int) -> int: ...
    def glClear(self, mask: int) -> None: ...
    def glClearColor(self, red: float, green: float, blue: float, alpha: float) -> None: ...
    def glClearDepthf(self, depth: float) -> None: ...
    def glClearStencil(self, s: int) -> None: ...
    def glColorMask(self, red: int, green: int, blue: int, alpha: int) -> None: ...
    def glCompileShader(self, shader: int) -> None: ...
    def glCompressedTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, imageSize: int, data: int) -> None: ...
    def glCompressedTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, imageSize: int, data: int) -> None: ...
    def glCopyTexImage2D(self, target: int, level: int, internalformat: int, x: int, y: int, width: int, height: int, border: int) -> None: ...
    def glCopyTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, x: int, y: int, width: int, height: int) -> None: ...
    def glCreateProgram(self) -> int: ...
    def glCreateShader(self, type: int) -> int: ...
    def glCullFace(self, mode: int) -> None: ...
    def glDeleteBuffers(self, n: int, buffers: typing.Sequence[int]) -> None: ...
    def glDeleteFramebuffers(self, n: int, framebuffers: typing.Sequence[int]) -> None: ...
    def glDeleteProgram(self, program: int) -> None: ...
    def glDeleteRenderbuffers(self, n: int, renderbuffers: typing.Sequence[int]) -> None: ...
    def glDeleteShader(self, shader: int) -> None: ...
    def glDeleteTextures(self, n: int, textures: typing.Sequence[int]) -> None: ...
    def glDepthFunc(self, func: int) -> None: ...
    def glDepthMask(self, flag: int) -> None: ...
    def glDepthRangef(self, zNear: float, zFar: float) -> None: ...
    def glDetachShader(self, program: int, shader: int) -> None: ...
    def glDisable(self, cap: int) -> None: ...
    def glDisableVertexAttribArray(self, index: int) -> None: ...
    def glDrawArrays(self, mode: int, first: int, count: int) -> None: ...
    def glDrawElements(self, mode: int, count: int, type: int, indices: int) -> None: ...
    def glEnable(self, cap: int) -> None: ...
    def glEnableVertexAttribArray(self, index: int) -> None: ...
    def glFinish(self) -> None: ...
    def glFlush(self) -> None: ...
    def glFramebufferRenderbuffer(self, target: int, attachment: int, renderbuffertarget: int, renderbuffer: int) -> None: ...
    def glFramebufferTexture2D(self, target: int, attachment: int, textarget: int, texture: int, level: int) -> None: ...
    def glFrontFace(self, mode: int) -> None: ...
    def glGenBuffers(self, n: int, buffers: typing.Sequence[int]) -> None: ...
    def glGenFramebuffers(self, n: int, framebuffers: typing.Sequence[int]) -> None: ...
    def glGenRenderbuffers(self, n: int, renderbuffers: typing.Sequence[int]) -> None: ...
    def glGenTextures(self, n: int, textures: typing.Sequence[int]) -> None: ...
    def glGenerateMipmap(self, target: int) -> None: ...
    def glGetAttachedShaders(self, program: int, maxcount: int, count: typing.Sequence[int], shaders: typing.Sequence[int]) -> None: ...
    def glGetAttribLocation(self, program: int, name: bytes) -> int: ...
    def glGetBufferParameteriv(self, target: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetError(self) -> int: ...
    def glGetFloatv(self, pname: int, params: typing.Sequence[float]) -> None: ...
    def glGetFramebufferAttachmentParameteriv(self, target: int, attachment: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetIntegerv(self, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetProgramiv(self, program: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetRenderbufferParameteriv(self, target: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetShaderPrecisionFormat(self, shadertype: int, precisiontype: int, range: typing.Sequence[int], precision: typing.Sequence[int]) -> None: ...
    def glGetShaderiv(self, shader: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetString(self, name: int) -> bytes: ...
    def glGetTexParameterfv(self, target: int, pname: int, params: typing.Sequence[float]) -> None: ...
    def glGetTexParameteriv(self, target: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glGetUniformLocation(self, program: int, name: bytes) -> int: ...
    def glGetUniformfv(self, program: int, location: int, params: typing.Sequence[float]) -> None: ...
    def glGetUniformiv(self, program: int, location: int, params: typing.Sequence[int]) -> None: ...
    def glGetVertexAttribfv(self, index: int, pname: int, params: typing.Sequence[float]) -> None: ...
    def glGetVertexAttribiv(self, index: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glHint(self, target: int, mode: int) -> None: ...
    def glIsBuffer(self, buffer: int) -> int: ...
    def glIsEnabled(self, cap: int) -> int: ...
    def glIsFramebuffer(self, framebuffer: int) -> int: ...
    def glIsProgram(self, program: int) -> int: ...
    def glIsRenderbuffer(self, renderbuffer: int) -> int: ...
    def glIsShader(self, shader: int) -> int: ...
    def glIsTexture(self, texture: int) -> int: ...
    def glLineWidth(self, width: float) -> None: ...
    def glLinkProgram(self, program: int) -> None: ...
    def glPixelStorei(self, pname: int, param: int) -> None: ...
    def glPolygonOffset(self, factor: float, units: float) -> None: ...
    def glReadPixels(self, x: int, y: int, width: int, height: int, format: int, type: int, pixels: int) -> None: ...
    def glReleaseShaderCompiler(self) -> None: ...
    def glRenderbufferStorage(self, target: int, internalformat: int, width: int, height: int) -> None: ...
    def glSampleCoverage(self, value: float, invert: int) -> None: ...
    def glScissor(self, x: int, y: int, width: int, height: int) -> None: ...
    def glShaderBinary(self, n: int, shaders: typing.Sequence[int], binaryformat: int, binary: int, length: int) -> None: ...
    def glStencilFunc(self, func: int, ref: int, mask: int) -> None: ...
    def glStencilFuncSeparate(self, face: int, func: int, ref: int, mask: int) -> None: ...
    def glStencilMask(self, mask: int) -> None: ...
    def glStencilMaskSeparate(self, face: int, mask: int) -> None: ...
    def glStencilOp(self, fail: int, zfail: int, zpass: int) -> None: ...
    def glStencilOpSeparate(self, face: int, fail: int, zfail: int, zpass: int) -> None: ...
    def glTexImage2D(self, target: int, level: int, internalformat: int, width: int, height: int, border: int, format: int, type: int, pixels: int) -> None: ...
    def glTexParameterf(self, target: int, pname: int, param: float) -> None: ...
    def glTexParameterfv(self, target: int, pname: int, params: typing.Sequence[float]) -> None: ...
    def glTexParameteri(self, target: int, pname: int, param: int) -> None: ...
    def glTexParameteriv(self, target: int, pname: int, params: typing.Sequence[int]) -> None: ...
    def glTexSubImage2D(self, target: int, level: int, xoffset: int, yoffset: int, width: int, height: int, format: int, type: int, pixels: int) -> None: ...
    def glUniform1f(self, location: int, x: float) -> None: ...
    def glUniform1fv(self, location: int, count: int, v: typing.Sequence[float]) -> None: ...
    def glUniform1i(self, location: int, x: int) -> None: ...
    def glUniform1iv(self, location: int, count: int, v: typing.Sequence[int]) -> None: ...
    def glUniform2f(self, location: int, x: float, y: float) -> None: ...
    def glUniform2fv(self, location: int, count: int, v: typing.Sequence[float]) -> None: ...
    def glUniform2i(self, location: int, x: int, y: int) -> None: ...
    def glUniform2iv(self, location: int, count: int, v: typing.Sequence[int]) -> None: ...
    def glUniform3f(self, location: int, x: float, y: float, z: float) -> None: ...
    def glUniform3fv(self, location: int, count: int, v: typing.Sequence[float]) -> None: ...
    def glUniform3i(self, location: int, x: int, y: int, z: int) -> None: ...
    def glUniform3iv(self, location: int, count: int, v: typing.Sequence[int]) -> None: ...
    def glUniform4f(self, location: int, x: float, y: float, z: float, w: float) -> None: ...
    def glUniform4fv(self, location: int, count: int, v: typing.Sequence[float]) -> None: ...
    def glUniform4i(self, location: int, x: int, y: int, z: int, w: int) -> None: ...
    def glUniform4iv(self, location: int, count: int, v: typing.Sequence[int]) -> None: ...
    def glUniformMatrix2fv(self, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glUniformMatrix3fv(self, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glUniformMatrix4fv(self, location: int, count: int, transpose: int, value: typing.Sequence[float]) -> None: ...
    def glUseProgram(self, program: int) -> None: ...
    def glValidateProgram(self, program: int) -> None: ...
    def glVertexAttrib1f(self, indx: int, x: float) -> None: ...
    def glVertexAttrib1fv(self, indx: int, values: typing.Sequence[float]) -> None: ...
    def glVertexAttrib2f(self, indx: int, x: float, y: float) -> None: ...
    def glVertexAttrib2fv(self, indx: int, values: typing.Sequence[float]) -> None: ...
    def glVertexAttrib3f(self, indx: int, x: float, y: float, z: float) -> None: ...
    def glVertexAttrib3fv(self, indx: int, values: typing.Sequence[float]) -> None: ...
    def glVertexAttrib4f(self, indx: int, x: float, y: float, z: float, w: float) -> None: ...
    def glVertexAttrib4fv(self, indx: int, values: typing.Sequence[float]) -> None: ...
    def glVertexAttribPointer(self, indx: int, size: int, type: int, normalized: int, stride: int, ptr: int) -> None: ...
    def glViewport(self, x: int, y: int, width: int, height: int) -> None: ...
    def hasOpenGLFeature(self, feature: QOpenGLFunctions.OpenGLFeature) -> bool: ...
    def initializeOpenGLFunctions(self) -> None: ...
    def openGLFeatures(self) -> typing.Union[QOpenGLFunctions.OpenGLFeatures,QOpenGLFunctions.OpenGLFeature]: ...

class QOpenGLPixelTransferOptions(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: QOpenGLPixelTransferOptions) -> None: ...
    def alignment(self) -> int: ...
    def imageHeight(self) -> int: ...
    def isLeastSignificantBitFirst(self) -> bool: ...
    def isSwapBytesEnabled(self) -> bool: ...
    def rowLength(self) -> int: ...
    def setAlignment(self, alignment: int) -> None: ...
    def setImageHeight(self, imageHeight: int) -> None: ...
    def setLeastSignificantByteFirst(self, lsbFirst: bool) -> None: ...
    def setRowLength(self, rowLength: int) -> None: ...
    def setSkipImages(self, skipImages: int) -> None: ...
    def setSkipPixels(self, skipPixels: int) -> None: ...
    def setSkipRows(self, skipRows: int) -> None: ...
    def setSwapBytesEnabled(self, swapBytes: bool) -> None: ...
    def skipImages(self) -> int: ...
    def skipPixels(self) -> int: ...
    def skipRows(self) -> int: ...
    def swap(self, other: QOpenGLPixelTransferOptions) -> None: ...
    def __copy__(self) -> None: ...

class QOpenGLShader(PySide2.QtCore.QObject):
    class ShaderType:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLShader.ShaderType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QOpenGLShader.ShaderType: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLShader.ShaderType: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLShader.ShaderType: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLShader.ShaderType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLShader.ShaderType: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLShader.ShaderType: ...

    class ShaderTypeBit:
        Compute: ClassVar[QOpenGLShader.ShaderTypeBit] = ...
        Fragment: ClassVar[QOpenGLShader.ShaderTypeBit] = ...
        Geometry: ClassVar[QOpenGLShader.ShaderTypeBit] = ...
        TessellationControl: ClassVar[QOpenGLShader.ShaderTypeBit] = ...
        TessellationEvaluation: ClassVar[QOpenGLShader.ShaderTypeBit] = ...
        Vertex: ClassVar[QOpenGLShader.ShaderTypeBit] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLShader.ShaderType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QOpenGLShader.ShaderTypeBit: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLShader.ShaderType: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLShader.ShaderType: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLShader.ShaderType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLShader.ShaderType: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLShader.ShaderType: ...
    Compute: ClassVar[QOpenGLShader.ShaderTypeBit] = ...
    Fragment: ClassVar[QOpenGLShader.ShaderTypeBit] = ...
    Geometry: ClassVar[QOpenGLShader.ShaderTypeBit] = ...
    TessellationControl: ClassVar[QOpenGLShader.ShaderTypeBit] = ...
    TessellationEvaluation: ClassVar[QOpenGLShader.ShaderTypeBit] = ...
    Vertex: ClassVar[QOpenGLShader.ShaderTypeBit] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, type: typing.Union[QOpenGLShader.ShaderType,QOpenGLShader.ShaderTypeBit], parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @overload
    def compileSourceCode(self, source: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> bool: ...
    @overload
    def compileSourceCode(self, source: str) -> bool: ...
    @overload
    def compileSourceCode(self, source: bytes) -> bool: ...
    def compileSourceFile(self, fileName: str) -> bool: ...
    @classmethod
    def hasOpenGLShaders(cls, type: typing.Union[QOpenGLShader.ShaderType,QOpenGLShader.ShaderTypeBit], context: typing.Union[QOpenGLContext,None] = ...) -> bool: ...
    def isCompiled(self) -> bool: ...
    def log(self) -> str: ...
    def shaderId(self) -> int: ...
    def shaderType(self) -> typing.Union[QOpenGLShader.ShaderType,QOpenGLShader.ShaderTypeBit]: ...
    def sourceCode(self) -> PySide2.QtCore.QByteArray: ...

class QOpenGLShaderProgram(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @overload
    def addCacheableShaderFromSourceCode(self, type: typing.Union[QOpenGLShader.ShaderType,QOpenGLShader.ShaderTypeBit], source: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> bool: ...
    @overload
    def addCacheableShaderFromSourceCode(self, type: typing.Union[QOpenGLShader.ShaderType,QOpenGLShader.ShaderTypeBit], source: str) -> bool: ...
    @overload
    def addCacheableShaderFromSourceCode(self, type: typing.Union[QOpenGLShader.ShaderType,QOpenGLShader.ShaderTypeBit], source: bytes) -> bool: ...
    def addCacheableShaderFromSourceFile(self, type: typing.Union[QOpenGLShader.ShaderType,QOpenGLShader.ShaderTypeBit], fileName: str) -> bool: ...
    def addShader(self, shader: QOpenGLShader) -> bool: ...
    @overload
    def addShaderFromSourceCode(self, type: typing.Union[QOpenGLShader.ShaderType,QOpenGLShader.ShaderTypeBit], source: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> bool: ...
    @overload
    def addShaderFromSourceCode(self, type: typing.Union[QOpenGLShader.ShaderType,QOpenGLShader.ShaderTypeBit], source: str) -> bool: ...
    @overload
    def addShaderFromSourceCode(self, type: typing.Union[QOpenGLShader.ShaderType,QOpenGLShader.ShaderTypeBit], source: bytes) -> bool: ...
    def addShaderFromSourceFile(self, type: typing.Union[QOpenGLShader.ShaderType,QOpenGLShader.ShaderTypeBit], fileName: str) -> bool: ...
    @overload
    def attributeLocation(self, name: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> int: ...
    @overload
    def attributeLocation(self, name: str) -> int: ...
    @overload
    def attributeLocation(self, name: bytes) -> int: ...
    def bind(self) -> bool: ...
    @overload
    def bindAttributeLocation(self, name: typing.Union[PySide2.QtCore.QByteArray,bytes], location: int) -> None: ...
    @overload
    def bindAttributeLocation(self, name: str, location: int) -> None: ...
    @overload
    def bindAttributeLocation(self, name: bytes, location: int) -> None: ...
    def create(self) -> bool: ...
    def defaultInnerTessellationLevels(self) -> typing.List[float]: ...
    def defaultOuterTessellationLevels(self) -> typing.List[float]: ...
    @overload
    def disableAttributeArray(self, location: int) -> None: ...
    @overload
    def disableAttributeArray(self, name: bytes) -> None: ...
    @overload
    def enableAttributeArray(self, location: int) -> None: ...
    @overload
    def enableAttributeArray(self, name: bytes) -> None: ...
    @classmethod
    def hasOpenGLShaderPrograms(cls, context: typing.Union[QOpenGLContext,None] = ...) -> bool: ...
    def isLinked(self) -> bool: ...
    def link(self) -> bool: ...
    def log(self) -> str: ...
    def maxGeometryOutputVertices(self) -> int: ...
    def patchVertexCount(self) -> int: ...
    def programId(self) -> int: ...
    def release(self) -> None: ...
    def removeAllShaders(self) -> None: ...
    def removeShader(self, shader: QOpenGLShader) -> None: ...
    @overload
    def setAttributeArray(self, location: int, type: int, values: int, tupleSize: int, stride: int = ...) -> None: ...
    @overload
    def setAttributeArray(self, location: int, values: typing.Sequence[float], tupleSize: int, stride: int = ...) -> None: ...
    @overload
    def setAttributeArray(self, name: bytes, type: int, values: int, tupleSize: int, stride: int = ...) -> None: ...
    @overload
    def setAttributeArray(self, name: bytes, values: typing.Sequence[float], tupleSize: int, stride: int = ...) -> None: ...
    @overload
    def setAttributeBuffer(self, location: int, type: int, offset: int, tupleSize: int, stride: int = ...) -> None: ...
    @overload
    def setAttributeBuffer(self, name: bytes, type: int, offset: int, tupleSize: int, stride: int = ...) -> None: ...
    @overload
    def setAttributeValue(self, location: int, value: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def setAttributeValue(self, location: int, value: QVector2D) -> None: ...
    @overload
    def setAttributeValue(self, location: int, value: QVector3D) -> None: ...
    @overload
    def setAttributeValue(self, location: int, value: QVector4D) -> None: ...
    @overload
    def setAttributeValue(self, location: int, value: float) -> None: ...
    @overload
    def setAttributeValue(self, location: int, values: typing.Sequence[float], columns: int, rows: int) -> None: ...
    @overload
    def setAttributeValue(self, location: int, x: float, y: float) -> None: ...
    @overload
    def setAttributeValue(self, location: int, x: float, y: float, z: float) -> None: ...
    @overload
    def setAttributeValue(self, location: int, x: float, y: float, z: float, w: float) -> None: ...
    @overload
    def setAttributeValue(self, name: bytes, value: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def setAttributeValue(self, name: bytes, value: QVector2D) -> None: ...
    @overload
    def setAttributeValue(self, name: bytes, value: QVector3D) -> None: ...
    @overload
    def setAttributeValue(self, name: bytes, value: QVector4D) -> None: ...
    @overload
    def setAttributeValue(self, name: bytes, value: float) -> None: ...
    @overload
    def setAttributeValue(self, name: bytes, values: typing.Sequence[float], columns: int, rows: int) -> None: ...
    @overload
    def setAttributeValue(self, name: bytes, x: float, y: float) -> None: ...
    @overload
    def setAttributeValue(self, name: bytes, x: float, y: float, z: float) -> None: ...
    @overload
    def setAttributeValue(self, name: bytes, x: float, y: float, z: float, w: float) -> None: ...
    def setDefaultInnerTessellationLevels(self, levels: typing.List[float]) -> None: ...
    def setDefaultOuterTessellationLevels(self, levels: typing.List[float]) -> None: ...
    def setPatchVertexCount(self, count: int) -> None: ...
    @overload
    def setUniformValue(self, location: int, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def setUniformValue(self, location: int, point: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def setUniformValue(self, location: int, point: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def setUniformValue(self, location: int, size: PySide2.QtCore.QSize) -> None: ...
    @overload
    def setUniformValue(self, location: int, size: PySide2.QtCore.QSizeF) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: QMatrix2x2) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: QMatrix2x3) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: QMatrix2x4) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: QMatrix3x2) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: QMatrix3x3) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: QMatrix3x4) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: QMatrix4x2) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: QMatrix4x3) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: QMatrix4x4) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: QTransform) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: QVector2D) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: QVector3D) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: QVector4D) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: float) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: typing.Tuple[typing.Tuple[float,float],typing.Tuple[float,float]]) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: typing.Tuple[typing.Tuple[float,float,float],typing.Tuple[float,float,float],typing.Tuple[float,float,float]]) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: typing.Tuple[typing.Tuple[float,float,float,float],typing.Tuple[float,float,float,float],typing.Tuple[float,float,float,float],typing.Tuple[float,float,float,float]]) -> None: ...
    @overload
    def setUniformValue(self, location: int, value: int) -> None: ...
    @overload
    def setUniformValue(self, location: int, x: float, y: float) -> None: ...
    @overload
    def setUniformValue(self, location: int, x: float, y: float, z: float) -> None: ...
    @overload
    def setUniformValue(self, location: int, x: float, y: float, z: float, w: float) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, point: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, point: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, size: PySide2.QtCore.QSize) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, size: PySide2.QtCore.QSizeF) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: QMatrix2x2) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: QMatrix2x3) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: QMatrix2x4) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: QMatrix3x2) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: QMatrix3x3) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: QMatrix3x4) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: QMatrix4x2) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: QMatrix4x3) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: QMatrix4x4) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: QTransform) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: QVector2D) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: QVector3D) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: QVector4D) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: typing.Tuple[typing.Tuple[float,float],typing.Tuple[float,float]]) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: typing.Tuple[typing.Tuple[float,float,float],typing.Tuple[float,float,float],typing.Tuple[float,float,float]]) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, value: typing.Tuple[typing.Tuple[float,float,float,float],typing.Tuple[float,float,float,float],typing.Tuple[float,float,float,float],typing.Tuple[float,float,float,float]]) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, x: float, y: float) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, x: float, y: float, z: float) -> None: ...
    @overload
    def setUniformValue(self, name: bytes, x: float, y: float, z: float, w: float) -> None: ...
    @overload
    def setUniformValue1f(self, arg__1: bytes, arg__2: float) -> None: ...
    @overload
    def setUniformValue1f(self, arg__1: int, arg__2: float) -> None: ...
    @overload
    def setUniformValue1i(self, arg__1: bytes, arg__2: int) -> None: ...
    @overload
    def setUniformValue1i(self, arg__1: int, arg__2: int) -> None: ...
    @overload
    def setUniformValueArray(self, location: int, values: typing.Sequence[float], count: int, tupleSize: int) -> None: ...
    @overload
    def setUniformValueArray(self, location: int, values: typing.Sequence[int], count: int) -> None: ...
    @overload
    def setUniformValueArray(self, name: bytes, values: typing.Sequence[float], count: int, tupleSize: int) -> None: ...
    @overload
    def setUniformValueArray(self, name: bytes, values: typing.Sequence[int], count: int) -> None: ...
    def shaders(self) -> typing.List[QOpenGLShader]: ...
    @overload
    def uniformLocation(self, name: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> int: ...
    @overload
    def uniformLocation(self, name: str) -> int: ...
    @overload
    def uniformLocation(self, name: bytes) -> int: ...

class QOpenGLTexture(shiboken2.Object):
    class BindingTarget:
        BindingTarget1D: ClassVar[QOpenGLTexture.BindingTarget] = ...
        BindingTarget1DArray: ClassVar[QOpenGLTexture.BindingTarget] = ...
        BindingTarget2D: ClassVar[QOpenGLTexture.BindingTarget] = ...
        BindingTarget2DArray: ClassVar[QOpenGLTexture.BindingTarget] = ...
        BindingTarget2DMultisample: ClassVar[QOpenGLTexture.BindingTarget] = ...
        BindingTarget2DMultisampleArray: ClassVar[QOpenGLTexture.BindingTarget] = ...
        BindingTarget3D: ClassVar[QOpenGLTexture.BindingTarget] = ...
        BindingTargetBuffer: ClassVar[QOpenGLTexture.BindingTarget] = ...
        BindingTargetCubeMap: ClassVar[QOpenGLTexture.BindingTarget] = ...
        BindingTargetCubeMapArray: ClassVar[QOpenGLTexture.BindingTarget] = ...
        BindingTargetRectangle: ClassVar[QOpenGLTexture.BindingTarget] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.BindingTarget: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.BindingTarget: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.BindingTarget: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.BindingTarget: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.BindingTarget: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.BindingTarget: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.BindingTarget: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.BindingTarget: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.BindingTarget: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.BindingTarget: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.BindingTarget: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.BindingTarget: ...

    class ComparisonFunction:
        CommpareNotEqual: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
        CompareAlways: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
        CompareEqual: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
        CompareGreater: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
        CompareGreaterEqual: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
        CompareLess: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
        CompareLessEqual: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
        CompareNever: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonFunction: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonFunction: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonFunction: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonFunction: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonFunction: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonFunction: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonFunction: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonFunction: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonFunction: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonFunction: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonFunction: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonFunction: ...

    class ComparisonMode:
        CompareNone: ClassVar[QOpenGLTexture.ComparisonMode] = ...
        CompareRefToTexture: ClassVar[QOpenGLTexture.ComparisonMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonMode: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.ComparisonMode: ...

    class CoordinateDirection:
        DirectionR: ClassVar[QOpenGLTexture.CoordinateDirection] = ...
        DirectionS: ClassVar[QOpenGLTexture.CoordinateDirection] = ...
        DirectionT: ClassVar[QOpenGLTexture.CoordinateDirection] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.CoordinateDirection: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.CoordinateDirection: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.CoordinateDirection: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.CoordinateDirection: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.CoordinateDirection: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.CoordinateDirection: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.CoordinateDirection: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.CoordinateDirection: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.CoordinateDirection: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.CoordinateDirection: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.CoordinateDirection: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.CoordinateDirection: ...

    class CubeMapFace:
        CubeMapNegativeX: ClassVar[QOpenGLTexture.CubeMapFace] = ...
        CubeMapNegativeY: ClassVar[QOpenGLTexture.CubeMapFace] = ...
        CubeMapNegativeZ: ClassVar[QOpenGLTexture.CubeMapFace] = ...
        CubeMapPositiveX: ClassVar[QOpenGLTexture.CubeMapFace] = ...
        CubeMapPositiveY: ClassVar[QOpenGLTexture.CubeMapFace] = ...
        CubeMapPositiveZ: ClassVar[QOpenGLTexture.CubeMapFace] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.CubeMapFace: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.CubeMapFace: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.CubeMapFace: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.CubeMapFace: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.CubeMapFace: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.CubeMapFace: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.CubeMapFace: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.CubeMapFace: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.CubeMapFace: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.CubeMapFace: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.CubeMapFace: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.CubeMapFace: ...

    class DepthStencilMode:
        DepthMode: ClassVar[QOpenGLTexture.DepthStencilMode] = ...
        StencilMode: ClassVar[QOpenGLTexture.DepthStencilMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.DepthStencilMode: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.DepthStencilMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.DepthStencilMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.DepthStencilMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.DepthStencilMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.DepthStencilMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.DepthStencilMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.DepthStencilMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.DepthStencilMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.DepthStencilMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.DepthStencilMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.DepthStencilMode: ...

    class Feature:
        AnisotropicFiltering: ClassVar[QOpenGLTexture.Feature] = ...
        ImmutableMultisampleStorage: ClassVar[QOpenGLTexture.Feature] = ...
        ImmutableStorage: ClassVar[QOpenGLTexture.Feature] = ...
        MaxFeatureFlag: ClassVar[QOpenGLTexture.Feature] = ...
        NPOTTextureRepeat: ClassVar[QOpenGLTexture.Feature] = ...
        NPOTTextures: ClassVar[QOpenGLTexture.Feature] = ...
        StencilTexturing: ClassVar[QOpenGLTexture.Feature] = ...
        Swizzle: ClassVar[QOpenGLTexture.Feature] = ...
        Texture1D: ClassVar[QOpenGLTexture.Feature] = ...
        Texture3D: ClassVar[QOpenGLTexture.Feature] = ...
        TextureArrays: ClassVar[QOpenGLTexture.Feature] = ...
        TextureBuffer: ClassVar[QOpenGLTexture.Feature] = ...
        TextureComparisonOperators: ClassVar[QOpenGLTexture.Feature] = ...
        TextureCubeMapArrays: ClassVar[QOpenGLTexture.Feature] = ...
        TextureMipMapLevel: ClassVar[QOpenGLTexture.Feature] = ...
        TextureMultisample: ClassVar[QOpenGLTexture.Feature] = ...
        TextureRectangle: ClassVar[QOpenGLTexture.Feature] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.Features: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QOpenGLTexture.Feature: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.Features: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.Features: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.Features: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.Features: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.Features: ...

    class Features:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.Features: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QOpenGLTexture.Features: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.Features: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.Features: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.Features: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.Features: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.Features: ...

    class Filter:
        Linear: ClassVar[QOpenGLTexture.Filter] = ...
        LinearMipMapLinear: ClassVar[QOpenGLTexture.Filter] = ...
        LinearMipMapNearest: ClassVar[QOpenGLTexture.Filter] = ...
        Nearest: ClassVar[QOpenGLTexture.Filter] = ...
        NearestMipMapLinear: ClassVar[QOpenGLTexture.Filter] = ...
        NearestMipMapNearest: ClassVar[QOpenGLTexture.Filter] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.Filter: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.Filter: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.Filter: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.Filter: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.Filter: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.Filter: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.Filter: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.Filter: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.Filter: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.Filter: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.Filter: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.Filter: ...

    class MipMapGeneration:
        DontGenerateMipMaps: ClassVar[QOpenGLTexture.MipMapGeneration] = ...
        GenerateMipMaps: ClassVar[QOpenGLTexture.MipMapGeneration] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.MipMapGeneration: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.MipMapGeneration: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.MipMapGeneration: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.MipMapGeneration: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.MipMapGeneration: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.MipMapGeneration: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.MipMapGeneration: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.MipMapGeneration: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.MipMapGeneration: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.MipMapGeneration: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.MipMapGeneration: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.MipMapGeneration: ...

    class PixelFormat:
        Alpha: ClassVar[QOpenGLTexture.PixelFormat] = ...
        BGR: ClassVar[QOpenGLTexture.PixelFormat] = ...
        BGRA: ClassVar[QOpenGLTexture.PixelFormat] = ...
        BGRA_Integer: ClassVar[QOpenGLTexture.PixelFormat] = ...
        BGR_Integer: ClassVar[QOpenGLTexture.PixelFormat] = ...
        Depth: ClassVar[QOpenGLTexture.PixelFormat] = ...
        DepthStencil: ClassVar[QOpenGLTexture.PixelFormat] = ...
        Luminance: ClassVar[QOpenGLTexture.PixelFormat] = ...
        LuminanceAlpha: ClassVar[QOpenGLTexture.PixelFormat] = ...
        NoSourceFormat: ClassVar[QOpenGLTexture.PixelFormat] = ...
        RG: ClassVar[QOpenGLTexture.PixelFormat] = ...
        RGB: ClassVar[QOpenGLTexture.PixelFormat] = ...
        RGBA: ClassVar[QOpenGLTexture.PixelFormat] = ...
        RGBA_Integer: ClassVar[QOpenGLTexture.PixelFormat] = ...
        RGB_Integer: ClassVar[QOpenGLTexture.PixelFormat] = ...
        RG_Integer: ClassVar[QOpenGLTexture.PixelFormat] = ...
        Red: ClassVar[QOpenGLTexture.PixelFormat] = ...
        Red_Integer: ClassVar[QOpenGLTexture.PixelFormat] = ...
        Stencil: ClassVar[QOpenGLTexture.PixelFormat] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelFormat: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelFormat: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelFormat: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelFormat: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelFormat: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelFormat: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelFormat: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelFormat: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelFormat: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelFormat: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelFormat: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelFormat: ...

    class PixelType:
        Float16: ClassVar[QOpenGLTexture.PixelType] = ...
        Float16OES: ClassVar[QOpenGLTexture.PixelType] = ...
        Float32: ClassVar[QOpenGLTexture.PixelType] = ...
        Float32_D32_UInt32_S8_X24: ClassVar[QOpenGLTexture.PixelType] = ...
        Int16: ClassVar[QOpenGLTexture.PixelType] = ...
        Int32: ClassVar[QOpenGLTexture.PixelType] = ...
        Int8: ClassVar[QOpenGLTexture.PixelType] = ...
        NoPixelType: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt16: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt16_R5G6B5: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt16_R5G6B5_Rev: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt16_RGB5A1: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt16_RGB5A1_Rev: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt16_RGBA4: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt16_RGBA4_Rev: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt32: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt32_D24S8: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt32_RG11B10F: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt32_RGB10A2: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt32_RGB10A2_Rev: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt32_RGB9_E5: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt32_RGBA8: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt32_RGBA8_Rev: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt8: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt8_RG3B2: ClassVar[QOpenGLTexture.PixelType] = ...
        UInt8_RG3B2_Rev: ClassVar[QOpenGLTexture.PixelType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelType: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelType: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelType: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelType: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelType: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.PixelType: ...

    class SwizzleComponent:
        SwizzleAlpha: ClassVar[QOpenGLTexture.SwizzleComponent] = ...
        SwizzleBlue: ClassVar[QOpenGLTexture.SwizzleComponent] = ...
        SwizzleGreen: ClassVar[QOpenGLTexture.SwizzleComponent] = ...
        SwizzleRed: ClassVar[QOpenGLTexture.SwizzleComponent] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleComponent: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleComponent: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleComponent: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleComponent: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleComponent: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleComponent: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleComponent: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleComponent: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleComponent: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleComponent: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleComponent: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleComponent: ...

    class SwizzleValue:
        AlphaValue: ClassVar[QOpenGLTexture.SwizzleValue] = ...
        BlueValue: ClassVar[QOpenGLTexture.SwizzleValue] = ...
        GreenValue: ClassVar[QOpenGLTexture.SwizzleValue] = ...
        OneValue: ClassVar[QOpenGLTexture.SwizzleValue] = ...
        RedValue: ClassVar[QOpenGLTexture.SwizzleValue] = ...
        ZeroValue: ClassVar[QOpenGLTexture.SwizzleValue] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleValue: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleValue: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleValue: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleValue: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleValue: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleValue: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleValue: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleValue: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleValue: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleValue: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleValue: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.SwizzleValue: ...

    class Target:
        Target1D: ClassVar[QOpenGLTexture.Target] = ...
        Target1DArray: ClassVar[QOpenGLTexture.Target] = ...
        Target2D: ClassVar[QOpenGLTexture.Target] = ...
        Target2DArray: ClassVar[QOpenGLTexture.Target] = ...
        Target2DMultisample: ClassVar[QOpenGLTexture.Target] = ...
        Target2DMultisampleArray: ClassVar[QOpenGLTexture.Target] = ...
        Target3D: ClassVar[QOpenGLTexture.Target] = ...
        TargetBuffer: ClassVar[QOpenGLTexture.Target] = ...
        TargetCubeMap: ClassVar[QOpenGLTexture.Target] = ...
        TargetCubeMapArray: ClassVar[QOpenGLTexture.Target] = ...
        TargetRectangle: ClassVar[QOpenGLTexture.Target] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.Target: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.Target: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.Target: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.Target: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.Target: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.Target: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.Target: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.Target: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.Target: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.Target: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.Target: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.Target: ...

    class TextureFormat:
        AlphaFormat: ClassVar[QOpenGLTexture.TextureFormat] = ...
        D16: ClassVar[QOpenGLTexture.TextureFormat] = ...
        D24: ClassVar[QOpenGLTexture.TextureFormat] = ...
        D24S8: ClassVar[QOpenGLTexture.TextureFormat] = ...
        D32: ClassVar[QOpenGLTexture.TextureFormat] = ...
        D32F: ClassVar[QOpenGLTexture.TextureFormat] = ...
        D32FS8X24: ClassVar[QOpenGLTexture.TextureFormat] = ...
        DepthFormat: ClassVar[QOpenGLTexture.TextureFormat] = ...
        LuminanceAlphaFormat: ClassVar[QOpenGLTexture.TextureFormat] = ...
        LuminanceFormat: ClassVar[QOpenGLTexture.TextureFormat] = ...
        NoFormat: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R11_EAC_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R11_EAC_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R16F: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R16I: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R16U: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R16_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R16_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R32F: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R32I: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R32U: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R5G6B5: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R8I: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R8U: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R8_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R8_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG11B10F: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG11_EAC_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG11_EAC_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG16F: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG16I: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG16U: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG16_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG16_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG32F: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG32I: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG32U: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG3B2: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG8I: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG8U: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG8_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG8_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB10A2: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB16F: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB16I: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB16U: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB16_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB16_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB32F: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB32I: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB32U: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB5A1: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB8I: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB8U: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB8_ETC1: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB8_ETC2: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB8_PunchThrough_Alpha1_ETC2: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB8_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB8_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB9E5: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA16F: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA16I: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA16U: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA16_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA16_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA32F: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA32I: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA32U: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA4: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA8I: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA8U: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA8_ETC2_EAC: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA8_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA8_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBAFormat: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_ASTC_10x10: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_ASTC_10x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_ASTC_10x6: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_ASTC_10x8: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_ASTC_12x10: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_ASTC_12x12: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_ASTC_4x4: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_ASTC_5x4: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_ASTC_5x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_ASTC_6x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_ASTC_6x6: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_ASTC_8x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_ASTC_8x6: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_ASTC_8x8: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_DXT1: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_DXT3: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBA_DXT5: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGBFormat: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB_BP_SIGNED_FLOAT: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB_BP_UNSIGNED_FLOAT: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB_BP_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RGB_DXT1: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG_ATI2N_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        RG_ATI2N_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R_ATI1N_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        R_ATI1N_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        S8: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8_ASTC_10x10: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8_ASTC_10x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8_ASTC_10x6: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8_ASTC_10x8: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8_ASTC_12x10: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8_ASTC_12x12: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8_ASTC_4x4: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8_ASTC_5x4: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8_ASTC_5x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8_ASTC_6x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8_ASTC_6x6: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8_ASTC_8x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8_ASTC_8x6: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8_ASTC_8x8: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_Alpha8_ETC2_EAC: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_ETC2: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB8_PunchThrough_Alpha1_ETC2: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB_Alpha_DXT1: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB_Alpha_DXT3: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB_Alpha_DXT5: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB_BP_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
        SRGB_DXT1: ClassVar[QOpenGLTexture.TextureFormat] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormat: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormat: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormat: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormat: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormat: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormat: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormat: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormat: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormat: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormat: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormat: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormat: ...

    class TextureFormatClass:
        FormatClass_128Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_16Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_24Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_32Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_48Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_64Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_8Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_96Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_BPTC_Float: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_BPTC_Unorm: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_RGTC1_R: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_RGTC2_RG: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_S3TC_DXT1_RGB: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_S3TC_DXT1_RGBA: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_S3TC_DXT3_RGBA: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_S3TC_DXT5_RGBA: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        FormatClass_Unique: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        NoFormatClass: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormatClass: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormatClass: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormatClass: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormatClass: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormatClass: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormatClass: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormatClass: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormatClass: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormatClass: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormatClass: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormatClass: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureFormatClass: ...

    class TextureUnitReset:
        DontResetTextureUnit: ClassVar[QOpenGLTexture.TextureUnitReset] = ...
        ResetTextureUnit: ClassVar[QOpenGLTexture.TextureUnitReset] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureUnitReset: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureUnitReset: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureUnitReset: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureUnitReset: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureUnitReset: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureUnitReset: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureUnitReset: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureUnitReset: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureUnitReset: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureUnitReset: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureUnitReset: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.TextureUnitReset: ...

    class WrapMode:
        ClampToBorder: ClassVar[QOpenGLTexture.WrapMode] = ...
        ClampToEdge: ClassVar[QOpenGLTexture.WrapMode] = ...
        MirroredRepeat: ClassVar[QOpenGLTexture.WrapMode] = ...
        Repeat: ClassVar[QOpenGLTexture.WrapMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTexture.WrapMode: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTexture.WrapMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTexture.WrapMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTexture.WrapMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTexture.WrapMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTexture.WrapMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTexture.WrapMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTexture.WrapMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTexture.WrapMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTexture.WrapMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTexture.WrapMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTexture.WrapMode: ...
    Alpha: ClassVar[QOpenGLTexture.PixelFormat] = ...
    AlphaFormat: ClassVar[QOpenGLTexture.TextureFormat] = ...
    AlphaValue: ClassVar[QOpenGLTexture.SwizzleValue] = ...
    AnisotropicFiltering: ClassVar[QOpenGLTexture.Feature] = ...
    BGR: ClassVar[QOpenGLTexture.PixelFormat] = ...
    BGRA: ClassVar[QOpenGLTexture.PixelFormat] = ...
    BGRA_Integer: ClassVar[QOpenGLTexture.PixelFormat] = ...
    BGR_Integer: ClassVar[QOpenGLTexture.PixelFormat] = ...
    BindingTarget1D: ClassVar[QOpenGLTexture.BindingTarget] = ...
    BindingTarget1DArray: ClassVar[QOpenGLTexture.BindingTarget] = ...
    BindingTarget2D: ClassVar[QOpenGLTexture.BindingTarget] = ...
    BindingTarget2DArray: ClassVar[QOpenGLTexture.BindingTarget] = ...
    BindingTarget2DMultisample: ClassVar[QOpenGLTexture.BindingTarget] = ...
    BindingTarget2DMultisampleArray: ClassVar[QOpenGLTexture.BindingTarget] = ...
    BindingTarget3D: ClassVar[QOpenGLTexture.BindingTarget] = ...
    BindingTargetBuffer: ClassVar[QOpenGLTexture.BindingTarget] = ...
    BindingTargetCubeMap: ClassVar[QOpenGLTexture.BindingTarget] = ...
    BindingTargetCubeMapArray: ClassVar[QOpenGLTexture.BindingTarget] = ...
    BindingTargetRectangle: ClassVar[QOpenGLTexture.BindingTarget] = ...
    BlueValue: ClassVar[QOpenGLTexture.SwizzleValue] = ...
    ClampToBorder: ClassVar[QOpenGLTexture.WrapMode] = ...
    ClampToEdge: ClassVar[QOpenGLTexture.WrapMode] = ...
    CommpareNotEqual: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
    CompareAlways: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
    CompareEqual: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
    CompareGreater: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
    CompareGreaterEqual: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
    CompareLess: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
    CompareLessEqual: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
    CompareNever: ClassVar[QOpenGLTexture.ComparisonFunction] = ...
    CompareNone: ClassVar[QOpenGLTexture.ComparisonMode] = ...
    CompareRefToTexture: ClassVar[QOpenGLTexture.ComparisonMode] = ...
    CubeMapNegativeX: ClassVar[QOpenGLTexture.CubeMapFace] = ...
    CubeMapNegativeY: ClassVar[QOpenGLTexture.CubeMapFace] = ...
    CubeMapNegativeZ: ClassVar[QOpenGLTexture.CubeMapFace] = ...
    CubeMapPositiveX: ClassVar[QOpenGLTexture.CubeMapFace] = ...
    CubeMapPositiveY: ClassVar[QOpenGLTexture.CubeMapFace] = ...
    CubeMapPositiveZ: ClassVar[QOpenGLTexture.CubeMapFace] = ...
    D16: ClassVar[QOpenGLTexture.TextureFormat] = ...
    D24: ClassVar[QOpenGLTexture.TextureFormat] = ...
    D24S8: ClassVar[QOpenGLTexture.TextureFormat] = ...
    D32: ClassVar[QOpenGLTexture.TextureFormat] = ...
    D32F: ClassVar[QOpenGLTexture.TextureFormat] = ...
    D32FS8X24: ClassVar[QOpenGLTexture.TextureFormat] = ...
    Depth: ClassVar[QOpenGLTexture.PixelFormat] = ...
    DepthFormat: ClassVar[QOpenGLTexture.TextureFormat] = ...
    DepthMode: ClassVar[QOpenGLTexture.DepthStencilMode] = ...
    DepthStencil: ClassVar[QOpenGLTexture.PixelFormat] = ...
    DirectionR: ClassVar[QOpenGLTexture.CoordinateDirection] = ...
    DirectionS: ClassVar[QOpenGLTexture.CoordinateDirection] = ...
    DirectionT: ClassVar[QOpenGLTexture.CoordinateDirection] = ...
    DontGenerateMipMaps: ClassVar[QOpenGLTexture.MipMapGeneration] = ...
    DontResetTextureUnit: ClassVar[QOpenGLTexture.TextureUnitReset] = ...
    Float16: ClassVar[QOpenGLTexture.PixelType] = ...
    Float16OES: ClassVar[QOpenGLTexture.PixelType] = ...
    Float32: ClassVar[QOpenGLTexture.PixelType] = ...
    Float32_D32_UInt32_S8_X24: ClassVar[QOpenGLTexture.PixelType] = ...
    FormatClass_128Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_16Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_24Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_32Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_48Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_64Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_8Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_96Bit: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_BPTC_Float: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_BPTC_Unorm: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_RGTC1_R: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_RGTC2_RG: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_S3TC_DXT1_RGB: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_S3TC_DXT1_RGBA: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_S3TC_DXT3_RGBA: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_S3TC_DXT5_RGBA: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    FormatClass_Unique: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    GenerateMipMaps: ClassVar[QOpenGLTexture.MipMapGeneration] = ...
    GreenValue: ClassVar[QOpenGLTexture.SwizzleValue] = ...
    ImmutableMultisampleStorage: ClassVar[QOpenGLTexture.Feature] = ...
    ImmutableStorage: ClassVar[QOpenGLTexture.Feature] = ...
    Int16: ClassVar[QOpenGLTexture.PixelType] = ...
    Int32: ClassVar[QOpenGLTexture.PixelType] = ...
    Int8: ClassVar[QOpenGLTexture.PixelType] = ...
    Linear: ClassVar[QOpenGLTexture.Filter] = ...
    LinearMipMapLinear: ClassVar[QOpenGLTexture.Filter] = ...
    LinearMipMapNearest: ClassVar[QOpenGLTexture.Filter] = ...
    Luminance: ClassVar[QOpenGLTexture.PixelFormat] = ...
    LuminanceAlpha: ClassVar[QOpenGLTexture.PixelFormat] = ...
    LuminanceAlphaFormat: ClassVar[QOpenGLTexture.TextureFormat] = ...
    LuminanceFormat: ClassVar[QOpenGLTexture.TextureFormat] = ...
    MaxFeatureFlag: ClassVar[QOpenGLTexture.Feature] = ...
    MirroredRepeat: ClassVar[QOpenGLTexture.WrapMode] = ...
    NPOTTextureRepeat: ClassVar[QOpenGLTexture.Feature] = ...
    NPOTTextures: ClassVar[QOpenGLTexture.Feature] = ...
    Nearest: ClassVar[QOpenGLTexture.Filter] = ...
    NearestMipMapLinear: ClassVar[QOpenGLTexture.Filter] = ...
    NearestMipMapNearest: ClassVar[QOpenGLTexture.Filter] = ...
    NoFormat: ClassVar[QOpenGLTexture.TextureFormat] = ...
    NoFormatClass: ClassVar[QOpenGLTexture.TextureFormatClass] = ...
    NoPixelType: ClassVar[QOpenGLTexture.PixelType] = ...
    NoSourceFormat: ClassVar[QOpenGLTexture.PixelFormat] = ...
    OneValue: ClassVar[QOpenGLTexture.SwizzleValue] = ...
    R11_EAC_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    R11_EAC_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    R16F: ClassVar[QOpenGLTexture.TextureFormat] = ...
    R16I: ClassVar[QOpenGLTexture.TextureFormat] = ...
    R16U: ClassVar[QOpenGLTexture.TextureFormat] = ...
    R16_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    R16_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    R32F: ClassVar[QOpenGLTexture.TextureFormat] = ...
    R32I: ClassVar[QOpenGLTexture.TextureFormat] = ...
    R32U: ClassVar[QOpenGLTexture.TextureFormat] = ...
    R5G6B5: ClassVar[QOpenGLTexture.TextureFormat] = ...
    R8I: ClassVar[QOpenGLTexture.TextureFormat] = ...
    R8U: ClassVar[QOpenGLTexture.TextureFormat] = ...
    R8_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    R8_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG: ClassVar[QOpenGLTexture.PixelFormat] = ...
    RG11B10F: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG11_EAC_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG11_EAC_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG16F: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG16I: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG16U: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG16_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG16_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG32F: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG32I: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG32U: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG3B2: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG8I: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG8U: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG8_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG8_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB: ClassVar[QOpenGLTexture.PixelFormat] = ...
    RGB10A2: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB16F: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB16I: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB16U: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB16_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB16_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB32F: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB32I: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB32U: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB5A1: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB8I: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB8U: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB8_ETC1: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB8_ETC2: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB8_PunchThrough_Alpha1_ETC2: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB8_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB8_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB9E5: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA: ClassVar[QOpenGLTexture.PixelFormat] = ...
    RGBA16F: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA16I: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA16U: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA16_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA16_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA32F: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA32I: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA32U: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA4: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA8I: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA8U: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA8_ETC2_EAC: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA8_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA8_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBAFormat: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_ASTC_10x10: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_ASTC_10x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_ASTC_10x6: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_ASTC_10x8: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_ASTC_12x10: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_ASTC_12x12: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_ASTC_4x4: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_ASTC_5x4: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_ASTC_5x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_ASTC_6x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_ASTC_6x6: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_ASTC_8x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_ASTC_8x6: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_ASTC_8x8: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_DXT1: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_DXT3: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_DXT5: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGBA_Integer: ClassVar[QOpenGLTexture.PixelFormat] = ...
    RGBFormat: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB_BP_SIGNED_FLOAT: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB_BP_UNSIGNED_FLOAT: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB_BP_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB_DXT1: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RGB_Integer: ClassVar[QOpenGLTexture.PixelFormat] = ...
    RG_ATI2N_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG_ATI2N_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    RG_Integer: ClassVar[QOpenGLTexture.PixelFormat] = ...
    R_ATI1N_SNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    R_ATI1N_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    Red: ClassVar[QOpenGLTexture.PixelFormat] = ...
    RedValue: ClassVar[QOpenGLTexture.SwizzleValue] = ...
    Red_Integer: ClassVar[QOpenGLTexture.PixelFormat] = ...
    Repeat: ClassVar[QOpenGLTexture.WrapMode] = ...
    ResetTextureUnit: ClassVar[QOpenGLTexture.TextureUnitReset] = ...
    S8: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8_ASTC_10x10: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8_ASTC_10x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8_ASTC_10x6: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8_ASTC_10x8: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8_ASTC_12x10: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8_ASTC_12x12: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8_ASTC_4x4: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8_ASTC_5x4: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8_ASTC_5x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8_ASTC_6x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8_ASTC_6x6: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8_ASTC_8x5: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8_ASTC_8x6: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8_ASTC_8x8: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_Alpha8_ETC2_EAC: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_ETC2: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB8_PunchThrough_Alpha1_ETC2: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB_Alpha_DXT1: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB_Alpha_DXT3: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB_Alpha_DXT5: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB_BP_UNorm: ClassVar[QOpenGLTexture.TextureFormat] = ...
    SRGB_DXT1: ClassVar[QOpenGLTexture.TextureFormat] = ...
    Stencil: ClassVar[QOpenGLTexture.PixelFormat] = ...
    StencilMode: ClassVar[QOpenGLTexture.DepthStencilMode] = ...
    StencilTexturing: ClassVar[QOpenGLTexture.Feature] = ...
    Swizzle: ClassVar[QOpenGLTexture.Feature] = ...
    SwizzleAlpha: ClassVar[QOpenGLTexture.SwizzleComponent] = ...
    SwizzleBlue: ClassVar[QOpenGLTexture.SwizzleComponent] = ...
    SwizzleGreen: ClassVar[QOpenGLTexture.SwizzleComponent] = ...
    SwizzleRed: ClassVar[QOpenGLTexture.SwizzleComponent] = ...
    Target1D: ClassVar[QOpenGLTexture.Target] = ...
    Target1DArray: ClassVar[QOpenGLTexture.Target] = ...
    Target2D: ClassVar[QOpenGLTexture.Target] = ...
    Target2DArray: ClassVar[QOpenGLTexture.Target] = ...
    Target2DMultisample: ClassVar[QOpenGLTexture.Target] = ...
    Target2DMultisampleArray: ClassVar[QOpenGLTexture.Target] = ...
    Target3D: ClassVar[QOpenGLTexture.Target] = ...
    TargetBuffer: ClassVar[QOpenGLTexture.Target] = ...
    TargetCubeMap: ClassVar[QOpenGLTexture.Target] = ...
    TargetCubeMapArray: ClassVar[QOpenGLTexture.Target] = ...
    TargetRectangle: ClassVar[QOpenGLTexture.Target] = ...
    Texture1D: ClassVar[QOpenGLTexture.Feature] = ...
    Texture3D: ClassVar[QOpenGLTexture.Feature] = ...
    TextureArrays: ClassVar[QOpenGLTexture.Feature] = ...
    TextureBuffer: ClassVar[QOpenGLTexture.Feature] = ...
    TextureComparisonOperators: ClassVar[QOpenGLTexture.Feature] = ...
    TextureCubeMapArrays: ClassVar[QOpenGLTexture.Feature] = ...
    TextureMipMapLevel: ClassVar[QOpenGLTexture.Feature] = ...
    TextureMultisample: ClassVar[QOpenGLTexture.Feature] = ...
    TextureRectangle: ClassVar[QOpenGLTexture.Feature] = ...
    UInt16: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt16_R5G6B5: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt16_R5G6B5_Rev: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt16_RGB5A1: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt16_RGB5A1_Rev: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt16_RGBA4: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt16_RGBA4_Rev: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt32: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt32_D24S8: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt32_RG11B10F: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt32_RGB10A2: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt32_RGB10A2_Rev: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt32_RGB9_E5: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt32_RGBA8: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt32_RGBA8_Rev: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt8: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt8_RG3B2: ClassVar[QOpenGLTexture.PixelType] = ...
    UInt8_RG3B2_Rev: ClassVar[QOpenGLTexture.PixelType] = ...
    ZeroValue: ClassVar[QOpenGLTexture.SwizzleValue] = ...
    @overload
    def __init__(self, image: QImage, genMipMaps: QOpenGLTexture.MipMapGeneration = ...) -> None: ...
    @overload
    def __init__(self, target: QOpenGLTexture.Target) -> None: ...
    @overload
    def allocateStorage(self) -> None: ...
    @overload
    def allocateStorage(self, pixelFormat: QOpenGLTexture.PixelFormat, pixelType: QOpenGLTexture.PixelType) -> None: ...
    @overload
    def bind(self) -> None: ...
    @overload
    def bind(self, unit: int, reset: QOpenGLTexture.TextureUnitReset = ...) -> None: ...
    def borderColor(self) -> QColor: ...
    @classmethod
    @overload
    def boundTextureId(cls, target: QOpenGLTexture.BindingTarget) -> int: ...
    @classmethod
    @overload
    def boundTextureId(cls, unit: int, target: QOpenGLTexture.BindingTarget) -> int: ...
    def comparisonFunction(self) -> QOpenGLTexture.ComparisonFunction: ...
    def comparisonMode(self) -> QOpenGLTexture.ComparisonMode: ...
    def create(self) -> bool: ...
    def createTextureView(self, target: QOpenGLTexture.Target, viewFormat: QOpenGLTexture.TextureFormat, minimumMipmapLevel: int, maximumMipmapLevel: int, minimumLayer: int, maximumLayer: int) -> QOpenGLTexture: ...
    def depth(self) -> int: ...
    def depthStencilMode(self) -> QOpenGLTexture.DepthStencilMode: ...
    def destroy(self) -> None: ...
    def faces(self) -> int: ...
    def format(self) -> QOpenGLTexture.TextureFormat: ...
    @overload
    def generateMipMaps(self) -> None: ...
    @overload
    def generateMipMaps(self, baseLevel: int, resetBaseLevel: bool = ...) -> None: ...
    @classmethod
    def hasFeature(cls, feature: QOpenGLTexture.Feature) -> bool: ...
    def height(self) -> int: ...
    def isAutoMipMapGenerationEnabled(self) -> bool: ...
    @overload
    def isBound(self) -> bool: ...
    @overload
    def isBound(self, unit: int) -> bool: ...
    def isCreated(self) -> bool: ...
    def isFixedSamplePositions(self) -> bool: ...
    def isStorageAllocated(self) -> bool: ...
    def isTextureView(self) -> bool: ...
    def layers(self) -> int: ...
    def levelOfDetailRange(self) -> typing.Tuple[float,float]: ...
    def levelofDetailBias(self) -> float: ...
    def magnificationFilter(self) -> QOpenGLTexture.Filter: ...
    def maximumAnisotropy(self) -> float: ...
    def maximumLevelOfDetail(self) -> float: ...
    def maximumMipLevels(self) -> int: ...
    def minMagFilters(self) -> typing.Tuple[QOpenGLTexture.Filter,QOpenGLTexture.Filter]: ...
    def minificationFilter(self) -> QOpenGLTexture.Filter: ...
    def minimumLevelOfDetail(self) -> float: ...
    def mipBaseLevel(self) -> int: ...
    def mipLevelRange(self) -> typing.Tuple[int,int]: ...
    def mipLevels(self) -> int: ...
    def mipMaxLevel(self) -> int: ...
    @overload
    def release(self) -> None: ...
    @overload
    def release(self, unit: int, reset: QOpenGLTexture.TextureUnitReset = ...) -> None: ...
    def samples(self) -> int: ...
    def setAutoMipMapGenerationEnabled(self, enabled: bool) -> None: ...
    @overload
    def setBorderColor(self, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def setBorderColor(self, r: float, g: float, b: float, a: float) -> None: ...
    @overload
    def setBorderColor(self, r: int, g: int, b: int, a: int) -> None: ...
    def setComparisonFunction(self, function: QOpenGLTexture.ComparisonFunction) -> None: ...
    def setComparisonMode(self, mode: QOpenGLTexture.ComparisonMode) -> None: ...
    @overload
    def setCompressedData(self, dataSize: int, data: int, options: typing.Union[QOpenGLPixelTransferOptions,None] = ...) -> None: ...
    @overload
    def setCompressedData(self, mipLevel: int, dataSize: int, data: int, options: typing.Union[QOpenGLPixelTransferOptions,None] = ...) -> None: ...
    @overload
    def setCompressedData(self, mipLevel: int, layer: int, cubeFace: QOpenGLTexture.CubeMapFace, dataSize: int, data: int, options: typing.Union[QOpenGLPixelTransferOptions,None] = ...) -> None: ...
    @overload
    def setCompressedData(self, mipLevel: int, layer: int, dataSize: int, data: int, options: typing.Union[QOpenGLPixelTransferOptions,None] = ...) -> None: ...
    @overload
    def setCompressedData(self, mipLevel: int, layer: int, layerCount: int, cubeFace: QOpenGLTexture.CubeMapFace, dataSize: int, data: int, options: typing.Union[QOpenGLPixelTransferOptions,None] = ...) -> None: ...
    @overload
    def setData(self, image: QImage, genMipMaps: QOpenGLTexture.MipMapGeneration = ...) -> None: ...
    @overload
    def setData(self, mipLevel: int, layer: int, cubeFace: QOpenGLTexture.CubeMapFace, sourceFormat: QOpenGLTexture.PixelFormat, sourceType: QOpenGLTexture.PixelType, data: int, options: typing.Union[QOpenGLPixelTransferOptions,None] = ...) -> None: ...
    @overload
    def setData(self, mipLevel: int, layer: int, layerCount: int, cubeFace: QOpenGLTexture.CubeMapFace, sourceFormat: QOpenGLTexture.PixelFormat, sourceType: QOpenGLTexture.PixelType, data: int, options: typing.Union[QOpenGLPixelTransferOptions,None] = ...) -> None: ...
    @overload
    def setData(self, mipLevel: int, layer: int, sourceFormat: QOpenGLTexture.PixelFormat, sourceType: QOpenGLTexture.PixelType, data: int, options: typing.Union[QOpenGLPixelTransferOptions,None] = ...) -> None: ...
    @overload
    def setData(self, mipLevel: int, sourceFormat: QOpenGLTexture.PixelFormat, sourceType: QOpenGLTexture.PixelType, data: int, options: typing.Union[QOpenGLPixelTransferOptions,None] = ...) -> None: ...
    @overload
    def setData(self, sourceFormat: QOpenGLTexture.PixelFormat, sourceType: QOpenGLTexture.PixelType, data: int, options: typing.Union[QOpenGLPixelTransferOptions,None] = ...) -> None: ...
    @overload
    def setData(self, xOffset: int, yOffset: int, zOffset: int, width: int, height: int, depth: int, mipLevel: int, layer: int, cubeFace: QOpenGLTexture.CubeMapFace, layerCount: int, sourceFormat: QOpenGLTexture.PixelFormat, sourceType: QOpenGLTexture.PixelType, data: int, options: typing.Union[QOpenGLPixelTransferOptions,None] = ...) -> None: ...
    @overload
    def setData(self, xOffset: int, yOffset: int, zOffset: int, width: int, height: int, depth: int, mipLevel: int, layer: int, cubeFace: QOpenGLTexture.CubeMapFace, sourceFormat: QOpenGLTexture.PixelFormat, sourceType: QOpenGLTexture.PixelType, data: int, options: typing.Union[QOpenGLPixelTransferOptions,None] = ...) -> None: ...
    @overload
    def setData(self, xOffset: int, yOffset: int, zOffset: int, width: int, height: int, depth: int, mipLevel: int, layer: int, sourceFormat: QOpenGLTexture.PixelFormat, sourceType: QOpenGLTexture.PixelType, data: int, options: typing.Union[QOpenGLPixelTransferOptions,None] = ...) -> None: ...
    @overload
    def setData(self, xOffset: int, yOffset: int, zOffset: int, width: int, height: int, depth: int, sourceFormat: QOpenGLTexture.PixelFormat, sourceType: QOpenGLTexture.PixelType, data: int, options: typing.Union[QOpenGLPixelTransferOptions,None] = ...) -> None: ...
    def setDepthStencilMode(self, mode: QOpenGLTexture.DepthStencilMode) -> None: ...
    def setFixedSamplePositions(self, fixed: bool) -> None: ...
    def setFormat(self, format: QOpenGLTexture.TextureFormat) -> None: ...
    def setLayers(self, layers: int) -> None: ...
    def setLevelOfDetailRange(self, min: float, max: float) -> None: ...
    def setLevelofDetailBias(self, bias: float) -> None: ...
    def setMagnificationFilter(self, filter: QOpenGLTexture.Filter) -> None: ...
    def setMaximumAnisotropy(self, anisotropy: float) -> None: ...
    def setMaximumLevelOfDetail(self, value: float) -> None: ...
    def setMinMagFilters(self, minificationFilter: QOpenGLTexture.Filter, magnificationFilter: QOpenGLTexture.Filter) -> None: ...
    def setMinificationFilter(self, filter: QOpenGLTexture.Filter) -> None: ...
    def setMinimumLevelOfDetail(self, value: float) -> None: ...
    def setMipBaseLevel(self, baseLevel: int) -> None: ...
    def setMipLevelRange(self, baseLevel: int, maxLevel: int) -> None: ...
    def setMipLevels(self, levels: int) -> None: ...
    def setMipMaxLevel(self, maxLevel: int) -> None: ...
    def setSamples(self, samples: int) -> None: ...
    def setSize(self, width: int, height: int = ..., depth: int = ...) -> None: ...
    @overload
    def setSwizzleMask(self, component: QOpenGLTexture.SwizzleComponent, value: QOpenGLTexture.SwizzleValue) -> None: ...
    @overload
    def setSwizzleMask(self, r: QOpenGLTexture.SwizzleValue, g: QOpenGLTexture.SwizzleValue, b: QOpenGLTexture.SwizzleValue, a: QOpenGLTexture.SwizzleValue) -> None: ...
    @overload
    def setWrapMode(self, direction: QOpenGLTexture.CoordinateDirection, mode: QOpenGLTexture.WrapMode) -> None: ...
    @overload
    def setWrapMode(self, mode: QOpenGLTexture.WrapMode) -> None: ...
    def swizzleMask(self, component: QOpenGLTexture.SwizzleComponent) -> QOpenGLTexture.SwizzleValue: ...
    def target(self) -> QOpenGLTexture.Target: ...
    def textureId(self) -> int: ...
    def width(self) -> int: ...
    def wrapMode(self, direction: QOpenGLTexture.CoordinateDirection) -> QOpenGLTexture.WrapMode: ...

class QOpenGLTextureBlitter(shiboken2.Object):
    class Origin:
        OriginBottomLeft: ClassVar[QOpenGLTextureBlitter.Origin] = ...
        OriginTopLeft: ClassVar[QOpenGLTextureBlitter.Origin] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLTextureBlitter.Origin: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLTextureBlitter.Origin: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLTextureBlitter.Origin: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLTextureBlitter.Origin: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLTextureBlitter.Origin: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLTextureBlitter.Origin: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLTextureBlitter.Origin: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLTextureBlitter.Origin: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLTextureBlitter.Origin: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLTextureBlitter.Origin: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLTextureBlitter.Origin: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLTextureBlitter.Origin: ...
    OriginBottomLeft: ClassVar[QOpenGLTextureBlitter.Origin] = ...
    OriginTopLeft: ClassVar[QOpenGLTextureBlitter.Origin] = ...
    def __init__(self) -> None: ...
    def bind(self, target: int = ...) -> None: ...
    @overload
    def blit(self, texture: int, targetTransform: QMatrix4x4, sourceOrigin: QOpenGLTextureBlitter.Origin) -> None: ...
    @overload
    def blit(self, texture: int, targetTransform: QMatrix4x4, sourceTransform: QMatrix3x3) -> None: ...
    def create(self) -> bool: ...
    def destroy(self) -> None: ...
    def isCreated(self) -> bool: ...
    def release(self) -> None: ...
    def setOpacity(self, opacity: float) -> None: ...
    def setRedBlueSwizzle(self, swizzle: bool) -> None: ...
    @classmethod
    def sourceTransform(cls, subTexture: PySide2.QtCore.QRectF, textureSize: PySide2.QtCore.QSize, origin: QOpenGLTextureBlitter.Origin) -> QMatrix3x3: ...
    def supportsExternalOESTarget(self) -> bool: ...
    @classmethod
    def targetTransform(cls, target: PySide2.QtCore.QRectF, viewport: PySide2.QtCore.QRect) -> QMatrix4x4: ...

class QOpenGLTimeMonitor(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def create(self) -> bool: ...
    def destroy(self) -> None: ...
    def isCreated(self) -> bool: ...
    def isResultAvailable(self) -> bool: ...
    def objectIds(self) -> typing.List[int]: ...
    def recordSample(self) -> int: ...
    def reset(self) -> None: ...
    def sampleCount(self) -> int: ...
    def setSampleCount(self, sampleCount: int) -> None: ...
    def waitForIntervals(self) -> typing.List[int]: ...
    def waitForSamples(self) -> typing.List[int]: ...

class QOpenGLTimerQuery(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def begin(self) -> None: ...
    def create(self) -> bool: ...
    def destroy(self) -> None: ...
    def end(self) -> None: ...
    def isCreated(self) -> bool: ...
    def isResultAvailable(self) -> bool: ...
    def objectId(self) -> int: ...
    def recordTimestamp(self) -> None: ...
    def waitForResult(self) -> int: ...
    def waitForTimestamp(self) -> int: ...

class QOpenGLVersionProfile(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, format: QSurfaceFormat) -> None: ...
    @overload
    def __init__(self, other: QOpenGLVersionProfile) -> None: ...
    def hasProfiles(self) -> bool: ...
    def isLegacyVersion(self) -> bool: ...
    def isValid(self) -> bool: ...
    def profile(self) -> QSurfaceFormat.OpenGLContextProfile: ...
    def setProfile(self, profile: QSurfaceFormat.OpenGLContextProfile) -> None: ...
    def setVersion(self, majorVersion: int, minorVersion: int) -> None: ...
    def version(self) -> typing.Tuple[int,int]: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QOpenGLVertexArrayObject(PySide2.QtCore.QObject):
    class Binder(shiboken2.Object):
        def __init__(self, v: QOpenGLVertexArrayObject) -> None: ...
        def rebind(self) -> None: ...
        def release(self) -> None: ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def bind(self) -> None: ...
    def create(self) -> bool: ...
    def destroy(self) -> None: ...
    def isCreated(self) -> bool: ...
    def objectId(self) -> int: ...
    def release(self) -> None: ...

class QOpenGLWindow(QPaintDeviceWindow):
    class UpdateBehavior:
        NoPartialUpdate: ClassVar[QOpenGLWindow.UpdateBehavior] = ...
        PartialUpdateBlend: ClassVar[QOpenGLWindow.UpdateBehavior] = ...
        PartialUpdateBlit: ClassVar[QOpenGLWindow.UpdateBehavior] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QOpenGLWindow.UpdateBehavior: ...
        def __and__(self, other: typing.SupportsInt) -> QOpenGLWindow.UpdateBehavior: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QOpenGLWindow.UpdateBehavior: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QOpenGLWindow.UpdateBehavior: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QOpenGLWindow.UpdateBehavior: ...
        def __rand__(self, other: typing.SupportsInt) -> QOpenGLWindow.UpdateBehavior: ...
        def __rmul__(self, other: typing.SupportsInt) -> QOpenGLWindow.UpdateBehavior: ...
        def __ror__(self, other: typing.SupportsInt) -> QOpenGLWindow.UpdateBehavior: ...
        def __rsub__(self, other: typing.SupportsInt) -> QOpenGLWindow.UpdateBehavior: ...
        def __rxor__(self, other: typing.SupportsInt) -> QOpenGLWindow.UpdateBehavior: ...
        def __sub__(self, other: typing.SupportsInt) -> QOpenGLWindow.UpdateBehavior: ...
        def __xor__(self, other: typing.SupportsInt) -> QOpenGLWindow.UpdateBehavior: ...
    NoPartialUpdate: ClassVar[QOpenGLWindow.UpdateBehavior] = ...
    PartialUpdateBlend: ClassVar[QOpenGLWindow.UpdateBehavior] = ...
    PartialUpdateBlit: ClassVar[QOpenGLWindow.UpdateBehavior] = ...
    frameSwapped: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, shareContext: QOpenGLContext, updateBehavior: QOpenGLWindow.UpdateBehavior = ..., parent: typing.Union[QWindow,None] = ..., active: bool = ..., activeChanged: typing.Callable = ..., contentOrientation: PySide2.QtCore.Qt.ScreenOrientation = ..., contentOrientationChanged: typing.Callable = ..., destroyed: typing.Callable = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., focusObjectChanged: typing.Callable = ..., frameSwapped: typing.Callable = ..., height: int = ..., heightChanged: typing.Callable = ..., maximumHeight: int = ..., maximumHeightChanged: typing.Callable = ..., maximumWidth: int = ..., maximumWidthChanged: typing.Callable = ..., minimumHeight: int = ..., minimumHeightChanged: typing.Callable = ..., minimumWidth: int = ..., minimumWidthChanged: typing.Callable = ..., modality: PySide2.QtCore.Qt.WindowModality = ..., modalityChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., screenChanged: typing.Callable = ..., title: str = ..., transientParent: typing.Any = ..., transientParentChanged: typing.Callable = ..., visibility: QOpenGLWindow.Visibility = ..., visibilityChanged: typing.Callable = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., width: int = ..., widthChanged: typing.Callable = ..., windowStateChanged: typing.Callable = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., xChanged: typing.Callable = ..., y: int = ..., yChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, updateBehavior: QOpenGLWindow.UpdateBehavior = ..., parent: typing.Union[QWindow,None] = ..., active: bool = ..., activeChanged: typing.Callable = ..., contentOrientation: PySide2.QtCore.Qt.ScreenOrientation = ..., contentOrientationChanged: typing.Callable = ..., destroyed: typing.Callable = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., focusObjectChanged: typing.Callable = ..., frameSwapped: typing.Callable = ..., height: int = ..., heightChanged: typing.Callable = ..., maximumHeight: int = ..., maximumHeightChanged: typing.Callable = ..., maximumWidth: int = ..., maximumWidthChanged: typing.Callable = ..., minimumHeight: int = ..., minimumHeightChanged: typing.Callable = ..., minimumWidth: int = ..., minimumWidthChanged: typing.Callable = ..., modality: PySide2.QtCore.Qt.WindowModality = ..., modalityChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., screenChanged: typing.Callable = ..., title: str = ..., transientParent: typing.Any = ..., transientParentChanged: typing.Callable = ..., visibility: QOpenGLWindow.Visibility = ..., visibilityChanged: typing.Callable = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., width: int = ..., widthChanged: typing.Callable = ..., windowStateChanged: typing.Callable = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., xChanged: typing.Callable = ..., y: int = ..., yChanged: typing.Callable = ...) -> None: ...
    def context(self) -> QOpenGLContext: ...
    def defaultFramebufferObject(self) -> int: ...
    def doneCurrent(self) -> None: ...
    def grabFramebuffer(self) -> QImage: ...
    def initializeGL(self) -> None: ...
    def isValid(self) -> bool: ...
    def makeCurrent(self) -> None: ...
    def metric(self, metric: QPaintDevice.PaintDeviceMetric) -> int: ...
    def paintEvent(self, event: QPaintEvent) -> None: ...
    def paintGL(self) -> None: ...
    def paintOverGL(self) -> None: ...
    def paintUnderGL(self) -> None: ...
    def redirected(self, arg__1: PySide2.QtCore.QPoint) -> QPaintDevice: ...
    def resizeEvent(self, event: QResizeEvent) -> None: ...
    def resizeGL(self, w: int, h: int) -> None: ...
    def shareContext(self) -> QOpenGLContext: ...
    def updateBehavior(self) -> QOpenGLWindow.UpdateBehavior: ...

class QPageLayout(shiboken2.Object):
    class Mode:
        FullPageMode: ClassVar[QPageLayout.Mode] = ...
        StandardMode: ClassVar[QPageLayout.Mode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPageLayout.Mode: ...
        def __and__(self, other: typing.SupportsInt) -> QPageLayout.Mode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPageLayout.Mode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPageLayout.Mode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPageLayout.Mode: ...
        def __rand__(self, other: typing.SupportsInt) -> QPageLayout.Mode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPageLayout.Mode: ...
        def __ror__(self, other: typing.SupportsInt) -> QPageLayout.Mode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPageLayout.Mode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPageLayout.Mode: ...
        def __sub__(self, other: typing.SupportsInt) -> QPageLayout.Mode: ...
        def __xor__(self, other: typing.SupportsInt) -> QPageLayout.Mode: ...

    class Orientation:
        Landscape: ClassVar[QPageLayout.Orientation] = ...
        Portrait: ClassVar[QPageLayout.Orientation] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPageLayout.Orientation: ...
        def __and__(self, other: typing.SupportsInt) -> QPageLayout.Orientation: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPageLayout.Orientation: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPageLayout.Orientation: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPageLayout.Orientation: ...
        def __rand__(self, other: typing.SupportsInt) -> QPageLayout.Orientation: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPageLayout.Orientation: ...
        def __ror__(self, other: typing.SupportsInt) -> QPageLayout.Orientation: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPageLayout.Orientation: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPageLayout.Orientation: ...
        def __sub__(self, other: typing.SupportsInt) -> QPageLayout.Orientation: ...
        def __xor__(self, other: typing.SupportsInt) -> QPageLayout.Orientation: ...

    class Unit:
        Cicero: ClassVar[QPageLayout.Unit] = ...
        Didot: ClassVar[QPageLayout.Unit] = ...
        Inch: ClassVar[QPageLayout.Unit] = ...
        Millimeter: ClassVar[QPageLayout.Unit] = ...
        Pica: ClassVar[QPageLayout.Unit] = ...
        Point: ClassVar[QPageLayout.Unit] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPageLayout.Unit: ...
        def __and__(self, other: typing.SupportsInt) -> QPageLayout.Unit: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPageLayout.Unit: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPageLayout.Unit: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPageLayout.Unit: ...
        def __rand__(self, other: typing.SupportsInt) -> QPageLayout.Unit: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPageLayout.Unit: ...
        def __ror__(self, other: typing.SupportsInt) -> QPageLayout.Unit: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPageLayout.Unit: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPageLayout.Unit: ...
        def __sub__(self, other: typing.SupportsInt) -> QPageLayout.Unit: ...
        def __xor__(self, other: typing.SupportsInt) -> QPageLayout.Unit: ...
    Cicero: ClassVar[QPageLayout.Unit] = ...
    Didot: ClassVar[QPageLayout.Unit] = ...
    FullPageMode: ClassVar[QPageLayout.Mode] = ...
    Inch: ClassVar[QPageLayout.Unit] = ...
    Landscape: ClassVar[QPageLayout.Orientation] = ...
    Millimeter: ClassVar[QPageLayout.Unit] = ...
    Pica: ClassVar[QPageLayout.Unit] = ...
    Point: ClassVar[QPageLayout.Unit] = ...
    Portrait: ClassVar[QPageLayout.Orientation] = ...
    StandardMode: ClassVar[QPageLayout.Mode] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QPageLayout) -> None: ...
    @overload
    def __init__(self, pageSize: QPageSize, orientation: QPageLayout.Orientation, margins: PySide2.QtCore.QMarginsF, units: QPageLayout.Unit = ..., minMargins: PySide2.QtCore.QMarginsF = ...) -> None: ...
    @overload
    def fullRect(self) -> PySide2.QtCore.QRectF: ...
    @overload
    def fullRect(self, units: QPageLayout.Unit) -> PySide2.QtCore.QRectF: ...
    def fullRectPixels(self, resolution: int) -> PySide2.QtCore.QRect: ...
    def fullRectPoints(self) -> PySide2.QtCore.QRect: ...
    def isEquivalentTo(self, other: QPageLayout) -> bool: ...
    def isValid(self) -> bool: ...
    @overload
    def margins(self) -> PySide2.QtCore.QMarginsF: ...
    @overload
    def margins(self, units: QPageLayout.Unit) -> PySide2.QtCore.QMarginsF: ...
    def marginsPixels(self, resolution: int) -> PySide2.QtCore.QMargins: ...
    def marginsPoints(self) -> PySide2.QtCore.QMargins: ...
    def maximumMargins(self) -> PySide2.QtCore.QMarginsF: ...
    def minimumMargins(self) -> PySide2.QtCore.QMarginsF: ...
    def mode(self) -> QPageLayout.Mode: ...
    def orientation(self) -> QPageLayout.Orientation: ...
    def pageSize(self) -> QPageSize: ...
    @overload
    def paintRect(self) -> PySide2.QtCore.QRectF: ...
    @overload
    def paintRect(self, units: QPageLayout.Unit) -> PySide2.QtCore.QRectF: ...
    def paintRectPixels(self, resolution: int) -> PySide2.QtCore.QRect: ...
    def paintRectPoints(self) -> PySide2.QtCore.QRect: ...
    def setBottomMargin(self, bottomMargin: float) -> bool: ...
    def setLeftMargin(self, leftMargin: float) -> bool: ...
    def setMargins(self, margins: PySide2.QtCore.QMarginsF) -> bool: ...
    def setMinimumMargins(self, minMargins: PySide2.QtCore.QMarginsF) -> None: ...
    def setMode(self, mode: QPageLayout.Mode) -> None: ...
    def setOrientation(self, orientation: QPageLayout.Orientation) -> None: ...
    def setPageSize(self, pageSize: QPageSize, minMargins: PySide2.QtCore.QMarginsF = ...) -> None: ...
    def setRightMargin(self, rightMargin: float) -> bool: ...
    def setTopMargin(self, topMargin: float) -> bool: ...
    def setUnits(self, units: QPageLayout.Unit) -> None: ...
    def swap(self, other: QPageLayout) -> None: ...
    def units(self) -> QPageLayout.Unit: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QPageSize(shiboken2.Object):
    class PageSizeId:
        A0: ClassVar[QPageSize.PageSizeId] = ...
        A1: ClassVar[QPageSize.PageSizeId] = ...
        A10: ClassVar[QPageSize.PageSizeId] = ...
        A2: ClassVar[QPageSize.PageSizeId] = ...
        A3: ClassVar[QPageSize.PageSizeId] = ...
        A3Extra: ClassVar[QPageSize.PageSizeId] = ...
        A4: ClassVar[QPageSize.PageSizeId] = ...
        A4Extra: ClassVar[QPageSize.PageSizeId] = ...
        A4Plus: ClassVar[QPageSize.PageSizeId] = ...
        A4Small: ClassVar[QPageSize.PageSizeId] = ...
        A5: ClassVar[QPageSize.PageSizeId] = ...
        A5Extra: ClassVar[QPageSize.PageSizeId] = ...
        A6: ClassVar[QPageSize.PageSizeId] = ...
        A7: ClassVar[QPageSize.PageSizeId] = ...
        A8: ClassVar[QPageSize.PageSizeId] = ...
        A9: ClassVar[QPageSize.PageSizeId] = ...
        AnsiA: ClassVar[QPageSize.PageSizeId] = ...
        AnsiB: ClassVar[QPageSize.PageSizeId] = ...
        AnsiC: ClassVar[QPageSize.PageSizeId] = ...
        AnsiD: ClassVar[QPageSize.PageSizeId] = ...
        AnsiE: ClassVar[QPageSize.PageSizeId] = ...
        ArchA: ClassVar[QPageSize.PageSizeId] = ...
        ArchB: ClassVar[QPageSize.PageSizeId] = ...
        ArchC: ClassVar[QPageSize.PageSizeId] = ...
        ArchD: ClassVar[QPageSize.PageSizeId] = ...
        ArchE: ClassVar[QPageSize.PageSizeId] = ...
        B0: ClassVar[QPageSize.PageSizeId] = ...
        B1: ClassVar[QPageSize.PageSizeId] = ...
        B10: ClassVar[QPageSize.PageSizeId] = ...
        B2: ClassVar[QPageSize.PageSizeId] = ...
        B3: ClassVar[QPageSize.PageSizeId] = ...
        B4: ClassVar[QPageSize.PageSizeId] = ...
        B5: ClassVar[QPageSize.PageSizeId] = ...
        B5Extra: ClassVar[QPageSize.PageSizeId] = ...
        B6: ClassVar[QPageSize.PageSizeId] = ...
        B7: ClassVar[QPageSize.PageSizeId] = ...
        B8: ClassVar[QPageSize.PageSizeId] = ...
        B9: ClassVar[QPageSize.PageSizeId] = ...
        C5E: ClassVar[QPageSize.PageSizeId] = ...
        Comm10E: ClassVar[QPageSize.PageSizeId] = ...
        Custom: ClassVar[QPageSize.PageSizeId] = ...
        DLE: ClassVar[QPageSize.PageSizeId] = ...
        DoublePostcard: ClassVar[QPageSize.PageSizeId] = ...
        Envelope10: ClassVar[QPageSize.PageSizeId] = ...
        Envelope11: ClassVar[QPageSize.PageSizeId] = ...
        Envelope12: ClassVar[QPageSize.PageSizeId] = ...
        Envelope14: ClassVar[QPageSize.PageSizeId] = ...
        Envelope9: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeB4: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeB5: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeB6: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeC0: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeC1: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeC2: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeC3: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeC4: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeC5: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeC6: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeC65: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeC7: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeChou3: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeChou4: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeDL: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeInvite: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeItalian: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeKaku2: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeKaku3: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeMonarch: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopePersonal: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopePrc1: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopePrc10: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopePrc2: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopePrc3: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopePrc4: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopePrc5: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopePrc6: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopePrc7: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopePrc8: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopePrc9: ClassVar[QPageSize.PageSizeId] = ...
        EnvelopeYou4: ClassVar[QPageSize.PageSizeId] = ...
        Executive: ClassVar[QPageSize.PageSizeId] = ...
        ExecutiveStandard: ClassVar[QPageSize.PageSizeId] = ...
        FanFoldGerman: ClassVar[QPageSize.PageSizeId] = ...
        FanFoldGermanLegal: ClassVar[QPageSize.PageSizeId] = ...
        FanFoldUS: ClassVar[QPageSize.PageSizeId] = ...
        Folio: ClassVar[QPageSize.PageSizeId] = ...
        Imperial10x11: ClassVar[QPageSize.PageSizeId] = ...
        Imperial10x13: ClassVar[QPageSize.PageSizeId] = ...
        Imperial10x14: ClassVar[QPageSize.PageSizeId] = ...
        Imperial12x11: ClassVar[QPageSize.PageSizeId] = ...
        Imperial15x11: ClassVar[QPageSize.PageSizeId] = ...
        Imperial7x9: ClassVar[QPageSize.PageSizeId] = ...
        Imperial8x10: ClassVar[QPageSize.PageSizeId] = ...
        Imperial9x11: ClassVar[QPageSize.PageSizeId] = ...
        Imperial9x12: ClassVar[QPageSize.PageSizeId] = ...
        JisB0: ClassVar[QPageSize.PageSizeId] = ...
        JisB1: ClassVar[QPageSize.PageSizeId] = ...
        JisB10: ClassVar[QPageSize.PageSizeId] = ...
        JisB2: ClassVar[QPageSize.PageSizeId] = ...
        JisB3: ClassVar[QPageSize.PageSizeId] = ...
        JisB4: ClassVar[QPageSize.PageSizeId] = ...
        JisB5: ClassVar[QPageSize.PageSizeId] = ...
        JisB6: ClassVar[QPageSize.PageSizeId] = ...
        JisB7: ClassVar[QPageSize.PageSizeId] = ...
        JisB8: ClassVar[QPageSize.PageSizeId] = ...
        JisB9: ClassVar[QPageSize.PageSizeId] = ...
        LastPageSize: ClassVar[QPageSize.PageSizeId] = ...
        Ledger: ClassVar[QPageSize.PageSizeId] = ...
        Legal: ClassVar[QPageSize.PageSizeId] = ...
        LegalExtra: ClassVar[QPageSize.PageSizeId] = ...
        Letter: ClassVar[QPageSize.PageSizeId] = ...
        LetterExtra: ClassVar[QPageSize.PageSizeId] = ...
        LetterPlus: ClassVar[QPageSize.PageSizeId] = ...
        LetterSmall: ClassVar[QPageSize.PageSizeId] = ...
        NPageSize: ClassVar[QPageSize.PageSizeId] = ...
        NPaperSize: ClassVar[QPageSize.PageSizeId] = ...
        Note: ClassVar[QPageSize.PageSizeId] = ...
        Postcard: ClassVar[QPageSize.PageSizeId] = ...
        Prc16K: ClassVar[QPageSize.PageSizeId] = ...
        Prc32K: ClassVar[QPageSize.PageSizeId] = ...
        Prc32KBig: ClassVar[QPageSize.PageSizeId] = ...
        Quarto: ClassVar[QPageSize.PageSizeId] = ...
        Statement: ClassVar[QPageSize.PageSizeId] = ...
        SuperA: ClassVar[QPageSize.PageSizeId] = ...
        SuperB: ClassVar[QPageSize.PageSizeId] = ...
        Tabloid: ClassVar[QPageSize.PageSizeId] = ...
        TabloidExtra: ClassVar[QPageSize.PageSizeId] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPageSize.PageSizeId: ...
        def __and__(self, other: typing.SupportsInt) -> QPageSize.PageSizeId: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPageSize.PageSizeId: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPageSize.PageSizeId: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPageSize.PageSizeId: ...
        def __rand__(self, other: typing.SupportsInt) -> QPageSize.PageSizeId: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPageSize.PageSizeId: ...
        def __ror__(self, other: typing.SupportsInt) -> QPageSize.PageSizeId: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPageSize.PageSizeId: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPageSize.PageSizeId: ...
        def __sub__(self, other: typing.SupportsInt) -> QPageSize.PageSizeId: ...
        def __xor__(self, other: typing.SupportsInt) -> QPageSize.PageSizeId: ...

    class SizeMatchPolicy:
        ExactMatch: ClassVar[QPageSize.SizeMatchPolicy] = ...
        FuzzyMatch: ClassVar[QPageSize.SizeMatchPolicy] = ...
        FuzzyOrientationMatch: ClassVar[QPageSize.SizeMatchPolicy] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPageSize.SizeMatchPolicy: ...
        def __and__(self, other: typing.SupportsInt) -> QPageSize.SizeMatchPolicy: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPageSize.SizeMatchPolicy: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPageSize.SizeMatchPolicy: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPageSize.SizeMatchPolicy: ...
        def __rand__(self, other: typing.SupportsInt) -> QPageSize.SizeMatchPolicy: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPageSize.SizeMatchPolicy: ...
        def __ror__(self, other: typing.SupportsInt) -> QPageSize.SizeMatchPolicy: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPageSize.SizeMatchPolicy: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPageSize.SizeMatchPolicy: ...
        def __sub__(self, other: typing.SupportsInt) -> QPageSize.SizeMatchPolicy: ...
        def __xor__(self, other: typing.SupportsInt) -> QPageSize.SizeMatchPolicy: ...

    class Unit:
        Cicero: ClassVar[QPageSize.Unit] = ...
        Didot: ClassVar[QPageSize.Unit] = ...
        Inch: ClassVar[QPageSize.Unit] = ...
        Millimeter: ClassVar[QPageSize.Unit] = ...
        Pica: ClassVar[QPageSize.Unit] = ...
        Point: ClassVar[QPageSize.Unit] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPageSize.Unit: ...
        def __and__(self, other: typing.SupportsInt) -> QPageSize.Unit: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPageSize.Unit: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPageSize.Unit: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPageSize.Unit: ...
        def __rand__(self, other: typing.SupportsInt) -> QPageSize.Unit: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPageSize.Unit: ...
        def __ror__(self, other: typing.SupportsInt) -> QPageSize.Unit: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPageSize.Unit: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPageSize.Unit: ...
        def __sub__(self, other: typing.SupportsInt) -> QPageSize.Unit: ...
        def __xor__(self, other: typing.SupportsInt) -> QPageSize.Unit: ...
    A0: ClassVar[QPageSize.PageSizeId] = ...
    A1: ClassVar[QPageSize.PageSizeId] = ...
    A10: ClassVar[QPageSize.PageSizeId] = ...
    A2: ClassVar[QPageSize.PageSizeId] = ...
    A3: ClassVar[QPageSize.PageSizeId] = ...
    A3Extra: ClassVar[QPageSize.PageSizeId] = ...
    A4: ClassVar[QPageSize.PageSizeId] = ...
    A4Extra: ClassVar[QPageSize.PageSizeId] = ...
    A4Plus: ClassVar[QPageSize.PageSizeId] = ...
    A4Small: ClassVar[QPageSize.PageSizeId] = ...
    A5: ClassVar[QPageSize.PageSizeId] = ...
    A5Extra: ClassVar[QPageSize.PageSizeId] = ...
    A6: ClassVar[QPageSize.PageSizeId] = ...
    A7: ClassVar[QPageSize.PageSizeId] = ...
    A8: ClassVar[QPageSize.PageSizeId] = ...
    A9: ClassVar[QPageSize.PageSizeId] = ...
    AnsiA: ClassVar[QPageSize.PageSizeId] = ...
    AnsiB: ClassVar[QPageSize.PageSizeId] = ...
    AnsiC: ClassVar[QPageSize.PageSizeId] = ...
    AnsiD: ClassVar[QPageSize.PageSizeId] = ...
    AnsiE: ClassVar[QPageSize.PageSizeId] = ...
    ArchA: ClassVar[QPageSize.PageSizeId] = ...
    ArchB: ClassVar[QPageSize.PageSizeId] = ...
    ArchC: ClassVar[QPageSize.PageSizeId] = ...
    ArchD: ClassVar[QPageSize.PageSizeId] = ...
    ArchE: ClassVar[QPageSize.PageSizeId] = ...
    B0: ClassVar[QPageSize.PageSizeId] = ...
    B1: ClassVar[QPageSize.PageSizeId] = ...
    B10: ClassVar[QPageSize.PageSizeId] = ...
    B2: ClassVar[QPageSize.PageSizeId] = ...
    B3: ClassVar[QPageSize.PageSizeId] = ...
    B4: ClassVar[QPageSize.PageSizeId] = ...
    B5: ClassVar[QPageSize.PageSizeId] = ...
    B5Extra: ClassVar[QPageSize.PageSizeId] = ...
    B6: ClassVar[QPageSize.PageSizeId] = ...
    B7: ClassVar[QPageSize.PageSizeId] = ...
    B8: ClassVar[QPageSize.PageSizeId] = ...
    B9: ClassVar[QPageSize.PageSizeId] = ...
    C5E: ClassVar[QPageSize.PageSizeId] = ...
    Cicero: ClassVar[QPageSize.Unit] = ...
    Comm10E: ClassVar[QPageSize.PageSizeId] = ...
    Custom: ClassVar[QPageSize.PageSizeId] = ...
    DLE: ClassVar[QPageSize.PageSizeId] = ...
    Didot: ClassVar[QPageSize.Unit] = ...
    DoublePostcard: ClassVar[QPageSize.PageSizeId] = ...
    Envelope10: ClassVar[QPageSize.PageSizeId] = ...
    Envelope11: ClassVar[QPageSize.PageSizeId] = ...
    Envelope12: ClassVar[QPageSize.PageSizeId] = ...
    Envelope14: ClassVar[QPageSize.PageSizeId] = ...
    Envelope9: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeB4: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeB5: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeB6: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeC0: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeC1: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeC2: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeC3: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeC4: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeC5: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeC6: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeC65: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeC7: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeChou3: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeChou4: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeDL: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeInvite: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeItalian: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeKaku2: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeKaku3: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeMonarch: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopePersonal: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopePrc1: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopePrc10: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopePrc2: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopePrc3: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopePrc4: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopePrc5: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopePrc6: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopePrc7: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopePrc8: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopePrc9: ClassVar[QPageSize.PageSizeId] = ...
    EnvelopeYou4: ClassVar[QPageSize.PageSizeId] = ...
    ExactMatch: ClassVar[QPageSize.SizeMatchPolicy] = ...
    Executive: ClassVar[QPageSize.PageSizeId] = ...
    ExecutiveStandard: ClassVar[QPageSize.PageSizeId] = ...
    FanFoldGerman: ClassVar[QPageSize.PageSizeId] = ...
    FanFoldGermanLegal: ClassVar[QPageSize.PageSizeId] = ...
    FanFoldUS: ClassVar[QPageSize.PageSizeId] = ...
    Folio: ClassVar[QPageSize.PageSizeId] = ...
    FuzzyMatch: ClassVar[QPageSize.SizeMatchPolicy] = ...
    FuzzyOrientationMatch: ClassVar[QPageSize.SizeMatchPolicy] = ...
    Imperial10x11: ClassVar[QPageSize.PageSizeId] = ...
    Imperial10x13: ClassVar[QPageSize.PageSizeId] = ...
    Imperial10x14: ClassVar[QPageSize.PageSizeId] = ...
    Imperial12x11: ClassVar[QPageSize.PageSizeId] = ...
    Imperial15x11: ClassVar[QPageSize.PageSizeId] = ...
    Imperial7x9: ClassVar[QPageSize.PageSizeId] = ...
    Imperial8x10: ClassVar[QPageSize.PageSizeId] = ...
    Imperial9x11: ClassVar[QPageSize.PageSizeId] = ...
    Imperial9x12: ClassVar[QPageSize.PageSizeId] = ...
    Inch: ClassVar[QPageSize.Unit] = ...
    JisB0: ClassVar[QPageSize.PageSizeId] = ...
    JisB1: ClassVar[QPageSize.PageSizeId] = ...
    JisB10: ClassVar[QPageSize.PageSizeId] = ...
    JisB2: ClassVar[QPageSize.PageSizeId] = ...
    JisB3: ClassVar[QPageSize.PageSizeId] = ...
    JisB4: ClassVar[QPageSize.PageSizeId] = ...
    JisB5: ClassVar[QPageSize.PageSizeId] = ...
    JisB6: ClassVar[QPageSize.PageSizeId] = ...
    JisB7: ClassVar[QPageSize.PageSizeId] = ...
    JisB8: ClassVar[QPageSize.PageSizeId] = ...
    JisB9: ClassVar[QPageSize.PageSizeId] = ...
    LastPageSize: ClassVar[QPageSize.PageSizeId] = ...
    Ledger: ClassVar[QPageSize.PageSizeId] = ...
    Legal: ClassVar[QPageSize.PageSizeId] = ...
    LegalExtra: ClassVar[QPageSize.PageSizeId] = ...
    Letter: ClassVar[QPageSize.PageSizeId] = ...
    LetterExtra: ClassVar[QPageSize.PageSizeId] = ...
    LetterPlus: ClassVar[QPageSize.PageSizeId] = ...
    LetterSmall: ClassVar[QPageSize.PageSizeId] = ...
    Millimeter: ClassVar[QPageSize.Unit] = ...
    NPageSize: ClassVar[QPageSize.PageSizeId] = ...
    NPaperSize: ClassVar[QPageSize.PageSizeId] = ...
    Note: ClassVar[QPageSize.PageSizeId] = ...
    Pica: ClassVar[QPageSize.Unit] = ...
    Point: ClassVar[QPageSize.Unit] = ...
    Postcard: ClassVar[QPageSize.PageSizeId] = ...
    Prc16K: ClassVar[QPageSize.PageSizeId] = ...
    Prc32K: ClassVar[QPageSize.PageSizeId] = ...
    Prc32KBig: ClassVar[QPageSize.PageSizeId] = ...
    Quarto: ClassVar[QPageSize.PageSizeId] = ...
    Statement: ClassVar[QPageSize.PageSizeId] = ...
    SuperA: ClassVar[QPageSize.PageSizeId] = ...
    SuperB: ClassVar[QPageSize.PageSizeId] = ...
    Tabloid: ClassVar[QPageSize.PageSizeId] = ...
    TabloidExtra: ClassVar[QPageSize.PageSizeId] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QPageSize) -> None: ...
    @overload
    def __init__(self, pageSizeId: QPageSize.PageSizeId) -> None: ...
    @overload
    def __init__(self, pointSize: PySide2.QtCore.QSize, name: str = ..., matchPolicy: QPageSize.SizeMatchPolicy = ...) -> None: ...
    @overload
    def __init__(self, size: PySide2.QtCore.QSizeF, units: QPageSize.Unit, name: str = ..., matchPolicy: QPageSize.SizeMatchPolicy = ...) -> None: ...
    @classmethod
    @overload
    def definitionSize(cls, pageSizeId: QPageSize.PageSizeId) -> PySide2.QtCore.QSizeF: ...
    @classmethod
    @overload
    def definitionSize(cls, self) -> PySide2.QtCore.QSizeF: ...
    @classmethod
    @overload
    def definitionUnits(cls, pageSizeId: QPageSize.PageSizeId) -> QPageSize.Unit: ...
    @classmethod
    @overload
    def definitionUnits(cls, self) -> QPageSize.Unit: ...
    @classmethod
    @overload
    def id(cls, pointSize: PySide2.QtCore.QSize, matchPolicy: QPageSize.SizeMatchPolicy = ...) -> QPageSize.PageSizeId: ...
    @classmethod
    @overload
    def id(cls, self) -> QPageSize.PageSizeId: ...
    @classmethod
    @overload
    def id(cls, size: PySide2.QtCore.QSizeF, units: QPageSize.Unit, matchPolicy: QPageSize.SizeMatchPolicy = ...) -> QPageSize.PageSizeId: ...
    @classmethod
    @overload
    def id(cls, windowsId: int) -> QPageSize.PageSizeId: ...
    def isEquivalentTo(self, other: QPageSize) -> bool: ...
    def isValid(self) -> bool: ...
    @classmethod
    @overload
    def key(cls, pageSizeId: QPageSize.PageSizeId) -> str: ...
    @classmethod
    @overload
    def key(cls, self) -> str: ...
    @classmethod
    @overload
    def name(cls, pageSizeId: QPageSize.PageSizeId) -> str: ...
    @classmethod
    @overload
    def name(cls, self) -> str: ...
    def rect(self, units: QPageSize.Unit) -> PySide2.QtCore.QRectF: ...
    def rectPixels(self, resolution: int) -> PySide2.QtCore.QRect: ...
    def rectPoints(self) -> PySide2.QtCore.QRect: ...
    @classmethod
    @overload
    def size(cls, pageSizeId: QPageSize.PageSizeId, units: QPageSize.Unit) -> PySide2.QtCore.QSizeF: ...
    @classmethod
    @overload
    def size(cls, self, units: QPageSize.Unit) -> PySide2.QtCore.QSizeF: ...
    @classmethod
    @overload
    def sizePixels(cls, pageSizeId: QPageSize.PageSizeId, resolution: int) -> PySide2.QtCore.QSize: ...
    @classmethod
    @overload
    def sizePixels(cls, self, resolution: int) -> PySide2.QtCore.QSize: ...
    @classmethod
    @overload
    def sizePoints(cls, pageSizeId: QPageSize.PageSizeId) -> PySide2.QtCore.QSize: ...
    @classmethod
    @overload
    def sizePoints(cls, self) -> PySide2.QtCore.QSize: ...
    def swap(self, other: QPageSize) -> None: ...
    @classmethod
    @overload
    def windowsId(cls, pageSizeId: QPageSize.PageSizeId) -> int: ...
    @classmethod
    @overload
    def windowsId(cls, self) -> int: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QPagedPaintDevice(QPaintDevice):
    class Margins(shiboken2.Object):
        bottom: Any
        left: Any
        right: Any
        top: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, Margins: QPagedPaintDevice.Margins) -> None: ...
        def __copy__(self) -> None: ...

    class PageSize:
        A0: ClassVar[QPagedPaintDevice.PageSize] = ...
        A1: ClassVar[QPagedPaintDevice.PageSize] = ...
        A10: ClassVar[QPagedPaintDevice.PageSize] = ...
        A2: ClassVar[QPagedPaintDevice.PageSize] = ...
        A3: ClassVar[QPagedPaintDevice.PageSize] = ...
        A3Extra: ClassVar[QPagedPaintDevice.PageSize] = ...
        A4: ClassVar[QPagedPaintDevice.PageSize] = ...
        A4Extra: ClassVar[QPagedPaintDevice.PageSize] = ...
        A4Plus: ClassVar[QPagedPaintDevice.PageSize] = ...
        A4Small: ClassVar[QPagedPaintDevice.PageSize] = ...
        A5: ClassVar[QPagedPaintDevice.PageSize] = ...
        A5Extra: ClassVar[QPagedPaintDevice.PageSize] = ...
        A6: ClassVar[QPagedPaintDevice.PageSize] = ...
        A7: ClassVar[QPagedPaintDevice.PageSize] = ...
        A8: ClassVar[QPagedPaintDevice.PageSize] = ...
        A9: ClassVar[QPagedPaintDevice.PageSize] = ...
        AnsiA: ClassVar[QPagedPaintDevice.PageSize] = ...
        AnsiB: ClassVar[QPagedPaintDevice.PageSize] = ...
        AnsiC: ClassVar[QPagedPaintDevice.PageSize] = ...
        AnsiD: ClassVar[QPagedPaintDevice.PageSize] = ...
        AnsiE: ClassVar[QPagedPaintDevice.PageSize] = ...
        ArchA: ClassVar[QPagedPaintDevice.PageSize] = ...
        ArchB: ClassVar[QPagedPaintDevice.PageSize] = ...
        ArchC: ClassVar[QPagedPaintDevice.PageSize] = ...
        ArchD: ClassVar[QPagedPaintDevice.PageSize] = ...
        ArchE: ClassVar[QPagedPaintDevice.PageSize] = ...
        B0: ClassVar[QPagedPaintDevice.PageSize] = ...
        B1: ClassVar[QPagedPaintDevice.PageSize] = ...
        B10: ClassVar[QPagedPaintDevice.PageSize] = ...
        B2: ClassVar[QPagedPaintDevice.PageSize] = ...
        B3: ClassVar[QPagedPaintDevice.PageSize] = ...
        B4: ClassVar[QPagedPaintDevice.PageSize] = ...
        B5: ClassVar[QPagedPaintDevice.PageSize] = ...
        B5Extra: ClassVar[QPagedPaintDevice.PageSize] = ...
        B6: ClassVar[QPagedPaintDevice.PageSize] = ...
        B7: ClassVar[QPagedPaintDevice.PageSize] = ...
        B8: ClassVar[QPagedPaintDevice.PageSize] = ...
        B9: ClassVar[QPagedPaintDevice.PageSize] = ...
        C5E: ClassVar[QPagedPaintDevice.PageSize] = ...
        Comm10E: ClassVar[QPagedPaintDevice.PageSize] = ...
        Custom: ClassVar[QPagedPaintDevice.PageSize] = ...
        DLE: ClassVar[QPagedPaintDevice.PageSize] = ...
        DoublePostcard: ClassVar[QPagedPaintDevice.PageSize] = ...
        Envelope10: ClassVar[QPagedPaintDevice.PageSize] = ...
        Envelope11: ClassVar[QPagedPaintDevice.PageSize] = ...
        Envelope12: ClassVar[QPagedPaintDevice.PageSize] = ...
        Envelope14: ClassVar[QPagedPaintDevice.PageSize] = ...
        Envelope9: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeB4: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeB5: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeB6: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeC0: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeC1: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeC2: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeC3: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeC4: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeC5: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeC6: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeC65: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeC7: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeChou3: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeChou4: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeDL: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeInvite: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeItalian: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeKaku2: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeKaku3: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeMonarch: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopePersonal: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopePrc1: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopePrc10: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopePrc2: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopePrc3: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopePrc4: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopePrc5: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopePrc6: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopePrc7: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopePrc8: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopePrc9: ClassVar[QPagedPaintDevice.PageSize] = ...
        EnvelopeYou4: ClassVar[QPagedPaintDevice.PageSize] = ...
        Executive: ClassVar[QPagedPaintDevice.PageSize] = ...
        ExecutiveStandard: ClassVar[QPagedPaintDevice.PageSize] = ...
        FanFoldGerman: ClassVar[QPagedPaintDevice.PageSize] = ...
        FanFoldGermanLegal: ClassVar[QPagedPaintDevice.PageSize] = ...
        FanFoldUS: ClassVar[QPagedPaintDevice.PageSize] = ...
        Folio: ClassVar[QPagedPaintDevice.PageSize] = ...
        Imperial10x11: ClassVar[QPagedPaintDevice.PageSize] = ...
        Imperial10x13: ClassVar[QPagedPaintDevice.PageSize] = ...
        Imperial10x14: ClassVar[QPagedPaintDevice.PageSize] = ...
        Imperial12x11: ClassVar[QPagedPaintDevice.PageSize] = ...
        Imperial15x11: ClassVar[QPagedPaintDevice.PageSize] = ...
        Imperial7x9: ClassVar[QPagedPaintDevice.PageSize] = ...
        Imperial8x10: ClassVar[QPagedPaintDevice.PageSize] = ...
        Imperial9x11: ClassVar[QPagedPaintDevice.PageSize] = ...
        Imperial9x12: ClassVar[QPagedPaintDevice.PageSize] = ...
        JisB0: ClassVar[QPagedPaintDevice.PageSize] = ...
        JisB1: ClassVar[QPagedPaintDevice.PageSize] = ...
        JisB10: ClassVar[QPagedPaintDevice.PageSize] = ...
        JisB2: ClassVar[QPagedPaintDevice.PageSize] = ...
        JisB3: ClassVar[QPagedPaintDevice.PageSize] = ...
        JisB4: ClassVar[QPagedPaintDevice.PageSize] = ...
        JisB5: ClassVar[QPagedPaintDevice.PageSize] = ...
        JisB6: ClassVar[QPagedPaintDevice.PageSize] = ...
        JisB7: ClassVar[QPagedPaintDevice.PageSize] = ...
        JisB8: ClassVar[QPagedPaintDevice.PageSize] = ...
        JisB9: ClassVar[QPagedPaintDevice.PageSize] = ...
        LastPageSize: ClassVar[QPagedPaintDevice.PageSize] = ...
        Ledger: ClassVar[QPagedPaintDevice.PageSize] = ...
        Legal: ClassVar[QPagedPaintDevice.PageSize] = ...
        LegalExtra: ClassVar[QPagedPaintDevice.PageSize] = ...
        Letter: ClassVar[QPagedPaintDevice.PageSize] = ...
        LetterExtra: ClassVar[QPagedPaintDevice.PageSize] = ...
        LetterPlus: ClassVar[QPagedPaintDevice.PageSize] = ...
        LetterSmall: ClassVar[QPagedPaintDevice.PageSize] = ...
        NPageSize: ClassVar[QPagedPaintDevice.PageSize] = ...
        NPaperSize: ClassVar[QPagedPaintDevice.PageSize] = ...
        Note: ClassVar[QPagedPaintDevice.PageSize] = ...
        Postcard: ClassVar[QPagedPaintDevice.PageSize] = ...
        Prc16K: ClassVar[QPagedPaintDevice.PageSize] = ...
        Prc32K: ClassVar[QPagedPaintDevice.PageSize] = ...
        Prc32KBig: ClassVar[QPagedPaintDevice.PageSize] = ...
        Quarto: ClassVar[QPagedPaintDevice.PageSize] = ...
        Statement: ClassVar[QPagedPaintDevice.PageSize] = ...
        SuperA: ClassVar[QPagedPaintDevice.PageSize] = ...
        SuperB: ClassVar[QPagedPaintDevice.PageSize] = ...
        Tabloid: ClassVar[QPagedPaintDevice.PageSize] = ...
        TabloidExtra: ClassVar[QPagedPaintDevice.PageSize] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PageSize: ...
        def __and__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PageSize: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PageSize: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PageSize: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PageSize: ...
        def __rand__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PageSize: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PageSize: ...
        def __ror__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PageSize: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PageSize: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PageSize: ...
        def __sub__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PageSize: ...
        def __xor__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PageSize: ...

    class PdfVersion:
        PdfVersion_1_4: ClassVar[QPagedPaintDevice.PdfVersion] = ...
        PdfVersion_1_6: ClassVar[QPagedPaintDevice.PdfVersion] = ...
        PdfVersion_A1b: ClassVar[QPagedPaintDevice.PdfVersion] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PdfVersion: ...
        def __and__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PdfVersion: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PdfVersion: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PdfVersion: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PdfVersion: ...
        def __rand__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PdfVersion: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PdfVersion: ...
        def __ror__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PdfVersion: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PdfVersion: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PdfVersion: ...
        def __sub__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PdfVersion: ...
        def __xor__(self, other: typing.SupportsInt) -> QPagedPaintDevice.PdfVersion: ...
    A0: ClassVar[QPagedPaintDevice.PageSize] = ...
    A1: ClassVar[QPagedPaintDevice.PageSize] = ...
    A10: ClassVar[QPagedPaintDevice.PageSize] = ...
    A2: ClassVar[QPagedPaintDevice.PageSize] = ...
    A3: ClassVar[QPagedPaintDevice.PageSize] = ...
    A3Extra: ClassVar[QPagedPaintDevice.PageSize] = ...
    A4: ClassVar[QPagedPaintDevice.PageSize] = ...
    A4Extra: ClassVar[QPagedPaintDevice.PageSize] = ...
    A4Plus: ClassVar[QPagedPaintDevice.PageSize] = ...
    A4Small: ClassVar[QPagedPaintDevice.PageSize] = ...
    A5: ClassVar[QPagedPaintDevice.PageSize] = ...
    A5Extra: ClassVar[QPagedPaintDevice.PageSize] = ...
    A6: ClassVar[QPagedPaintDevice.PageSize] = ...
    A7: ClassVar[QPagedPaintDevice.PageSize] = ...
    A8: ClassVar[QPagedPaintDevice.PageSize] = ...
    A9: ClassVar[QPagedPaintDevice.PageSize] = ...
    AnsiA: ClassVar[QPagedPaintDevice.PageSize] = ...
    AnsiB: ClassVar[QPagedPaintDevice.PageSize] = ...
    AnsiC: ClassVar[QPagedPaintDevice.PageSize] = ...
    AnsiD: ClassVar[QPagedPaintDevice.PageSize] = ...
    AnsiE: ClassVar[QPagedPaintDevice.PageSize] = ...
    ArchA: ClassVar[QPagedPaintDevice.PageSize] = ...
    ArchB: ClassVar[QPagedPaintDevice.PageSize] = ...
    ArchC: ClassVar[QPagedPaintDevice.PageSize] = ...
    ArchD: ClassVar[QPagedPaintDevice.PageSize] = ...
    ArchE: ClassVar[QPagedPaintDevice.PageSize] = ...
    B0: ClassVar[QPagedPaintDevice.PageSize] = ...
    B1: ClassVar[QPagedPaintDevice.PageSize] = ...
    B10: ClassVar[QPagedPaintDevice.PageSize] = ...
    B2: ClassVar[QPagedPaintDevice.PageSize] = ...
    B3: ClassVar[QPagedPaintDevice.PageSize] = ...
    B4: ClassVar[QPagedPaintDevice.PageSize] = ...
    B5: ClassVar[QPagedPaintDevice.PageSize] = ...
    B5Extra: ClassVar[QPagedPaintDevice.PageSize] = ...
    B6: ClassVar[QPagedPaintDevice.PageSize] = ...
    B7: ClassVar[QPagedPaintDevice.PageSize] = ...
    B8: ClassVar[QPagedPaintDevice.PageSize] = ...
    B9: ClassVar[QPagedPaintDevice.PageSize] = ...
    C5E: ClassVar[QPagedPaintDevice.PageSize] = ...
    Comm10E: ClassVar[QPagedPaintDevice.PageSize] = ...
    Custom: ClassVar[QPagedPaintDevice.PageSize] = ...
    DLE: ClassVar[QPagedPaintDevice.PageSize] = ...
    DoublePostcard: ClassVar[QPagedPaintDevice.PageSize] = ...
    Envelope10: ClassVar[QPagedPaintDevice.PageSize] = ...
    Envelope11: ClassVar[QPagedPaintDevice.PageSize] = ...
    Envelope12: ClassVar[QPagedPaintDevice.PageSize] = ...
    Envelope14: ClassVar[QPagedPaintDevice.PageSize] = ...
    Envelope9: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeB4: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeB5: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeB6: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeC0: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeC1: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeC2: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeC3: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeC4: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeC5: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeC6: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeC65: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeC7: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeChou3: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeChou4: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeDL: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeInvite: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeItalian: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeKaku2: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeKaku3: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeMonarch: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopePersonal: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopePrc1: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopePrc10: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopePrc2: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopePrc3: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopePrc4: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopePrc5: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopePrc6: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopePrc7: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopePrc8: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopePrc9: ClassVar[QPagedPaintDevice.PageSize] = ...
    EnvelopeYou4: ClassVar[QPagedPaintDevice.PageSize] = ...
    Executive: ClassVar[QPagedPaintDevice.PageSize] = ...
    ExecutiveStandard: ClassVar[QPagedPaintDevice.PageSize] = ...
    FanFoldGerman: ClassVar[QPagedPaintDevice.PageSize] = ...
    FanFoldGermanLegal: ClassVar[QPagedPaintDevice.PageSize] = ...
    FanFoldUS: ClassVar[QPagedPaintDevice.PageSize] = ...
    Folio: ClassVar[QPagedPaintDevice.PageSize] = ...
    Imperial10x11: ClassVar[QPagedPaintDevice.PageSize] = ...
    Imperial10x13: ClassVar[QPagedPaintDevice.PageSize] = ...
    Imperial10x14: ClassVar[QPagedPaintDevice.PageSize] = ...
    Imperial12x11: ClassVar[QPagedPaintDevice.PageSize] = ...
    Imperial15x11: ClassVar[QPagedPaintDevice.PageSize] = ...
    Imperial7x9: ClassVar[QPagedPaintDevice.PageSize] = ...
    Imperial8x10: ClassVar[QPagedPaintDevice.PageSize] = ...
    Imperial9x11: ClassVar[QPagedPaintDevice.PageSize] = ...
    Imperial9x12: ClassVar[QPagedPaintDevice.PageSize] = ...
    JisB0: ClassVar[QPagedPaintDevice.PageSize] = ...
    JisB1: ClassVar[QPagedPaintDevice.PageSize] = ...
    JisB10: ClassVar[QPagedPaintDevice.PageSize] = ...
    JisB2: ClassVar[QPagedPaintDevice.PageSize] = ...
    JisB3: ClassVar[QPagedPaintDevice.PageSize] = ...
    JisB4: ClassVar[QPagedPaintDevice.PageSize] = ...
    JisB5: ClassVar[QPagedPaintDevice.PageSize] = ...
    JisB6: ClassVar[QPagedPaintDevice.PageSize] = ...
    JisB7: ClassVar[QPagedPaintDevice.PageSize] = ...
    JisB8: ClassVar[QPagedPaintDevice.PageSize] = ...
    JisB9: ClassVar[QPagedPaintDevice.PageSize] = ...
    LastPageSize: ClassVar[QPagedPaintDevice.PageSize] = ...
    Ledger: ClassVar[QPagedPaintDevice.PageSize] = ...
    Legal: ClassVar[QPagedPaintDevice.PageSize] = ...
    LegalExtra: ClassVar[QPagedPaintDevice.PageSize] = ...
    Letter: ClassVar[QPagedPaintDevice.PageSize] = ...
    LetterExtra: ClassVar[QPagedPaintDevice.PageSize] = ...
    LetterPlus: ClassVar[QPagedPaintDevice.PageSize] = ...
    LetterSmall: ClassVar[QPagedPaintDevice.PageSize] = ...
    NPageSize: ClassVar[QPagedPaintDevice.PageSize] = ...
    NPaperSize: ClassVar[QPagedPaintDevice.PageSize] = ...
    Note: ClassVar[QPagedPaintDevice.PageSize] = ...
    PdfVersion_1_4: ClassVar[QPagedPaintDevice.PdfVersion] = ...
    PdfVersion_1_6: ClassVar[QPagedPaintDevice.PdfVersion] = ...
    PdfVersion_A1b: ClassVar[QPagedPaintDevice.PdfVersion] = ...
    Postcard: ClassVar[QPagedPaintDevice.PageSize] = ...
    Prc16K: ClassVar[QPagedPaintDevice.PageSize] = ...
    Prc32K: ClassVar[QPagedPaintDevice.PageSize] = ...
    Prc32KBig: ClassVar[QPagedPaintDevice.PageSize] = ...
    Quarto: ClassVar[QPagedPaintDevice.PageSize] = ...
    Statement: ClassVar[QPagedPaintDevice.PageSize] = ...
    SuperA: ClassVar[QPagedPaintDevice.PageSize] = ...
    SuperB: ClassVar[QPagedPaintDevice.PageSize] = ...
    Tabloid: ClassVar[QPagedPaintDevice.PageSize] = ...
    TabloidExtra: ClassVar[QPagedPaintDevice.PageSize] = ...
    def __init__(self) -> None: ...
    def devicePageLayout(self) -> QPageLayout: ...
    def margins(self) -> QPagedPaintDevice.Margins: ...
    def newPage(self) -> bool: ...
    def pageLayout(self) -> QPageLayout: ...
    def pageSize(self) -> QPagedPaintDevice.PageSize: ...
    def pageSizeMM(self) -> PySide2.QtCore.QSizeF: ...
    def setMargins(self, margins: QPagedPaintDevice.Margins) -> None: ...
    def setPageLayout(self, pageLayout: QPageLayout) -> bool: ...
    @overload
    def setPageMargins(self, margins: PySide2.QtCore.QMarginsF) -> bool: ...
    @overload
    def setPageMargins(self, margins: PySide2.QtCore.QMarginsF, units: QPageLayout.Unit) -> bool: ...
    def setPageOrientation(self, orientation: QPageLayout.Orientation) -> bool: ...
    @overload
    def setPageSize(self, pageSize: QPageSize) -> bool: ...
    @overload
    def setPageSize(self, size: QPagedPaintDevice.PageSize) -> None: ...
    def setPageSizeMM(self, size: PySide2.QtCore.QSizeF) -> None: ...

class QPaintDevice(shiboken2.Object):
    class PaintDeviceMetric:
        PdmDepth: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
        PdmDevicePixelRatio: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
        PdmDevicePixelRatioScaled: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
        PdmDpiX: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
        PdmDpiY: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
        PdmHeight: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
        PdmHeightMM: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
        PdmNumColors: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
        PdmPhysicalDpiX: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
        PdmPhysicalDpiY: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
        PdmWidth: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
        PdmWidthMM: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPaintDevice.PaintDeviceMetric: ...
        def __and__(self, other: typing.SupportsInt) -> QPaintDevice.PaintDeviceMetric: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPaintDevice.PaintDeviceMetric: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPaintDevice.PaintDeviceMetric: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPaintDevice.PaintDeviceMetric: ...
        def __rand__(self, other: typing.SupportsInt) -> QPaintDevice.PaintDeviceMetric: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPaintDevice.PaintDeviceMetric: ...
        def __ror__(self, other: typing.SupportsInt) -> QPaintDevice.PaintDeviceMetric: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPaintDevice.PaintDeviceMetric: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPaintDevice.PaintDeviceMetric: ...
        def __sub__(self, other: typing.SupportsInt) -> QPaintDevice.PaintDeviceMetric: ...
        def __xor__(self, other: typing.SupportsInt) -> QPaintDevice.PaintDeviceMetric: ...
    PdmDepth: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
    PdmDevicePixelRatio: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
    PdmDevicePixelRatioScaled: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
    PdmDpiX: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
    PdmDpiY: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
    PdmHeight: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
    PdmHeightMM: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
    PdmNumColors: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
    PdmPhysicalDpiX: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
    PdmPhysicalDpiY: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
    PdmWidth: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
    PdmWidthMM: ClassVar[QPaintDevice.PaintDeviceMetric] = ...
    painters: Any
    def __init__(self) -> None: ...
    def colorCount(self) -> int: ...
    def depth(self) -> int: ...
    def devType(self) -> int: ...
    def devicePixelRatio(self) -> int: ...
    def devicePixelRatioF(self) -> float: ...
    @classmethod
    def devicePixelRatioFScale(cls) -> float: ...
    def height(self) -> int: ...
    def heightMM(self) -> int: ...
    def initPainter(self, painter: QPainter) -> None: ...
    def logicalDpiX(self) -> int: ...
    def logicalDpiY(self) -> int: ...
    def metric(self, metric: QPaintDevice.PaintDeviceMetric) -> int: ...
    def paintEngine(self) -> QPaintEngine: ...
    def paintingActive(self) -> bool: ...
    def physicalDpiX(self) -> int: ...
    def physicalDpiY(self) -> int: ...
    def redirected(self, offset: PySide2.QtCore.QPoint) -> QPaintDevice: ...
    def sharedPainter(self) -> QPainter: ...
    def width(self) -> int: ...
    def widthMM(self) -> int: ...

class QPaintDeviceWindow(QWindow, QPaintDevice):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def event(self, event: PySide2.QtCore.QEvent) -> bool: ...
    def exposeEvent(self, arg__1: QExposeEvent) -> None: ...
    def metric(self, metric: QPaintDevice.PaintDeviceMetric) -> int: ...
    def paintEngine(self) -> QPaintEngine: ...
    def paintEvent(self, event: QPaintEvent) -> None: ...
    @overload
    def update(self) -> None: ...
    @overload
    def update(self, rect: PySide2.QtCore.QRect) -> None: ...
    @overload
    def update(self, region: QRegion) -> None: ...

class QPaintEngine(shiboken2.Object):
    class DirtyFlag:
        AllDirty: ClassVar[QPaintEngine.DirtyFlag] = ...
        DirtyBackground: ClassVar[QPaintEngine.DirtyFlag] = ...
        DirtyBackgroundMode: ClassVar[QPaintEngine.DirtyFlag] = ...
        DirtyBrush: ClassVar[QPaintEngine.DirtyFlag] = ...
        DirtyBrushOrigin: ClassVar[QPaintEngine.DirtyFlag] = ...
        DirtyClipEnabled: ClassVar[QPaintEngine.DirtyFlag] = ...
        DirtyClipPath: ClassVar[QPaintEngine.DirtyFlag] = ...
        DirtyClipRegion: ClassVar[QPaintEngine.DirtyFlag] = ...
        DirtyCompositionMode: ClassVar[QPaintEngine.DirtyFlag] = ...
        DirtyFont: ClassVar[QPaintEngine.DirtyFlag] = ...
        DirtyHints: ClassVar[QPaintEngine.DirtyFlag] = ...
        DirtyOpacity: ClassVar[QPaintEngine.DirtyFlag] = ...
        DirtyPen: ClassVar[QPaintEngine.DirtyFlag] = ...
        DirtyTransform: ClassVar[QPaintEngine.DirtyFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QPaintEngine.DirtyFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QPaintEngine.DirtyFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPaintEngine.DirtyFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QPaintEngine.DirtyFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QPaintEngine.DirtyFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPaintEngine.DirtyFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QPaintEngine.DirtyFlags: ...

    class DirtyFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QPaintEngine.DirtyFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QPaintEngine.DirtyFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPaintEngine.DirtyFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QPaintEngine.DirtyFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QPaintEngine.DirtyFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPaintEngine.DirtyFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QPaintEngine.DirtyFlags: ...

    class PaintEngineFeature:
        AllFeatures: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        AlphaBlend: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        Antialiasing: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        BlendModes: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        BrushStroke: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        ConicalGradientFill: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        ConstantOpacity: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        LinearGradientFill: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        MaskedBrush: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        ObjectBoundingModeGradients: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        PaintOutsidePaintEvent: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        PainterPaths: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        PatternBrush: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        PatternTransform: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        PerspectiveTransform: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        PixmapTransform: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        PorterDuff: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        PrimitiveTransform: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        RadialGradientFill: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        RasterOpModes: ClassVar[QPaintEngine.PaintEngineFeature] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QPaintEngine.PaintEngineFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QPaintEngine.PaintEngineFeature: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPaintEngine.PaintEngineFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QPaintEngine.PaintEngineFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QPaintEngine.PaintEngineFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPaintEngine.PaintEngineFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QPaintEngine.PaintEngineFeatures: ...

    class PaintEngineFeatures:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QPaintEngine.PaintEngineFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QPaintEngine.PaintEngineFeatures: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPaintEngine.PaintEngineFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QPaintEngine.PaintEngineFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QPaintEngine.PaintEngineFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPaintEngine.PaintEngineFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QPaintEngine.PaintEngineFeatures: ...

    class PolygonDrawMode:
        ConvexMode: ClassVar[QPaintEngine.PolygonDrawMode] = ...
        OddEvenMode: ClassVar[QPaintEngine.PolygonDrawMode] = ...
        PolylineMode: ClassVar[QPaintEngine.PolygonDrawMode] = ...
        WindingMode: ClassVar[QPaintEngine.PolygonDrawMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPaintEngine.PolygonDrawMode: ...
        def __and__(self, other: typing.SupportsInt) -> QPaintEngine.PolygonDrawMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPaintEngine.PolygonDrawMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPaintEngine.PolygonDrawMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPaintEngine.PolygonDrawMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QPaintEngine.PolygonDrawMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPaintEngine.PolygonDrawMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QPaintEngine.PolygonDrawMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPaintEngine.PolygonDrawMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPaintEngine.PolygonDrawMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QPaintEngine.PolygonDrawMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QPaintEngine.PolygonDrawMode: ...

    class Type:
        Blitter: ClassVar[QPaintEngine.Type] = ...
        CoreGraphics: ClassVar[QPaintEngine.Type] = ...
        Direct2D: ClassVar[QPaintEngine.Type] = ...
        Direct3D: ClassVar[QPaintEngine.Type] = ...
        MacPrinter: ClassVar[QPaintEngine.Type] = ...
        MaxUser: ClassVar[QPaintEngine.Type] = ...
        OpenGL: ClassVar[QPaintEngine.Type] = ...
        OpenGL2: ClassVar[QPaintEngine.Type] = ...
        OpenVG: ClassVar[QPaintEngine.Type] = ...
        PaintBuffer: ClassVar[QPaintEngine.Type] = ...
        Pdf: ClassVar[QPaintEngine.Type] = ...
        Picture: ClassVar[QPaintEngine.Type] = ...
        PostScript: ClassVar[QPaintEngine.Type] = ...
        QWindowSystem: ClassVar[QPaintEngine.Type] = ...
        QuickDraw: ClassVar[QPaintEngine.Type] = ...
        Raster: ClassVar[QPaintEngine.Type] = ...
        SVG: ClassVar[QPaintEngine.Type] = ...
        User: ClassVar[QPaintEngine.Type] = ...
        Windows: ClassVar[QPaintEngine.Type] = ...
        X11: ClassVar[QPaintEngine.Type] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPaintEngine.Type: ...
        def __and__(self, other: typing.SupportsInt) -> QPaintEngine.Type: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPaintEngine.Type: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPaintEngine.Type: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPaintEngine.Type: ...
        def __rand__(self, other: typing.SupportsInt) -> QPaintEngine.Type: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPaintEngine.Type: ...
        def __ror__(self, other: typing.SupportsInt) -> QPaintEngine.Type: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPaintEngine.Type: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPaintEngine.Type: ...
        def __sub__(self, other: typing.SupportsInt) -> QPaintEngine.Type: ...
        def __xor__(self, other: typing.SupportsInt) -> QPaintEngine.Type: ...
    AllDirty: ClassVar[QPaintEngine.DirtyFlag] = ...
    AllFeatures: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    AlphaBlend: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    Antialiasing: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    BlendModes: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    Blitter: ClassVar[QPaintEngine.Type] = ...
    BrushStroke: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    ConicalGradientFill: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    ConstantOpacity: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    ConvexMode: ClassVar[QPaintEngine.PolygonDrawMode] = ...
    CoreGraphics: ClassVar[QPaintEngine.Type] = ...
    Direct2D: ClassVar[QPaintEngine.Type] = ...
    Direct3D: ClassVar[QPaintEngine.Type] = ...
    DirtyBackground: ClassVar[QPaintEngine.DirtyFlag] = ...
    DirtyBackgroundMode: ClassVar[QPaintEngine.DirtyFlag] = ...
    DirtyBrush: ClassVar[QPaintEngine.DirtyFlag] = ...
    DirtyBrushOrigin: ClassVar[QPaintEngine.DirtyFlag] = ...
    DirtyClipEnabled: ClassVar[QPaintEngine.DirtyFlag] = ...
    DirtyClipPath: ClassVar[QPaintEngine.DirtyFlag] = ...
    DirtyClipRegion: ClassVar[QPaintEngine.DirtyFlag] = ...
    DirtyCompositionMode: ClassVar[QPaintEngine.DirtyFlag] = ...
    DirtyFont: ClassVar[QPaintEngine.DirtyFlag] = ...
    DirtyHints: ClassVar[QPaintEngine.DirtyFlag] = ...
    DirtyOpacity: ClassVar[QPaintEngine.DirtyFlag] = ...
    DirtyPen: ClassVar[QPaintEngine.DirtyFlag] = ...
    DirtyTransform: ClassVar[QPaintEngine.DirtyFlag] = ...
    LinearGradientFill: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    MacPrinter: ClassVar[QPaintEngine.Type] = ...
    MaskedBrush: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    MaxUser: ClassVar[QPaintEngine.Type] = ...
    ObjectBoundingModeGradients: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    OddEvenMode: ClassVar[QPaintEngine.PolygonDrawMode] = ...
    OpenGL: ClassVar[QPaintEngine.Type] = ...
    OpenGL2: ClassVar[QPaintEngine.Type] = ...
    OpenVG: ClassVar[QPaintEngine.Type] = ...
    PaintBuffer: ClassVar[QPaintEngine.Type] = ...
    PaintOutsidePaintEvent: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    PainterPaths: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    PatternBrush: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    PatternTransform: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    Pdf: ClassVar[QPaintEngine.Type] = ...
    PerspectiveTransform: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    Picture: ClassVar[QPaintEngine.Type] = ...
    PixmapTransform: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    PolylineMode: ClassVar[QPaintEngine.PolygonDrawMode] = ...
    PorterDuff: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    PostScript: ClassVar[QPaintEngine.Type] = ...
    PrimitiveTransform: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    QWindowSystem: ClassVar[QPaintEngine.Type] = ...
    QuickDraw: ClassVar[QPaintEngine.Type] = ...
    RadialGradientFill: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    Raster: ClassVar[QPaintEngine.Type] = ...
    RasterOpModes: ClassVar[QPaintEngine.PaintEngineFeature] = ...
    SVG: ClassVar[QPaintEngine.Type] = ...
    User: ClassVar[QPaintEngine.Type] = ...
    WindingMode: ClassVar[QPaintEngine.PolygonDrawMode] = ...
    Windows: ClassVar[QPaintEngine.Type] = ...
    X11: ClassVar[QPaintEngine.Type] = ...
    active: Any
    extended: Any
    gccaps: Any
    selfDestruct: Any
    state: Any
    def __init__(self, features: typing.Union[QPaintEngine.PaintEngineFeatures,QPaintEngine.PaintEngineFeature] = ...) -> None: ...
    def begin(self, pdev: QPaintDevice) -> bool: ...
    def clearDirty(self, df: typing.Union[QPaintEngine.DirtyFlags,QPaintEngine.DirtyFlag]) -> None: ...
    def coordinateOffset(self) -> PySide2.QtCore.QPoint: ...
    @overload
    def drawEllipse(self, r: PySide2.QtCore.QRect) -> None: ...
    @overload
    def drawEllipse(self, r: PySide2.QtCore.QRectF) -> None: ...
    def drawImage(self, r: PySide2.QtCore.QRectF, pm: QImage, sr: PySide2.QtCore.QRectF, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> None: ...
    @overload
    def drawLines(self, lines: PySide2.QtCore.QLine, lineCount: int) -> None: ...
    @overload
    def drawLines(self, lines: PySide2.QtCore.QLineF, lineCount: int) -> None: ...
    def drawPath(self, path: QPainterPath) -> None: ...
    def drawPixmap(self, r: PySide2.QtCore.QRectF, pm: QPixmap, sr: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def drawPoints(self, points: PySide2.QtCore.QPoint, pointCount: int) -> None: ...
    @overload
    def drawPoints(self, points: PySide2.QtCore.QPointF, pointCount: int) -> None: ...
    @overload
    def drawPolygon(self, points: PySide2.QtCore.QPoint, pointCount: int, mode: QPaintEngine.PolygonDrawMode) -> None: ...
    @overload
    def drawPolygon(self, points: PySide2.QtCore.QPointF, pointCount: int, mode: QPaintEngine.PolygonDrawMode) -> None: ...
    @overload
    def drawRects(self, rects: PySide2.QtCore.QRect, rectCount: int) -> None: ...
    @overload
    def drawRects(self, rects: PySide2.QtCore.QRectF, rectCount: int) -> None: ...
    def drawTextItem(self, p: PySide2.QtCore.QPointF, textItem: QTextItem) -> None: ...
    def drawTiledPixmap(self, r: PySide2.QtCore.QRectF, pixmap: QPixmap, s: PySide2.QtCore.QPointF) -> None: ...
    def end(self) -> bool: ...
    def hasFeature(self, feature: typing.Union[QPaintEngine.PaintEngineFeatures,QPaintEngine.PaintEngineFeature]) -> bool: ...
    def isActive(self) -> bool: ...
    def isExtended(self) -> bool: ...
    def paintDevice(self) -> QPaintDevice: ...
    def painter(self) -> QPainter: ...
    def setActive(self, newState: bool) -> None: ...
    def setDirty(self, df: typing.Union[QPaintEngine.DirtyFlags,QPaintEngine.DirtyFlag]) -> None: ...
    def setSystemClip(self, baseClip: QRegion) -> None: ...
    def setSystemRect(self, rect: PySide2.QtCore.QRect) -> None: ...
    def syncState(self) -> None: ...
    def systemClip(self) -> QRegion: ...
    def systemRect(self) -> PySide2.QtCore.QRect: ...
    def testDirty(self, df: typing.Union[QPaintEngine.DirtyFlags,QPaintEngine.DirtyFlag]) -> bool: ...
    def type(self) -> QPaintEngine.Type: ...
    def updateState(self, state: QPaintEngineState) -> None: ...

class QPaintEngineState(shiboken2.Object):
    dirtyFlags: Any
    def __init__(self) -> None: ...
    def backgroundBrush(self) -> QBrush: ...
    def backgroundMode(self) -> PySide2.QtCore.Qt.BGMode: ...
    def brush(self) -> QBrush: ...
    def brushNeedsResolving(self) -> bool: ...
    def brushOrigin(self) -> PySide2.QtCore.QPointF: ...
    def clipOperation(self) -> PySide2.QtCore.Qt.ClipOperation: ...
    def clipPath(self) -> QPainterPath: ...
    def clipRegion(self) -> QRegion: ...
    def compositionMode(self) -> QPainter.CompositionMode: ...
    def font(self) -> QFont: ...
    def isClipEnabled(self) -> bool: ...
    def matrix(self) -> QMatrix: ...
    def opacity(self) -> float: ...
    def painter(self) -> QPainter: ...
    def pen(self) -> QPen: ...
    def penNeedsResolving(self) -> bool: ...
    def renderHints(self) -> typing.Union[QPainter.RenderHints,QPainter.RenderHint]: ...
    def state(self) -> typing.Union[QPaintEngine.DirtyFlags,QPaintEngine.DirtyFlag]: ...
    def transform(self) -> QTransform: ...

class QPaintEvent(PySide2.QtCore.QEvent):
    @overload
    def __init__(self, paintRect: PySide2.QtCore.QRect) -> None: ...
    @overload
    def __init__(self, paintRegion: QRegion) -> None: ...
    def rect(self) -> PySide2.QtCore.QRect: ...
    def region(self) -> QRegion: ...

class QPainter(shiboken2.Object):
    class CompositionMode:
        CompositionMode_Clear: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_ColorBurn: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_ColorDodge: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_Darken: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_Destination: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_DestinationAtop: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_DestinationIn: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_DestinationOut: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_DestinationOver: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_Difference: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_Exclusion: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_HardLight: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_Lighten: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_Multiply: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_Overlay: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_Plus: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_Screen: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_SoftLight: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_Source: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_SourceAtop: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_SourceIn: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_SourceOut: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_SourceOver: ClassVar[QPainter.CompositionMode] = ...
        CompositionMode_Xor: ClassVar[QPainter.CompositionMode] = ...
        RasterOp_ClearDestination: ClassVar[QPainter.CompositionMode] = ...
        RasterOp_NotDestination: ClassVar[QPainter.CompositionMode] = ...
        RasterOp_NotSource: ClassVar[QPainter.CompositionMode] = ...
        RasterOp_NotSourceAndDestination: ClassVar[QPainter.CompositionMode] = ...
        RasterOp_NotSourceAndNotDestination: ClassVar[QPainter.CompositionMode] = ...
        RasterOp_NotSourceOrDestination: ClassVar[QPainter.CompositionMode] = ...
        RasterOp_NotSourceOrNotDestination: ClassVar[QPainter.CompositionMode] = ...
        RasterOp_NotSourceXorDestination: ClassVar[QPainter.CompositionMode] = ...
        RasterOp_SetDestination: ClassVar[QPainter.CompositionMode] = ...
        RasterOp_SourceAndDestination: ClassVar[QPainter.CompositionMode] = ...
        RasterOp_SourceAndNotDestination: ClassVar[QPainter.CompositionMode] = ...
        RasterOp_SourceOrDestination: ClassVar[QPainter.CompositionMode] = ...
        RasterOp_SourceOrNotDestination: ClassVar[QPainter.CompositionMode] = ...
        RasterOp_SourceXorDestination: ClassVar[QPainter.CompositionMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPainter.CompositionMode: ...
        def __and__(self, other: typing.SupportsInt) -> QPainter.CompositionMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPainter.CompositionMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPainter.CompositionMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPainter.CompositionMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QPainter.CompositionMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPainter.CompositionMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QPainter.CompositionMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPainter.CompositionMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPainter.CompositionMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QPainter.CompositionMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QPainter.CompositionMode: ...

    class PixmapFragment(shiboken2.Object):
        height: Any
        opacity: Any
        rotation: Any
        scaleX: Any
        scaleY: Any
        sourceLeft: Any
        sourceTop: Any
        width: Any
        x: Any
        y: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, PixmapFragment: QPainter.PixmapFragment) -> None: ...
        @classmethod
        def create(cls, pos: PySide2.QtCore.QPointF, sourceRect: PySide2.QtCore.QRectF, scaleX: float = ..., scaleY: float = ..., rotation: float = ..., opacity: float = ...) -> QPainter.PixmapFragment: ...
        def __copy__(self) -> None: ...

    class PixmapFragmentHint:
        OpaqueHint: ClassVar[QPainter.PixmapFragmentHint] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QPainter.PixmapFragmentHints: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QPainter.PixmapFragmentHint: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPainter.PixmapFragmentHints: ...
        def __rand__(self, other: typing.SupportsInt) -> QPainter.PixmapFragmentHints: ...
        def __ror__(self, other: typing.SupportsInt) -> QPainter.PixmapFragmentHints: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPainter.PixmapFragmentHints: ...
        def __xor__(self, other: typing.SupportsInt) -> QPainter.PixmapFragmentHints: ...

    class PixmapFragmentHints:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QPainter.PixmapFragmentHints: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QPainter.PixmapFragmentHints: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPainter.PixmapFragmentHints: ...
        def __rand__(self, other: typing.SupportsInt) -> QPainter.PixmapFragmentHints: ...
        def __ror__(self, other: typing.SupportsInt) -> QPainter.PixmapFragmentHints: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPainter.PixmapFragmentHints: ...
        def __xor__(self, other: typing.SupportsInt) -> QPainter.PixmapFragmentHints: ...

    class RenderHint:
        Antialiasing: ClassVar[QPainter.RenderHint] = ...
        HighQualityAntialiasing: ClassVar[QPainter.RenderHint] = ...
        LosslessImageRendering: ClassVar[QPainter.RenderHint] = ...
        NonCosmeticDefaultPen: ClassVar[QPainter.RenderHint] = ...
        Qt4CompatiblePainting: ClassVar[QPainter.RenderHint] = ...
        SmoothPixmapTransform: ClassVar[QPainter.RenderHint] = ...
        TextAntialiasing: ClassVar[QPainter.RenderHint] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QPainter.RenderHints: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QPainter.RenderHint: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPainter.RenderHints: ...
        def __rand__(self, other: typing.SupportsInt) -> QPainter.RenderHints: ...
        def __ror__(self, other: typing.SupportsInt) -> QPainter.RenderHints: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPainter.RenderHints: ...
        def __xor__(self, other: typing.SupportsInt) -> QPainter.RenderHints: ...

    class RenderHints:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QPainter.RenderHints: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QPainter.RenderHints: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPainter.RenderHints: ...
        def __rand__(self, other: typing.SupportsInt) -> QPainter.RenderHints: ...
        def __ror__(self, other: typing.SupportsInt) -> QPainter.RenderHints: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPainter.RenderHints: ...
        def __xor__(self, other: typing.SupportsInt) -> QPainter.RenderHints: ...
    Antialiasing: ClassVar[QPainter.RenderHint] = ...
    CompositionMode_Clear: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_ColorBurn: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_ColorDodge: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_Darken: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_Destination: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_DestinationAtop: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_DestinationIn: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_DestinationOut: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_DestinationOver: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_Difference: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_Exclusion: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_HardLight: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_Lighten: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_Multiply: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_Overlay: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_Plus: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_Screen: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_SoftLight: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_Source: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_SourceAtop: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_SourceIn: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_SourceOut: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_SourceOver: ClassVar[QPainter.CompositionMode] = ...
    CompositionMode_Xor: ClassVar[QPainter.CompositionMode] = ...
    HighQualityAntialiasing: ClassVar[QPainter.RenderHint] = ...
    LosslessImageRendering: ClassVar[QPainter.RenderHint] = ...
    NonCosmeticDefaultPen: ClassVar[QPainter.RenderHint] = ...
    OpaqueHint: ClassVar[QPainter.PixmapFragmentHint] = ...
    Qt4CompatiblePainting: ClassVar[QPainter.RenderHint] = ...
    RasterOp_ClearDestination: ClassVar[QPainter.CompositionMode] = ...
    RasterOp_NotDestination: ClassVar[QPainter.CompositionMode] = ...
    RasterOp_NotSource: ClassVar[QPainter.CompositionMode] = ...
    RasterOp_NotSourceAndDestination: ClassVar[QPainter.CompositionMode] = ...
    RasterOp_NotSourceAndNotDestination: ClassVar[QPainter.CompositionMode] = ...
    RasterOp_NotSourceOrDestination: ClassVar[QPainter.CompositionMode] = ...
    RasterOp_NotSourceOrNotDestination: ClassVar[QPainter.CompositionMode] = ...
    RasterOp_NotSourceXorDestination: ClassVar[QPainter.CompositionMode] = ...
    RasterOp_SetDestination: ClassVar[QPainter.CompositionMode] = ...
    RasterOp_SourceAndDestination: ClassVar[QPainter.CompositionMode] = ...
    RasterOp_SourceAndNotDestination: ClassVar[QPainter.CompositionMode] = ...
    RasterOp_SourceOrDestination: ClassVar[QPainter.CompositionMode] = ...
    RasterOp_SourceOrNotDestination: ClassVar[QPainter.CompositionMode] = ...
    RasterOp_SourceXorDestination: ClassVar[QPainter.CompositionMode] = ...
    SmoothPixmapTransform: ClassVar[QPainter.RenderHint] = ...
    TextAntialiasing: ClassVar[QPainter.RenderHint] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: QPaintDevice) -> None: ...
    def background(self) -> QBrush: ...
    def backgroundMode(self) -> PySide2.QtCore.Qt.BGMode: ...
    def begin(self, arg__1: QPaintDevice) -> bool: ...
    def beginNativePainting(self) -> None: ...
    @overload
    def boundingRect(self, rect: PySide2.QtCore.QRect, flags: typing.SupportsInt, text: str) -> PySide2.QtCore.QRect: ...
    @overload
    def boundingRect(self, rect: PySide2.QtCore.QRectF, flags: typing.SupportsInt, text: str) -> PySide2.QtCore.QRectF: ...
    @overload
    def boundingRect(self, rect: PySide2.QtCore.QRectF, text: str, o: QTextOption = ...) -> PySide2.QtCore.QRectF: ...
    @overload
    def boundingRect(self, x: int, y: int, w: int, h: int, flags: typing.SupportsInt, text: str) -> PySide2.QtCore.QRect: ...
    def brush(self) -> QBrush: ...
    def brushOrigin(self) -> PySide2.QtCore.QPoint: ...
    def clipBoundingRect(self) -> PySide2.QtCore.QRectF: ...
    def clipPath(self) -> QPainterPath: ...
    def clipRegion(self) -> QRegion: ...
    def combinedMatrix(self) -> QMatrix: ...
    def combinedTransform(self) -> QTransform: ...
    def compositionMode(self) -> QPainter.CompositionMode: ...
    def device(self) -> QPaintDevice: ...
    def deviceMatrix(self) -> QMatrix: ...
    def deviceTransform(self) -> QTransform: ...
    @overload
    def drawArc(self, arg__1: PySide2.QtCore.QRect, a: int, alen: int) -> None: ...
    @overload
    def drawArc(self, rect: PySide2.QtCore.QRectF, a: int, alen: int) -> None: ...
    @overload
    def drawArc(self, x: int, y: int, w: int, h: int, a: int, alen: int) -> None: ...
    @overload
    def drawChord(self, arg__1: PySide2.QtCore.QRect, a: int, alen: int) -> None: ...
    @overload
    def drawChord(self, rect: PySide2.QtCore.QRectF, a: int, alen: int) -> None: ...
    @overload
    def drawChord(self, x: int, y: int, w: int, h: int, a: int, alen: int) -> None: ...
    @overload
    def drawConvexPolygon(self, arg__1: typing.List[PySide2.QtCore.QPointF]) -> None: ...
    @overload
    def drawConvexPolygon(self, arg__1: typing.List[PySide2.QtCore.QPoint]) -> None: ...
    @overload
    def drawConvexPolygon(self, polygon: QPolygon) -> None: ...
    @overload
    def drawConvexPolygon(self, polygon: QPolygonF) -> None: ...
    @overload
    def drawEllipse(self, center: PySide2.QtCore.QPoint, rx: int, ry: int) -> None: ...
    @overload
    def drawEllipse(self, center: PySide2.QtCore.QPointF, rx: float, ry: float) -> None: ...
    @overload
    def drawEllipse(self, r: PySide2.QtCore.QRect) -> None: ...
    @overload
    def drawEllipse(self, r: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def drawEllipse(self, x: int, y: int, w: int, h: int) -> None: ...
    @overload
    def drawImage(self, p: PySide2.QtCore.QPoint, image: QImage) -> None: ...
    @overload
    def drawImage(self, p: PySide2.QtCore.QPoint, image: QImage, sr: PySide2.QtCore.QRect, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> None: ...
    @overload
    def drawImage(self, p: PySide2.QtCore.QPointF, image: QImage) -> None: ...
    @overload
    def drawImage(self, p: PySide2.QtCore.QPointF, image: QImage, sr: PySide2.QtCore.QRectF, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> None: ...
    @overload
    def drawImage(self, r: PySide2.QtCore.QRect, image: QImage) -> None: ...
    @overload
    def drawImage(self, r: PySide2.QtCore.QRectF, image: QImage) -> None: ...
    @overload
    def drawImage(self, targetRect: PySide2.QtCore.QRect, image: QImage, sourceRect: PySide2.QtCore.QRect, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> None: ...
    @overload
    def drawImage(self, targetRect: PySide2.QtCore.QRectF, image: QImage, sourceRect: PySide2.QtCore.QRectF, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> None: ...
    @overload
    def drawImage(self, x: int, y: int, image: QImage, sx: int = ..., sy: int = ..., sw: int = ..., sh: int = ..., flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> None: ...
    @overload
    def drawLine(self, line: PySide2.QtCore.QLine) -> None: ...
    @overload
    def drawLine(self, line: PySide2.QtCore.QLineF) -> None: ...
    @overload
    def drawLine(self, p1: PySide2.QtCore.QPoint, p2: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def drawLine(self, p1: PySide2.QtCore.QPointF, p2: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def drawLine(self, x1: int, y1: int, x2: int, y2: int) -> None: ...
    @overload
    def drawLines(self, lines: typing.List[PySide2.QtCore.QLineF]) -> None: ...
    @overload
    def drawLines(self, lines: typing.List[PySide2.QtCore.QLine]) -> None: ...
    @overload
    def drawLines(self, pointPairs: typing.List[PySide2.QtCore.QPointF]) -> None: ...
    @overload
    def drawLines(self, pointPairs: typing.List[PySide2.QtCore.QPoint]) -> None: ...
    def drawPath(self, path: QPainterPath) -> None: ...
    @overload
    def drawPicture(self, p: PySide2.QtCore.QPoint, picture: QPicture) -> None: ...
    @overload
    def drawPicture(self, p: PySide2.QtCore.QPointF, picture: QPicture) -> None: ...
    @overload
    def drawPicture(self, x: int, y: int, picture: QPicture) -> None: ...
    @overload
    def drawPie(self, arg__1: PySide2.QtCore.QRect, a: int, alen: int) -> None: ...
    @overload
    def drawPie(self, rect: PySide2.QtCore.QRectF, a: int, alen: int) -> None: ...
    @overload
    def drawPie(self, x: int, y: int, w: int, h: int, a: int, alen: int) -> None: ...
    @overload
    def drawPixmap(self, p: PySide2.QtCore.QPoint, pm: QPixmap) -> None: ...
    @overload
    def drawPixmap(self, p: PySide2.QtCore.QPoint, pm: QPixmap, sr: PySide2.QtCore.QRect) -> None: ...
    @overload
    def drawPixmap(self, p: PySide2.QtCore.QPointF, pm: QPixmap) -> None: ...
    @overload
    def drawPixmap(self, p: PySide2.QtCore.QPointF, pm: QPixmap, sr: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def drawPixmap(self, r: PySide2.QtCore.QRect, pm: QPixmap) -> None: ...
    @overload
    def drawPixmap(self, targetRect: PySide2.QtCore.QRect, pixmap: QPixmap, sourceRect: PySide2.QtCore.QRect) -> None: ...
    @overload
    def drawPixmap(self, targetRect: PySide2.QtCore.QRectF, pixmap: QPixmap, sourceRect: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def drawPixmap(self, x: int, y: int, pm: QPixmap) -> None: ...
    @overload
    def drawPixmap(self, x: int, y: int, pm: QPixmap, sx: int, sy: int, sw: int, sh: int) -> None: ...
    @overload
    def drawPixmap(self, x: int, y: int, w: int, h: int, pm: QPixmap) -> None: ...
    @overload
    def drawPixmap(self, x: int, y: int, w: int, h: int, pm: QPixmap, sx: int, sy: int, sw: int, sh: int) -> None: ...
    def drawPixmapFragments(self, fragments: QPainter.PixmapFragment, fragmentCount: int, pixmap: QPixmap, hints: typing.Union[QPainter.PixmapFragmentHints,QPainter.PixmapFragmentHint] = ...) -> None: ...
    @overload
    def drawPoint(self, p: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def drawPoint(self, pt: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def drawPoint(self, x: int, y: int) -> None: ...
    @overload
    def drawPoints(self, arg__1: typing.List[PySide2.QtCore.QPointF]) -> None: ...
    @overload
    def drawPoints(self, arg__1: typing.List[PySide2.QtCore.QPoint]) -> None: ...
    @overload
    def drawPoints(self, points: QPolygon) -> None: ...
    @overload
    def drawPoints(self, points: QPolygonF) -> None: ...
    @overload
    def drawPolygon(self, arg__1: typing.List[PySide2.QtCore.QPointF], arg__2: PySide2.QtCore.Qt.FillRule) -> None: ...
    @overload
    def drawPolygon(self, arg__1: typing.List[PySide2.QtCore.QPoint], arg__2: PySide2.QtCore.Qt.FillRule) -> None: ...
    @overload
    def drawPolygon(self, polygon: QPolygon, fillRule: PySide2.QtCore.Qt.FillRule = ...) -> None: ...
    @overload
    def drawPolygon(self, polygon: QPolygonF, fillRule: PySide2.QtCore.Qt.FillRule = ...) -> None: ...
    @overload
    def drawPolyline(self, arg__1: typing.List[PySide2.QtCore.QPointF]) -> None: ...
    @overload
    def drawPolyline(self, arg__1: typing.List[PySide2.QtCore.QPoint]) -> None: ...
    @overload
    def drawPolyline(self, polygon: QPolygon) -> None: ...
    @overload
    def drawPolyline(self, polyline: QPolygonF) -> None: ...
    @overload
    def drawRect(self, rect: PySide2.QtCore.QRect) -> None: ...
    @overload
    def drawRect(self, rect: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def drawRect(self, x1: int, y1: int, w: int, h: int) -> None: ...
    @overload
    def drawRects(self, rectangles: typing.List[PySide2.QtCore.QRectF]) -> None: ...
    @overload
    def drawRects(self, rectangles: typing.List[PySide2.QtCore.QRect]) -> None: ...
    @overload
    def drawRoundRect(self, r: PySide2.QtCore.QRect, xround: int = ..., yround: int = ...) -> None: ...
    @overload
    def drawRoundRect(self, r: PySide2.QtCore.QRectF, xround: int = ..., yround: int = ...) -> None: ...
    @overload
    def drawRoundRect(self, x: int, y: int, w: int, h: int, xRound: int = ..., yRound: int = ...) -> None: ...
    @overload
    def drawRoundedRect(self, rect: PySide2.QtCore.QRect, xRadius: float, yRadius: float, mode: PySide2.QtCore.Qt.SizeMode = ...) -> None: ...
    @overload
    def drawRoundedRect(self, rect: PySide2.QtCore.QRectF, xRadius: float, yRadius: float, mode: PySide2.QtCore.Qt.SizeMode = ...) -> None: ...
    @overload
    def drawRoundedRect(self, x: int, y: int, w: int, h: int, xRadius: float, yRadius: float, mode: PySide2.QtCore.Qt.SizeMode = ...) -> None: ...
    @overload
    def drawStaticText(self, left: int, top: int, staticText: QStaticText) -> None: ...
    @overload
    def drawStaticText(self, topLeftPosition: PySide2.QtCore.QPoint, staticText: QStaticText) -> None: ...
    @overload
    def drawStaticText(self, topLeftPosition: PySide2.QtCore.QPointF, staticText: QStaticText) -> None: ...
    @overload
    def drawText(self, p: PySide2.QtCore.QPoint, s: str) -> None: ...
    @overload
    def drawText(self, p: PySide2.QtCore.QPointF, s: str) -> None: ...
    @overload
    def drawText(self, r: PySide2.QtCore.QRect, flags: typing.SupportsInt, text: str, br: typing.Optional[PySide2.QtCore.QRect] = ...) -> None: ...
    @overload
    def drawText(self, r: PySide2.QtCore.QRectF, flags: typing.SupportsInt, text: str, br: typing.Optional[PySide2.QtCore.QRectF] = ...) -> None: ...
    @overload
    def drawText(self, r: PySide2.QtCore.QRectF, text: str, o: QTextOption = ...) -> None: ...
    @overload
    def drawText(self, x: int, y: int, s: str) -> None: ...
    @overload
    def drawText(self, x: int, y: int, w: int, h: int, flags: typing.SupportsInt, text: str, br: typing.Optional[PySide2.QtCore.QRect] = ...) -> None: ...
    @overload
    def drawTextItem(self, p: PySide2.QtCore.QPoint, ti: QTextItem) -> None: ...
    @overload
    def drawTextItem(self, p: PySide2.QtCore.QPointF, ti: QTextItem) -> None: ...
    @overload
    def drawTextItem(self, x: int, y: int, ti: QTextItem) -> None: ...
    @overload
    def drawTiledPixmap(self, arg__1: PySide2.QtCore.QRect, arg__2: QPixmap, pos: PySide2.QtCore.QPoint = ...) -> None: ...
    @overload
    def drawTiledPixmap(self, rect: PySide2.QtCore.QRectF, pm: QPixmap, offset: PySide2.QtCore.QPointF = ...) -> None: ...
    @overload
    def drawTiledPixmap(self, x: int, y: int, w: int, h: int, arg__5: QPixmap, sx: int = ..., sy: int = ...) -> None: ...
    def end(self) -> bool: ...
    def endNativePainting(self) -> None: ...
    @overload
    def eraseRect(self, arg__1: PySide2.QtCore.QRect) -> None: ...
    @overload
    def eraseRect(self, arg__1: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def eraseRect(self, x: int, y: int, w: int, h: int) -> None: ...
    def fillPath(self, path: QPainterPath, brush: QBrush) -> None: ...
    @overload
    def fillRect(self, arg__1: PySide2.QtCore.QRect, arg__2: QBrush) -> None: ...
    @overload
    def fillRect(self, arg__1: PySide2.QtCore.QRect, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def fillRect(self, arg__1: PySide2.QtCore.QRectF, arg__2: QBrush) -> None: ...
    @overload
    def fillRect(self, arg__1: PySide2.QtCore.QRectF, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def fillRect(self, r: PySide2.QtCore.QRect, c: PySide2.QtCore.Qt.GlobalColor) -> None: ...
    @overload
    def fillRect(self, r: PySide2.QtCore.QRect, preset: QGradient.Preset) -> None: ...
    @overload
    def fillRect(self, r: PySide2.QtCore.QRect, style: PySide2.QtCore.Qt.BrushStyle) -> None: ...
    @overload
    def fillRect(self, r: PySide2.QtCore.QRectF, c: PySide2.QtCore.Qt.GlobalColor) -> None: ...
    @overload
    def fillRect(self, r: PySide2.QtCore.QRectF, preset: QGradient.Preset) -> None: ...
    @overload
    def fillRect(self, r: PySide2.QtCore.QRectF, style: PySide2.QtCore.Qt.BrushStyle) -> None: ...
    @overload
    def fillRect(self, x: int, y: int, w: int, h: int, arg__5: QBrush) -> None: ...
    @overload
    def fillRect(self, x: int, y: int, w: int, h: int, c: PySide2.QtCore.Qt.GlobalColor) -> None: ...
    @overload
    def fillRect(self, x: int, y: int, w: int, h: int, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def fillRect(self, x: int, y: int, w: int, h: int, preset: QGradient.Preset) -> None: ...
    @overload
    def fillRect(self, x: int, y: int, w: int, h: int, style: PySide2.QtCore.Qt.BrushStyle) -> None: ...
    def font(self) -> QFont: ...
    def fontInfo(self) -> QFontInfo: ...
    def fontMetrics(self) -> QFontMetrics: ...
    def hasClipping(self) -> bool: ...
    def initFrom(self, device: QPaintDevice) -> None: ...
    def isActive(self) -> bool: ...
    def layoutDirection(self) -> PySide2.QtCore.Qt.LayoutDirection: ...
    def matrix(self) -> QMatrix: ...
    def matrixEnabled(self) -> bool: ...
    def opacity(self) -> float: ...
    def paintEngine(self) -> QPaintEngine: ...
    def pen(self) -> QPen: ...
    @classmethod
    def redirected(cls, device: QPaintDevice, offset: typing.Union[PySide2.QtCore.QPoint,None] = ...) -> QPaintDevice: ...
    def renderHints(self) -> typing.Union[QPainter.RenderHints,QPainter.RenderHint]: ...
    def resetMatrix(self) -> None: ...
    def resetTransform(self) -> None: ...
    def restore(self) -> None: ...
    @classmethod
    def restoreRedirected(cls, device: QPaintDevice) -> None: ...
    def rotate(self, a: float) -> None: ...
    def save(self) -> None: ...
    def scale(self, sx: float, sy: float) -> None: ...
    def setBackground(self, bg: QBrush) -> None: ...
    def setBackgroundMode(self, mode: PySide2.QtCore.Qt.BGMode) -> None: ...
    @overload
    def setBrush(self, brush: QBrush) -> None: ...
    @overload
    def setBrush(self, style: PySide2.QtCore.Qt.BrushStyle) -> None: ...
    @overload
    def setBrushOrigin(self, arg__1: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def setBrushOrigin(self, arg__1: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def setBrushOrigin(self, x: int, y: int) -> None: ...
    def setClipPath(self, path: QPainterPath, op: PySide2.QtCore.Qt.ClipOperation = ...) -> None: ...
    @overload
    def setClipRect(self, arg__1: PySide2.QtCore.QRect, op: PySide2.QtCore.Qt.ClipOperation = ...) -> None: ...
    @overload
    def setClipRect(self, arg__1: PySide2.QtCore.QRectF, op: PySide2.QtCore.Qt.ClipOperation = ...) -> None: ...
    @overload
    def setClipRect(self, x: int, y: int, w: int, h: int, op: PySide2.QtCore.Qt.ClipOperation = ...) -> None: ...
    def setClipRegion(self, arg__1: QRegion, op: PySide2.QtCore.Qt.ClipOperation = ...) -> None: ...
    def setClipping(self, enable: bool) -> None: ...
    def setCompositionMode(self, mode: QPainter.CompositionMode) -> None: ...
    def setFont(self, f: QFont) -> None: ...
    def setLayoutDirection(self, direction: PySide2.QtCore.Qt.LayoutDirection) -> None: ...
    def setMatrix(self, matrix: QMatrix, combine: bool = ...) -> None: ...
    def setMatrixEnabled(self, enabled: bool) -> None: ...
    def setOpacity(self, opacity: float) -> None: ...
    @overload
    def setPen(self, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def setPen(self, pen: QPen) -> None: ...
    @overload
    def setPen(self, style: PySide2.QtCore.Qt.PenStyle) -> None: ...
    @classmethod
    def setRedirected(cls, device: QPaintDevice, replacement: QPaintDevice, offset: PySide2.QtCore.QPoint = ...) -> None: ...
    def setRenderHint(self, hint: QPainter.RenderHint, on: bool = ...) -> None: ...
    def setRenderHints(self, hints: typing.Union[QPainter.RenderHints,QPainter.RenderHint], on: bool = ...) -> None: ...
    def setTransform(self, transform: QTransform, combine: bool = ...) -> None: ...
    def setViewTransformEnabled(self, enable: bool) -> None: ...
    @overload
    def setViewport(self, viewport: PySide2.QtCore.QRect) -> None: ...
    @overload
    def setViewport(self, x: int, y: int, w: int, h: int) -> None: ...
    @overload
    def setWindow(self, window: PySide2.QtCore.QRect) -> None: ...
    @overload
    def setWindow(self, x: int, y: int, w: int, h: int) -> None: ...
    def setWorldMatrix(self, matrix: QMatrix, combine: bool = ...) -> None: ...
    def setWorldMatrixEnabled(self, enabled: bool) -> None: ...
    def setWorldTransform(self, matrix: QTransform, combine: bool = ...) -> None: ...
    def shear(self, sh: float, sv: float) -> None: ...
    def strokePath(self, path: QPainterPath, pen: QPen) -> None: ...
    def testRenderHint(self, hint: QPainter.RenderHint) -> bool: ...
    def transform(self) -> QTransform: ...
    @overload
    def translate(self, dx: float, dy: float) -> None: ...
    @overload
    def translate(self, offset: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def translate(self, offset: PySide2.QtCore.QPointF) -> None: ...
    def viewTransformEnabled(self) -> bool: ...
    def viewport(self) -> PySide2.QtCore.QRect: ...
    def window(self) -> PySide2.QtCore.QRect: ...
    def worldMatrix(self) -> QMatrix: ...
    def worldMatrixEnabled(self) -> bool: ...
    def worldTransform(self) -> QTransform: ...

class QPainterPath(shiboken2.Object):
    class Element(shiboken2.Object):
        type: Any
        x: Any
        y: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, Element: QPainterPath.Element) -> None: ...
        def isCurveTo(self) -> bool: ...
        def isLineTo(self) -> bool: ...
        def isMoveTo(self) -> bool: ...
        def __copy__(self) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...

    class ElementType:
        CurveToDataElement: ClassVar[QPainterPath.ElementType] = ...
        CurveToElement: ClassVar[QPainterPath.ElementType] = ...
        LineToElement: ClassVar[QPainterPath.ElementType] = ...
        MoveToElement: ClassVar[QPainterPath.ElementType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPainterPath.ElementType: ...
        def __and__(self, other: typing.SupportsInt) -> QPainterPath.ElementType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPainterPath.ElementType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPainterPath.ElementType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPainterPath.ElementType: ...
        def __rand__(self, other: typing.SupportsInt) -> QPainterPath.ElementType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPainterPath.ElementType: ...
        def __ror__(self, other: typing.SupportsInt) -> QPainterPath.ElementType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPainterPath.ElementType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPainterPath.ElementType: ...
        def __sub__(self, other: typing.SupportsInt) -> QPainterPath.ElementType: ...
        def __xor__(self, other: typing.SupportsInt) -> QPainterPath.ElementType: ...
    CurveToDataElement: ClassVar[QPainterPath.ElementType] = ...
    CurveToElement: ClassVar[QPainterPath.ElementType] = ...
    LineToElement: ClassVar[QPainterPath.ElementType] = ...
    MoveToElement: ClassVar[QPainterPath.ElementType] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QPainterPath) -> None: ...
    @overload
    def __init__(self, startPoint: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def addEllipse(self, center: PySide2.QtCore.QPointF, rx: float, ry: float) -> None: ...
    @overload
    def addEllipse(self, rect: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def addEllipse(self, x: float, y: float, w: float, h: float) -> None: ...
    def addPath(self, path: QPainterPath) -> None: ...
    def addPolygon(self, polygon: QPolygonF) -> None: ...
    @overload
    def addRect(self, rect: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def addRect(self, x: float, y: float, w: float, h: float) -> None: ...
    def addRegion(self, region: QRegion) -> None: ...
    @overload
    def addRoundRect(self, rect: PySide2.QtCore.QRectF, roundness: int) -> None: ...
    @overload
    def addRoundRect(self, rect: PySide2.QtCore.QRectF, xRnd: int, yRnd: int) -> None: ...
    @overload
    def addRoundRect(self, x: float, y: float, w: float, h: float, roundness: int) -> None: ...
    @overload
    def addRoundRect(self, x: float, y: float, w: float, h: float, xRnd: int, yRnd: int) -> None: ...
    @overload
    def addRoundedRect(self, rect: PySide2.QtCore.QRectF, xRadius: float, yRadius: float, mode: PySide2.QtCore.Qt.SizeMode = ...) -> None: ...
    @overload
    def addRoundedRect(self, x: float, y: float, w: float, h: float, xRadius: float, yRadius: float, mode: PySide2.QtCore.Qt.SizeMode = ...) -> None: ...
    @overload
    def addText(self, point: PySide2.QtCore.QPointF, f: QFont, text: str) -> None: ...
    @overload
    def addText(self, x: float, y: float, f: QFont, text: str) -> None: ...
    def angleAtPercent(self, t: float) -> float: ...
    @overload
    def arcMoveTo(self, rect: PySide2.QtCore.QRectF, angle: float) -> None: ...
    @overload
    def arcMoveTo(self, x: float, y: float, w: float, h: float, angle: float) -> None: ...
    @overload
    def arcTo(self, rect: PySide2.QtCore.QRectF, startAngle: float, arcLength: float) -> None: ...
    @overload
    def arcTo(self, x: float, y: float, w: float, h: float, startAngle: float, arcLength: float) -> None: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def capacity(self) -> int: ...
    def clear(self) -> None: ...
    def closeSubpath(self) -> None: ...
    def connectPath(self, path: QPainterPath) -> None: ...
    @overload
    def contains(self, p: QPainterPath) -> bool: ...
    @overload
    def contains(self, pt: PySide2.QtCore.QPointF) -> bool: ...
    @overload
    def contains(self, rect: PySide2.QtCore.QRectF) -> bool: ...
    def controlPointRect(self) -> PySide2.QtCore.QRectF: ...
    @overload
    def cubicTo(self, ctrlPt1: PySide2.QtCore.QPointF, ctrlPt2: PySide2.QtCore.QPointF, endPt: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def cubicTo(self, ctrlPt1x: float, ctrlPt1y: float, ctrlPt2x: float, ctrlPt2y: float, endPtx: float, endPty: float) -> None: ...
    def currentPosition(self) -> PySide2.QtCore.QPointF: ...
    def elementAt(self, i: int) -> QPainterPath.Element: ...
    def elementCount(self) -> int: ...
    def fillRule(self) -> PySide2.QtCore.Qt.FillRule: ...
    def intersected(self, r: QPainterPath) -> QPainterPath: ...
    @overload
    def intersects(self, p: QPainterPath) -> bool: ...
    @overload
    def intersects(self, rect: PySide2.QtCore.QRectF) -> bool: ...
    def isEmpty(self) -> bool: ...
    def length(self) -> float: ...
    @overload
    def lineTo(self, p: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def lineTo(self, x: float, y: float) -> None: ...
    @overload
    def moveTo(self, p: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def moveTo(self, x: float, y: float) -> None: ...
    def percentAtLength(self, t: float) -> float: ...
    def pointAtPercent(self, t: float) -> PySide2.QtCore.QPointF: ...
    @overload
    def quadTo(self, ctrlPt: PySide2.QtCore.QPointF, endPt: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def quadTo(self, ctrlPtx: float, ctrlPty: float, endPtx: float, endPty: float) -> None: ...
    def reserve(self, size: int) -> None: ...
    def setElementPositionAt(self, i: int, x: float, y: float) -> None: ...
    def setFillRule(self, fillRule: PySide2.QtCore.Qt.FillRule) -> None: ...
    def simplified(self) -> QPainterPath: ...
    def slopeAtPercent(self, t: float) -> float: ...
    def subtracted(self, r: QPainterPath) -> QPainterPath: ...
    def subtractedInverted(self, r: QPainterPath) -> QPainterPath: ...
    def swap(self, other: QPainterPath) -> None: ...
    @overload
    def toFillPolygon(self, matrix: QMatrix) -> QPolygonF: ...
    @overload
    def toFillPolygon(self, matrix: QTransform = ...) -> QPolygonF: ...
    @overload
    def toFillPolygons(self, matrix: QMatrix) -> typing.List[QPolygonF]: ...
    @overload
    def toFillPolygons(self, matrix: QTransform = ...) -> typing.List[QPolygonF]: ...
    def toReversed(self) -> QPainterPath: ...
    @overload
    def toSubpathPolygons(self, matrix: QMatrix) -> typing.List[QPolygonF]: ...
    @overload
    def toSubpathPolygons(self, matrix: QTransform = ...) -> typing.List[QPolygonF]: ...
    @overload
    def translate(self, dx: float, dy: float) -> None: ...
    @overload
    def translate(self, offset: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def translated(self, dx: float, dy: float) -> QPainterPath: ...
    @overload
    def translated(self, offset: PySide2.QtCore.QPointF) -> QPainterPath: ...
    def united(self, r: QPainterPath) -> QPainterPath: ...
    def __add__(self, other: QPainterPath) -> QPainterPath: ...
    def __and__(self, other: QPainterPath) -> QPainterPath: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, other: QPainterPath) -> QPainterPath: ...
    def __iand__(self, other: QPainterPath) -> QPainterPath: ...
    def __ior__(self, other: QPainterPath) -> QPainterPath: ...
    def __isub__(self, other: QPainterPath) -> QPainterPath: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    @overload
    def __mul__(self, m: QMatrix) -> QPainterPath: ...
    @overload
    def __mul__(self, m: QTransform) -> QPainterPath: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, other: QPainterPath) -> QPainterPath: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __rsub__(self, other) -> Any: ...
    def __sub__(self, other: QPainterPath) -> QPainterPath: ...

class QPainterPathStroker(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, pen: QPen) -> None: ...
    def capStyle(self) -> PySide2.QtCore.Qt.PenCapStyle: ...
    def createStroke(self, path: QPainterPath) -> QPainterPath: ...
    def curveThreshold(self) -> float: ...
    def dashOffset(self) -> float: ...
    def dashPattern(self) -> typing.List[float]: ...
    def joinStyle(self) -> PySide2.QtCore.Qt.PenJoinStyle: ...
    def miterLimit(self) -> float: ...
    def setCapStyle(self, style: PySide2.QtCore.Qt.PenCapStyle) -> None: ...
    def setCurveThreshold(self, threshold: float) -> None: ...
    def setDashOffset(self, offset: float) -> None: ...
    @overload
    def setDashPattern(self, arg__1: PySide2.QtCore.Qt.PenStyle) -> None: ...
    @overload
    def setDashPattern(self, dashPattern: typing.List[float]) -> None: ...
    def setJoinStyle(self, style: PySide2.QtCore.Qt.PenJoinStyle) -> None: ...
    def setMiterLimit(self, length: float) -> None: ...
    def setWidth(self, width: float) -> None: ...
    def width(self) -> float: ...

class QPalette(shiboken2.Object):
    class ColorGroup:
        Active: ClassVar[QPalette.ColorGroup] = ...
        All: ClassVar[QPalette.ColorGroup] = ...
        Current: ClassVar[QPalette.ColorGroup] = ...
        Disabled: ClassVar[QPalette.ColorGroup] = ...
        Inactive: ClassVar[QPalette.ColorGroup] = ...
        NColorGroups: ClassVar[QPalette.ColorGroup] = ...
        Normal: ClassVar[QPalette.ColorGroup] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPalette.ColorGroup: ...
        def __and__(self, other: typing.SupportsInt) -> QPalette.ColorGroup: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPalette.ColorGroup: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPalette.ColorGroup: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPalette.ColorGroup: ...
        def __rand__(self, other: typing.SupportsInt) -> QPalette.ColorGroup: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPalette.ColorGroup: ...
        def __ror__(self, other: typing.SupportsInt) -> QPalette.ColorGroup: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPalette.ColorGroup: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPalette.ColorGroup: ...
        def __sub__(self, other: typing.SupportsInt) -> QPalette.ColorGroup: ...
        def __xor__(self, other: typing.SupportsInt) -> QPalette.ColorGroup: ...

    class ColorRole:
        AlternateBase: ClassVar[QPalette.ColorRole] = ...
        Background: ClassVar[QPalette.ColorRole] = ...
        Base: ClassVar[QPalette.ColorRole] = ...
        BrightText: ClassVar[QPalette.ColorRole] = ...
        Button: ClassVar[QPalette.ColorRole] = ...
        ButtonText: ClassVar[QPalette.ColorRole] = ...
        Dark: ClassVar[QPalette.ColorRole] = ...
        Foreground: ClassVar[QPalette.ColorRole] = ...
        Highlight: ClassVar[QPalette.ColorRole] = ...
        HighlightedText: ClassVar[QPalette.ColorRole] = ...
        Light: ClassVar[QPalette.ColorRole] = ...
        Link: ClassVar[QPalette.ColorRole] = ...
        LinkVisited: ClassVar[QPalette.ColorRole] = ...
        Mid: ClassVar[QPalette.ColorRole] = ...
        Midlight: ClassVar[QPalette.ColorRole] = ...
        NColorRoles: ClassVar[QPalette.ColorRole] = ...
        NoRole: ClassVar[QPalette.ColorRole] = ...
        PlaceholderText: ClassVar[QPalette.ColorRole] = ...
        Shadow: ClassVar[QPalette.ColorRole] = ...
        Text: ClassVar[QPalette.ColorRole] = ...
        ToolTipBase: ClassVar[QPalette.ColorRole] = ...
        ToolTipText: ClassVar[QPalette.ColorRole] = ...
        Window: ClassVar[QPalette.ColorRole] = ...
        WindowText: ClassVar[QPalette.ColorRole] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPalette.ColorRole: ...
        def __and__(self, other: typing.SupportsInt) -> QPalette.ColorRole: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPalette.ColorRole: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPalette.ColorRole: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPalette.ColorRole: ...
        def __rand__(self, other: typing.SupportsInt) -> QPalette.ColorRole: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPalette.ColorRole: ...
        def __ror__(self, other: typing.SupportsInt) -> QPalette.ColorRole: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPalette.ColorRole: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPalette.ColorRole: ...
        def __sub__(self, other: typing.SupportsInt) -> QPalette.ColorRole: ...
        def __xor__(self, other: typing.SupportsInt) -> QPalette.ColorRole: ...
    Active: ClassVar[QPalette.ColorGroup] = ...
    All: ClassVar[QPalette.ColorGroup] = ...
    AlternateBase: ClassVar[QPalette.ColorRole] = ...
    Background: ClassVar[QPalette.ColorRole] = ...
    Base: ClassVar[QPalette.ColorRole] = ...
    BrightText: ClassVar[QPalette.ColorRole] = ...
    Button: ClassVar[QPalette.ColorRole] = ...
    ButtonText: ClassVar[QPalette.ColorRole] = ...
    Current: ClassVar[QPalette.ColorGroup] = ...
    Dark: ClassVar[QPalette.ColorRole] = ...
    Disabled: ClassVar[QPalette.ColorGroup] = ...
    Foreground: ClassVar[QPalette.ColorRole] = ...
    Highlight: ClassVar[QPalette.ColorRole] = ...
    HighlightedText: ClassVar[QPalette.ColorRole] = ...
    Inactive: ClassVar[QPalette.ColorGroup] = ...
    Light: ClassVar[QPalette.ColorRole] = ...
    Link: ClassVar[QPalette.ColorRole] = ...
    LinkVisited: ClassVar[QPalette.ColorRole] = ...
    Mid: ClassVar[QPalette.ColorRole] = ...
    Midlight: ClassVar[QPalette.ColorRole] = ...
    NColorGroups: ClassVar[QPalette.ColorGroup] = ...
    NColorRoles: ClassVar[QPalette.ColorRole] = ...
    NoRole: ClassVar[QPalette.ColorRole] = ...
    Normal: ClassVar[QPalette.ColorGroup] = ...
    PlaceholderText: ClassVar[QPalette.ColorRole] = ...
    Shadow: ClassVar[QPalette.ColorRole] = ...
    Text: ClassVar[QPalette.ColorRole] = ...
    ToolTipBase: ClassVar[QPalette.ColorRole] = ...
    ToolTipText: ClassVar[QPalette.ColorRole] = ...
    Window: ClassVar[QPalette.ColorRole] = ...
    WindowText: ClassVar[QPalette.ColorRole] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, button: PySide2.QtCore.Qt.GlobalColor) -> None: ...
    @overload
    def __init__(self, button: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def __init__(self, button: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor], window: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def __init__(self, palette: QPalette) -> None: ...
    @overload
    def __init__(self, windowText: QBrush, button: QBrush, light: QBrush, dark: QBrush, mid: QBrush, text: QBrush, bright_text: QBrush, base: QBrush, window: QBrush) -> None: ...
    @overload
    def __init__(self, windowText: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor], window: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor], light: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor], dark: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor], mid: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor], text: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor], base: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def alternateBase(self) -> QBrush: ...
    def background(self) -> QBrush: ...
    def base(self) -> QBrush: ...
    def brightText(self) -> QBrush: ...
    @overload
    def brush(self, cg: QPalette.ColorGroup, cr: QPalette.ColorRole) -> QBrush: ...
    @overload
    def brush(self, cr: QPalette.ColorRole) -> QBrush: ...
    def button(self) -> QBrush: ...
    def buttonText(self) -> QBrush: ...
    def cacheKey(self) -> int: ...
    @overload
    def color(self, cg: QPalette.ColorGroup, cr: QPalette.ColorRole) -> QColor: ...
    @overload
    def color(self, cr: QPalette.ColorRole) -> QColor: ...
    def currentColorGroup(self) -> QPalette.ColorGroup: ...
    def dark(self) -> QBrush: ...
    def foreground(self) -> QBrush: ...
    def highlight(self) -> QBrush: ...
    def highlightedText(self) -> QBrush: ...
    def isBrushSet(self, cg: QPalette.ColorGroup, cr: QPalette.ColorRole) -> bool: ...
    def isCopyOf(self, p: QPalette) -> bool: ...
    def isEqual(self, cr1: QPalette.ColorGroup, cr2: QPalette.ColorGroup) -> bool: ...
    def light(self) -> QBrush: ...
    def link(self) -> QBrush: ...
    def linkVisited(self) -> QBrush: ...
    def mid(self) -> QBrush: ...
    def midlight(self) -> QBrush: ...
    def placeholderText(self) -> QBrush: ...
    @overload
    def resolve(self) -> int: ...
    @overload
    def resolve(self, arg__1: QPalette) -> QPalette: ...
    @overload
    def resolve(self, mask: int) -> None: ...
    @overload
    def setBrush(self, cg: QPalette.ColorGroup, cr: QPalette.ColorRole, brush: QBrush) -> None: ...
    @overload
    def setBrush(self, cr: QPalette.ColorRole, brush: QBrush) -> None: ...
    @overload
    def setColor(self, cg: QPalette.ColorGroup, cr: QPalette.ColorRole, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def setColor(self, cr: QPalette.ColorRole, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setColorGroup(self, cr: QPalette.ColorGroup, windowText: QBrush, button: QBrush, light: QBrush, dark: QBrush, mid: QBrush, text: QBrush, bright_text: QBrush, base: QBrush, window: QBrush) -> None: ...
    def setCurrentColorGroup(self, cg: QPalette.ColorGroup) -> None: ...
    def shadow(self) -> QBrush: ...
    def swap(self, other: QPalette) -> None: ...
    def text(self) -> QBrush: ...
    def toolTipBase(self) -> QBrush: ...
    def toolTipText(self) -> QBrush: ...
    def window(self) -> QBrush: ...
    def windowText(self) -> QBrush: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, ds: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, ds: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QPdfWriter(PySide2.QtCore.QObject, QPagedPaintDevice):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, device: PySide2.QtCore.QIODevice, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, filename: str, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def addFileAttachment(self, fileName: str, data: typing.Union[PySide2.QtCore.QByteArray,bytes], mimeType: str = ...) -> None: ...
    def creator(self) -> str: ...
    def documentXmpMetadata(self) -> PySide2.QtCore.QByteArray: ...
    def metric(self, id: QPaintDevice.PaintDeviceMetric) -> int: ...
    def newPage(self) -> bool: ...
    def paintEngine(self) -> QPaintEngine: ...
    def pdfVersion(self) -> QPagedPaintDevice.PdfVersion: ...
    def resolution(self) -> int: ...
    def setCreator(self, creator: str) -> None: ...
    def setDocumentXmpMetadata(self, xmpMetadata: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    def setMargins(self, m: QPagedPaintDevice.Margins) -> None: ...
    def setPageSize(self, size: QPagedPaintDevice.PageSize) -> None: ...
    def setPageSizeMM(self, size: PySide2.QtCore.QSizeF) -> None: ...
    def setPdfVersion(self, version: QPagedPaintDevice.PdfVersion) -> None: ...
    def setResolution(self, resolution: int) -> None: ...
    def setTitle(self, title: str) -> None: ...
    def title(self) -> str: ...

class QPen(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: PySide2.QtCore.Qt.PenStyle) -> None: ...
    @overload
    def __init__(self, brush: QBrush, width: float, s: PySide2.QtCore.Qt.PenStyle = ..., c: PySide2.QtCore.Qt.PenCapStyle = ..., j: PySide2.QtCore.Qt.PenJoinStyle = ...) -> None: ...
    @overload
    def __init__(self, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def __init__(self, pen: QPen) -> None: ...
    def brush(self) -> QBrush: ...
    def capStyle(self) -> PySide2.QtCore.Qt.PenCapStyle: ...
    def color(self) -> QColor: ...
    def dashOffset(self) -> float: ...
    def dashPattern(self) -> typing.List[float]: ...
    def isCosmetic(self) -> bool: ...
    def isSolid(self) -> bool: ...
    def joinStyle(self) -> PySide2.QtCore.Qt.PenJoinStyle: ...
    def miterLimit(self) -> float: ...
    def setBrush(self, brush: QBrush) -> None: ...
    def setCapStyle(self, pcs: PySide2.QtCore.Qt.PenCapStyle) -> None: ...
    def setColor(self, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setCosmetic(self, cosmetic: bool) -> None: ...
    def setDashOffset(self, doffset: float) -> None: ...
    def setDashPattern(self, pattern: typing.List[float]) -> None: ...
    def setJoinStyle(self, pcs: PySide2.QtCore.Qt.PenJoinStyle) -> None: ...
    def setMiterLimit(self, limit: float) -> None: ...
    def setStyle(self, arg__1: PySide2.QtCore.Qt.PenStyle) -> None: ...
    def setWidth(self, width: int) -> None: ...
    def setWidthF(self, width: float) -> None: ...
    def style(self) -> PySide2.QtCore.Qt.PenStyle: ...
    def swap(self, other: QPen) -> None: ...
    def width(self) -> int: ...
    def widthF(self) -> float: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QPicture(QPaintDevice):
    @overload
    def __init__(self, arg__1: QPicture) -> None: ...
    @overload
    def __init__(self, formatVersion: int = ...) -> None: ...
    def boundingRect(self) -> PySide2.QtCore.QRect: ...
    def data(self) -> bytes: ...
    def devType(self) -> int: ...
    @classmethod
    def inputFormatList(cls) -> typing.List[str]: ...
    @classmethod
    def inputFormats(cls) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def isNull(self) -> bool: ...
    @overload
    def load(self, dev: PySide2.QtCore.QIODevice, format: typing.Optional[str] = ...) -> bool: ...
    @overload
    def load(self, fileName: str, format: typing.Optional[str] = ...) -> bool: ...
    def metric(self, m: QPaintDevice.PaintDeviceMetric) -> int: ...
    @classmethod
    def outputFormatList(cls) -> typing.List[str]: ...
    @classmethod
    def outputFormats(cls) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def paintEngine(self) -> QPaintEngine: ...
    @classmethod
    def pictureFormat(cls, fileName: str) -> bytes: ...
    def play(self, p: QPainter) -> bool: ...
    @overload
    def save(self, dev: PySide2.QtCore.QIODevice, format: typing.Optional[str] = ...) -> bool: ...
    @overload
    def save(self, fileName: str, format: typing.Optional[str] = ...) -> bool: ...
    def setBoundingRect(self, r: PySide2.QtCore.QRect) -> None: ...
    def setData(self, data: bytes, size: int) -> None: ...
    def size(self) -> int: ...
    def swap(self, other: QPicture) -> None: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QPictureIO(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, fileName: str, format: bytes) -> None: ...
    @overload
    def __init__(self, ioDevice: PySide2.QtCore.QIODevice, format: bytes) -> None: ...
    def description(self) -> str: ...
    def fileName(self) -> str: ...
    def format(self) -> bytes: ...
    def gamma(self) -> float: ...
    @classmethod
    def inputFormats(cls) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def ioDevice(self) -> PySide2.QtCore.QIODevice: ...
    @classmethod
    def outputFormats(cls) -> typing.List[PySide2.QtCore.QByteArray]: ...
    def parameters(self) -> bytes: ...
    def picture(self) -> QPicture: ...
    @classmethod
    @overload
    def pictureFormat(cls, arg__1: PySide2.QtCore.QIODevice) -> PySide2.QtCore.QByteArray: ...
    @classmethod
    @overload
    def pictureFormat(cls, fileName: str) -> PySide2.QtCore.QByteArray: ...
    def quality(self) -> int: ...
    def read(self) -> bool: ...
    def setDescription(self, arg__1: str) -> None: ...
    def setFileName(self, arg__1: str) -> None: ...
    def setFormat(self, arg__1: bytes) -> None: ...
    def setGamma(self, arg__1: float) -> None: ...
    def setIODevice(self, arg__1: PySide2.QtCore.QIODevice) -> None: ...
    def setParameters(self, arg__1: bytes) -> None: ...
    def setPicture(self, arg__1: QPicture) -> None: ...
    def setQuality(self, arg__1: int) -> None: ...
    def setStatus(self, arg__1: int) -> None: ...
    def status(self) -> int: ...
    def write(self) -> bool: ...

class QPixelFormat(shiboken2.Object):
    class AlphaPosition:
        AtBeginning: ClassVar[QPixelFormat.AlphaPosition] = ...
        AtEnd: ClassVar[QPixelFormat.AlphaPosition] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPosition: ...
        def __and__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPosition: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPosition: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPosition: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPosition: ...
        def __rand__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPosition: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPosition: ...
        def __ror__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPosition: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPosition: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPosition: ...
        def __sub__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPosition: ...
        def __xor__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPosition: ...

    class AlphaPremultiplied:
        NotPremultiplied: ClassVar[QPixelFormat.AlphaPremultiplied] = ...
        Premultiplied: ClassVar[QPixelFormat.AlphaPremultiplied] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPremultiplied: ...
        def __and__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPremultiplied: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPremultiplied: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPremultiplied: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPremultiplied: ...
        def __rand__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPremultiplied: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPremultiplied: ...
        def __ror__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPremultiplied: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPremultiplied: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPremultiplied: ...
        def __sub__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPremultiplied: ...
        def __xor__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaPremultiplied: ...

    class AlphaUsage:
        IgnoresAlpha: ClassVar[QPixelFormat.AlphaUsage] = ...
        UsesAlpha: ClassVar[QPixelFormat.AlphaUsage] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaUsage: ...
        def __and__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaUsage: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaUsage: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaUsage: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaUsage: ...
        def __rand__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaUsage: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaUsage: ...
        def __ror__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaUsage: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaUsage: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaUsage: ...
        def __sub__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaUsage: ...
        def __xor__(self, other: typing.SupportsInt) -> QPixelFormat.AlphaUsage: ...

    class ByteOrder:
        BigEndian: ClassVar[QPixelFormat.ByteOrder] = ...
        CurrentSystemEndian: ClassVar[QPixelFormat.ByteOrder] = ...
        LittleEndian: ClassVar[QPixelFormat.ByteOrder] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPixelFormat.ByteOrder: ...
        def __and__(self, other: typing.SupportsInt) -> QPixelFormat.ByteOrder: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPixelFormat.ByteOrder: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPixelFormat.ByteOrder: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPixelFormat.ByteOrder: ...
        def __rand__(self, other: typing.SupportsInt) -> QPixelFormat.ByteOrder: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPixelFormat.ByteOrder: ...
        def __ror__(self, other: typing.SupportsInt) -> QPixelFormat.ByteOrder: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPixelFormat.ByteOrder: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPixelFormat.ByteOrder: ...
        def __sub__(self, other: typing.SupportsInt) -> QPixelFormat.ByteOrder: ...
        def __xor__(self, other: typing.SupportsInt) -> QPixelFormat.ByteOrder: ...

    class ColorModel:
        Alpha: ClassVar[QPixelFormat.ColorModel] = ...
        BGR: ClassVar[QPixelFormat.ColorModel] = ...
        CMYK: ClassVar[QPixelFormat.ColorModel] = ...
        Grayscale: ClassVar[QPixelFormat.ColorModel] = ...
        HSL: ClassVar[QPixelFormat.ColorModel] = ...
        HSV: ClassVar[QPixelFormat.ColorModel] = ...
        Indexed: ClassVar[QPixelFormat.ColorModel] = ...
        RGB: ClassVar[QPixelFormat.ColorModel] = ...
        YUV: ClassVar[QPixelFormat.ColorModel] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPixelFormat.ColorModel: ...
        def __and__(self, other: typing.SupportsInt) -> QPixelFormat.ColorModel: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPixelFormat.ColorModel: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPixelFormat.ColorModel: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPixelFormat.ColorModel: ...
        def __rand__(self, other: typing.SupportsInt) -> QPixelFormat.ColorModel: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPixelFormat.ColorModel: ...
        def __ror__(self, other: typing.SupportsInt) -> QPixelFormat.ColorModel: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPixelFormat.ColorModel: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPixelFormat.ColorModel: ...
        def __sub__(self, other: typing.SupportsInt) -> QPixelFormat.ColorModel: ...
        def __xor__(self, other: typing.SupportsInt) -> QPixelFormat.ColorModel: ...

    class TypeInterpretation:
        FloatingPoint: ClassVar[QPixelFormat.TypeInterpretation] = ...
        UnsignedByte: ClassVar[QPixelFormat.TypeInterpretation] = ...
        UnsignedInteger: ClassVar[QPixelFormat.TypeInterpretation] = ...
        UnsignedShort: ClassVar[QPixelFormat.TypeInterpretation] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPixelFormat.TypeInterpretation: ...
        def __and__(self, other: typing.SupportsInt) -> QPixelFormat.TypeInterpretation: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPixelFormat.TypeInterpretation: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPixelFormat.TypeInterpretation: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPixelFormat.TypeInterpretation: ...
        def __rand__(self, other: typing.SupportsInt) -> QPixelFormat.TypeInterpretation: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPixelFormat.TypeInterpretation: ...
        def __ror__(self, other: typing.SupportsInt) -> QPixelFormat.TypeInterpretation: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPixelFormat.TypeInterpretation: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPixelFormat.TypeInterpretation: ...
        def __sub__(self, other: typing.SupportsInt) -> QPixelFormat.TypeInterpretation: ...
        def __xor__(self, other: typing.SupportsInt) -> QPixelFormat.TypeInterpretation: ...

    class YUVLayout:
        IMC1: ClassVar[QPixelFormat.YUVLayout] = ...
        IMC2: ClassVar[QPixelFormat.YUVLayout] = ...
        IMC3: ClassVar[QPixelFormat.YUVLayout] = ...
        IMC4: ClassVar[QPixelFormat.YUVLayout] = ...
        NV12: ClassVar[QPixelFormat.YUVLayout] = ...
        NV21: ClassVar[QPixelFormat.YUVLayout] = ...
        UYVY: ClassVar[QPixelFormat.YUVLayout] = ...
        Y16: ClassVar[QPixelFormat.YUVLayout] = ...
        Y8: ClassVar[QPixelFormat.YUVLayout] = ...
        YUV411: ClassVar[QPixelFormat.YUVLayout] = ...
        YUV420P: ClassVar[QPixelFormat.YUVLayout] = ...
        YUV420SP: ClassVar[QPixelFormat.YUVLayout] = ...
        YUV422: ClassVar[QPixelFormat.YUVLayout] = ...
        YUV444: ClassVar[QPixelFormat.YUVLayout] = ...
        YUYV: ClassVar[QPixelFormat.YUVLayout] = ...
        YV12: ClassVar[QPixelFormat.YUVLayout] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QPixelFormat.YUVLayout: ...
        def __and__(self, other: typing.SupportsInt) -> QPixelFormat.YUVLayout: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QPixelFormat.YUVLayout: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QPixelFormat.YUVLayout: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QPixelFormat.YUVLayout: ...
        def __rand__(self, other: typing.SupportsInt) -> QPixelFormat.YUVLayout: ...
        def __rmul__(self, other: typing.SupportsInt) -> QPixelFormat.YUVLayout: ...
        def __ror__(self, other: typing.SupportsInt) -> QPixelFormat.YUVLayout: ...
        def __rsub__(self, other: typing.SupportsInt) -> QPixelFormat.YUVLayout: ...
        def __rxor__(self, other: typing.SupportsInt) -> QPixelFormat.YUVLayout: ...
        def __sub__(self, other: typing.SupportsInt) -> QPixelFormat.YUVLayout: ...
        def __xor__(self, other: typing.SupportsInt) -> QPixelFormat.YUVLayout: ...
    Alpha: ClassVar[QPixelFormat.ColorModel] = ...
    AtBeginning: ClassVar[QPixelFormat.AlphaPosition] = ...
    AtEnd: ClassVar[QPixelFormat.AlphaPosition] = ...
    BGR: ClassVar[QPixelFormat.ColorModel] = ...
    BigEndian: ClassVar[QPixelFormat.ByteOrder] = ...
    CMYK: ClassVar[QPixelFormat.ColorModel] = ...
    CurrentSystemEndian: ClassVar[QPixelFormat.ByteOrder] = ...
    FloatingPoint: ClassVar[QPixelFormat.TypeInterpretation] = ...
    Grayscale: ClassVar[QPixelFormat.ColorModel] = ...
    HSL: ClassVar[QPixelFormat.ColorModel] = ...
    HSV: ClassVar[QPixelFormat.ColorModel] = ...
    IMC1: ClassVar[QPixelFormat.YUVLayout] = ...
    IMC2: ClassVar[QPixelFormat.YUVLayout] = ...
    IMC3: ClassVar[QPixelFormat.YUVLayout] = ...
    IMC4: ClassVar[QPixelFormat.YUVLayout] = ...
    IgnoresAlpha: ClassVar[QPixelFormat.AlphaUsage] = ...
    Indexed: ClassVar[QPixelFormat.ColorModel] = ...
    LittleEndian: ClassVar[QPixelFormat.ByteOrder] = ...
    NV12: ClassVar[QPixelFormat.YUVLayout] = ...
    NV21: ClassVar[QPixelFormat.YUVLayout] = ...
    NotPremultiplied: ClassVar[QPixelFormat.AlphaPremultiplied] = ...
    Premultiplied: ClassVar[QPixelFormat.AlphaPremultiplied] = ...
    RGB: ClassVar[QPixelFormat.ColorModel] = ...
    UYVY: ClassVar[QPixelFormat.YUVLayout] = ...
    UnsignedByte: ClassVar[QPixelFormat.TypeInterpretation] = ...
    UnsignedInteger: ClassVar[QPixelFormat.TypeInterpretation] = ...
    UnsignedShort: ClassVar[QPixelFormat.TypeInterpretation] = ...
    UsesAlpha: ClassVar[QPixelFormat.AlphaUsage] = ...
    Y16: ClassVar[QPixelFormat.YUVLayout] = ...
    Y8: ClassVar[QPixelFormat.YUVLayout] = ...
    YUV: ClassVar[QPixelFormat.ColorModel] = ...
    YUV411: ClassVar[QPixelFormat.YUVLayout] = ...
    YUV420P: ClassVar[QPixelFormat.YUVLayout] = ...
    YUV420SP: ClassVar[QPixelFormat.YUVLayout] = ...
    YUV422: ClassVar[QPixelFormat.YUVLayout] = ...
    YUV444: ClassVar[QPixelFormat.YUVLayout] = ...
    YUYV: ClassVar[QPixelFormat.YUVLayout] = ...
    YV12: ClassVar[QPixelFormat.YUVLayout] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QPixelFormat: QPixelFormat) -> None: ...
    @overload
    def __init__(self, colorModel: QPixelFormat.ColorModel, firstSize: int, secondSize: int, thirdSize: int, fourthSize: int, fifthSize: int, alphaSize: int, alphaUsage: QPixelFormat.AlphaUsage, alphaPosition: QPixelFormat.AlphaPosition, premultiplied: QPixelFormat.AlphaPremultiplied, typeInterpretation: QPixelFormat.TypeInterpretation, byteOrder: QPixelFormat.ByteOrder = ..., subEnum: int = ...) -> None: ...
    def alphaPosition(self) -> QPixelFormat.AlphaPosition: ...
    def alphaSize(self) -> int: ...
    def alphaUsage(self) -> QPixelFormat.AlphaUsage: ...
    def bitsPerPixel(self) -> int: ...
    def blackSize(self) -> int: ...
    def blueSize(self) -> int: ...
    def brightnessSize(self) -> int: ...
    def byteOrder(self) -> QPixelFormat.ByteOrder: ...
    def channelCount(self) -> int: ...
    def colorModel(self) -> QPixelFormat.ColorModel: ...
    def cyanSize(self) -> int: ...
    def greenSize(self) -> int: ...
    def hueSize(self) -> int: ...
    def lightnessSize(self) -> int: ...
    def magentaSize(self) -> int: ...
    def premultiplied(self) -> QPixelFormat.AlphaPremultiplied: ...
    def redSize(self) -> int: ...
    def saturationSize(self) -> int: ...
    def subEnum(self) -> int: ...
    def typeInterpretation(self) -> QPixelFormat.TypeInterpretation: ...
    def yellowSize(self) -> int: ...
    def yuvLayout(self) -> QPixelFormat.YUVLayout: ...
    def __copy__(self) -> None: ...

class QPixmap(QPaintDevice):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: PySide2.QtCore.QSize) -> None: ...
    @overload
    def __init__(self, arg__1: QPixmap) -> None: ...
    @overload
    def __init__(self, fileName: str, format: typing.Optional[str] = ..., flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> None: ...
    @overload
    def __init__(self, image: QImage) -> None: ...
    @overload
    def __init__(self, w: int, h: int) -> None: ...
    @overload
    def __init__(self, xpm: typing.Sequence[str]) -> None: ...
    def cacheKey(self) -> int: ...
    def convertFromImage(self, img: QImage, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> bool: ...
    @overload
    def copy(self, rect: PySide2.QtCore.QRect = ...) -> QPixmap: ...
    @overload
    def copy(self, x: int, y: int, width: int, height: int) -> QPixmap: ...
    def createHeuristicMask(self, clipTight: bool = ...) -> QBitmap: ...
    def createMaskFromColor(self, maskColor: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor], mode: PySide2.QtCore.Qt.MaskMode = ...) -> QBitmap: ...
    @classmethod
    def defaultDepth(cls) -> int: ...
    def depth(self) -> int: ...
    def devType(self) -> int: ...
    def devicePixelRatio(self) -> float: ...
    @overload
    def fill(self, device: QPaintDevice, ofs: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def fill(self, device: QPaintDevice, xofs: int, yofs: int) -> None: ...
    @overload
    def fill(self, fillColor: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor] = ...) -> None: ...
    @classmethod
    def fromImage(cls, image: QImage, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> QPixmap: ...
    @classmethod
    def fromImageInPlace(cls, image: QImage, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> QPixmap: ...
    @classmethod
    def fromImageReader(cls, imageReader: QImageReader, flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> QPixmap: ...
    @classmethod
    @overload
    def grabWidget(cls, widget: PySide2.QtCore.QObject, rect: PySide2.QtCore.QRect) -> QPixmap: ...
    @classmethod
    @overload
    def grabWidget(cls, widget: PySide2.QtCore.QObject, x: int = ..., y: int = ..., w: int = ..., h: int = ...) -> QPixmap: ...
    @classmethod
    def grabWindow(cls, arg__1: int, x: int = ..., y: int = ..., w: int = ..., h: int = ...) -> QPixmap: ...
    def hasAlpha(self) -> bool: ...
    def hasAlphaChannel(self) -> bool: ...
    def height(self) -> int: ...
    def isNull(self) -> bool: ...
    def isQBitmap(self) -> bool: ...
    def load(self, fileName: str, format: typing.Optional[str] = ..., flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> bool: ...
    @overload
    def loadFromData(self, buf: bytes, len: int, format: typing.Optional[str] = ..., flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> bool: ...
    @overload
    def loadFromData(self, data: typing.Union[PySide2.QtCore.QByteArray,bytes], format: typing.Optional[str] = ..., flags: typing.Union[PySide2.QtCore.Qt.ImageConversionFlags,PySide2.QtCore.Qt.ImageConversionFlag] = ...) -> bool: ...
    def mask(self) -> QBitmap: ...
    def metric(self, arg__1: QPaintDevice.PaintDeviceMetric) -> int: ...
    def paintEngine(self) -> QPaintEngine: ...
    def rect(self) -> PySide2.QtCore.QRect: ...
    @overload
    def save(self, device: PySide2.QtCore.QIODevice, format: typing.Optional[str] = ..., quality: int = ...) -> bool: ...
    @overload
    def save(self, fileName: str, format: typing.Optional[str] = ..., quality: int = ...) -> bool: ...
    @overload
    def scaled(self, s: PySide2.QtCore.QSize, aspectMode: PySide2.QtCore.Qt.AspectRatioMode = ..., mode: PySide2.QtCore.Qt.TransformationMode = ...) -> QPixmap: ...
    @overload
    def scaled(self, w: int, h: int, aspectMode: PySide2.QtCore.Qt.AspectRatioMode = ..., mode: PySide2.QtCore.Qt.TransformationMode = ...) -> QPixmap: ...
    def scaledToHeight(self, h: int, mode: PySide2.QtCore.Qt.TransformationMode = ...) -> QPixmap: ...
    def scaledToWidth(self, w: int, mode: PySide2.QtCore.Qt.TransformationMode = ...) -> QPixmap: ...
    @overload
    def scroll(self, dx: int, dy: int, rect: PySide2.QtCore.QRect, exposed: typing.Union[QRegion,None] = ...) -> None: ...
    @overload
    def scroll(self, dx: int, dy: int, x: int, y: int, width: int, height: int, exposed: typing.Union[QRegion,None] = ...) -> None: ...
    def setDevicePixelRatio(self, scaleFactor: float) -> None: ...
    def setMask(self, arg__1: QBitmap) -> None: ...
    def size(self) -> PySide2.QtCore.QSize: ...
    def swap(self, other: QPixmap) -> None: ...
    def toImage(self) -> QImage: ...
    @overload
    def transformed(self, arg__1: QMatrix, mode: PySide2.QtCore.Qt.TransformationMode = ...) -> QPixmap: ...
    @overload
    def transformed(self, arg__1: QTransform, mode: PySide2.QtCore.Qt.TransformationMode = ...) -> QPixmap: ...
    @classmethod
    @overload
    def trueMatrix(cls, m: QMatrix, w: int, h: int) -> QMatrix: ...
    @classmethod
    @overload
    def trueMatrix(cls, m: QTransform, w: int, h: int) -> QTransform: ...
    def width(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QPixmapCache(shiboken2.Object):
    class Key(shiboken2.Object):
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, other: QPixmapCache.Key) -> None: ...
        def isValid(self) -> bool: ...
        def swap(self, other: QPixmapCache.Key) -> None: ...
        def __copy__(self) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
    def __init__(self) -> None: ...
    @classmethod
    def cacheLimit(cls) -> int: ...
    @classmethod
    def clear(cls) -> None: ...
    @classmethod
    @overload
    def find(cls, key: QPixmapCache.Key, pixmap: QPixmap) -> bool: ...
    @classmethod
    @overload
    def find(cls, key: str) -> QPixmap: ...
    @classmethod
    @overload
    def find(cls, key: str, pixmap: QPixmap) -> bool: ...
    @classmethod
    @overload
    def find(cls, self, arg__1: QPixmapCache.Key) -> None: ...
    @classmethod
    @overload
    def insert(cls, key: str, pixmap: QPixmap) -> bool: ...
    @classmethod
    @overload
    def insert(cls, pixmap: QPixmap) -> QPixmapCache.Key: ...
    @classmethod
    @overload
    def remove(cls, key: QPixmapCache.Key) -> None: ...
    @classmethod
    @overload
    def remove(cls, key: str) -> None: ...
    @classmethod
    def replace(cls, key: QPixmapCache.Key, pixmap: QPixmap) -> bool: ...
    @classmethod
    def setCacheLimit(cls, arg__1: int) -> None: ...

class QPointingDeviceUniqueId(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QPointingDeviceUniqueId: QPointingDeviceUniqueId) -> None: ...
    @classmethod
    def fromNumericId(cls, id: int) -> QPointingDeviceUniqueId: ...
    def isValid(self) -> bool: ...
    def numericId(self) -> int: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QPolygon(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QPolygon) -> None: ...
    @overload
    def __init__(self, r: PySide2.QtCore.QRect, closed: bool = ...) -> None: ...
    @overload
    def __init__(self, size: int) -> None: ...
    @overload
    def __init__(self, v: typing.List[PySide2.QtCore.QPoint]) -> None: ...
    @overload
    def append(self, l: typing.List[PySide2.QtCore.QPoint]) -> None: ...
    @overload
    def append(self, t: PySide2.QtCore.QPoint) -> None: ...
    def at(self, i: int) -> PySide2.QtCore.QPoint: ...
    def back(self) -> PySide2.QtCore.QPoint: ...
    def boundingRect(self) -> PySide2.QtCore.QRect: ...
    def capacity(self) -> int: ...
    def clear(self) -> None: ...
    def constData(self) -> PySide2.QtCore.QPoint: ...
    def constFirst(self) -> PySide2.QtCore.QPoint: ...
    def constLast(self) -> PySide2.QtCore.QPoint: ...
    def contains(self, t: PySide2.QtCore.QPoint) -> bool: ...
    def containsPoint(self, pt: PySide2.QtCore.QPoint, fillRule: PySide2.QtCore.Qt.FillRule) -> bool: ...
    @overload
    def count(self) -> int: ...
    @overload
    def count(self, t: PySide2.QtCore.QPoint) -> int: ...
    def data(self) -> PySide2.QtCore.QPoint: ...
    def empty(self) -> bool: ...
    def endsWith(self, t: PySide2.QtCore.QPoint) -> bool: ...
    def fill(self, t: PySide2.QtCore.QPoint, size: int = ...) -> typing.List[PySide2.QtCore.QPoint]: ...
    def first(self) -> PySide2.QtCore.QPoint: ...
    @classmethod
    def fromList(cls, list: typing.Sequence[PySide2.QtCore.QPoint]) -> typing.List[PySide2.QtCore.QPoint]: ...
    def front(self) -> PySide2.QtCore.QPoint: ...
    def indexOf(self, t: PySide2.QtCore.QPoint, from_: int = ...) -> int: ...
    @overload
    def insert(self, i: int, n: int, t: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def insert(self, i: int, t: PySide2.QtCore.QPoint) -> None: ...
    def intersected(self, r: QPolygon) -> QPolygon: ...
    def intersects(self, r: QPolygon) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isSharedWith(self, other: typing.List[PySide2.QtCore.QPoint]) -> bool: ...
    def last(self) -> PySide2.QtCore.QPoint: ...
    def lastIndexOf(self, t: PySide2.QtCore.QPoint, from_: int = ...) -> int: ...
    def length(self) -> int: ...
    def mid(self, pos: int, len: int = ...) -> typing.List[PySide2.QtCore.QPoint]: ...
    def move(self, from_: int, to: int) -> None: ...
    def pop_back(self) -> None: ...
    def pop_front(self) -> None: ...
    def prepend(self, t: PySide2.QtCore.QPoint) -> None: ...
    def push_back(self, t: PySide2.QtCore.QPoint) -> None: ...
    def push_front(self, t: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def remove(self, i: int) -> None: ...
    @overload
    def remove(self, i: int, n: int) -> None: ...
    def removeAll(self, t: PySide2.QtCore.QPoint) -> int: ...
    def removeAt(self, i: int) -> None: ...
    def removeFirst(self) -> None: ...
    def removeLast(self) -> None: ...
    def removeOne(self, t: PySide2.QtCore.QPoint) -> bool: ...
    def replace(self, i: int, t: PySide2.QtCore.QPoint) -> None: ...
    def reserve(self, size: int) -> None: ...
    def resize(self, size: int) -> None: ...
    def setSharable(self, sharable: bool) -> None: ...
    def shrink_to_fit(self) -> None: ...
    def size(self) -> int: ...
    def squeeze(self) -> None: ...
    def startsWith(self, t: PySide2.QtCore.QPoint) -> bool: ...
    def subtracted(self, r: QPolygon) -> QPolygon: ...
    def swap(self, other: QPolygon) -> None: ...
    def swapItemsAt(self, i: int, j: int) -> None: ...
    def takeAt(self, i: int) -> PySide2.QtCore.QPoint: ...
    def takeFirst(self) -> PySide2.QtCore.QPoint: ...
    def takeLast(self) -> PySide2.QtCore.QPoint: ...
    def toList(self) -> typing.List[PySide2.QtCore.QPoint]: ...
    @overload
    def translate(self, dx: int, dy: int) -> None: ...
    @overload
    def translate(self, offset: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def translated(self, dx: int, dy: int) -> QPolygon: ...
    @overload
    def translated(self, offset: PySide2.QtCore.QPoint) -> QPolygon: ...
    def united(self, r: QPolygon) -> QPolygon: ...
    @overload
    def value(self, i: int) -> PySide2.QtCore.QPoint: ...
    @overload
    def value(self, i: int, defaultValue: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    def __add__(self, l: typing.List[PySide2.QtCore.QPoint]) -> typing.List[PySide2.QtCore.QPoint]: ...
    def __copy__(self) -> None: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, t: PySide2.QtCore.QPoint) -> typing.List[PySide2.QtCore.QPoint]: ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    @overload
    def __lshift__(self, l: typing.List[PySide2.QtCore.QPoint]) -> typing.List[PySide2.QtCore.QPoint]: ...
    @overload
    def __lshift__(self, stream: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    @overload
    def __lshift__(self, t: PySide2.QtCore.QPoint) -> typing.List[PySide2.QtCore.QPoint]: ...
    def __lt__(self, other: object) -> bool: ...
    @overload
    def __mul__(self, m: QMatrix) -> QPolygon: ...
    @overload
    def __mul__(self, m: QTransform) -> QPolygon: ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, stream: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __setitem__(self, index, object) -> None: ...

class QPolygonF(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, a: QPolygon) -> None: ...
    @overload
    def __init__(self, a: QPolygonF) -> None: ...
    @overload
    def __init__(self, r: PySide2.QtCore.QRectF) -> None: ...
    @overload
    def __init__(self, size: int) -> None: ...
    @overload
    def __init__(self, v: typing.List[PySide2.QtCore.QPointF]) -> None: ...
    @overload
    def append(self, l: typing.List[PySide2.QtCore.QPointF]) -> None: ...
    @overload
    def append(self, t: PySide2.QtCore.QPointF) -> None: ...
    def at(self, i: int) -> PySide2.QtCore.QPointF: ...
    def back(self) -> PySide2.QtCore.QPointF: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def capacity(self) -> int: ...
    def clear(self) -> None: ...
    def constData(self) -> PySide2.QtCore.QPointF: ...
    def constFirst(self) -> PySide2.QtCore.QPointF: ...
    def constLast(self) -> PySide2.QtCore.QPointF: ...
    def contains(self, t: PySide2.QtCore.QPointF) -> bool: ...
    def containsPoint(self, pt: PySide2.QtCore.QPointF, fillRule: PySide2.QtCore.Qt.FillRule) -> bool: ...
    @overload
    def count(self) -> int: ...
    @overload
    def count(self, t: PySide2.QtCore.QPointF) -> int: ...
    def data(self) -> PySide2.QtCore.QPointF: ...
    def empty(self) -> bool: ...
    def endsWith(self, t: PySide2.QtCore.QPointF) -> bool: ...
    def fill(self, t: PySide2.QtCore.QPointF, size: int = ...) -> typing.List[PySide2.QtCore.QPointF]: ...
    def first(self) -> PySide2.QtCore.QPointF: ...
    @classmethod
    def fromList(cls, list: typing.Sequence[PySide2.QtCore.QPointF]) -> typing.List[PySide2.QtCore.QPointF]: ...
    def front(self) -> PySide2.QtCore.QPointF: ...
    def indexOf(self, t: PySide2.QtCore.QPointF, from_: int = ...) -> int: ...
    @overload
    def insert(self, i: int, n: int, t: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def insert(self, i: int, t: PySide2.QtCore.QPointF) -> None: ...
    def intersected(self, r: QPolygonF) -> QPolygonF: ...
    def intersects(self, r: QPolygonF) -> bool: ...
    def isClosed(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isSharedWith(self, other: typing.List[PySide2.QtCore.QPointF]) -> bool: ...
    def last(self) -> PySide2.QtCore.QPointF: ...
    def lastIndexOf(self, t: PySide2.QtCore.QPointF, from_: int = ...) -> int: ...
    def length(self) -> int: ...
    def mid(self, pos: int, len: int = ...) -> typing.List[PySide2.QtCore.QPointF]: ...
    def move(self, from_: int, to: int) -> None: ...
    def pop_back(self) -> None: ...
    def pop_front(self) -> None: ...
    def prepend(self, t: PySide2.QtCore.QPointF) -> None: ...
    def push_back(self, t: PySide2.QtCore.QPointF) -> None: ...
    def push_front(self, t: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def remove(self, i: int) -> None: ...
    @overload
    def remove(self, i: int, n: int) -> None: ...
    def removeAll(self, t: PySide2.QtCore.QPointF) -> int: ...
    def removeAt(self, i: int) -> None: ...
    def removeFirst(self) -> None: ...
    def removeLast(self) -> None: ...
    def removeOne(self, t: PySide2.QtCore.QPointF) -> bool: ...
    def replace(self, i: int, t: PySide2.QtCore.QPointF) -> None: ...
    def reserve(self, size: int) -> None: ...
    def resize(self, size: int) -> None: ...
    def setSharable(self, sharable: bool) -> None: ...
    def shrink_to_fit(self) -> None: ...
    def size(self) -> int: ...
    def squeeze(self) -> None: ...
    def startsWith(self, t: PySide2.QtCore.QPointF) -> bool: ...
    def subtracted(self, r: QPolygonF) -> QPolygonF: ...
    def swap(self, other: QPolygonF) -> None: ...
    def swapItemsAt(self, i: int, j: int) -> None: ...
    def takeAt(self, i: int) -> PySide2.QtCore.QPointF: ...
    def takeFirst(self) -> PySide2.QtCore.QPointF: ...
    def takeLast(self) -> PySide2.QtCore.QPointF: ...
    def toList(self) -> typing.List[PySide2.QtCore.QPointF]: ...
    def toPolygon(self) -> QPolygon: ...
    @overload
    def translate(self, dx: float, dy: float) -> None: ...
    @overload
    def translate(self, offset: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def translated(self, dx: float, dy: float) -> QPolygonF: ...
    @overload
    def translated(self, offset: PySide2.QtCore.QPointF) -> QPolygonF: ...
    def united(self, r: QPolygonF) -> QPolygonF: ...
    @overload
    def value(self, i: int) -> PySide2.QtCore.QPointF: ...
    @overload
    def value(self, i: int, defaultValue: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    def __add__(self, l: typing.List[PySide2.QtCore.QPointF]) -> typing.List[PySide2.QtCore.QPointF]: ...
    def __copy__(self) -> None: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, t: PySide2.QtCore.QPointF) -> typing.List[PySide2.QtCore.QPointF]: ...
    def __le__(self, other: object) -> bool: ...
    def __len__(self) -> int: ...
    def __lshift__(self, stream: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    @overload
    def __mul__(self, m: QMatrix) -> QPolygonF: ...
    @overload
    def __mul__(self, m: QTransform) -> QPolygonF: ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, stream: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __setitem__(self, index, object) -> None: ...

class QPyTextObject(PySide2.QtCore.QObject, QTextObjectInterface):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def drawObject(self, painter: QPainter, rect: PySide2.QtCore.QRectF, doc: QTextDocument, posInDocument: int, format: QTextFormat) -> None: ...
    def intrinsicSize(self, doc: QTextDocument, posInDocument: int, format: QTextFormat) -> PySide2.QtCore.QSizeF: ...

class QQuaternion(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, scalar: float, vector: QVector3D) -> None: ...
    @overload
    def __init__(self, scalar: float, xpos: float, ypos: float, zpos: float) -> None: ...
    @overload
    def __init__(self, vector: QVector4D) -> None: ...
    def conjugate(self) -> QQuaternion: ...
    def conjugated(self) -> QQuaternion: ...
    @classmethod
    def dotProduct(cls, q1: QQuaternion, q2: QQuaternion) -> float: ...
    @classmethod
    def fromAxes(cls, xAxis: QVector3D, yAxis: QVector3D, zAxis: QVector3D) -> QQuaternion: ...
    @classmethod
    @overload
    def fromAxisAndAngle(cls, axis: QVector3D, angle: float) -> QQuaternion: ...
    @classmethod
    @overload
    def fromAxisAndAngle(cls, x: float, y: float, z: float, angle: float) -> QQuaternion: ...
    @classmethod
    def fromDirection(cls, direction: QVector3D, up: QVector3D) -> QQuaternion: ...
    @classmethod
    @overload
    def fromEulerAngles(cls, eulerAngles: QVector3D) -> QQuaternion: ...
    @classmethod
    @overload
    def fromEulerAngles(cls, pitch: float, yaw: float, roll: float) -> QQuaternion: ...
    @classmethod
    def fromRotationMatrix(cls, rot3x3: QMatrix3x3) -> QQuaternion: ...
    def getAxes(self, xAxis: QVector3D, yAxis: QVector3D, zAxis: QVector3D) -> None: ...
    def inverted(self) -> QQuaternion: ...
    def isIdentity(self) -> bool: ...
    def isNull(self) -> bool: ...
    def length(self) -> float: ...
    def lengthSquared(self) -> float: ...
    @classmethod
    def nlerp(cls, q1: QQuaternion, q2: QQuaternion, t: float) -> QQuaternion: ...
    def normalize(self) -> None: ...
    def normalized(self) -> QQuaternion: ...
    def rotatedVector(self, vector: QVector3D) -> QVector3D: ...
    @classmethod
    def rotationTo(cls, from_: QVector3D, to: QVector3D) -> QQuaternion: ...
    def scalar(self) -> float: ...
    def setScalar(self, scalar: float) -> None: ...
    @overload
    def setVector(self, vector: QVector3D) -> None: ...
    @overload
    def setVector(self, x: float, y: float, z: float) -> None: ...
    def setX(self, x: float) -> None: ...
    def setY(self, y: float) -> None: ...
    def setZ(self, z: float) -> None: ...
    @classmethod
    def slerp(cls, q1: QQuaternion, q2: QQuaternion, t: float) -> QQuaternion: ...
    def toEulerAngles(self) -> QVector3D: ...
    def toRotationMatrix(self) -> QMatrix3x3: ...
    def toVector4D(self) -> QVector4D: ...
    def vector(self) -> QVector3D: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def z(self) -> float: ...
    def __add__(self, q2: QQuaternion) -> QQuaternion: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, quaternion: QQuaternion) -> QQuaternion: ...
    @overload
    def __imul__(self, factor: float) -> QQuaternion: ...
    @overload
    def __imul__(self, quaternion: QQuaternion) -> QQuaternion: ...
    def __isub__(self, quaternion: QQuaternion) -> QQuaternion: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    @overload
    def __mul__(self, factor: float) -> QQuaternion: ...
    @overload
    def __mul__(self, q2: QQuaternion) -> QQuaternion: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> QQuaternion: ...
    def __radd__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sub__(self, q2: QQuaternion) -> QQuaternion: ...
    def __truediv__(self, other) -> Any: ...

class QRadialGradient(QGradient):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QRadialGradient: QRadialGradient) -> None: ...
    @overload
    def __init__(self, center: PySide2.QtCore.QPointF, centerRadius: float, focalPoint: PySide2.QtCore.QPointF, focalRadius: float) -> None: ...
    @overload
    def __init__(self, center: PySide2.QtCore.QPointF, radius: float) -> None: ...
    @overload
    def __init__(self, center: PySide2.QtCore.QPointF, radius: float, focalPoint: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def __init__(self, cx: float, cy: float, centerRadius: float, fx: float, fy: float, focalRadius: float) -> None: ...
    @overload
    def __init__(self, cx: float, cy: float, radius: float) -> None: ...
    @overload
    def __init__(self, cx: float, cy: float, radius: float, fx: float, fy: float) -> None: ...
    def center(self) -> PySide2.QtCore.QPointF: ...
    def centerRadius(self) -> float: ...
    def focalPoint(self) -> PySide2.QtCore.QPointF: ...
    def focalRadius(self) -> float: ...
    def radius(self) -> float: ...
    @overload
    def setCenter(self, center: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def setCenter(self, x: float, y: float) -> None: ...
    def setCenterRadius(self, radius: float) -> None: ...
    @overload
    def setFocalPoint(self, focalPoint: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def setFocalPoint(self, x: float, y: float) -> None: ...
    def setFocalRadius(self, radius: float) -> None: ...
    def setRadius(self, radius: float) -> None: ...
    def __copy__(self) -> None: ...

class QRasterWindow(QPaintDeviceWindow):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[QWindow,None] = ..., active: bool = ..., activeChanged: typing.Callable = ..., contentOrientation: PySide2.QtCore.Qt.ScreenOrientation = ..., contentOrientationChanged: typing.Callable = ..., destroyed: typing.Callable = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., focusObjectChanged: typing.Callable = ..., height: int = ..., heightChanged: typing.Callable = ..., maximumHeight: int = ..., maximumHeightChanged: typing.Callable = ..., maximumWidth: int = ..., maximumWidthChanged: typing.Callable = ..., minimumHeight: int = ..., minimumHeightChanged: typing.Callable = ..., minimumWidth: int = ..., minimumWidthChanged: typing.Callable = ..., modality: PySide2.QtCore.Qt.WindowModality = ..., modalityChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., screenChanged: typing.Callable = ..., title: str = ..., transientParent: typing.Any = ..., transientParentChanged: typing.Callable = ..., visibility: QRasterWindow.Visibility = ..., visibilityChanged: typing.Callable = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., width: int = ..., widthChanged: typing.Callable = ..., windowStateChanged: typing.Callable = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., xChanged: typing.Callable = ..., y: int = ..., yChanged: typing.Callable = ...) -> None: ...
    def metric(self, metric: QPaintDevice.PaintDeviceMetric) -> int: ...
    def redirected(self, arg__1: PySide2.QtCore.QPoint) -> QPaintDevice: ...

class QRawFont(shiboken2.Object):
    class AntialiasingType:
        PixelAntialiasing: ClassVar[QRawFont.AntialiasingType] = ...
        SubPixelAntialiasing: ClassVar[QRawFont.AntialiasingType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QRawFont.AntialiasingType: ...
        def __and__(self, other: typing.SupportsInt) -> QRawFont.AntialiasingType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QRawFont.AntialiasingType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QRawFont.AntialiasingType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QRawFont.AntialiasingType: ...
        def __rand__(self, other: typing.SupportsInt) -> QRawFont.AntialiasingType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QRawFont.AntialiasingType: ...
        def __ror__(self, other: typing.SupportsInt) -> QRawFont.AntialiasingType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QRawFont.AntialiasingType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QRawFont.AntialiasingType: ...
        def __sub__(self, other: typing.SupportsInt) -> QRawFont.AntialiasingType: ...
        def __xor__(self, other: typing.SupportsInt) -> QRawFont.AntialiasingType: ...

    class LayoutFlag:
        KernedAdvances: ClassVar[QRawFont.LayoutFlag] = ...
        SeparateAdvances: ClassVar[QRawFont.LayoutFlag] = ...
        UseDesignMetrics: ClassVar[QRawFont.LayoutFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QRawFont.LayoutFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QRawFont.LayoutFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QRawFont.LayoutFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QRawFont.LayoutFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QRawFont.LayoutFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QRawFont.LayoutFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QRawFont.LayoutFlags: ...

    class LayoutFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QRawFont.LayoutFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QRawFont.LayoutFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QRawFont.LayoutFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QRawFont.LayoutFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QRawFont.LayoutFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QRawFont.LayoutFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QRawFont.LayoutFlags: ...
    KernedAdvances: ClassVar[QRawFont.LayoutFlag] = ...
    PixelAntialiasing: ClassVar[QRawFont.AntialiasingType] = ...
    SeparateAdvances: ClassVar[QRawFont.LayoutFlag] = ...
    SubPixelAntialiasing: ClassVar[QRawFont.AntialiasingType] = ...
    UseDesignMetrics: ClassVar[QRawFont.LayoutFlag] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, fileName: str, pixelSize: float, hintingPreference: QFont.HintingPreference = ...) -> None: ...
    @overload
    def __init__(self, fontData: typing.Union[PySide2.QtCore.QByteArray,bytes], pixelSize: float, hintingPreference: QFont.HintingPreference = ...) -> None: ...
    @overload
    def __init__(self, other: QRawFont) -> None: ...
    @overload
    def advancesForGlyphIndexes(self, glyphIndexes: typing.List[int]) -> typing.List[PySide2.QtCore.QPointF]: ...
    @overload
    def advancesForGlyphIndexes(self, glyphIndexes: typing.List[int], layoutFlags: typing.Union[QRawFont.LayoutFlags,QRawFont.LayoutFlag]) -> typing.List[PySide2.QtCore.QPointF]: ...
    def alphaMapForGlyph(self, glyphIndex: int, antialiasingType: QRawFont.AntialiasingType = ..., transform: QTransform = ...) -> QImage: ...
    def ascent(self) -> float: ...
    def averageCharWidth(self) -> float: ...
    def boundingRect(self, glyphIndex: int) -> PySide2.QtCore.QRectF: ...
    def capHeight(self) -> float: ...
    def descent(self) -> float: ...
    def familyName(self) -> str: ...
    def fontTable(self, tagName: bytes) -> PySide2.QtCore.QByteArray: ...
    @classmethod
    def fromFont(cls, font: QFont, writingSystem: QFontDatabase.WritingSystem = ...) -> QRawFont: ...
    def glyphIndexesForString(self, text: str) -> typing.List[int]: ...
    def hintingPreference(self) -> QFont.HintingPreference: ...
    def isValid(self) -> bool: ...
    def leading(self) -> float: ...
    def lineThickness(self) -> float: ...
    def loadFromData(self, fontData: typing.Union[PySide2.QtCore.QByteArray,bytes], pixelSize: float, hintingPreference: QFont.HintingPreference) -> None: ...
    def loadFromFile(self, fileName: str, pixelSize: float, hintingPreference: QFont.HintingPreference) -> None: ...
    def maxCharWidth(self) -> float: ...
    def pathForGlyph(self, glyphIndex: int) -> QPainterPath: ...
    def pixelSize(self) -> float: ...
    def setPixelSize(self, pixelSize: float) -> None: ...
    def style(self) -> QFont.Style: ...
    def styleName(self) -> str: ...
    def supportedWritingSystems(self) -> typing.List[QFontDatabase.WritingSystem]: ...
    @overload
    def supportsCharacter(self, character: str) -> bool: ...
    @overload
    def supportsCharacter(self, ucs4: int) -> bool: ...
    def swap(self, other: QRawFont) -> None: ...
    def underlinePosition(self) -> float: ...
    def unitsPerEm(self) -> float: ...
    def weight(self) -> int: ...
    def xHeight(self) -> float: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QRegExpValidator(QValidator):
    regExpChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., changed: typing.Callable = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., regExp: PySide2.QtCore.QRegExp = ..., regExpChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, rx: PySide2.QtCore.QRegExp, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., changed: typing.Callable = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., regExp: PySide2.QtCore.QRegExp = ..., regExpChanged: typing.Callable = ...) -> None: ...
    def regExp(self) -> PySide2.QtCore.QRegExp: ...
    def setRegExp(self, rx: PySide2.QtCore.QRegExp) -> None: ...
    def validate(self, input: str, pos: int) -> QValidator.State: ...

class QRegion(shiboken2.Object):
    class RegionType:
        Ellipse: ClassVar[QRegion.RegionType] = ...
        Rectangle: ClassVar[QRegion.RegionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QRegion.RegionType: ...
        def __and__(self, other: typing.SupportsInt) -> QRegion.RegionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QRegion.RegionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QRegion.RegionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QRegion.RegionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QRegion.RegionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QRegion.RegionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QRegion.RegionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QRegion.RegionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QRegion.RegionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QRegion.RegionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QRegion.RegionType: ...
    Ellipse: ClassVar[QRegion.RegionType] = ...
    Rectangle: ClassVar[QRegion.RegionType] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, bitmap: QBitmap) -> None: ...
    @overload
    def __init__(self, pa: QPolygon, fillRule: PySide2.QtCore.Qt.FillRule = ...) -> None: ...
    @overload
    def __init__(self, r: PySide2.QtCore.QRect, t: QRegion.RegionType = ...) -> None: ...
    @overload
    def __init__(self, region: QRegion) -> None: ...
    @overload
    def __init__(self, x: int, y: int, w: int, h: int, t: QRegion.RegionType = ...) -> None: ...
    def begin(self) -> PySide2.QtCore.QRect: ...
    def boundingRect(self) -> PySide2.QtCore.QRect: ...
    def cbegin(self) -> PySide2.QtCore.QRect: ...
    def cend(self) -> PySide2.QtCore.QRect: ...
    @overload
    def contains(self, p: PySide2.QtCore.QPoint) -> bool: ...
    @overload
    def contains(self, r: PySide2.QtCore.QRect) -> bool: ...
    def end(self) -> PySide2.QtCore.QRect: ...
    @overload
    def intersected(self, r: PySide2.QtCore.QRect) -> QRegion: ...
    @overload
    def intersected(self, r: QRegion) -> QRegion: ...
    @overload
    def intersects(self, r: PySide2.QtCore.QRect) -> bool: ...
    @overload
    def intersects(self, r: QRegion) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isNull(self) -> bool: ...
    def rectCount(self) -> int: ...
    def rects(self) -> typing.List[PySide2.QtCore.QRect]: ...
    def setRects(self, rect: PySide2.QtCore.QRect, num: int) -> None: ...
    def subtracted(self, r: QRegion) -> QRegion: ...
    def swap(self, other: QRegion) -> None: ...
    @overload
    def translate(self, dx: int, dy: int) -> None: ...
    @overload
    def translate(self, p: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def translated(self, dx: int, dy: int) -> QRegion: ...
    @overload
    def translated(self, p: PySide2.QtCore.QPoint) -> QRegion: ...
    @overload
    def united(self, r: PySide2.QtCore.QRect) -> QRegion: ...
    @overload
    def united(self, r: QRegion) -> QRegion: ...
    def xored(self, r: QRegion) -> QRegion: ...
    @overload
    def __add__(self, r: PySide2.QtCore.QRect) -> QRegion: ...
    @overload
    def __add__(self, r: QRegion) -> QRegion: ...
    @overload
    def __and__(self, r: PySide2.QtCore.QRect) -> QRegion: ...
    @overload
    def __and__(self, r: QRegion) -> QRegion: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    @overload
    def __iadd__(self, r: PySide2.QtCore.QRect) -> QRegion: ...
    @overload
    def __iadd__(self, r: QRegion) -> QRegion: ...
    def __ior__(self, r: QRegion) -> QRegion: ...
    def __isub__(self, r: QRegion) -> QRegion: ...
    def __ixor__(self, r: QRegion) -> QRegion: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    @overload
    def __mul__(self, m: QMatrix) -> QRegion: ...
    @overload
    def __mul__(self, m: QTransform) -> QRegion: ...
    def __ne__(self, other: object) -> bool: ...
    def __or__(self, r: QRegion) -> QRegion: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __rsub__(self, other) -> Any: ...
    def __rxor__(self, other) -> Any: ...
    def __sub__(self, r: QRegion) -> QRegion: ...
    def __xor__(self, r: QRegion) -> QRegion: ...

class QRegularExpressionValidator(QValidator):
    regularExpressionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., changed: typing.Callable = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., regularExpression: PySide2.QtCore.QRegularExpression = ..., regularExpressionChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, re: PySide2.QtCore.QRegularExpression, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., changed: typing.Callable = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., regularExpression: PySide2.QtCore.QRegularExpression = ..., regularExpressionChanged: typing.Callable = ...) -> None: ...
    def regularExpression(self) -> PySide2.QtCore.QRegularExpression: ...
    def setRegularExpression(self, re: PySide2.QtCore.QRegularExpression) -> None: ...
    def validate(self, input: str, pos: int) -> QValidator.State: ...

class QResizeEvent(PySide2.QtCore.QEvent):
    def __init__(self, size: PySide2.QtCore.QSize, oldSize: PySide2.QtCore.QSize) -> None: ...
    def oldSize(self) -> PySide2.QtCore.QSize: ...
    def size(self) -> PySide2.QtCore.QSize: ...

class QScreen(PySide2.QtCore.QObject):
    availableGeometryChanged: ClassVar[PySide2.QtCore.Signal] = ...
    geometryChanged: ClassVar[PySide2.QtCore.Signal] = ...
    logicalDotsPerInchChanged: ClassVar[PySide2.QtCore.Signal] = ...
    orientationChanged: ClassVar[PySide2.QtCore.Signal] = ...
    physicalDotsPerInchChanged: ClassVar[PySide2.QtCore.Signal] = ...
    physicalSizeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    primaryOrientationChanged: ClassVar[PySide2.QtCore.Signal] = ...
    refreshRateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    virtualGeometryChanged: ClassVar[PySide2.QtCore.Signal] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def angleBetween(self, a: PySide2.QtCore.Qt.ScreenOrientation, b: PySide2.QtCore.Qt.ScreenOrientation) -> int: ...
    def availableGeometry(self) -> PySide2.QtCore.QRect: ...
    def availableSize(self) -> PySide2.QtCore.QSize: ...
    def availableVirtualGeometry(self) -> PySide2.QtCore.QRect: ...
    def availableVirtualSize(self) -> PySide2.QtCore.QSize: ...
    def depth(self) -> int: ...
    def devicePixelRatio(self) -> float: ...
    def geometry(self) -> PySide2.QtCore.QRect: ...
    def grabWindow(self, window: int, x: int = ..., y: int = ..., w: int = ..., h: int = ...) -> QPixmap: ...
    def isLandscape(self, orientation: PySide2.QtCore.Qt.ScreenOrientation) -> bool: ...
    def isPortrait(self, orientation: PySide2.QtCore.Qt.ScreenOrientation) -> bool: ...
    def logicalDotsPerInch(self) -> float: ...
    def logicalDotsPerInchX(self) -> float: ...
    def logicalDotsPerInchY(self) -> float: ...
    def manufacturer(self) -> str: ...
    def mapBetween(self, a: PySide2.QtCore.Qt.ScreenOrientation, b: PySide2.QtCore.Qt.ScreenOrientation, rect: PySide2.QtCore.QRect) -> PySide2.QtCore.QRect: ...
    def model(self) -> str: ...
    def name(self) -> str: ...
    def nativeOrientation(self) -> PySide2.QtCore.Qt.ScreenOrientation: ...
    def orientation(self) -> PySide2.QtCore.Qt.ScreenOrientation: ...
    def orientationUpdateMask(self) -> typing.Union[PySide2.QtCore.Qt.ScreenOrientations,PySide2.QtCore.Qt.ScreenOrientation]: ...
    def physicalDotsPerInch(self) -> float: ...
    def physicalDotsPerInchX(self) -> float: ...
    def physicalDotsPerInchY(self) -> float: ...
    def physicalSize(self) -> PySide2.QtCore.QSizeF: ...
    def primaryOrientation(self) -> PySide2.QtCore.Qt.ScreenOrientation: ...
    def refreshRate(self) -> float: ...
    def serialNumber(self) -> str: ...
    def setOrientationUpdateMask(self, mask: typing.Union[PySide2.QtCore.Qt.ScreenOrientations,PySide2.QtCore.Qt.ScreenOrientation]) -> None: ...
    def size(self) -> PySide2.QtCore.QSize: ...
    def transformBetween(self, a: PySide2.QtCore.Qt.ScreenOrientation, b: PySide2.QtCore.Qt.ScreenOrientation, target: PySide2.QtCore.QRect) -> QTransform: ...
    def virtualGeometry(self) -> PySide2.QtCore.QRect: ...
    def virtualSiblingAt(self, point: PySide2.QtCore.QPoint) -> QScreen: ...
    def virtualSiblings(self) -> typing.List[QScreen]: ...
    def virtualSize(self) -> PySide2.QtCore.QSize: ...

class QScrollEvent(PySide2.QtCore.QEvent):
    class ScrollState:
        ScrollFinished: ClassVar[QScrollEvent.ScrollState] = ...
        ScrollStarted: ClassVar[QScrollEvent.ScrollState] = ...
        ScrollUpdated: ClassVar[QScrollEvent.ScrollState] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QScrollEvent.ScrollState: ...
        def __and__(self, other: typing.SupportsInt) -> QScrollEvent.ScrollState: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QScrollEvent.ScrollState: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QScrollEvent.ScrollState: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QScrollEvent.ScrollState: ...
        def __rand__(self, other: typing.SupportsInt) -> QScrollEvent.ScrollState: ...
        def __rmul__(self, other: typing.SupportsInt) -> QScrollEvent.ScrollState: ...
        def __ror__(self, other: typing.SupportsInt) -> QScrollEvent.ScrollState: ...
        def __rsub__(self, other: typing.SupportsInt) -> QScrollEvent.ScrollState: ...
        def __rxor__(self, other: typing.SupportsInt) -> QScrollEvent.ScrollState: ...
        def __sub__(self, other: typing.SupportsInt) -> QScrollEvent.ScrollState: ...
        def __xor__(self, other: typing.SupportsInt) -> QScrollEvent.ScrollState: ...
    ScrollFinished: ClassVar[QScrollEvent.ScrollState] = ...
    ScrollStarted: ClassVar[QScrollEvent.ScrollState] = ...
    ScrollUpdated: ClassVar[QScrollEvent.ScrollState] = ...
    def __init__(self, contentPos: PySide2.QtCore.QPointF, overshoot: PySide2.QtCore.QPointF, scrollState: QScrollEvent.ScrollState) -> None: ...
    def contentPos(self) -> PySide2.QtCore.QPointF: ...
    def overshootDistance(self) -> PySide2.QtCore.QPointF: ...
    def scrollState(self) -> QScrollEvent.ScrollState: ...

class QScrollPrepareEvent(PySide2.QtCore.QEvent):
    def __init__(self, startPos: PySide2.QtCore.QPointF) -> None: ...
    def contentPos(self) -> PySide2.QtCore.QPointF: ...
    def contentPosRange(self) -> PySide2.QtCore.QRectF: ...
    def setContentPos(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def setContentPosRange(self, rect: PySide2.QtCore.QRectF) -> None: ...
    def setViewportSize(self, size: PySide2.QtCore.QSizeF) -> None: ...
    def startPos(self) -> PySide2.QtCore.QPointF: ...
    def viewportSize(self) -> PySide2.QtCore.QSizeF: ...

class QSessionManager(PySide2.QtCore.QObject):
    class RestartHint:
        RestartAnyway: ClassVar[QSessionManager.RestartHint] = ...
        RestartIfRunning: ClassVar[QSessionManager.RestartHint] = ...
        RestartImmediately: ClassVar[QSessionManager.RestartHint] = ...
        RestartNever: ClassVar[QSessionManager.RestartHint] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSessionManager.RestartHint: ...
        def __and__(self, other: typing.SupportsInt) -> QSessionManager.RestartHint: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSessionManager.RestartHint: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSessionManager.RestartHint: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSessionManager.RestartHint: ...
        def __rand__(self, other: typing.SupportsInt) -> QSessionManager.RestartHint: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSessionManager.RestartHint: ...
        def __ror__(self, other: typing.SupportsInt) -> QSessionManager.RestartHint: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSessionManager.RestartHint: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSessionManager.RestartHint: ...
        def __sub__(self, other: typing.SupportsInt) -> QSessionManager.RestartHint: ...
        def __xor__(self, other: typing.SupportsInt) -> QSessionManager.RestartHint: ...
    RestartAnyway: ClassVar[QSessionManager.RestartHint] = ...
    RestartIfRunning: ClassVar[QSessionManager.RestartHint] = ...
    RestartImmediately: ClassVar[QSessionManager.RestartHint] = ...
    RestartNever: ClassVar[QSessionManager.RestartHint] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def allowsErrorInteraction(self) -> bool: ...
    def allowsInteraction(self) -> bool: ...
    def cancel(self) -> None: ...
    def discardCommand(self) -> typing.List[str]: ...
    def isPhase2(self) -> bool: ...
    def release(self) -> None: ...
    def requestPhase2(self) -> None: ...
    def restartCommand(self) -> typing.List[str]: ...
    def restartHint(self) -> QSessionManager.RestartHint: ...
    def sessionId(self) -> str: ...
    def sessionKey(self) -> str: ...
    def setDiscardCommand(self, arg__1: typing.Sequence[str]) -> None: ...
    @overload
    def setManagerProperty(self, name: str, value: str) -> None: ...
    @overload
    def setManagerProperty(self, name: str, value: typing.Sequence[str]) -> None: ...
    def setRestartCommand(self, arg__1: typing.Sequence[str]) -> None: ...
    def setRestartHint(self, arg__1: QSessionManager.RestartHint) -> None: ...

class QShortcutEvent(PySide2.QtCore.QEvent):
    def __init__(self, key: typing.Union[QKeySequence,str], id: int, ambiguous: bool = ...) -> None: ...
    def isAmbiguous(self) -> bool: ...
    def key(self) -> QKeySequence: ...
    def shortcutId(self) -> int: ...

class QShowEvent(PySide2.QtCore.QEvent):
    def __init__(self) -> None: ...

class QStandardItem(shiboken2.Object):
    class ItemType:
        Type: ClassVar[QStandardItem.ItemType] = ...
        UserType: ClassVar[QStandardItem.ItemType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStandardItem.ItemType: ...
        def __and__(self, other: typing.SupportsInt) -> QStandardItem.ItemType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStandardItem.ItemType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStandardItem.ItemType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStandardItem.ItemType: ...
        def __rand__(self, other: typing.SupportsInt) -> QStandardItem.ItemType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStandardItem.ItemType: ...
        def __ror__(self, other: typing.SupportsInt) -> QStandardItem.ItemType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStandardItem.ItemType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStandardItem.ItemType: ...
        def __sub__(self, other: typing.SupportsInt) -> QStandardItem.ItemType: ...
        def __xor__(self, other: typing.SupportsInt) -> QStandardItem.ItemType: ...
    Type: ClassVar[QStandardItem.ItemType] = ...
    UserType: ClassVar[QStandardItem.ItemType] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, icon: QIcon, text: str) -> None: ...
    @overload
    def __init__(self, other: QStandardItem) -> None: ...
    @overload
    def __init__(self, rows: int, columns: int = ...) -> None: ...
    @overload
    def __init__(self, text: str) -> None: ...
    def accessibleDescription(self) -> str: ...
    def accessibleText(self) -> str: ...
    def appendColumn(self, items: typing.Sequence[QStandardItem]) -> None: ...
    @overload
    def appendRow(self, item: QStandardItem) -> None: ...
    @overload
    def appendRow(self, items: typing.Sequence[QStandardItem]) -> None: ...
    def appendRows(self, items: typing.Sequence[QStandardItem]) -> None: ...
    def background(self) -> QBrush: ...
    def checkState(self) -> PySide2.QtCore.Qt.CheckState: ...
    def child(self, row: int, column: int = ...) -> QStandardItem: ...
    def clearData(self) -> None: ...
    def clone(self) -> QStandardItem: ...
    def column(self) -> int: ...
    def columnCount(self) -> int: ...
    def data(self, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> typing.Any: ...
    def emitDataChanged(self) -> None: ...
    def flags(self) -> typing.Union[PySide2.QtCore.Qt.ItemFlags,PySide2.QtCore.Qt.ItemFlag]: ...
    def font(self) -> QFont: ...
    def foreground(self) -> QBrush: ...
    def hasChildren(self) -> bool: ...
    def icon(self) -> QIcon: ...
    def index(self) -> PySide2.QtCore.QModelIndex: ...
    def insertColumn(self, column: int, items: typing.Sequence[QStandardItem]) -> None: ...
    def insertColumns(self, column: int, count: int) -> None: ...
    @overload
    def insertRow(self, row: int, item: QStandardItem) -> None: ...
    @overload
    def insertRow(self, row: int, items: typing.Sequence[QStandardItem]) -> None: ...
    @overload
    def insertRows(self, row: int, count: int) -> None: ...
    @overload
    def insertRows(self, row: int, items: typing.Sequence[QStandardItem]) -> None: ...
    def isAutoTristate(self) -> bool: ...
    def isCheckable(self) -> bool: ...
    def isDragEnabled(self) -> bool: ...
    def isDropEnabled(self) -> bool: ...
    def isEditable(self) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isSelectable(self) -> bool: ...
    def isTristate(self) -> bool: ...
    def isUserTristate(self) -> bool: ...
    def model(self) -> QStandardItemModel: ...
    def parent(self) -> QStandardItem: ...
    def read(self, in_: PySide2.QtCore.QDataStream) -> None: ...
    def removeColumn(self, column: int) -> None: ...
    def removeColumns(self, column: int, count: int) -> None: ...
    def removeRow(self, row: int) -> None: ...
    def removeRows(self, row: int, count: int) -> None: ...
    def row(self) -> int: ...
    def rowCount(self) -> int: ...
    def setAccessibleDescription(self, accessibleDescription: str) -> None: ...
    def setAccessibleText(self, accessibleText: str) -> None: ...
    def setAutoTristate(self, tristate: bool) -> None: ...
    def setBackground(self, brush: QBrush) -> None: ...
    def setCheckState(self, checkState: PySide2.QtCore.Qt.CheckState) -> None: ...
    def setCheckable(self, checkable: bool) -> None: ...
    @overload
    def setChild(self, row: int, column: int, item: QStandardItem) -> None: ...
    @overload
    def setChild(self, row: int, item: QStandardItem) -> None: ...
    def setColumnCount(self, columns: int) -> None: ...
    def setData(self, value: typing.Any, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> None: ...
    def setDragEnabled(self, dragEnabled: bool) -> None: ...
    def setDropEnabled(self, dropEnabled: bool) -> None: ...
    def setEditable(self, editable: bool) -> None: ...
    def setEnabled(self, enabled: bool) -> None: ...
    def setFlags(self, flags: typing.Union[PySide2.QtCore.Qt.ItemFlags,PySide2.QtCore.Qt.ItemFlag]) -> None: ...
    def setFont(self, font: QFont) -> None: ...
    def setForeground(self, brush: QBrush) -> None: ...
    def setIcon(self, icon: QIcon) -> None: ...
    def setRowCount(self, rows: int) -> None: ...
    def setSelectable(self, selectable: bool) -> None: ...
    def setSizeHint(self, sizeHint: PySide2.QtCore.QSize) -> None: ...
    def setStatusTip(self, statusTip: str) -> None: ...
    def setText(self, text: str) -> None: ...
    def setTextAlignment(self, textAlignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setToolTip(self, toolTip: str) -> None: ...
    def setTristate(self, tristate: bool) -> None: ...
    def setUserTristate(self, tristate: bool) -> None: ...
    def setWhatsThis(self, whatsThis: str) -> None: ...
    def sizeHint(self) -> PySide2.QtCore.QSize: ...
    def sortChildren(self, column: int, order: PySide2.QtCore.Qt.SortOrder = ...) -> None: ...
    def statusTip(self) -> str: ...
    def takeChild(self, row: int, column: int = ...) -> QStandardItem: ...
    def takeColumn(self, column: int) -> typing.List[QStandardItem]: ...
    def takeRow(self, row: int) -> typing.List[QStandardItem]: ...
    def text(self) -> str: ...
    def textAlignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def toolTip(self) -> str: ...
    def type(self) -> QStandardItem.ItemType: ...
    def whatsThis(self) -> str: ...
    def write(self, out: PySide2.QtCore.QDataStream) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, out: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, in_: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QStandardItemModel(PySide2.QtCore.QAbstractItemModel):
    itemChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., columnsAboutToBeInserted: typing.Callable = ..., columnsAboutToBeMoved: typing.Callable = ..., columnsAboutToBeRemoved: typing.Callable = ..., columnsInserted: typing.Callable = ..., columnsMoved: typing.Callable = ..., columnsRemoved: typing.Callable = ..., dataChanged: typing.Callable = ..., destroyed: typing.Callable = ..., headerDataChanged: typing.Callable = ..., itemChanged: typing.Callable = ..., layoutAboutToBeChanged: typing.Callable = ..., layoutChanged: typing.Callable = ..., modelAboutToBeReset: typing.Callable = ..., modelReset: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., rowsAboutToBeInserted: typing.Callable = ..., rowsAboutToBeMoved: typing.Callable = ..., rowsAboutToBeRemoved: typing.Callable = ..., rowsInserted: typing.Callable = ..., rowsMoved: typing.Callable = ..., rowsRemoved: typing.Callable = ..., sortRole: int = ...) -> None: ...
    @overload
    def __init__(self, rows: int, columns: int, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., columnsAboutToBeInserted: typing.Callable = ..., columnsAboutToBeMoved: typing.Callable = ..., columnsAboutToBeRemoved: typing.Callable = ..., columnsInserted: typing.Callable = ..., columnsMoved: typing.Callable = ..., columnsRemoved: typing.Callable = ..., dataChanged: typing.Callable = ..., destroyed: typing.Callable = ..., headerDataChanged: typing.Callable = ..., itemChanged: typing.Callable = ..., layoutAboutToBeChanged: typing.Callable = ..., layoutChanged: typing.Callable = ..., modelAboutToBeReset: typing.Callable = ..., modelReset: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., rowsAboutToBeInserted: typing.Callable = ..., rowsAboutToBeMoved: typing.Callable = ..., rowsAboutToBeRemoved: typing.Callable = ..., rowsInserted: typing.Callable = ..., rowsMoved: typing.Callable = ..., rowsRemoved: typing.Callable = ..., sortRole: int = ...) -> None: ...
    def appendColumn(self, items: typing.Sequence[QStandardItem]) -> None: ...
    @overload
    def appendRow(self, item: QStandardItem) -> None: ...
    @overload
    def appendRow(self, items: typing.Sequence[QStandardItem]) -> None: ...
    def clear(self) -> None: ...
    def clearItemData(self, index: PySide2.QtCore.QModelIndex) -> bool: ...
    def columnCount(self, parent: PySide2.QtCore.QModelIndex = ...) -> int: ...
    def data(self, index: PySide2.QtCore.QModelIndex, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> typing.Any: ...
    def dropMimeData(self, data: PySide2.QtCore.QMimeData, action: PySide2.QtCore.Qt.DropAction, row: int, column: int, parent: PySide2.QtCore.QModelIndex) -> bool: ...
    def findItems(self, text: str, flags: typing.Union[PySide2.QtCore.Qt.MatchFlags,PySide2.QtCore.Qt.MatchFlag] = ..., column: int = ...) -> typing.List[QStandardItem]: ...
    def flags(self, index: PySide2.QtCore.QModelIndex) -> typing.Union[PySide2.QtCore.Qt.ItemFlags,PySide2.QtCore.Qt.ItemFlag]: ...
    def hasChildren(self, parent: PySide2.QtCore.QModelIndex = ...) -> bool: ...
    def headerData(self, section: int, orientation: PySide2.QtCore.Qt.Orientation, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> typing.Any: ...
    def horizontalHeaderItem(self, column: int) -> QStandardItem: ...
    def index(self, row: int, column: int, parent: PySide2.QtCore.QModelIndex = ...) -> PySide2.QtCore.QModelIndex: ...
    def indexFromItem(self, item: QStandardItem) -> PySide2.QtCore.QModelIndex: ...
    @overload
    def insertColumn(self, column: int, items: typing.Sequence[QStandardItem]) -> None: ...
    @overload
    def insertColumn(self, column: int, parent: PySide2.QtCore.QModelIndex = ...) -> bool: ...
    def insertColumns(self, column: int, count: int, parent: PySide2.QtCore.QModelIndex = ...) -> bool: ...
    @overload
    def insertRow(self, row: int, item: QStandardItem) -> None: ...
    @overload
    def insertRow(self, row: int, items: typing.Sequence[QStandardItem]) -> None: ...
    @overload
    def insertRow(self, row: int, parent: PySide2.QtCore.QModelIndex = ...) -> bool: ...
    def insertRows(self, row: int, count: int, parent: PySide2.QtCore.QModelIndex = ...) -> bool: ...
    def invisibleRootItem(self) -> QStandardItem: ...
    def item(self, row: int, column: int = ...) -> QStandardItem: ...
    def itemData(self, index: PySide2.QtCore.QModelIndex) -> typing.Dict[int,typing.Any]: ...
    def itemFromIndex(self, index: PySide2.QtCore.QModelIndex) -> QStandardItem: ...
    def itemPrototype(self) -> QStandardItem: ...
    def mimeData(self, indexes: typing.List[PySide2.QtCore.QModelIndex]) -> PySide2.QtCore.QMimeData: ...
    def mimeTypes(self) -> typing.List[str]: ...
    @overload
    def parent(self) -> PySide2.QtCore.QObject: ...
    @overload
    def parent(self, child: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def removeColumns(self, column: int, count: int, parent: PySide2.QtCore.QModelIndex = ...) -> bool: ...
    def removeRows(self, row: int, count: int, parent: PySide2.QtCore.QModelIndex = ...) -> bool: ...
    def rowCount(self, parent: PySide2.QtCore.QModelIndex = ...) -> int: ...
    def setColumnCount(self, columns: int) -> None: ...
    def setData(self, index: PySide2.QtCore.QModelIndex, value: typing.Any, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> bool: ...
    def setHeaderData(self, section: int, orientation: PySide2.QtCore.Qt.Orientation, value: typing.Any, role: PySide2.QtCore.Qt.ItemDataRole = ...) -> bool: ...
    def setHorizontalHeaderItem(self, column: int, item: QStandardItem) -> None: ...
    def setHorizontalHeaderLabels(self, labels: typing.Sequence[str]) -> None: ...
    @overload
    def setItem(self, row: int, column: int, item: QStandardItem) -> None: ...
    @overload
    def setItem(self, row: int, item: QStandardItem) -> None: ...
    def setItemData(self, index: PySide2.QtCore.QModelIndex, roles: typing.Dict[int,typing.Any]) -> bool: ...
    def setItemPrototype(self, item: QStandardItem) -> None: ...
    def setItemRoleNames(self, roleNames: typing.Dict[int,PySide2.QtCore.QByteArray]) -> None: ...
    def setRowCount(self, rows: int) -> None: ...
    def setSortRole(self, role: PySide2.QtCore.Qt.ItemDataRole) -> None: ...
    def setVerticalHeaderItem(self, row: int, item: QStandardItem) -> None: ...
    def setVerticalHeaderLabels(self, labels: typing.Sequence[str]) -> None: ...
    def sibling(self, row: int, column: int, idx: PySide2.QtCore.QModelIndex) -> PySide2.QtCore.QModelIndex: ...
    def sort(self, column: int, order: PySide2.QtCore.Qt.SortOrder = ...) -> None: ...
    def sortRole(self) -> int: ...
    def supportedDropActions(self) -> typing.Union[PySide2.QtCore.Qt.DropActions,PySide2.QtCore.Qt.DropAction]: ...
    def takeColumn(self, column: int) -> typing.List[QStandardItem]: ...
    def takeHorizontalHeaderItem(self, column: int) -> QStandardItem: ...
    def takeItem(self, row: int, column: int = ...) -> QStandardItem: ...
    def takeRow(self, row: int) -> typing.List[QStandardItem]: ...
    def takeVerticalHeaderItem(self, row: int) -> QStandardItem: ...
    def verticalHeaderItem(self, row: int) -> QStandardItem: ...

class QStaticText(shiboken2.Object):
    class PerformanceHint:
        AggressiveCaching: ClassVar[QStaticText.PerformanceHint] = ...
        ModerateCaching: ClassVar[QStaticText.PerformanceHint] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QStaticText.PerformanceHint: ...
        def __and__(self, other: typing.SupportsInt) -> QStaticText.PerformanceHint: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QStaticText.PerformanceHint: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QStaticText.PerformanceHint: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QStaticText.PerformanceHint: ...
        def __rand__(self, other: typing.SupportsInt) -> QStaticText.PerformanceHint: ...
        def __rmul__(self, other: typing.SupportsInt) -> QStaticText.PerformanceHint: ...
        def __ror__(self, other: typing.SupportsInt) -> QStaticText.PerformanceHint: ...
        def __rsub__(self, other: typing.SupportsInt) -> QStaticText.PerformanceHint: ...
        def __rxor__(self, other: typing.SupportsInt) -> QStaticText.PerformanceHint: ...
        def __sub__(self, other: typing.SupportsInt) -> QStaticText.PerformanceHint: ...
        def __xor__(self, other: typing.SupportsInt) -> QStaticText.PerformanceHint: ...
    AggressiveCaching: ClassVar[QStaticText.PerformanceHint] = ...
    ModerateCaching: ClassVar[QStaticText.PerformanceHint] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: QStaticText) -> None: ...
    @overload
    def __init__(self, text: str) -> None: ...
    def performanceHint(self) -> QStaticText.PerformanceHint: ...
    def prepare(self, matrix: QTransform = ..., font: QFont = ...) -> None: ...
    def setPerformanceHint(self, performanceHint: QStaticText.PerformanceHint) -> None: ...
    def setText(self, text: str) -> None: ...
    def setTextFormat(self, textFormat: PySide2.QtCore.Qt.TextFormat) -> None: ...
    def setTextOption(self, textOption: QTextOption) -> None: ...
    def setTextWidth(self, textWidth: float) -> None: ...
    def size(self) -> PySide2.QtCore.QSizeF: ...
    def swap(self, other: QStaticText) -> None: ...
    def text(self) -> str: ...
    def textFormat(self) -> PySide2.QtCore.Qt.TextFormat: ...
    def textOption(self) -> QTextOption: ...
    def textWidth(self) -> float: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QStatusTipEvent(PySide2.QtCore.QEvent):
    def __init__(self, tip: str) -> None: ...
    def tip(self) -> str: ...

class QStyleHints(PySide2.QtCore.QObject):
    cursorFlashTimeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    keyboardInputIntervalChanged: ClassVar[PySide2.QtCore.Signal] = ...
    mouseDoubleClickIntervalChanged: ClassVar[PySide2.QtCore.Signal] = ...
    mousePressAndHoldIntervalChanged: ClassVar[PySide2.QtCore.Signal] = ...
    mouseQuickSelectionThresholdChanged: ClassVar[PySide2.QtCore.Signal] = ...
    showShortcutsInContextMenusChanged: ClassVar[PySide2.QtCore.Signal] = ...
    startDragDistanceChanged: ClassVar[PySide2.QtCore.Signal] = ...
    startDragTimeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    tabFocusBehaviorChanged: ClassVar[PySide2.QtCore.Signal] = ...
    useHoverEffectsChanged: ClassVar[PySide2.QtCore.Signal] = ...
    wheelScrollLinesChanged: ClassVar[PySide2.QtCore.Signal] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def cursorFlashTime(self) -> int: ...
    def fontSmoothingGamma(self) -> float: ...
    def keyboardAutoRepeatRate(self) -> int: ...
    def keyboardInputInterval(self) -> int: ...
    def mouseDoubleClickDistance(self) -> int: ...
    def mouseDoubleClickInterval(self) -> int: ...
    def mousePressAndHoldInterval(self) -> int: ...
    def mouseQuickSelectionThreshold(self) -> int: ...
    def passwordMaskCharacter(self) -> str: ...
    def passwordMaskDelay(self) -> int: ...
    def setCursorFlashTime(self, cursorFlashTime: int) -> None: ...
    def setFocusOnTouchRelease(self) -> bool: ...
    def setKeyboardInputInterval(self, keyboardInputInterval: int) -> None: ...
    def setMouseDoubleClickInterval(self, mouseDoubleClickInterval: int) -> None: ...
    def setMousePressAndHoldInterval(self, mousePressAndHoldInterval: int) -> None: ...
    def setMouseQuickSelectionThreshold(self, threshold: int) -> None: ...
    def setShowShortcutsInContextMenus(self, showShortcutsInContextMenus: bool) -> None: ...
    def setStartDragDistance(self, startDragDistance: int) -> None: ...
    def setStartDragTime(self, startDragTime: int) -> None: ...
    def setTabFocusBehavior(self, tabFocusBehavior: PySide2.QtCore.Qt.TabFocusBehavior) -> None: ...
    def setUseHoverEffects(self, useHoverEffects: bool) -> None: ...
    def setWheelScrollLines(self, scrollLines: int) -> None: ...
    def showIsFullScreen(self) -> bool: ...
    def showIsMaximized(self) -> bool: ...
    def showShortcutsInContextMenus(self) -> bool: ...
    def singleClickActivation(self) -> bool: ...
    def startDragDistance(self) -> int: ...
    def startDragTime(self) -> int: ...
    def startDragVelocity(self) -> int: ...
    def tabFocusBehavior(self) -> PySide2.QtCore.Qt.TabFocusBehavior: ...
    def touchDoubleTapDistance(self) -> int: ...
    def useHoverEffects(self) -> bool: ...
    def useRtlExtensions(self) -> bool: ...
    def wheelScrollLines(self) -> int: ...

class QSurface(shiboken2.Object):
    class SurfaceClass:
        Offscreen: ClassVar[QSurface.SurfaceClass] = ...
        Window: ClassVar[QSurface.SurfaceClass] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSurface.SurfaceClass: ...
        def __and__(self, other: typing.SupportsInt) -> QSurface.SurfaceClass: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSurface.SurfaceClass: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSurface.SurfaceClass: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSurface.SurfaceClass: ...
        def __rand__(self, other: typing.SupportsInt) -> QSurface.SurfaceClass: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSurface.SurfaceClass: ...
        def __ror__(self, other: typing.SupportsInt) -> QSurface.SurfaceClass: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSurface.SurfaceClass: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSurface.SurfaceClass: ...
        def __sub__(self, other: typing.SupportsInt) -> QSurface.SurfaceClass: ...
        def __xor__(self, other: typing.SupportsInt) -> QSurface.SurfaceClass: ...

    class SurfaceType:
        MetalSurface: ClassVar[QSurface.SurfaceType] = ...
        OpenGLSurface: ClassVar[QSurface.SurfaceType] = ...
        OpenVGSurface: ClassVar[QSurface.SurfaceType] = ...
        RasterGLSurface: ClassVar[QSurface.SurfaceType] = ...
        RasterSurface: ClassVar[QSurface.SurfaceType] = ...
        VulkanSurface: ClassVar[QSurface.SurfaceType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSurface.SurfaceType: ...
        def __and__(self, other: typing.SupportsInt) -> QSurface.SurfaceType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSurface.SurfaceType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSurface.SurfaceType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSurface.SurfaceType: ...
        def __rand__(self, other: typing.SupportsInt) -> QSurface.SurfaceType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSurface.SurfaceType: ...
        def __ror__(self, other: typing.SupportsInt) -> QSurface.SurfaceType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSurface.SurfaceType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSurface.SurfaceType: ...
        def __sub__(self, other: typing.SupportsInt) -> QSurface.SurfaceType: ...
        def __xor__(self, other: typing.SupportsInt) -> QSurface.SurfaceType: ...
    MetalSurface: ClassVar[QSurface.SurfaceType] = ...
    Offscreen: ClassVar[QSurface.SurfaceClass] = ...
    OpenGLSurface: ClassVar[QSurface.SurfaceType] = ...
    OpenVGSurface: ClassVar[QSurface.SurfaceType] = ...
    RasterGLSurface: ClassVar[QSurface.SurfaceType] = ...
    RasterSurface: ClassVar[QSurface.SurfaceType] = ...
    VulkanSurface: ClassVar[QSurface.SurfaceType] = ...
    Window: ClassVar[QSurface.SurfaceClass] = ...
    m_type: Any
    def __init__(self, type: QSurface.SurfaceClass) -> None: ...
    def format(self) -> QSurfaceFormat: ...
    def size(self) -> PySide2.QtCore.QSize: ...
    def supportsOpenGL(self) -> bool: ...
    def surfaceClass(self) -> QSurface.SurfaceClass: ...
    def surfaceHandle(self) -> int: ...
    def surfaceType(self) -> QSurface.SurfaceType: ...

class QSurfaceFormat(shiboken2.Object):
    class ColorSpace:
        DefaultColorSpace: ClassVar[QSurfaceFormat.ColorSpace] = ...
        sRGBColorSpace: ClassVar[QSurfaceFormat.ColorSpace] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSurfaceFormat.ColorSpace: ...
        def __and__(self, other: typing.SupportsInt) -> QSurfaceFormat.ColorSpace: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSurfaceFormat.ColorSpace: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSurfaceFormat.ColorSpace: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSurfaceFormat.ColorSpace: ...
        def __rand__(self, other: typing.SupportsInt) -> QSurfaceFormat.ColorSpace: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSurfaceFormat.ColorSpace: ...
        def __ror__(self, other: typing.SupportsInt) -> QSurfaceFormat.ColorSpace: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSurfaceFormat.ColorSpace: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSurfaceFormat.ColorSpace: ...
        def __sub__(self, other: typing.SupportsInt) -> QSurfaceFormat.ColorSpace: ...
        def __xor__(self, other: typing.SupportsInt) -> QSurfaceFormat.ColorSpace: ...

    class FormatOption:
        DebugContext: ClassVar[QSurfaceFormat.FormatOption] = ...
        DeprecatedFunctions: ClassVar[QSurfaceFormat.FormatOption] = ...
        ResetNotification: ClassVar[QSurfaceFormat.FormatOption] = ...
        StereoBuffers: ClassVar[QSurfaceFormat.FormatOption] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSurfaceFormat.FormatOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSurfaceFormat.FormatOption: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSurfaceFormat.FormatOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QSurfaceFormat.FormatOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QSurfaceFormat.FormatOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSurfaceFormat.FormatOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QSurfaceFormat.FormatOptions: ...

    class FormatOptions:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QSurfaceFormat.FormatOptions: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QSurfaceFormat.FormatOptions: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSurfaceFormat.FormatOptions: ...
        def __rand__(self, other: typing.SupportsInt) -> QSurfaceFormat.FormatOptions: ...
        def __ror__(self, other: typing.SupportsInt) -> QSurfaceFormat.FormatOptions: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSurfaceFormat.FormatOptions: ...
        def __xor__(self, other: typing.SupportsInt) -> QSurfaceFormat.FormatOptions: ...

    class OpenGLContextProfile:
        CompatibilityProfile: ClassVar[QSurfaceFormat.OpenGLContextProfile] = ...
        CoreProfile: ClassVar[QSurfaceFormat.OpenGLContextProfile] = ...
        NoProfile: ClassVar[QSurfaceFormat.OpenGLContextProfile] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSurfaceFormat.OpenGLContextProfile: ...
        def __and__(self, other: typing.SupportsInt) -> QSurfaceFormat.OpenGLContextProfile: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSurfaceFormat.OpenGLContextProfile: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSurfaceFormat.OpenGLContextProfile: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSurfaceFormat.OpenGLContextProfile: ...
        def __rand__(self, other: typing.SupportsInt) -> QSurfaceFormat.OpenGLContextProfile: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSurfaceFormat.OpenGLContextProfile: ...
        def __ror__(self, other: typing.SupportsInt) -> QSurfaceFormat.OpenGLContextProfile: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSurfaceFormat.OpenGLContextProfile: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSurfaceFormat.OpenGLContextProfile: ...
        def __sub__(self, other: typing.SupportsInt) -> QSurfaceFormat.OpenGLContextProfile: ...
        def __xor__(self, other: typing.SupportsInt) -> QSurfaceFormat.OpenGLContextProfile: ...

    class RenderableType:
        DefaultRenderableType: ClassVar[QSurfaceFormat.RenderableType] = ...
        OpenGL: ClassVar[QSurfaceFormat.RenderableType] = ...
        OpenGLES: ClassVar[QSurfaceFormat.RenderableType] = ...
        OpenVG: ClassVar[QSurfaceFormat.RenderableType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSurfaceFormat.RenderableType: ...
        def __and__(self, other: typing.SupportsInt) -> QSurfaceFormat.RenderableType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSurfaceFormat.RenderableType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSurfaceFormat.RenderableType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSurfaceFormat.RenderableType: ...
        def __rand__(self, other: typing.SupportsInt) -> QSurfaceFormat.RenderableType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSurfaceFormat.RenderableType: ...
        def __ror__(self, other: typing.SupportsInt) -> QSurfaceFormat.RenderableType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSurfaceFormat.RenderableType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSurfaceFormat.RenderableType: ...
        def __sub__(self, other: typing.SupportsInt) -> QSurfaceFormat.RenderableType: ...
        def __xor__(self, other: typing.SupportsInt) -> QSurfaceFormat.RenderableType: ...

    class SwapBehavior:
        DefaultSwapBehavior: ClassVar[QSurfaceFormat.SwapBehavior] = ...
        DoubleBuffer: ClassVar[QSurfaceFormat.SwapBehavior] = ...
        SingleBuffer: ClassVar[QSurfaceFormat.SwapBehavior] = ...
        TripleBuffer: ClassVar[QSurfaceFormat.SwapBehavior] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QSurfaceFormat.SwapBehavior: ...
        def __and__(self, other: typing.SupportsInt) -> QSurfaceFormat.SwapBehavior: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QSurfaceFormat.SwapBehavior: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QSurfaceFormat.SwapBehavior: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QSurfaceFormat.SwapBehavior: ...
        def __rand__(self, other: typing.SupportsInt) -> QSurfaceFormat.SwapBehavior: ...
        def __rmul__(self, other: typing.SupportsInt) -> QSurfaceFormat.SwapBehavior: ...
        def __ror__(self, other: typing.SupportsInt) -> QSurfaceFormat.SwapBehavior: ...
        def __rsub__(self, other: typing.SupportsInt) -> QSurfaceFormat.SwapBehavior: ...
        def __rxor__(self, other: typing.SupportsInt) -> QSurfaceFormat.SwapBehavior: ...
        def __sub__(self, other: typing.SupportsInt) -> QSurfaceFormat.SwapBehavior: ...
        def __xor__(self, other: typing.SupportsInt) -> QSurfaceFormat.SwapBehavior: ...
    CompatibilityProfile: ClassVar[QSurfaceFormat.OpenGLContextProfile] = ...
    CoreProfile: ClassVar[QSurfaceFormat.OpenGLContextProfile] = ...
    DebugContext: ClassVar[QSurfaceFormat.FormatOption] = ...
    DefaultColorSpace: ClassVar[QSurfaceFormat.ColorSpace] = ...
    DefaultRenderableType: ClassVar[QSurfaceFormat.RenderableType] = ...
    DefaultSwapBehavior: ClassVar[QSurfaceFormat.SwapBehavior] = ...
    DeprecatedFunctions: ClassVar[QSurfaceFormat.FormatOption] = ...
    DoubleBuffer: ClassVar[QSurfaceFormat.SwapBehavior] = ...
    NoProfile: ClassVar[QSurfaceFormat.OpenGLContextProfile] = ...
    OpenGL: ClassVar[QSurfaceFormat.RenderableType] = ...
    OpenGLES: ClassVar[QSurfaceFormat.RenderableType] = ...
    OpenVG: ClassVar[QSurfaceFormat.RenderableType] = ...
    ResetNotification: ClassVar[QSurfaceFormat.FormatOption] = ...
    SingleBuffer: ClassVar[QSurfaceFormat.SwapBehavior] = ...
    StereoBuffers: ClassVar[QSurfaceFormat.FormatOption] = ...
    TripleBuffer: ClassVar[QSurfaceFormat.SwapBehavior] = ...
    sRGBColorSpace: ClassVar[QSurfaceFormat.ColorSpace] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, options: typing.Union[QSurfaceFormat.FormatOptions,QSurfaceFormat.FormatOption]) -> None: ...
    @overload
    def __init__(self, other: QSurfaceFormat) -> None: ...
    def alphaBufferSize(self) -> int: ...
    def blueBufferSize(self) -> int: ...
    def colorSpace(self) -> QSurfaceFormat.ColorSpace: ...
    @classmethod
    def defaultFormat(cls) -> QSurfaceFormat: ...
    def depthBufferSize(self) -> int: ...
    def greenBufferSize(self) -> int: ...
    def hasAlpha(self) -> bool: ...
    def majorVersion(self) -> int: ...
    def minorVersion(self) -> int: ...
    def options(self) -> typing.Union[QSurfaceFormat.FormatOptions,QSurfaceFormat.FormatOption]: ...
    def profile(self) -> QSurfaceFormat.OpenGLContextProfile: ...
    def redBufferSize(self) -> int: ...
    def renderableType(self) -> QSurfaceFormat.RenderableType: ...
    def samples(self) -> int: ...
    def setAlphaBufferSize(self, size: int) -> None: ...
    def setBlueBufferSize(self, size: int) -> None: ...
    def setColorSpace(self, colorSpace: QSurfaceFormat.ColorSpace) -> None: ...
    @classmethod
    def setDefaultFormat(cls, format: QSurfaceFormat) -> None: ...
    def setDepthBufferSize(self, size: int) -> None: ...
    def setGreenBufferSize(self, size: int) -> None: ...
    def setMajorVersion(self, majorVersion: int) -> None: ...
    def setMinorVersion(self, minorVersion: int) -> None: ...
    @overload
    def setOption(self, opt: typing.Union[QSurfaceFormat.FormatOptions,QSurfaceFormat.FormatOption]) -> None: ...
    @overload
    def setOption(self, option: QSurfaceFormat.FormatOption, on: bool = ...) -> None: ...
    def setOptions(self, options: typing.Union[QSurfaceFormat.FormatOptions,QSurfaceFormat.FormatOption]) -> None: ...
    def setProfile(self, profile: QSurfaceFormat.OpenGLContextProfile) -> None: ...
    def setRedBufferSize(self, size: int) -> None: ...
    def setRenderableType(self, type: QSurfaceFormat.RenderableType) -> None: ...
    def setSamples(self, numSamples: int) -> None: ...
    def setStencilBufferSize(self, size: int) -> None: ...
    def setStereo(self, enable: bool) -> None: ...
    def setSwapBehavior(self, behavior: QSurfaceFormat.SwapBehavior) -> None: ...
    def setSwapInterval(self, interval: int) -> None: ...
    def setVersion(self, major: int, minor: int) -> None: ...
    def stencilBufferSize(self) -> int: ...
    def stereo(self) -> bool: ...
    def swapBehavior(self) -> QSurfaceFormat.SwapBehavior: ...
    def swapInterval(self) -> int: ...
    @overload
    def testOption(self, opt: typing.Union[QSurfaceFormat.FormatOptions,QSurfaceFormat.FormatOption]) -> bool: ...
    @overload
    def testOption(self, option: QSurfaceFormat.FormatOption) -> bool: ...
    def version(self) -> typing.Tuple[int,int]: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QSyntaxHighlighter(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    @overload
    def __init__(self, parent: typing.Optional[PySide2.QtCore.QObject], destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, parent: QTextDocument, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def currentBlock(self) -> QTextBlock: ...
    def currentBlockState(self) -> int: ...
    def currentBlockUserData(self) -> QTextBlockUserData: ...
    def document(self) -> QTextDocument: ...
    def format(self, pos: int) -> QTextCharFormat: ...
    def highlightBlock(self, text: str) -> None: ...
    def previousBlockState(self) -> int: ...
    def rehighlight(self) -> None: ...
    def rehighlightBlock(self, block: QTextBlock) -> None: ...
    def setCurrentBlockState(self, newState: int) -> None: ...
    def setCurrentBlockUserData(self, data: QTextBlockUserData) -> None: ...
    def setDocument(self, doc: QTextDocument) -> None: ...
    @overload
    def setFormat(self, start: int, count: int, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    @overload
    def setFormat(self, start: int, count: int, font: QFont) -> None: ...
    @overload
    def setFormat(self, start: int, count: int, format: QTextCharFormat) -> None: ...

class QTabletEvent(QInputEvent):
    class PointerType:
        Cursor: ClassVar[QTabletEvent.PointerType] = ...
        Eraser: ClassVar[QTabletEvent.PointerType] = ...
        Pen: ClassVar[QTabletEvent.PointerType] = ...
        UnknownPointer: ClassVar[QTabletEvent.PointerType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTabletEvent.PointerType: ...
        def __and__(self, other: typing.SupportsInt) -> QTabletEvent.PointerType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTabletEvent.PointerType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTabletEvent.PointerType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTabletEvent.PointerType: ...
        def __rand__(self, other: typing.SupportsInt) -> QTabletEvent.PointerType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTabletEvent.PointerType: ...
        def __ror__(self, other: typing.SupportsInt) -> QTabletEvent.PointerType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTabletEvent.PointerType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTabletEvent.PointerType: ...
        def __sub__(self, other: typing.SupportsInt) -> QTabletEvent.PointerType: ...
        def __xor__(self, other: typing.SupportsInt) -> QTabletEvent.PointerType: ...

    class TabletDevice:
        Airbrush: ClassVar[QTabletEvent.TabletDevice] = ...
        FourDMouse: ClassVar[QTabletEvent.TabletDevice] = ...
        NoDevice: ClassVar[QTabletEvent.TabletDevice] = ...
        Puck: ClassVar[QTabletEvent.TabletDevice] = ...
        RotationStylus: ClassVar[QTabletEvent.TabletDevice] = ...
        Stylus: ClassVar[QTabletEvent.TabletDevice] = ...
        XFreeEraser: ClassVar[QTabletEvent.TabletDevice] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTabletEvent.TabletDevice: ...
        def __and__(self, other: typing.SupportsInt) -> QTabletEvent.TabletDevice: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTabletEvent.TabletDevice: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTabletEvent.TabletDevice: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTabletEvent.TabletDevice: ...
        def __rand__(self, other: typing.SupportsInt) -> QTabletEvent.TabletDevice: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTabletEvent.TabletDevice: ...
        def __ror__(self, other: typing.SupportsInt) -> QTabletEvent.TabletDevice: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTabletEvent.TabletDevice: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTabletEvent.TabletDevice: ...
        def __sub__(self, other: typing.SupportsInt) -> QTabletEvent.TabletDevice: ...
        def __xor__(self, other: typing.SupportsInt) -> QTabletEvent.TabletDevice: ...
    Airbrush: ClassVar[QTabletEvent.TabletDevice] = ...
    Cursor: ClassVar[QTabletEvent.PointerType] = ...
    Eraser: ClassVar[QTabletEvent.PointerType] = ...
    FourDMouse: ClassVar[QTabletEvent.TabletDevice] = ...
    NoDevice: ClassVar[QTabletEvent.TabletDevice] = ...
    Pen: ClassVar[QTabletEvent.PointerType] = ...
    Puck: ClassVar[QTabletEvent.TabletDevice] = ...
    RotationStylus: ClassVar[QTabletEvent.TabletDevice] = ...
    Stylus: ClassVar[QTabletEvent.TabletDevice] = ...
    UnknownPointer: ClassVar[QTabletEvent.PointerType] = ...
    XFreeEraser: ClassVar[QTabletEvent.TabletDevice] = ...
    @overload
    def __init__(self, t: PySide2.QtCore.QEvent.Type, pos: PySide2.QtCore.QPointF, globalPos: PySide2.QtCore.QPointF, device: int, pointerType: int, pressure: float, xTilt: int, yTilt: int, tangentialPressure: float, rotation: float, z: int, keyState: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier], uniqueID: int) -> None: ...
    @overload
    def __init__(self, t: PySide2.QtCore.QEvent.Type, pos: PySide2.QtCore.QPointF, globalPos: PySide2.QtCore.QPointF, device: int, pointerType: int, pressure: float, xTilt: int, yTilt: int, tangentialPressure: float, rotation: float, z: int, keyState: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier], uniqueID: int, button: PySide2.QtCore.Qt.MouseButton, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]) -> None: ...
    def button(self) -> PySide2.QtCore.Qt.MouseButton: ...
    def buttons(self) -> typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]: ...
    def device(self) -> QTabletEvent.TabletDevice: ...
    def deviceType(self) -> QTabletEvent.TabletDevice: ...
    def globalPos(self) -> PySide2.QtCore.QPoint: ...
    def globalPosF(self) -> PySide2.QtCore.QPointF: ...
    def globalX(self) -> int: ...
    def globalY(self) -> int: ...
    def hiResGlobalX(self) -> float: ...
    def hiResGlobalY(self) -> float: ...
    def pointerType(self) -> QTabletEvent.PointerType: ...
    def pos(self) -> PySide2.QtCore.QPoint: ...
    def posF(self) -> PySide2.QtCore.QPointF: ...
    def pressure(self) -> float: ...
    def rotation(self) -> float: ...
    def tangentialPressure(self) -> float: ...
    def uniqueId(self) -> int: ...
    def x(self) -> int: ...
    def xTilt(self) -> int: ...
    def y(self) -> int: ...
    def yTilt(self) -> int: ...
    def z(self) -> int: ...

class QTextBlock(shiboken2.Object):
    class iterator(shiboken2.Object):
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, o: QTextBlock.iterator) -> None: ...
        def atEnd(self) -> bool: ...
        def fragment(self) -> QTextFragment: ...
        def __copy__(self) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __iadd__(self, arg__1: int) -> QTextBlock.iterator: ...
        def __isub__(self, arg__1: int) -> QTextBlock.iterator: ...
        def __iter__(self) -> object: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __next__(self) -> object: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, o: QTextBlock) -> None: ...
    def begin(self) -> QTextBlock.iterator: ...
    def blockFormat(self) -> QTextBlockFormat: ...
    def blockFormatIndex(self) -> int: ...
    def blockNumber(self) -> int: ...
    def charFormat(self) -> QTextCharFormat: ...
    def charFormatIndex(self) -> int: ...
    def clearLayout(self) -> None: ...
    def contains(self, position: int) -> bool: ...
    def document(self) -> QTextDocument: ...
    def end(self) -> QTextBlock.iterator: ...
    def firstLineNumber(self) -> int: ...
    def fragmentIndex(self) -> int: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def layout(self) -> QTextLayout: ...
    def length(self) -> int: ...
    def lineCount(self) -> int: ...
    def next(self) -> QTextBlock: ...
    def position(self) -> int: ...
    def previous(self) -> QTextBlock: ...
    def revision(self) -> int: ...
    def setLineCount(self, count: int) -> None: ...
    def setRevision(self, rev: int) -> None: ...
    def setUserData(self, data: QTextBlockUserData) -> None: ...
    def setUserState(self, state: int) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def text(self) -> str: ...
    def textDirection(self) -> PySide2.QtCore.Qt.LayoutDirection: ...
    def textFormats(self) -> typing.List[QTextLayout.FormatRange]: ...
    def textList(self) -> QTextList: ...
    def userData(self) -> QTextBlockUserData: ...
    def userState(self) -> int: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iter__(self) -> object: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QTextBlockFormat(QTextFormat):
    class LineHeightTypes:
        FixedHeight: ClassVar[QTextBlockFormat.LineHeightTypes] = ...
        LineDistanceHeight: ClassVar[QTextBlockFormat.LineHeightTypes] = ...
        MinimumHeight: ClassVar[QTextBlockFormat.LineHeightTypes] = ...
        ProportionalHeight: ClassVar[QTextBlockFormat.LineHeightTypes] = ...
        SingleHeight: ClassVar[QTextBlockFormat.LineHeightTypes] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextBlockFormat.LineHeightTypes: ...
        def __and__(self, other: typing.SupportsInt) -> QTextBlockFormat.LineHeightTypes: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextBlockFormat.LineHeightTypes: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextBlockFormat.LineHeightTypes: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextBlockFormat.LineHeightTypes: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextBlockFormat.LineHeightTypes: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextBlockFormat.LineHeightTypes: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextBlockFormat.LineHeightTypes: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextBlockFormat.LineHeightTypes: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextBlockFormat.LineHeightTypes: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextBlockFormat.LineHeightTypes: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextBlockFormat.LineHeightTypes: ...

    class MarkerType:
        Checked: ClassVar[QTextBlockFormat.MarkerType] = ...
        NoMarker: ClassVar[QTextBlockFormat.MarkerType] = ...
        Unchecked: ClassVar[QTextBlockFormat.MarkerType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextBlockFormat.MarkerType: ...
        def __and__(self, other: typing.SupportsInt) -> QTextBlockFormat.MarkerType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextBlockFormat.MarkerType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextBlockFormat.MarkerType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextBlockFormat.MarkerType: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextBlockFormat.MarkerType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextBlockFormat.MarkerType: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextBlockFormat.MarkerType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextBlockFormat.MarkerType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextBlockFormat.MarkerType: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextBlockFormat.MarkerType: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextBlockFormat.MarkerType: ...
    FixedHeight: ClassVar[QTextBlockFormat.LineHeightTypes] = ...
    LineDistanceHeight: ClassVar[QTextBlockFormat.LineHeightTypes] = ...
    MinimumHeight: ClassVar[QTextBlockFormat.LineHeightTypes] = ...
    ProportionalHeight: ClassVar[QTextBlockFormat.LineHeightTypes] = ...
    SingleHeight: ClassVar[QTextBlockFormat.LineHeightTypes] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QTextBlockFormat: QTextBlockFormat) -> None: ...
    @overload
    def __init__(self, fmt: QTextFormat) -> None: ...
    def alignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def bottomMargin(self) -> float: ...
    def headingLevel(self) -> int: ...
    def indent(self) -> int: ...
    def isValid(self) -> bool: ...
    def leftMargin(self) -> float: ...
    @overload
    def lineHeight(self) -> float: ...
    @overload
    def lineHeight(self, scriptLineHeight: float, scaling: float) -> float: ...
    def lineHeightType(self) -> int: ...
    def marker(self) -> QTextBlockFormat.MarkerType: ...
    def nonBreakableLines(self) -> bool: ...
    def pageBreakPolicy(self) -> typing.Union[QTextFormat.PageBreakFlags,QTextFormat.PageBreakFlag]: ...
    def rightMargin(self) -> float: ...
    def setAlignment(self, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setBottomMargin(self, margin: float) -> None: ...
    def setHeadingLevel(self, alevel: int) -> None: ...
    def setIndent(self, indent: int) -> None: ...
    def setLeftMargin(self, margin: float) -> None: ...
    def setLineHeight(self, height: float, heightType: int) -> None: ...
    def setMarker(self, marker: QTextBlockFormat.MarkerType) -> None: ...
    def setNonBreakableLines(self, b: bool) -> None: ...
    def setPageBreakPolicy(self, flags: typing.Union[QTextFormat.PageBreakFlags,QTextFormat.PageBreakFlag]) -> None: ...
    def setRightMargin(self, margin: float) -> None: ...
    def setTabPositions(self, tabs: typing.Sequence[QTextOption.Tab]) -> None: ...
    def setTextIndent(self, aindent: float) -> None: ...
    def setTopMargin(self, margin: float) -> None: ...
    def tabPositions(self) -> typing.List[QTextOption.Tab]: ...
    def textIndent(self) -> float: ...
    def topMargin(self) -> float: ...
    def __copy__(self) -> None: ...

class QTextBlockGroup(QTextObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, doc: QTextDocument, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def blockFormatChanged(self, block: QTextBlock) -> None: ...
    def blockInserted(self, block: QTextBlock) -> None: ...
    def blockList(self) -> typing.List[QTextBlock]: ...
    def blockRemoved(self, block: QTextBlock) -> None: ...

class QTextBlockUserData(shiboken2.Object):
    def __init__(self) -> None: ...

class QTextCharFormat(QTextFormat):
    class FontPropertiesInheritanceBehavior:
        FontPropertiesAll: ClassVar[QTextCharFormat.FontPropertiesInheritanceBehavior] = ...
        FontPropertiesSpecifiedOnly: ClassVar[QTextCharFormat.FontPropertiesInheritanceBehavior] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextCharFormat.FontPropertiesInheritanceBehavior: ...
        def __and__(self, other: typing.SupportsInt) -> QTextCharFormat.FontPropertiesInheritanceBehavior: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextCharFormat.FontPropertiesInheritanceBehavior: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextCharFormat.FontPropertiesInheritanceBehavior: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextCharFormat.FontPropertiesInheritanceBehavior: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextCharFormat.FontPropertiesInheritanceBehavior: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextCharFormat.FontPropertiesInheritanceBehavior: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextCharFormat.FontPropertiesInheritanceBehavior: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextCharFormat.FontPropertiesInheritanceBehavior: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextCharFormat.FontPropertiesInheritanceBehavior: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextCharFormat.FontPropertiesInheritanceBehavior: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextCharFormat.FontPropertiesInheritanceBehavior: ...

    class UnderlineStyle:
        DashDotDotLine: ClassVar[QTextCharFormat.UnderlineStyle] = ...
        DashDotLine: ClassVar[QTextCharFormat.UnderlineStyle] = ...
        DashUnderline: ClassVar[QTextCharFormat.UnderlineStyle] = ...
        DotLine: ClassVar[QTextCharFormat.UnderlineStyle] = ...
        NoUnderline: ClassVar[QTextCharFormat.UnderlineStyle] = ...
        SingleUnderline: ClassVar[QTextCharFormat.UnderlineStyle] = ...
        SpellCheckUnderline: ClassVar[QTextCharFormat.UnderlineStyle] = ...
        WaveUnderline: ClassVar[QTextCharFormat.UnderlineStyle] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextCharFormat.UnderlineStyle: ...
        def __and__(self, other: typing.SupportsInt) -> QTextCharFormat.UnderlineStyle: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextCharFormat.UnderlineStyle: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextCharFormat.UnderlineStyle: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextCharFormat.UnderlineStyle: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextCharFormat.UnderlineStyle: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextCharFormat.UnderlineStyle: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextCharFormat.UnderlineStyle: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextCharFormat.UnderlineStyle: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextCharFormat.UnderlineStyle: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextCharFormat.UnderlineStyle: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextCharFormat.UnderlineStyle: ...

    class VerticalAlignment:
        AlignBaseline: ClassVar[QTextCharFormat.VerticalAlignment] = ...
        AlignBottom: ClassVar[QTextCharFormat.VerticalAlignment] = ...
        AlignMiddle: ClassVar[QTextCharFormat.VerticalAlignment] = ...
        AlignNormal: ClassVar[QTextCharFormat.VerticalAlignment] = ...
        AlignSubScript: ClassVar[QTextCharFormat.VerticalAlignment] = ...
        AlignSuperScript: ClassVar[QTextCharFormat.VerticalAlignment] = ...
        AlignTop: ClassVar[QTextCharFormat.VerticalAlignment] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextCharFormat.VerticalAlignment: ...
        def __and__(self, other: typing.SupportsInt) -> QTextCharFormat.VerticalAlignment: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextCharFormat.VerticalAlignment: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextCharFormat.VerticalAlignment: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextCharFormat.VerticalAlignment: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextCharFormat.VerticalAlignment: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextCharFormat.VerticalAlignment: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextCharFormat.VerticalAlignment: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextCharFormat.VerticalAlignment: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextCharFormat.VerticalAlignment: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextCharFormat.VerticalAlignment: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextCharFormat.VerticalAlignment: ...
    AlignBaseline: ClassVar[QTextCharFormat.VerticalAlignment] = ...
    AlignBottom: ClassVar[QTextCharFormat.VerticalAlignment] = ...
    AlignMiddle: ClassVar[QTextCharFormat.VerticalAlignment] = ...
    AlignNormal: ClassVar[QTextCharFormat.VerticalAlignment] = ...
    AlignSubScript: ClassVar[QTextCharFormat.VerticalAlignment] = ...
    AlignSuperScript: ClassVar[QTextCharFormat.VerticalAlignment] = ...
    AlignTop: ClassVar[QTextCharFormat.VerticalAlignment] = ...
    DashDotDotLine: ClassVar[QTextCharFormat.UnderlineStyle] = ...
    DashDotLine: ClassVar[QTextCharFormat.UnderlineStyle] = ...
    DashUnderline: ClassVar[QTextCharFormat.UnderlineStyle] = ...
    DotLine: ClassVar[QTextCharFormat.UnderlineStyle] = ...
    FontPropertiesAll: ClassVar[QTextCharFormat.FontPropertiesInheritanceBehavior] = ...
    FontPropertiesSpecifiedOnly: ClassVar[QTextCharFormat.FontPropertiesInheritanceBehavior] = ...
    NoUnderline: ClassVar[QTextCharFormat.UnderlineStyle] = ...
    SingleUnderline: ClassVar[QTextCharFormat.UnderlineStyle] = ...
    SpellCheckUnderline: ClassVar[QTextCharFormat.UnderlineStyle] = ...
    WaveUnderline: ClassVar[QTextCharFormat.UnderlineStyle] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QTextCharFormat: QTextCharFormat) -> None: ...
    @overload
    def __init__(self, fmt: QTextFormat) -> None: ...
    def anchorHref(self) -> str: ...
    def anchorName(self) -> str: ...
    def anchorNames(self) -> typing.List[str]: ...
    def font(self) -> QFont: ...
    def fontCapitalization(self) -> QFont.Capitalization: ...
    def fontFamilies(self) -> typing.Any: ...
    def fontFamily(self) -> str: ...
    def fontFixedPitch(self) -> bool: ...
    def fontHintingPreference(self) -> QFont.HintingPreference: ...
    def fontItalic(self) -> bool: ...
    def fontKerning(self) -> bool: ...
    def fontLetterSpacing(self) -> float: ...
    def fontLetterSpacingType(self) -> QFont.SpacingType: ...
    def fontOverline(self) -> bool: ...
    def fontPointSize(self) -> float: ...
    def fontStretch(self) -> int: ...
    def fontStrikeOut(self) -> bool: ...
    def fontStyleHint(self) -> QFont.StyleHint: ...
    def fontStyleName(self) -> typing.Any: ...
    def fontStyleStrategy(self) -> QFont.StyleStrategy: ...
    def fontUnderline(self) -> bool: ...
    def fontWeight(self) -> int: ...
    def fontWordSpacing(self) -> float: ...
    def isAnchor(self) -> bool: ...
    def isValid(self) -> bool: ...
    def setAnchor(self, anchor: bool) -> None: ...
    def setAnchorHref(self, value: str) -> None: ...
    def setAnchorName(self, name: str) -> None: ...
    def setAnchorNames(self, names: typing.Sequence[str]) -> None: ...
    @overload
    def setFont(self, font: QFont) -> None: ...
    @overload
    def setFont(self, font: QFont, behavior: QTextCharFormat.FontPropertiesInheritanceBehavior) -> None: ...
    def setFontCapitalization(self, capitalization: QFont.Capitalization) -> None: ...
    def setFontFamilies(self, families: typing.Sequence[str]) -> None: ...
    def setFontFamily(self, family: str) -> None: ...
    def setFontFixedPitch(self, fixedPitch: bool) -> None: ...
    def setFontHintingPreference(self, hintingPreference: QFont.HintingPreference) -> None: ...
    def setFontItalic(self, italic: bool) -> None: ...
    def setFontKerning(self, enable: bool) -> None: ...
    def setFontLetterSpacing(self, spacing: float) -> None: ...
    def setFontLetterSpacingType(self, letterSpacingType: QFont.SpacingType) -> None: ...
    def setFontOverline(self, overline: bool) -> None: ...
    def setFontPointSize(self, size: float) -> None: ...
    def setFontStretch(self, factor: int) -> None: ...
    def setFontStrikeOut(self, strikeOut: bool) -> None: ...
    def setFontStyleHint(self, hint: QFont.StyleHint, strategy: QFont.StyleStrategy = ...) -> None: ...
    def setFontStyleName(self, styleName: str) -> None: ...
    def setFontStyleStrategy(self, strategy: QFont.StyleStrategy) -> None: ...
    def setFontUnderline(self, underline: bool) -> None: ...
    def setFontWeight(self, weight: typing.SupportsInt) -> None: ...
    def setFontWordSpacing(self, spacing: float) -> None: ...
    def setTableCellColumnSpan(self, tableCellColumnSpan: int) -> None: ...
    def setTableCellRowSpan(self, tableCellRowSpan: int) -> None: ...
    def setTextOutline(self, pen: QPen) -> None: ...
    def setToolTip(self, tip: str) -> None: ...
    def setUnderlineColor(self, color: typing.Union[QColor,PySide2.QtCore.Qt.GlobalColor]) -> None: ...
    def setUnderlineStyle(self, style: QTextCharFormat.UnderlineStyle) -> None: ...
    def setVerticalAlignment(self, alignment: QTextCharFormat.VerticalAlignment) -> None: ...
    def tableCellColumnSpan(self) -> int: ...
    def tableCellRowSpan(self) -> int: ...
    def textOutline(self) -> QPen: ...
    def toolTip(self) -> str: ...
    def underlineColor(self) -> QColor: ...
    def underlineStyle(self) -> QTextCharFormat.UnderlineStyle: ...
    def verticalAlignment(self) -> QTextCharFormat.VerticalAlignment: ...
    def __copy__(self) -> None: ...

class QTextCursor(shiboken2.Object):
    class MoveMode:
        KeepAnchor: ClassVar[QTextCursor.MoveMode] = ...
        MoveAnchor: ClassVar[QTextCursor.MoveMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextCursor.MoveMode: ...
        def __and__(self, other: typing.SupportsInt) -> QTextCursor.MoveMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextCursor.MoveMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextCursor.MoveMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextCursor.MoveMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextCursor.MoveMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextCursor.MoveMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextCursor.MoveMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextCursor.MoveMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextCursor.MoveMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextCursor.MoveMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextCursor.MoveMode: ...

    class MoveOperation:
        Down: ClassVar[QTextCursor.MoveOperation] = ...
        End: ClassVar[QTextCursor.MoveOperation] = ...
        EndOfBlock: ClassVar[QTextCursor.MoveOperation] = ...
        EndOfLine: ClassVar[QTextCursor.MoveOperation] = ...
        EndOfWord: ClassVar[QTextCursor.MoveOperation] = ...
        Left: ClassVar[QTextCursor.MoveOperation] = ...
        NextBlock: ClassVar[QTextCursor.MoveOperation] = ...
        NextCell: ClassVar[QTextCursor.MoveOperation] = ...
        NextCharacter: ClassVar[QTextCursor.MoveOperation] = ...
        NextRow: ClassVar[QTextCursor.MoveOperation] = ...
        NextWord: ClassVar[QTextCursor.MoveOperation] = ...
        NoMove: ClassVar[QTextCursor.MoveOperation] = ...
        PreviousBlock: ClassVar[QTextCursor.MoveOperation] = ...
        PreviousCell: ClassVar[QTextCursor.MoveOperation] = ...
        PreviousCharacter: ClassVar[QTextCursor.MoveOperation] = ...
        PreviousRow: ClassVar[QTextCursor.MoveOperation] = ...
        PreviousWord: ClassVar[QTextCursor.MoveOperation] = ...
        Right: ClassVar[QTextCursor.MoveOperation] = ...
        Start: ClassVar[QTextCursor.MoveOperation] = ...
        StartOfBlock: ClassVar[QTextCursor.MoveOperation] = ...
        StartOfLine: ClassVar[QTextCursor.MoveOperation] = ...
        StartOfWord: ClassVar[QTextCursor.MoveOperation] = ...
        Up: ClassVar[QTextCursor.MoveOperation] = ...
        WordLeft: ClassVar[QTextCursor.MoveOperation] = ...
        WordRight: ClassVar[QTextCursor.MoveOperation] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextCursor.MoveOperation: ...
        def __and__(self, other: typing.SupportsInt) -> QTextCursor.MoveOperation: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextCursor.MoveOperation: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextCursor.MoveOperation: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextCursor.MoveOperation: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextCursor.MoveOperation: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextCursor.MoveOperation: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextCursor.MoveOperation: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextCursor.MoveOperation: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextCursor.MoveOperation: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextCursor.MoveOperation: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextCursor.MoveOperation: ...

    class SelectionType:
        BlockUnderCursor: ClassVar[QTextCursor.SelectionType] = ...
        Document: ClassVar[QTextCursor.SelectionType] = ...
        LineUnderCursor: ClassVar[QTextCursor.SelectionType] = ...
        WordUnderCursor: ClassVar[QTextCursor.SelectionType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextCursor.SelectionType: ...
        def __and__(self, other: typing.SupportsInt) -> QTextCursor.SelectionType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextCursor.SelectionType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextCursor.SelectionType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextCursor.SelectionType: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextCursor.SelectionType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextCursor.SelectionType: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextCursor.SelectionType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextCursor.SelectionType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextCursor.SelectionType: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextCursor.SelectionType: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextCursor.SelectionType: ...
    BlockUnderCursor: ClassVar[QTextCursor.SelectionType] = ...
    Document: ClassVar[QTextCursor.SelectionType] = ...
    Down: ClassVar[QTextCursor.MoveOperation] = ...
    End: ClassVar[QTextCursor.MoveOperation] = ...
    EndOfBlock: ClassVar[QTextCursor.MoveOperation] = ...
    EndOfLine: ClassVar[QTextCursor.MoveOperation] = ...
    EndOfWord: ClassVar[QTextCursor.MoveOperation] = ...
    KeepAnchor: ClassVar[QTextCursor.MoveMode] = ...
    Left: ClassVar[QTextCursor.MoveOperation] = ...
    LineUnderCursor: ClassVar[QTextCursor.SelectionType] = ...
    MoveAnchor: ClassVar[QTextCursor.MoveMode] = ...
    NextBlock: ClassVar[QTextCursor.MoveOperation] = ...
    NextCell: ClassVar[QTextCursor.MoveOperation] = ...
    NextCharacter: ClassVar[QTextCursor.MoveOperation] = ...
    NextRow: ClassVar[QTextCursor.MoveOperation] = ...
    NextWord: ClassVar[QTextCursor.MoveOperation] = ...
    NoMove: ClassVar[QTextCursor.MoveOperation] = ...
    PreviousBlock: ClassVar[QTextCursor.MoveOperation] = ...
    PreviousCell: ClassVar[QTextCursor.MoveOperation] = ...
    PreviousCharacter: ClassVar[QTextCursor.MoveOperation] = ...
    PreviousRow: ClassVar[QTextCursor.MoveOperation] = ...
    PreviousWord: ClassVar[QTextCursor.MoveOperation] = ...
    Right: ClassVar[QTextCursor.MoveOperation] = ...
    Start: ClassVar[QTextCursor.MoveOperation] = ...
    StartOfBlock: ClassVar[QTextCursor.MoveOperation] = ...
    StartOfLine: ClassVar[QTextCursor.MoveOperation] = ...
    StartOfWord: ClassVar[QTextCursor.MoveOperation] = ...
    Up: ClassVar[QTextCursor.MoveOperation] = ...
    WordLeft: ClassVar[QTextCursor.MoveOperation] = ...
    WordRight: ClassVar[QTextCursor.MoveOperation] = ...
    WordUnderCursor: ClassVar[QTextCursor.SelectionType] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, block: QTextBlock) -> None: ...
    @overload
    def __init__(self, cursor: QTextCursor) -> None: ...
    @overload
    def __init__(self, document: QTextDocument) -> None: ...
    @overload
    def __init__(self, frame: QTextFrame) -> None: ...
    def anchor(self) -> int: ...
    def atBlockEnd(self) -> bool: ...
    def atBlockStart(self) -> bool: ...
    def atEnd(self) -> bool: ...
    def atStart(self) -> bool: ...
    def beginEditBlock(self) -> None: ...
    def block(self) -> QTextBlock: ...
    def blockCharFormat(self) -> QTextCharFormat: ...
    def blockFormat(self) -> QTextBlockFormat: ...
    def blockNumber(self) -> int: ...
    def charFormat(self) -> QTextCharFormat: ...
    def clearSelection(self) -> None: ...
    def columnNumber(self) -> int: ...
    @overload
    def createList(self, format: QTextListFormat) -> QTextList: ...
    @overload
    def createList(self, style: QTextListFormat.Style) -> QTextList: ...
    def currentFrame(self) -> QTextFrame: ...
    def currentList(self) -> QTextList: ...
    def currentTable(self) -> QTextTable: ...
    def deleteChar(self) -> None: ...
    def deletePreviousChar(self) -> None: ...
    def document(self) -> QTextDocument: ...
    def endEditBlock(self) -> None: ...
    def hasComplexSelection(self) -> bool: ...
    def hasSelection(self) -> bool: ...
    @overload
    def insertBlock(self) -> None: ...
    @overload
    def insertBlock(self, format: QTextBlockFormat) -> None: ...
    @overload
    def insertBlock(self, format: QTextBlockFormat, charFormat: QTextCharFormat) -> None: ...
    def insertFragment(self, fragment: QTextDocumentFragment) -> None: ...
    def insertFrame(self, format: QTextFrameFormat) -> QTextFrame: ...
    def insertHtml(self, html: str) -> None: ...
    @overload
    def insertImage(self, format: QTextImageFormat) -> None: ...
    @overload
    def insertImage(self, format: QTextImageFormat, alignment: QTextFrameFormat.Position) -> None: ...
    @overload
    def insertImage(self, image: QImage, name: str = ...) -> None: ...
    @overload
    def insertImage(self, name: str) -> None: ...
    @overload
    def insertList(self, format: QTextListFormat) -> QTextList: ...
    @overload
    def insertList(self, style: QTextListFormat.Style) -> QTextList: ...
    @overload
    def insertTable(self, rows: int, cols: int) -> QTextTable: ...
    @overload
    def insertTable(self, rows: int, cols: int, format: QTextTableFormat) -> QTextTable: ...
    @overload
    def insertText(self, text: str) -> None: ...
    @overload
    def insertText(self, text: str, format: QTextCharFormat) -> None: ...
    def isCopyOf(self, other: QTextCursor) -> bool: ...
    def isNull(self) -> bool: ...
    def joinPreviousEditBlock(self) -> None: ...
    def keepPositionOnInsert(self) -> bool: ...
    def mergeBlockCharFormat(self, modifier: QTextCharFormat) -> None: ...
    def mergeBlockFormat(self, modifier: QTextBlockFormat) -> None: ...
    def mergeCharFormat(self, modifier: QTextCharFormat) -> None: ...
    def movePosition(self, op: QTextCursor.MoveOperation, arg__2: QTextCursor.MoveMode = ..., n: int = ...) -> bool: ...
    def position(self) -> int: ...
    def positionInBlock(self) -> int: ...
    def removeSelectedText(self) -> None: ...
    def select(self, selection: QTextCursor.SelectionType) -> None: ...
    def selectedTableCells(self) -> typing.Tuple[int,int,int,int]: ...
    def selectedText(self) -> str: ...
    def selection(self) -> QTextDocumentFragment: ...
    def selectionEnd(self) -> int: ...
    def selectionStart(self) -> int: ...
    def setBlockCharFormat(self, format: QTextCharFormat) -> None: ...
    def setBlockFormat(self, format: QTextBlockFormat) -> None: ...
    def setCharFormat(self, format: QTextCharFormat) -> None: ...
    def setKeepPositionOnInsert(self, b: bool) -> None: ...
    def setPosition(self, pos: int, mode: QTextCursor.MoveMode = ...) -> None: ...
    def setVerticalMovementX(self, x: int) -> None: ...
    def setVisualNavigation(self, b: bool) -> None: ...
    def swap(self, other: QTextCursor) -> None: ...
    def verticalMovementX(self) -> int: ...
    def visualNavigation(self) -> bool: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QTextDocument(PySide2.QtCore.QObject):
    class FindFlag:
        FindBackward: ClassVar[QTextDocument.FindFlag] = ...
        FindCaseSensitively: ClassVar[QTextDocument.FindFlag] = ...
        FindWholeWords: ClassVar[QTextDocument.FindFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTextDocument.FindFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTextDocument.FindFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextDocument.FindFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextDocument.FindFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextDocument.FindFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextDocument.FindFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextDocument.FindFlags: ...

    class FindFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTextDocument.FindFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTextDocument.FindFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextDocument.FindFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextDocument.FindFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextDocument.FindFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextDocument.FindFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextDocument.FindFlags: ...

    class MarkdownFeature:
        MarkdownDialectCommonMark: ClassVar[QTextDocument.MarkdownFeature] = ...
        MarkdownDialectGitHub: ClassVar[QTextDocument.MarkdownFeature] = ...
        MarkdownNoHTML: ClassVar[QTextDocument.MarkdownFeature] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTextDocument.MarkdownFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTextDocument.MarkdownFeature: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextDocument.MarkdownFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextDocument.MarkdownFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextDocument.MarkdownFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextDocument.MarkdownFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextDocument.MarkdownFeatures: ...

    class MarkdownFeatures:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTextDocument.MarkdownFeatures: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTextDocument.MarkdownFeatures: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextDocument.MarkdownFeatures: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextDocument.MarkdownFeatures: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextDocument.MarkdownFeatures: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextDocument.MarkdownFeatures: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextDocument.MarkdownFeatures: ...

    class MetaInformation:
        DocumentTitle: ClassVar[QTextDocument.MetaInformation] = ...
        DocumentUrl: ClassVar[QTextDocument.MetaInformation] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextDocument.MetaInformation: ...
        def __and__(self, other: typing.SupportsInt) -> QTextDocument.MetaInformation: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextDocument.MetaInformation: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextDocument.MetaInformation: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextDocument.MetaInformation: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextDocument.MetaInformation: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextDocument.MetaInformation: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextDocument.MetaInformation: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextDocument.MetaInformation: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextDocument.MetaInformation: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextDocument.MetaInformation: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextDocument.MetaInformation: ...

    class ResourceType:
        HtmlResource: ClassVar[QTextDocument.ResourceType] = ...
        ImageResource: ClassVar[QTextDocument.ResourceType] = ...
        MarkdownResource: ClassVar[QTextDocument.ResourceType] = ...
        StyleSheetResource: ClassVar[QTextDocument.ResourceType] = ...
        UnknownResource: ClassVar[QTextDocument.ResourceType] = ...
        UserResource: ClassVar[QTextDocument.ResourceType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextDocument.ResourceType: ...
        def __and__(self, other: typing.SupportsInt) -> QTextDocument.ResourceType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextDocument.ResourceType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextDocument.ResourceType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextDocument.ResourceType: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextDocument.ResourceType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextDocument.ResourceType: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextDocument.ResourceType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextDocument.ResourceType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextDocument.ResourceType: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextDocument.ResourceType: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextDocument.ResourceType: ...

    class Stacks:
        RedoStack: ClassVar[QTextDocument.Stacks] = ...
        UndoAndRedoStacks: ClassVar[QTextDocument.Stacks] = ...
        UndoStack: ClassVar[QTextDocument.Stacks] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextDocument.Stacks: ...
        def __and__(self, other: typing.SupportsInt) -> QTextDocument.Stacks: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextDocument.Stacks: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextDocument.Stacks: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextDocument.Stacks: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextDocument.Stacks: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextDocument.Stacks: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextDocument.Stacks: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextDocument.Stacks: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextDocument.Stacks: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextDocument.Stacks: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextDocument.Stacks: ...
    DocumentTitle: ClassVar[QTextDocument.MetaInformation] = ...
    DocumentUrl: ClassVar[QTextDocument.MetaInformation] = ...
    FindBackward: ClassVar[QTextDocument.FindFlag] = ...
    FindCaseSensitively: ClassVar[QTextDocument.FindFlag] = ...
    FindWholeWords: ClassVar[QTextDocument.FindFlag] = ...
    HtmlResource: ClassVar[QTextDocument.ResourceType] = ...
    ImageResource: ClassVar[QTextDocument.ResourceType] = ...
    MarkdownDialectCommonMark: ClassVar[QTextDocument.MarkdownFeature] = ...
    MarkdownDialectGitHub: ClassVar[QTextDocument.MarkdownFeature] = ...
    MarkdownNoHTML: ClassVar[QTextDocument.MarkdownFeature] = ...
    MarkdownResource: ClassVar[QTextDocument.ResourceType] = ...
    RedoStack: ClassVar[QTextDocument.Stacks] = ...
    StyleSheetResource: ClassVar[QTextDocument.ResourceType] = ...
    UndoAndRedoStacks: ClassVar[QTextDocument.Stacks] = ...
    UndoStack: ClassVar[QTextDocument.Stacks] = ...
    UnknownResource: ClassVar[QTextDocument.ResourceType] = ...
    UserResource: ClassVar[QTextDocument.ResourceType] = ...
    baseUrlChanged: ClassVar[PySide2.QtCore.Signal] = ...
    blockCountChanged: ClassVar[PySide2.QtCore.Signal] = ...
    contentsChange: ClassVar[PySide2.QtCore.Signal] = ...
    contentsChanged: ClassVar[PySide2.QtCore.Signal] = ...
    cursorPositionChanged: ClassVar[PySide2.QtCore.Signal] = ...
    documentLayoutChanged: ClassVar[PySide2.QtCore.Signal] = ...
    modificationChanged: ClassVar[PySide2.QtCore.Signal] = ...
    redoAvailable: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    undoAvailable: ClassVar[PySide2.QtCore.Signal] = ...
    undoCommandAdded: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., baseUrl: PySide2.QtCore.QUrl = ..., baseUrlChanged: typing.Callable = ..., blockCount: int = ..., blockCountChanged: typing.Callable = ..., contentsChange: typing.Callable = ..., contentsChanged: typing.Callable = ..., cursorPositionChanged: typing.Callable = ..., defaultFont: QFont = ..., defaultStyleSheet: str = ..., destroyed: typing.Callable = ..., documentLayoutChanged: typing.Callable = ..., documentMargin: float = ..., indentWidth: float = ..., maximumBlockCount: int = ..., modificationChanged: typing.Callable = ..., modified: bool = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., pageSize: PySide2.QtCore.QSizeF = ..., redoAvailable: typing.Callable = ..., size: PySide2.QtCore.QSizeF = ..., textWidth: float = ..., undoAvailable: typing.Callable = ..., undoCommandAdded: typing.Callable = ..., undoRedoEnabled: bool = ..., useDesignMetrics: bool = ...) -> None: ...
    @overload
    def __init__(self, text: str, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., baseUrl: PySide2.QtCore.QUrl = ..., baseUrlChanged: typing.Callable = ..., blockCount: int = ..., blockCountChanged: typing.Callable = ..., contentsChange: typing.Callable = ..., contentsChanged: typing.Callable = ..., cursorPositionChanged: typing.Callable = ..., defaultFont: QFont = ..., defaultStyleSheet: str = ..., destroyed: typing.Callable = ..., documentLayoutChanged: typing.Callable = ..., documentMargin: float = ..., indentWidth: float = ..., maximumBlockCount: int = ..., modificationChanged: typing.Callable = ..., modified: bool = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., pageSize: PySide2.QtCore.QSizeF = ..., redoAvailable: typing.Callable = ..., size: PySide2.QtCore.QSizeF = ..., textWidth: float = ..., undoAvailable: typing.Callable = ..., undoCommandAdded: typing.Callable = ..., undoRedoEnabled: bool = ..., useDesignMetrics: bool = ...) -> None: ...
    def addResource(self, type: int, name: PySide2.QtCore.QUrl, resource: typing.Any) -> None: ...
    def adjustSize(self) -> None: ...
    def allFormats(self) -> typing.List[QTextFormat]: ...
    def availableRedoSteps(self) -> int: ...
    def availableUndoSteps(self) -> int: ...
    def baseUrl(self) -> PySide2.QtCore.QUrl: ...
    def begin(self) -> QTextBlock: ...
    def blockCount(self) -> int: ...
    def characterAt(self, pos: int) -> str: ...
    def characterCount(self) -> int: ...
    def clear(self) -> None: ...
    def clearUndoRedoStacks(self, historyToClear: QTextDocument.Stacks = ...) -> None: ...
    def clone(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ...) -> QTextDocument: ...
    def createObject(self, f: QTextFormat) -> QTextObject: ...
    def defaultCursorMoveStyle(self) -> PySide2.QtCore.Qt.CursorMoveStyle: ...
    def defaultFont(self) -> QFont: ...
    def defaultStyleSheet(self) -> str: ...
    def defaultTextOption(self) -> QTextOption: ...
    def documentLayout(self) -> QAbstractTextDocumentLayout: ...
    def documentMargin(self) -> float: ...
    def drawContents(self, painter: QPainter, rect: PySide2.QtCore.QRectF = ...) -> None: ...
    def end(self) -> QTextBlock: ...
    @overload
    def find(self, expr: PySide2.QtCore.QRegExp, cursor: QTextCursor, options: typing.Union[QTextDocument.FindFlags,QTextDocument.FindFlag] = ...) -> QTextCursor: ...
    @overload
    def find(self, expr: PySide2.QtCore.QRegExp, from_: int = ..., options: typing.Union[QTextDocument.FindFlags,QTextDocument.FindFlag] = ...) -> QTextCursor: ...
    @overload
    def find(self, expr: PySide2.QtCore.QRegularExpression, cursor: QTextCursor, options: typing.Union[QTextDocument.FindFlags,QTextDocument.FindFlag] = ...) -> QTextCursor: ...
    @overload
    def find(self, expr: PySide2.QtCore.QRegularExpression, from_: int = ..., options: typing.Union[QTextDocument.FindFlags,QTextDocument.FindFlag] = ...) -> QTextCursor: ...
    @overload
    def find(self, subString: str, cursor: QTextCursor, options: typing.Union[QTextDocument.FindFlags,QTextDocument.FindFlag] = ...) -> QTextCursor: ...
    @overload
    def find(self, subString: str, from_: int = ..., options: typing.Union[QTextDocument.FindFlags,QTextDocument.FindFlag] = ...) -> QTextCursor: ...
    def findBlock(self, pos: int) -> QTextBlock: ...
    def findBlockByLineNumber(self, blockNumber: int) -> QTextBlock: ...
    def findBlockByNumber(self, blockNumber: int) -> QTextBlock: ...
    def firstBlock(self) -> QTextBlock: ...
    def frameAt(self, pos: int) -> QTextFrame: ...
    def idealWidth(self) -> float: ...
    def indentWidth(self) -> float: ...
    def isEmpty(self) -> bool: ...
    def isModified(self) -> bool: ...
    def isRedoAvailable(self) -> bool: ...
    def isUndoAvailable(self) -> bool: ...
    def isUndoRedoEnabled(self) -> bool: ...
    def lastBlock(self) -> QTextBlock: ...
    def lineCount(self) -> int: ...
    def loadResource(self, type: int, name: PySide2.QtCore.QUrl) -> typing.Any: ...
    def markContentsDirty(self, from_: int, length: int) -> None: ...
    def maximumBlockCount(self) -> int: ...
    def metaInformation(self, info: QTextDocument.MetaInformation) -> str: ...
    def object(self, objectIndex: int) -> QTextObject: ...
    def objectForFormat(self, arg__1: QTextFormat) -> QTextObject: ...
    def pageCount(self) -> int: ...
    def pageSize(self) -> PySide2.QtCore.QSizeF: ...
    def print_(self, printer: QPagedPaintDevice) -> None: ...
    @overload
    def redo(self) -> None: ...
    @overload
    def redo(self, cursor: QTextCursor) -> None: ...
    def resource(self, type: int, name: PySide2.QtCore.QUrl) -> typing.Any: ...
    def revision(self) -> int: ...
    def rootFrame(self) -> QTextFrame: ...
    def setBaseUrl(self, url: PySide2.QtCore.QUrl) -> None: ...
    def setDefaultCursorMoveStyle(self, style: PySide2.QtCore.Qt.CursorMoveStyle) -> None: ...
    def setDefaultFont(self, font: QFont) -> None: ...
    def setDefaultStyleSheet(self, sheet: str) -> None: ...
    def setDefaultTextOption(self, option: QTextOption) -> None: ...
    def setDocumentLayout(self, layout: QAbstractTextDocumentLayout) -> None: ...
    def setDocumentMargin(self, margin: float) -> None: ...
    def setHtml(self, html: str) -> None: ...
    def setIndentWidth(self, width: float) -> None: ...
    def setMarkdown(self, markdown: str, features: typing.Union[QTextDocument.MarkdownFeatures,QTextDocument.MarkdownFeature] = ...) -> None: ...
    def setMaximumBlockCount(self, maximum: int) -> None: ...
    def setMetaInformation(self, info: QTextDocument.MetaInformation, arg__2: str) -> None: ...
    def setModified(self, m: bool = ...) -> None: ...
    def setPageSize(self, size: PySide2.QtCore.QSizeF) -> None: ...
    def setPlainText(self, text: str) -> None: ...
    def setTextWidth(self, width: float) -> None: ...
    def setUndoRedoEnabled(self, enable: bool) -> None: ...
    def setUseDesignMetrics(self, b: bool) -> None: ...
    def size(self) -> PySide2.QtCore.QSizeF: ...
    def textWidth(self) -> float: ...
    def toHtml(self, encoding: typing.Union[PySide2.QtCore.QByteArray,bytes] = ...) -> str: ...
    def toMarkdown(self, features: typing.Union[QTextDocument.MarkdownFeatures,QTextDocument.MarkdownFeature] = ...) -> str: ...
    def toPlainText(self) -> str: ...
    def toRawText(self) -> str: ...
    @overload
    def undo(self) -> None: ...
    @overload
    def undo(self, cursor: QTextCursor) -> None: ...
    def useDesignMetrics(self) -> bool: ...

class QTextDocumentFragment(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, document: QTextDocument) -> None: ...
    @overload
    def __init__(self, range: QTextCursor) -> None: ...
    @overload
    def __init__(self, rhs: QTextDocumentFragment) -> None: ...
    @classmethod
    @overload
    def fromHtml(cls, html: str) -> QTextDocumentFragment: ...
    @classmethod
    @overload
    def fromHtml(cls, html: str, resourceProvider: QTextDocument) -> QTextDocumentFragment: ...
    @classmethod
    def fromPlainText(cls, plainText: str) -> QTextDocumentFragment: ...
    def isEmpty(self) -> bool: ...
    def toHtml(self, encoding: typing.Union[PySide2.QtCore.QByteArray,bytes] = ...) -> str: ...
    def toPlainText(self) -> str: ...
    def __copy__(self) -> None: ...

class QTextDocumentWriter(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, device: PySide2.QtCore.QIODevice, format: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    @overload
    def __init__(self, fileName: str, format: typing.Union[PySide2.QtCore.QByteArray,bytes] = ...) -> None: ...
    def codec(self) -> PySide2.QtCore.QTextCodec: ...
    def device(self) -> PySide2.QtCore.QIODevice: ...
    def fileName(self) -> str: ...
    def format(self) -> PySide2.QtCore.QByteArray: ...
    def setCodec(self, codec: PySide2.QtCore.QTextCodec) -> None: ...
    def setDevice(self, device: PySide2.QtCore.QIODevice) -> None: ...
    def setFileName(self, fileName: str) -> None: ...
    def setFormat(self, format: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> None: ...
    @classmethod
    def supportedDocumentFormats(cls) -> typing.List[PySide2.QtCore.QByteArray]: ...
    @overload
    def write(self, document: QTextDocument) -> bool: ...
    @overload
    def write(self, fragment: QTextDocumentFragment) -> bool: ...

class QTextFormat(shiboken2.Object):
    class FormatType:
        BlockFormat: ClassVar[QTextFormat.FormatType] = ...
        CharFormat: ClassVar[QTextFormat.FormatType] = ...
        FrameFormat: ClassVar[QTextFormat.FormatType] = ...
        InvalidFormat: ClassVar[QTextFormat.FormatType] = ...
        ListFormat: ClassVar[QTextFormat.FormatType] = ...
        TableFormat: ClassVar[QTextFormat.FormatType] = ...
        UserFormat: ClassVar[QTextFormat.FormatType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextFormat.FormatType: ...
        def __and__(self, other: typing.SupportsInt) -> QTextFormat.FormatType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextFormat.FormatType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextFormat.FormatType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextFormat.FormatType: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextFormat.FormatType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextFormat.FormatType: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextFormat.FormatType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextFormat.FormatType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextFormat.FormatType: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextFormat.FormatType: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextFormat.FormatType: ...

    class ObjectTypes:
        ImageObject: ClassVar[QTextFormat.ObjectTypes] = ...
        NoObject: ClassVar[QTextFormat.ObjectTypes] = ...
        TableCellObject: ClassVar[QTextFormat.ObjectTypes] = ...
        TableObject: ClassVar[QTextFormat.ObjectTypes] = ...
        UserObject: ClassVar[QTextFormat.ObjectTypes] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextFormat.ObjectTypes: ...
        def __and__(self, other: typing.SupportsInt) -> QTextFormat.ObjectTypes: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextFormat.ObjectTypes: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextFormat.ObjectTypes: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextFormat.ObjectTypes: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextFormat.ObjectTypes: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextFormat.ObjectTypes: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextFormat.ObjectTypes: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextFormat.ObjectTypes: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextFormat.ObjectTypes: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextFormat.ObjectTypes: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextFormat.ObjectTypes: ...

    class PageBreakFlag:
        PageBreak_AlwaysAfter: ClassVar[QTextFormat.PageBreakFlag] = ...
        PageBreak_AlwaysBefore: ClassVar[QTextFormat.PageBreakFlag] = ...
        PageBreak_Auto: ClassVar[QTextFormat.PageBreakFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTextFormat.PageBreakFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTextFormat.PageBreakFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextFormat.PageBreakFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextFormat.PageBreakFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextFormat.PageBreakFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextFormat.PageBreakFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextFormat.PageBreakFlags: ...

    class PageBreakFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTextFormat.PageBreakFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTextFormat.PageBreakFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextFormat.PageBreakFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextFormat.PageBreakFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextFormat.PageBreakFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextFormat.PageBreakFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextFormat.PageBreakFlags: ...

    class Property:
        AnchorHref: ClassVar[QTextFormat.Property] = ...
        AnchorName: ClassVar[QTextFormat.Property] = ...
        BackgroundBrush: ClassVar[QTextFormat.Property] = ...
        BackgroundImageUrl: ClassVar[QTextFormat.Property] = ...
        BlockAlignment: ClassVar[QTextFormat.Property] = ...
        BlockBottomMargin: ClassVar[QTextFormat.Property] = ...
        BlockCodeFence: ClassVar[QTextFormat.Property] = ...
        BlockCodeLanguage: ClassVar[QTextFormat.Property] = ...
        BlockIndent: ClassVar[QTextFormat.Property] = ...
        BlockLeftMargin: ClassVar[QTextFormat.Property] = ...
        BlockMarker: ClassVar[QTextFormat.Property] = ...
        BlockNonBreakableLines: ClassVar[QTextFormat.Property] = ...
        BlockQuoteLevel: ClassVar[QTextFormat.Property] = ...
        BlockRightMargin: ClassVar[QTextFormat.Property] = ...
        BlockTopMargin: ClassVar[QTextFormat.Property] = ...
        BlockTrailingHorizontalRulerWidth: ClassVar[QTextFormat.Property] = ...
        CssFloat: ClassVar[QTextFormat.Property] = ...
        FirstFontProperty: ClassVar[QTextFormat.Property] = ...
        FontCapitalization: ClassVar[QTextFormat.Property] = ...
        FontFamilies: ClassVar[QTextFormat.Property] = ...
        FontFamily: ClassVar[QTextFormat.Property] = ...
        FontFixedPitch: ClassVar[QTextFormat.Property] = ...
        FontHintingPreference: ClassVar[QTextFormat.Property] = ...
        FontItalic: ClassVar[QTextFormat.Property] = ...
        FontKerning: ClassVar[QTextFormat.Property] = ...
        FontLetterSpacing: ClassVar[QTextFormat.Property] = ...
        FontLetterSpacingType: ClassVar[QTextFormat.Property] = ...
        FontOverline: ClassVar[QTextFormat.Property] = ...
        FontPixelSize: ClassVar[QTextFormat.Property] = ...
        FontPointSize: ClassVar[QTextFormat.Property] = ...
        FontSizeAdjustment: ClassVar[QTextFormat.Property] = ...
        FontSizeIncrement: ClassVar[QTextFormat.Property] = ...
        FontStretch: ClassVar[QTextFormat.Property] = ...
        FontStrikeOut: ClassVar[QTextFormat.Property] = ...
        FontStyleHint: ClassVar[QTextFormat.Property] = ...
        FontStyleName: ClassVar[QTextFormat.Property] = ...
        FontStyleStrategy: ClassVar[QTextFormat.Property] = ...
        FontUnderline: ClassVar[QTextFormat.Property] = ...
        FontWeight: ClassVar[QTextFormat.Property] = ...
        FontWordSpacing: ClassVar[QTextFormat.Property] = ...
        ForegroundBrush: ClassVar[QTextFormat.Property] = ...
        FrameBorder: ClassVar[QTextFormat.Property] = ...
        FrameBorderBrush: ClassVar[QTextFormat.Property] = ...
        FrameBorderStyle: ClassVar[QTextFormat.Property] = ...
        FrameBottomMargin: ClassVar[QTextFormat.Property] = ...
        FrameHeight: ClassVar[QTextFormat.Property] = ...
        FrameLeftMargin: ClassVar[QTextFormat.Property] = ...
        FrameMargin: ClassVar[QTextFormat.Property] = ...
        FramePadding: ClassVar[QTextFormat.Property] = ...
        FrameRightMargin: ClassVar[QTextFormat.Property] = ...
        FrameTopMargin: ClassVar[QTextFormat.Property] = ...
        FrameWidth: ClassVar[QTextFormat.Property] = ...
        FullWidthSelection: ClassVar[QTextFormat.Property] = ...
        HeadingLevel: ClassVar[QTextFormat.Property] = ...
        ImageAltText: ClassVar[QTextFormat.Property] = ...
        ImageHeight: ClassVar[QTextFormat.Property] = ...
        ImageName: ClassVar[QTextFormat.Property] = ...
        ImageQuality: ClassVar[QTextFormat.Property] = ...
        ImageTitle: ClassVar[QTextFormat.Property] = ...
        ImageWidth: ClassVar[QTextFormat.Property] = ...
        IsAnchor: ClassVar[QTextFormat.Property] = ...
        LastFontProperty: ClassVar[QTextFormat.Property] = ...
        LayoutDirection: ClassVar[QTextFormat.Property] = ...
        LineHeight: ClassVar[QTextFormat.Property] = ...
        LineHeightType: ClassVar[QTextFormat.Property] = ...
        ListIndent: ClassVar[QTextFormat.Property] = ...
        ListNumberPrefix: ClassVar[QTextFormat.Property] = ...
        ListNumberSuffix: ClassVar[QTextFormat.Property] = ...
        ListStyle: ClassVar[QTextFormat.Property] = ...
        ObjectIndex: ClassVar[QTextFormat.Property] = ...
        ObjectType: ClassVar[QTextFormat.Property] = ...
        OutlinePen: ClassVar[QTextFormat.Property] = ...
        PageBreakPolicy: ClassVar[QTextFormat.Property] = ...
        TabPositions: ClassVar[QTextFormat.Property] = ...
        TableBorderCollapse: ClassVar[QTextFormat.Property] = ...
        TableCellBottomBorder: ClassVar[QTextFormat.Property] = ...
        TableCellBottomBorderBrush: ClassVar[QTextFormat.Property] = ...
        TableCellBottomBorderStyle: ClassVar[QTextFormat.Property] = ...
        TableCellBottomPadding: ClassVar[QTextFormat.Property] = ...
        TableCellColumnSpan: ClassVar[QTextFormat.Property] = ...
        TableCellLeftBorder: ClassVar[QTextFormat.Property] = ...
        TableCellLeftBorderBrush: ClassVar[QTextFormat.Property] = ...
        TableCellLeftBorderStyle: ClassVar[QTextFormat.Property] = ...
        TableCellLeftPadding: ClassVar[QTextFormat.Property] = ...
        TableCellPadding: ClassVar[QTextFormat.Property] = ...
        TableCellRightBorder: ClassVar[QTextFormat.Property] = ...
        TableCellRightBorderBrush: ClassVar[QTextFormat.Property] = ...
        TableCellRightBorderStyle: ClassVar[QTextFormat.Property] = ...
        TableCellRightPadding: ClassVar[QTextFormat.Property] = ...
        TableCellRowSpan: ClassVar[QTextFormat.Property] = ...
        TableCellSpacing: ClassVar[QTextFormat.Property] = ...
        TableCellTopBorder: ClassVar[QTextFormat.Property] = ...
        TableCellTopBorderBrush: ClassVar[QTextFormat.Property] = ...
        TableCellTopBorderStyle: ClassVar[QTextFormat.Property] = ...
        TableCellTopPadding: ClassVar[QTextFormat.Property] = ...
        TableColumnWidthConstraints: ClassVar[QTextFormat.Property] = ...
        TableColumns: ClassVar[QTextFormat.Property] = ...
        TableHeaderRowCount: ClassVar[QTextFormat.Property] = ...
        TextIndent: ClassVar[QTextFormat.Property] = ...
        TextOutline: ClassVar[QTextFormat.Property] = ...
        TextToolTip: ClassVar[QTextFormat.Property] = ...
        TextUnderlineColor: ClassVar[QTextFormat.Property] = ...
        TextUnderlineStyle: ClassVar[QTextFormat.Property] = ...
        TextVerticalAlignment: ClassVar[QTextFormat.Property] = ...
        UserProperty: ClassVar[QTextFormat.Property] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextFormat.Property: ...
        def __and__(self, other: typing.SupportsInt) -> QTextFormat.Property: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextFormat.Property: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextFormat.Property: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextFormat.Property: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextFormat.Property: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextFormat.Property: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextFormat.Property: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextFormat.Property: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextFormat.Property: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextFormat.Property: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextFormat.Property: ...
    AnchorHref: ClassVar[QTextFormat.Property] = ...
    AnchorName: ClassVar[QTextFormat.Property] = ...
    BackgroundBrush: ClassVar[QTextFormat.Property] = ...
    BackgroundImageUrl: ClassVar[QTextFormat.Property] = ...
    BlockAlignment: ClassVar[QTextFormat.Property] = ...
    BlockBottomMargin: ClassVar[QTextFormat.Property] = ...
    BlockCodeFence: ClassVar[QTextFormat.Property] = ...
    BlockCodeLanguage: ClassVar[QTextFormat.Property] = ...
    BlockFormat: ClassVar[QTextFormat.FormatType] = ...
    BlockIndent: ClassVar[QTextFormat.Property] = ...
    BlockLeftMargin: ClassVar[QTextFormat.Property] = ...
    BlockMarker: ClassVar[QTextFormat.Property] = ...
    BlockNonBreakableLines: ClassVar[QTextFormat.Property] = ...
    BlockQuoteLevel: ClassVar[QTextFormat.Property] = ...
    BlockRightMargin: ClassVar[QTextFormat.Property] = ...
    BlockTopMargin: ClassVar[QTextFormat.Property] = ...
    BlockTrailingHorizontalRulerWidth: ClassVar[QTextFormat.Property] = ...
    CharFormat: ClassVar[QTextFormat.FormatType] = ...
    CssFloat: ClassVar[QTextFormat.Property] = ...
    FirstFontProperty: ClassVar[QTextFormat.Property] = ...
    FontCapitalization: ClassVar[QTextFormat.Property] = ...
    FontFamilies: ClassVar[QTextFormat.Property] = ...
    FontFamily: ClassVar[QTextFormat.Property] = ...
    FontFixedPitch: ClassVar[QTextFormat.Property] = ...
    FontHintingPreference: ClassVar[QTextFormat.Property] = ...
    FontItalic: ClassVar[QTextFormat.Property] = ...
    FontKerning: ClassVar[QTextFormat.Property] = ...
    FontLetterSpacing: ClassVar[QTextFormat.Property] = ...
    FontLetterSpacingType: ClassVar[QTextFormat.Property] = ...
    FontOverline: ClassVar[QTextFormat.Property] = ...
    FontPixelSize: ClassVar[QTextFormat.Property] = ...
    FontPointSize: ClassVar[QTextFormat.Property] = ...
    FontSizeAdjustment: ClassVar[QTextFormat.Property] = ...
    FontSizeIncrement: ClassVar[QTextFormat.Property] = ...
    FontStretch: ClassVar[QTextFormat.Property] = ...
    FontStrikeOut: ClassVar[QTextFormat.Property] = ...
    FontStyleHint: ClassVar[QTextFormat.Property] = ...
    FontStyleName: ClassVar[QTextFormat.Property] = ...
    FontStyleStrategy: ClassVar[QTextFormat.Property] = ...
    FontUnderline: ClassVar[QTextFormat.Property] = ...
    FontWeight: ClassVar[QTextFormat.Property] = ...
    FontWordSpacing: ClassVar[QTextFormat.Property] = ...
    ForegroundBrush: ClassVar[QTextFormat.Property] = ...
    FrameBorder: ClassVar[QTextFormat.Property] = ...
    FrameBorderBrush: ClassVar[QTextFormat.Property] = ...
    FrameBorderStyle: ClassVar[QTextFormat.Property] = ...
    FrameBottomMargin: ClassVar[QTextFormat.Property] = ...
    FrameFormat: ClassVar[QTextFormat.FormatType] = ...
    FrameHeight: ClassVar[QTextFormat.Property] = ...
    FrameLeftMargin: ClassVar[QTextFormat.Property] = ...
    FrameMargin: ClassVar[QTextFormat.Property] = ...
    FramePadding: ClassVar[QTextFormat.Property] = ...
    FrameRightMargin: ClassVar[QTextFormat.Property] = ...
    FrameTopMargin: ClassVar[QTextFormat.Property] = ...
    FrameWidth: ClassVar[QTextFormat.Property] = ...
    FullWidthSelection: ClassVar[QTextFormat.Property] = ...
    HeadingLevel: ClassVar[QTextFormat.Property] = ...
    ImageAltText: ClassVar[QTextFormat.Property] = ...
    ImageHeight: ClassVar[QTextFormat.Property] = ...
    ImageName: ClassVar[QTextFormat.Property] = ...
    ImageObject: ClassVar[QTextFormat.ObjectTypes] = ...
    ImageQuality: ClassVar[QTextFormat.Property] = ...
    ImageTitle: ClassVar[QTextFormat.Property] = ...
    ImageWidth: ClassVar[QTextFormat.Property] = ...
    InvalidFormat: ClassVar[QTextFormat.FormatType] = ...
    IsAnchor: ClassVar[QTextFormat.Property] = ...
    LastFontProperty: ClassVar[QTextFormat.Property] = ...
    LayoutDirection: ClassVar[QTextFormat.Property] = ...
    LineHeight: ClassVar[QTextFormat.Property] = ...
    LineHeightType: ClassVar[QTextFormat.Property] = ...
    ListFormat: ClassVar[QTextFormat.FormatType] = ...
    ListIndent: ClassVar[QTextFormat.Property] = ...
    ListNumberPrefix: ClassVar[QTextFormat.Property] = ...
    ListNumberSuffix: ClassVar[QTextFormat.Property] = ...
    ListStyle: ClassVar[QTextFormat.Property] = ...
    NoObject: ClassVar[QTextFormat.ObjectTypes] = ...
    ObjectIndex: ClassVar[QTextFormat.Property] = ...
    ObjectType: ClassVar[QTextFormat.Property] = ...
    OutlinePen: ClassVar[QTextFormat.Property] = ...
    PageBreakPolicy: ClassVar[QTextFormat.Property] = ...
    PageBreak_AlwaysAfter: ClassVar[QTextFormat.PageBreakFlag] = ...
    PageBreak_AlwaysBefore: ClassVar[QTextFormat.PageBreakFlag] = ...
    PageBreak_Auto: ClassVar[QTextFormat.PageBreakFlag] = ...
    TabPositions: ClassVar[QTextFormat.Property] = ...
    TableBorderCollapse: ClassVar[QTextFormat.Property] = ...
    TableCellBottomBorder: ClassVar[QTextFormat.Property] = ...
    TableCellBottomBorderBrush: ClassVar[QTextFormat.Property] = ...
    TableCellBottomBorderStyle: ClassVar[QTextFormat.Property] = ...
    TableCellBottomPadding: ClassVar[QTextFormat.Property] = ...
    TableCellColumnSpan: ClassVar[QTextFormat.Property] = ...
    TableCellLeftBorder: ClassVar[QTextFormat.Property] = ...
    TableCellLeftBorderBrush: ClassVar[QTextFormat.Property] = ...
    TableCellLeftBorderStyle: ClassVar[QTextFormat.Property] = ...
    TableCellLeftPadding: ClassVar[QTextFormat.Property] = ...
    TableCellObject: ClassVar[QTextFormat.ObjectTypes] = ...
    TableCellPadding: ClassVar[QTextFormat.Property] = ...
    TableCellRightBorder: ClassVar[QTextFormat.Property] = ...
    TableCellRightBorderBrush: ClassVar[QTextFormat.Property] = ...
    TableCellRightBorderStyle: ClassVar[QTextFormat.Property] = ...
    TableCellRightPadding: ClassVar[QTextFormat.Property] = ...
    TableCellRowSpan: ClassVar[QTextFormat.Property] = ...
    TableCellSpacing: ClassVar[QTextFormat.Property] = ...
    TableCellTopBorder: ClassVar[QTextFormat.Property] = ...
    TableCellTopBorderBrush: ClassVar[QTextFormat.Property] = ...
    TableCellTopBorderStyle: ClassVar[QTextFormat.Property] = ...
    TableCellTopPadding: ClassVar[QTextFormat.Property] = ...
    TableColumnWidthConstraints: ClassVar[QTextFormat.Property] = ...
    TableColumns: ClassVar[QTextFormat.Property] = ...
    TableFormat: ClassVar[QTextFormat.FormatType] = ...
    TableHeaderRowCount: ClassVar[QTextFormat.Property] = ...
    TableObject: ClassVar[QTextFormat.ObjectTypes] = ...
    TextIndent: ClassVar[QTextFormat.Property] = ...
    TextOutline: ClassVar[QTextFormat.Property] = ...
    TextToolTip: ClassVar[QTextFormat.Property] = ...
    TextUnderlineColor: ClassVar[QTextFormat.Property] = ...
    TextUnderlineStyle: ClassVar[QTextFormat.Property] = ...
    TextVerticalAlignment: ClassVar[QTextFormat.Property] = ...
    UserFormat: ClassVar[QTextFormat.FormatType] = ...
    UserObject: ClassVar[QTextFormat.ObjectTypes] = ...
    UserProperty: ClassVar[QTextFormat.Property] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, rhs: QTextFormat) -> None: ...
    @overload
    def __init__(self, type: int) -> None: ...
    def background(self) -> QBrush: ...
    def boolProperty(self, propertyId: int) -> bool: ...
    def brushProperty(self, propertyId: int) -> QBrush: ...
    def clearBackground(self) -> None: ...
    def clearForeground(self) -> None: ...
    def clearProperty(self, propertyId: int) -> None: ...
    def colorProperty(self, propertyId: int) -> QColor: ...
    def doubleProperty(self, propertyId: int) -> float: ...
    def foreground(self) -> QBrush: ...
    def hasProperty(self, propertyId: int) -> bool: ...
    def intProperty(self, propertyId: int) -> int: ...
    def isBlockFormat(self) -> bool: ...
    def isCharFormat(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isFrameFormat(self) -> bool: ...
    def isImageFormat(self) -> bool: ...
    def isListFormat(self) -> bool: ...
    def isTableCellFormat(self) -> bool: ...
    def isTableFormat(self) -> bool: ...
    def isValid(self) -> bool: ...
    def layoutDirection(self) -> PySide2.QtCore.Qt.LayoutDirection: ...
    def lengthProperty(self, propertyId: int) -> QTextLength: ...
    def lengthVectorProperty(self, propertyId: int) -> typing.List[QTextLength]: ...
    def merge(self, other: QTextFormat) -> None: ...
    def objectIndex(self) -> int: ...
    def objectType(self) -> int: ...
    def penProperty(self, propertyId: int) -> QPen: ...
    def properties(self) -> typing.Dict[int,typing.Any]: ...
    def property(self, propertyId: int) -> typing.Any: ...
    def propertyCount(self) -> int: ...
    def setBackground(self, brush: QBrush) -> None: ...
    def setForeground(self, brush: QBrush) -> None: ...
    def setLayoutDirection(self, direction: PySide2.QtCore.Qt.LayoutDirection) -> None: ...
    def setObjectIndex(self, object: int) -> None: ...
    def setObjectType(self, type: int) -> None: ...
    @overload
    def setProperty(self, propertyId: int, lengths: typing.List[QTextLength]) -> None: ...
    @overload
    def setProperty(self, propertyId: int, value: typing.Any) -> None: ...
    def stringProperty(self, propertyId: int) -> str: ...
    def swap(self, other: QTextFormat) -> None: ...
    def toBlockFormat(self) -> QTextBlockFormat: ...
    def toCharFormat(self) -> QTextCharFormat: ...
    def toFrameFormat(self) -> QTextFrameFormat: ...
    def toImageFormat(self) -> QTextImageFormat: ...
    def toListFormat(self) -> QTextListFormat: ...
    def toTableCellFormat(self) -> QTextTableCellFormat: ...
    def toTableFormat(self) -> QTextTableFormat: ...
    def type(self) -> int: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QTextFragment(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, o: QTextFragment) -> None: ...
    def charFormat(self) -> QTextCharFormat: ...
    def charFormatIndex(self) -> int: ...
    def contains(self, position: int) -> bool: ...
    def isValid(self) -> bool: ...
    def length(self) -> int: ...
    def position(self) -> int: ...
    def text(self) -> str: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QTextFrame(QTextObject):
    class iterator(shiboken2.Object):
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, o: QTextFrame.iterator) -> None: ...
        def atEnd(self) -> bool: ...
        def currentBlock(self) -> QTextBlock: ...
        def currentFrame(self) -> QTextFrame: ...
        def parentFrame(self) -> QTextFrame: ...
        def __copy__(self) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __iadd__(self, arg__1: int) -> QTextFrame.iterator: ...
        def __isub__(self, arg__1: int) -> QTextFrame.iterator: ...
        def __iter__(self) -> object: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __next__(self) -> object: ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, doc: QTextDocument, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def begin(self) -> QTextFrame.iterator: ...
    def childFrames(self) -> typing.List[QTextFrame]: ...
    def end(self) -> QTextFrame.iterator: ...
    def firstCursorPosition(self) -> QTextCursor: ...
    def firstPosition(self) -> int: ...
    def frameFormat(self) -> QTextFrameFormat: ...
    def lastCursorPosition(self) -> QTextCursor: ...
    def lastPosition(self) -> int: ...
    def parentFrame(self) -> QTextFrame: ...
    def setFrameFormat(self, format: QTextFrameFormat) -> None: ...
    def __iter__(self) -> object: ...

class QTextFrameFormat(QTextFormat):
    class BorderStyle:
        BorderStyle_Dashed: ClassVar[QTextFrameFormat.BorderStyle] = ...
        BorderStyle_DotDash: ClassVar[QTextFrameFormat.BorderStyle] = ...
        BorderStyle_DotDotDash: ClassVar[QTextFrameFormat.BorderStyle] = ...
        BorderStyle_Dotted: ClassVar[QTextFrameFormat.BorderStyle] = ...
        BorderStyle_Double: ClassVar[QTextFrameFormat.BorderStyle] = ...
        BorderStyle_Groove: ClassVar[QTextFrameFormat.BorderStyle] = ...
        BorderStyle_Inset: ClassVar[QTextFrameFormat.BorderStyle] = ...
        BorderStyle_None: ClassVar[QTextFrameFormat.BorderStyle] = ...
        BorderStyle_Outset: ClassVar[QTextFrameFormat.BorderStyle] = ...
        BorderStyle_Ridge: ClassVar[QTextFrameFormat.BorderStyle] = ...
        BorderStyle_Solid: ClassVar[QTextFrameFormat.BorderStyle] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextFrameFormat.BorderStyle: ...
        def __and__(self, other: typing.SupportsInt) -> QTextFrameFormat.BorderStyle: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextFrameFormat.BorderStyle: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextFrameFormat.BorderStyle: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextFrameFormat.BorderStyle: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextFrameFormat.BorderStyle: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextFrameFormat.BorderStyle: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextFrameFormat.BorderStyle: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextFrameFormat.BorderStyle: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextFrameFormat.BorderStyle: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextFrameFormat.BorderStyle: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextFrameFormat.BorderStyle: ...

    class Position:
        FloatLeft: ClassVar[QTextFrameFormat.Position] = ...
        FloatRight: ClassVar[QTextFrameFormat.Position] = ...
        InFlow: ClassVar[QTextFrameFormat.Position] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextFrameFormat.Position: ...
        def __and__(self, other: typing.SupportsInt) -> QTextFrameFormat.Position: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextFrameFormat.Position: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextFrameFormat.Position: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextFrameFormat.Position: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextFrameFormat.Position: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextFrameFormat.Position: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextFrameFormat.Position: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextFrameFormat.Position: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextFrameFormat.Position: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextFrameFormat.Position: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextFrameFormat.Position: ...
    BorderStyle_Dashed: ClassVar[QTextFrameFormat.BorderStyle] = ...
    BorderStyle_DotDash: ClassVar[QTextFrameFormat.BorderStyle] = ...
    BorderStyle_DotDotDash: ClassVar[QTextFrameFormat.BorderStyle] = ...
    BorderStyle_Dotted: ClassVar[QTextFrameFormat.BorderStyle] = ...
    BorderStyle_Double: ClassVar[QTextFrameFormat.BorderStyle] = ...
    BorderStyle_Groove: ClassVar[QTextFrameFormat.BorderStyle] = ...
    BorderStyle_Inset: ClassVar[QTextFrameFormat.BorderStyle] = ...
    BorderStyle_None: ClassVar[QTextFrameFormat.BorderStyle] = ...
    BorderStyle_Outset: ClassVar[QTextFrameFormat.BorderStyle] = ...
    BorderStyle_Ridge: ClassVar[QTextFrameFormat.BorderStyle] = ...
    BorderStyle_Solid: ClassVar[QTextFrameFormat.BorderStyle] = ...
    FloatLeft: ClassVar[QTextFrameFormat.Position] = ...
    FloatRight: ClassVar[QTextFrameFormat.Position] = ...
    InFlow: ClassVar[QTextFrameFormat.Position] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QTextFrameFormat: QTextFrameFormat) -> None: ...
    @overload
    def __init__(self, fmt: QTextFormat) -> None: ...
    def border(self) -> float: ...
    def borderBrush(self) -> QBrush: ...
    def borderStyle(self) -> QTextFrameFormat.BorderStyle: ...
    def bottomMargin(self) -> float: ...
    def height(self) -> QTextLength: ...
    def isValid(self) -> bool: ...
    def leftMargin(self) -> float: ...
    def margin(self) -> float: ...
    def padding(self) -> float: ...
    def pageBreakPolicy(self) -> typing.Union[QTextFormat.PageBreakFlags,QTextFormat.PageBreakFlag]: ...
    def position(self) -> QTextFrameFormat.Position: ...
    def rightMargin(self) -> float: ...
    def setBorder(self, border: float) -> None: ...
    def setBorderBrush(self, brush: QBrush) -> None: ...
    def setBorderStyle(self, style: QTextFrameFormat.BorderStyle) -> None: ...
    def setBottomMargin(self, margin: float) -> None: ...
    @overload
    def setHeight(self, height: QTextLength) -> None: ...
    @overload
    def setHeight(self, height: float) -> None: ...
    def setLeftMargin(self, margin: float) -> None: ...
    def setMargin(self, margin: float) -> None: ...
    def setPadding(self, padding: float) -> None: ...
    def setPageBreakPolicy(self, flags: typing.Union[QTextFormat.PageBreakFlags,QTextFormat.PageBreakFlag]) -> None: ...
    def setPosition(self, f: QTextFrameFormat.Position) -> None: ...
    def setRightMargin(self, margin: float) -> None: ...
    def setTopMargin(self, margin: float) -> None: ...
    @overload
    def setWidth(self, length: QTextLength) -> None: ...
    @overload
    def setWidth(self, width: float) -> None: ...
    def topMargin(self) -> float: ...
    def width(self) -> QTextLength: ...
    def __copy__(self) -> None: ...

class QTextImageFormat(QTextCharFormat):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QTextImageFormat: QTextImageFormat) -> None: ...
    @overload
    def __init__(self, format: QTextFormat) -> None: ...
    def height(self) -> float: ...
    def isValid(self) -> bool: ...
    def name(self) -> str: ...
    def quality(self) -> int: ...
    def setHeight(self, height: float) -> None: ...
    def setName(self, name: str) -> None: ...
    def setQuality(self, quality: int = ...) -> None: ...
    def setWidth(self, width: float) -> None: ...
    def width(self) -> float: ...
    def __copy__(self) -> None: ...

class QTextInlineObject(shiboken2.Object):
    def __init__(self) -> None: ...
    def ascent(self) -> float: ...
    def descent(self) -> float: ...
    def format(self) -> QTextFormat: ...
    def formatIndex(self) -> int: ...
    def height(self) -> float: ...
    def isValid(self) -> bool: ...
    def rect(self) -> PySide2.QtCore.QRectF: ...
    def setAscent(self, a: float) -> None: ...
    def setDescent(self, d: float) -> None: ...
    def setWidth(self, w: float) -> None: ...
    def textDirection(self) -> PySide2.QtCore.Qt.LayoutDirection: ...
    def textPosition(self) -> int: ...
    def width(self) -> float: ...
    def __copy__(self) -> None: ...

class QTextItem(shiboken2.Object):
    class RenderFlag:
        Dummy: ClassVar[QTextItem.RenderFlag] = ...
        Overline: ClassVar[QTextItem.RenderFlag] = ...
        RightToLeft: ClassVar[QTextItem.RenderFlag] = ...
        StrikeOut: ClassVar[QTextItem.RenderFlag] = ...
        Underline: ClassVar[QTextItem.RenderFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTextItem.RenderFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTextItem.RenderFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextItem.RenderFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextItem.RenderFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextItem.RenderFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextItem.RenderFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextItem.RenderFlags: ...

    class RenderFlags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTextItem.RenderFlags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTextItem.RenderFlags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextItem.RenderFlags: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextItem.RenderFlags: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextItem.RenderFlags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextItem.RenderFlags: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextItem.RenderFlags: ...
    Dummy: ClassVar[QTextItem.RenderFlag] = ...
    Overline: ClassVar[QTextItem.RenderFlag] = ...
    RightToLeft: ClassVar[QTextItem.RenderFlag] = ...
    StrikeOut: ClassVar[QTextItem.RenderFlag] = ...
    Underline: ClassVar[QTextItem.RenderFlag] = ...
    def __init__(self) -> None: ...
    def ascent(self) -> float: ...
    def descent(self) -> float: ...
    def font(self) -> QFont: ...
    def renderFlags(self) -> typing.Union[QTextItem.RenderFlags,QTextItem.RenderFlag]: ...
    def text(self) -> str: ...
    def width(self) -> float: ...

class QTextLayout(shiboken2.Object):
    class CursorMode:
        SkipCharacters: ClassVar[QTextLayout.CursorMode] = ...
        SkipWords: ClassVar[QTextLayout.CursorMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextLayout.CursorMode: ...
        def __and__(self, other: typing.SupportsInt) -> QTextLayout.CursorMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextLayout.CursorMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextLayout.CursorMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextLayout.CursorMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextLayout.CursorMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextLayout.CursorMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextLayout.CursorMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextLayout.CursorMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextLayout.CursorMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextLayout.CursorMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextLayout.CursorMode: ...

    class FormatRange(shiboken2.Object):
        format: Any
        length: Any
        start: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, FormatRange: QTextLayout.FormatRange) -> None: ...
        def __copy__(self) -> None: ...
    SkipCharacters: ClassVar[QTextLayout.CursorMode] = ...
    SkipWords: ClassVar[QTextLayout.CursorMode] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, b: QTextBlock) -> None: ...
    @overload
    def __init__(self, text: str) -> None: ...
    @overload
    def __init__(self, text: str, font: QFont, paintdevice: typing.Union[QPaintDevice,None] = ...) -> None: ...
    def additionalFormats(self) -> typing.List[QTextLayout.FormatRange]: ...
    def beginLayout(self) -> None: ...
    def boundingRect(self) -> PySide2.QtCore.QRectF: ...
    def cacheEnabled(self) -> bool: ...
    def clearAdditionalFormats(self) -> None: ...
    def clearFormats(self) -> None: ...
    def clearLayout(self) -> None: ...
    def createLine(self) -> QTextLine: ...
    def cursorMoveStyle(self) -> PySide2.QtCore.Qt.CursorMoveStyle: ...
    def draw(self, p: QPainter, pos: PySide2.QtCore.QPointF, selections: typing.List[QTextLayout.FormatRange] = ..., clip: PySide2.QtCore.QRectF = ...) -> None: ...
    @overload
    def drawCursor(self, p: QPainter, pos: PySide2.QtCore.QPointF, cursorPosition: int) -> None: ...
    @overload
    def drawCursor(self, p: QPainter, pos: PySide2.QtCore.QPointF, cursorPosition: int, width: int) -> None: ...
    def endLayout(self) -> None: ...
    def font(self) -> QFont: ...
    def formats(self) -> typing.List[QTextLayout.FormatRange]: ...
    def isValidCursorPosition(self, pos: int) -> bool: ...
    def leftCursorPosition(self, oldPos: int) -> int: ...
    def lineAt(self, i: int) -> QTextLine: ...
    def lineCount(self) -> int: ...
    def lineForTextPosition(self, pos: int) -> QTextLine: ...
    def maximumWidth(self) -> float: ...
    def minimumWidth(self) -> float: ...
    def nextCursorPosition(self, oldPos: int, mode: QTextLayout.CursorMode = ...) -> int: ...
    def position(self) -> PySide2.QtCore.QPointF: ...
    def preeditAreaPosition(self) -> int: ...
    def preeditAreaText(self) -> str: ...
    def previousCursorPosition(self, oldPos: int, mode: QTextLayout.CursorMode = ...) -> int: ...
    def rightCursorPosition(self, oldPos: int) -> int: ...
    def setAdditionalFormats(self, overrides: typing.Sequence[QTextLayout.FormatRange]) -> None: ...
    def setCacheEnabled(self, enable: bool) -> None: ...
    def setCursorMoveStyle(self, style: PySide2.QtCore.Qt.CursorMoveStyle) -> None: ...
    def setFlags(self, flags: typing.SupportsInt) -> None: ...
    def setFont(self, f: QFont) -> None: ...
    def setFormats(self, overrides: typing.List[QTextLayout.FormatRange]) -> None: ...
    def setPosition(self, p: PySide2.QtCore.QPointF) -> None: ...
    def setPreeditArea(self, position: int, text: str) -> None: ...
    def setRawFont(self, rawFont: QRawFont) -> None: ...
    def setText(self, string: str) -> None: ...
    def setTextOption(self, option: QTextOption) -> None: ...
    def text(self) -> str: ...
    def textOption(self) -> QTextOption: ...

class QTextLength(shiboken2.Object):
    class Type:
        FixedLength: ClassVar[QTextLength.Type] = ...
        PercentageLength: ClassVar[QTextLength.Type] = ...
        VariableLength: ClassVar[QTextLength.Type] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextLength.Type: ...
        def __and__(self, other: typing.SupportsInt) -> QTextLength.Type: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextLength.Type: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextLength.Type: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextLength.Type: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextLength.Type: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextLength.Type: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextLength.Type: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextLength.Type: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextLength.Type: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextLength.Type: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextLength.Type: ...
    FixedLength: ClassVar[QTextLength.Type] = ...
    PercentageLength: ClassVar[QTextLength.Type] = ...
    VariableLength: ClassVar[QTextLength.Type] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QTextLength: QTextLength) -> None: ...
    @overload
    def __init__(self, type: QTextLength.Type, value: float) -> None: ...
    def rawValue(self) -> float: ...
    def type(self) -> QTextLength.Type: ...
    def value(self, maximumLength: float) -> float: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __rlshift__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...

class QTextLine(shiboken2.Object):
    class CursorPosition:
        CursorBetweenCharacters: ClassVar[QTextLine.CursorPosition] = ...
        CursorOnCharacter: ClassVar[QTextLine.CursorPosition] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextLine.CursorPosition: ...
        def __and__(self, other: typing.SupportsInt) -> QTextLine.CursorPosition: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextLine.CursorPosition: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextLine.CursorPosition: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextLine.CursorPosition: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextLine.CursorPosition: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextLine.CursorPosition: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextLine.CursorPosition: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextLine.CursorPosition: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextLine.CursorPosition: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextLine.CursorPosition: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextLine.CursorPosition: ...

    class Edge:
        Leading: ClassVar[QTextLine.Edge] = ...
        Trailing: ClassVar[QTextLine.Edge] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextLine.Edge: ...
        def __and__(self, other: typing.SupportsInt) -> QTextLine.Edge: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextLine.Edge: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextLine.Edge: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextLine.Edge: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextLine.Edge: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextLine.Edge: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextLine.Edge: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextLine.Edge: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextLine.Edge: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextLine.Edge: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextLine.Edge: ...
    CursorBetweenCharacters: ClassVar[QTextLine.CursorPosition] = ...
    CursorOnCharacter: ClassVar[QTextLine.CursorPosition] = ...
    Leading: ClassVar[QTextLine.Edge] = ...
    Trailing: ClassVar[QTextLine.Edge] = ...
    def __init__(self) -> None: ...
    def ascent(self) -> float: ...
    def cursorToX(self, cursorPos: int, edge: QTextLine.Edge = ...) -> float: ...
    def descent(self) -> float: ...
    def draw(self, p: QPainter, point: PySide2.QtCore.QPointF, selection: typing.Union[QTextLayout.FormatRange,None] = ...) -> None: ...
    def height(self) -> float: ...
    def horizontalAdvance(self) -> float: ...
    def isValid(self) -> bool: ...
    def leading(self) -> float: ...
    def leadingIncluded(self) -> bool: ...
    def lineNumber(self) -> int: ...
    def naturalTextRect(self) -> PySide2.QtCore.QRectF: ...
    def naturalTextWidth(self) -> float: ...
    def position(self) -> PySide2.QtCore.QPointF: ...
    def rect(self) -> PySide2.QtCore.QRectF: ...
    def setLeadingIncluded(self, included: bool) -> None: ...
    def setLineWidth(self, width: float) -> None: ...
    @overload
    def setNumColumns(self, columns: int) -> None: ...
    @overload
    def setNumColumns(self, columns: int, alignmentWidth: float) -> None: ...
    def setPosition(self, pos: PySide2.QtCore.QPointF) -> None: ...
    def textLength(self) -> int: ...
    def textStart(self) -> int: ...
    def width(self) -> float: ...
    def x(self) -> float: ...
    def xToCursor(self, x: float, edge: QTextLine.CursorPosition = ...) -> int: ...
    def y(self) -> float: ...
    def __copy__(self) -> None: ...

class QTextList(QTextBlockGroup):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, doc: QTextDocument, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def add(self, block: QTextBlock) -> None: ...
    def count(self) -> int: ...
    def format(self) -> QTextListFormat: ...
    def item(self, i: int) -> QTextBlock: ...
    def itemNumber(self, arg__1: QTextBlock) -> int: ...
    def itemText(self, arg__1: QTextBlock) -> str: ...
    def remove(self, arg__1: QTextBlock) -> None: ...
    def removeItem(self, i: int) -> None: ...
    @overload
    def setFormat(self, format: QTextFormat) -> None: ...
    @overload
    def setFormat(self, format: QTextListFormat) -> None: ...

class QTextListFormat(QTextFormat):
    class Style:
        ListCircle: ClassVar[QTextListFormat.Style] = ...
        ListDecimal: ClassVar[QTextListFormat.Style] = ...
        ListDisc: ClassVar[QTextListFormat.Style] = ...
        ListLowerAlpha: ClassVar[QTextListFormat.Style] = ...
        ListLowerRoman: ClassVar[QTextListFormat.Style] = ...
        ListSquare: ClassVar[QTextListFormat.Style] = ...
        ListStyleUndefined: ClassVar[QTextListFormat.Style] = ...
        ListUpperAlpha: ClassVar[QTextListFormat.Style] = ...
        ListUpperRoman: ClassVar[QTextListFormat.Style] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextListFormat.Style: ...
        def __and__(self, other: typing.SupportsInt) -> QTextListFormat.Style: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextListFormat.Style: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextListFormat.Style: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextListFormat.Style: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextListFormat.Style: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextListFormat.Style: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextListFormat.Style: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextListFormat.Style: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextListFormat.Style: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextListFormat.Style: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextListFormat.Style: ...
    ListCircle: ClassVar[QTextListFormat.Style] = ...
    ListDecimal: ClassVar[QTextListFormat.Style] = ...
    ListDisc: ClassVar[QTextListFormat.Style] = ...
    ListLowerAlpha: ClassVar[QTextListFormat.Style] = ...
    ListLowerRoman: ClassVar[QTextListFormat.Style] = ...
    ListSquare: ClassVar[QTextListFormat.Style] = ...
    ListStyleUndefined: ClassVar[QTextListFormat.Style] = ...
    ListUpperAlpha: ClassVar[QTextListFormat.Style] = ...
    ListUpperRoman: ClassVar[QTextListFormat.Style] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QTextListFormat: QTextListFormat) -> None: ...
    @overload
    def __init__(self, fmt: QTextFormat) -> None: ...
    def indent(self) -> int: ...
    def isValid(self) -> bool: ...
    def numberPrefix(self) -> str: ...
    def numberSuffix(self) -> str: ...
    def setIndent(self, indent: int) -> None: ...
    def setNumberPrefix(self, numberPrefix: str) -> None: ...
    def setNumberSuffix(self, numberSuffix: str) -> None: ...
    def setStyle(self, style: QTextListFormat.Style) -> None: ...
    def style(self) -> QTextListFormat.Style: ...
    def __copy__(self) -> None: ...

class QTextObject(PySide2.QtCore.QObject):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, doc: QTextDocument, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def document(self) -> QTextDocument: ...
    def format(self) -> QTextFormat: ...
    def formatIndex(self) -> int: ...
    def objectIndex(self) -> int: ...
    def setFormat(self, format: QTextFormat) -> None: ...

class QTextObjectInterface(shiboken2.Object):
    def __init__(self) -> None: ...
    def drawObject(self, painter: QPainter, rect: PySide2.QtCore.QRectF, doc: QTextDocument, posInDocument: int, format: QTextFormat) -> None: ...
    def intrinsicSize(self, doc: QTextDocument, posInDocument: int, format: QTextFormat) -> PySide2.QtCore.QSizeF: ...

class QTextOption(shiboken2.Object):
    class Flag:
        AddSpaceForLineAndParagraphSeparators: ClassVar[QTextOption.Flag] = ...
        IncludeTrailingSpaces: ClassVar[QTextOption.Flag] = ...
        ShowDocumentTerminator: ClassVar[QTextOption.Flag] = ...
        ShowLineAndParagraphSeparators: ClassVar[QTextOption.Flag] = ...
        ShowTabsAndSpaces: ClassVar[QTextOption.Flag] = ...
        SuppressColors: ClassVar[QTextOption.Flag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTextOption.Flags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTextOption.Flag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextOption.Flags: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextOption.Flags: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextOption.Flags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextOption.Flags: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextOption.Flags: ...

    class Flags:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTextOption.Flags: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTextOption.Flags: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextOption.Flags: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextOption.Flags: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextOption.Flags: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextOption.Flags: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextOption.Flags: ...

    class Tab(shiboken2.Object):
        delimiter: Any
        position: Any
        type: Any
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, Tab: QTextOption.Tab) -> None: ...
        @overload
        def __init__(self, pos: float, tabType: QTextOption.TabType, delim: str = ...) -> None: ...
        def __copy__(self) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...

    class TabType:
        CenterTab: ClassVar[QTextOption.TabType] = ...
        DelimiterTab: ClassVar[QTextOption.TabType] = ...
        LeftTab: ClassVar[QTextOption.TabType] = ...
        RightTab: ClassVar[QTextOption.TabType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextOption.TabType: ...
        def __and__(self, other: typing.SupportsInt) -> QTextOption.TabType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextOption.TabType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextOption.TabType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextOption.TabType: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextOption.TabType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextOption.TabType: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextOption.TabType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextOption.TabType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextOption.TabType: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextOption.TabType: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextOption.TabType: ...

    class WrapMode:
        ManualWrap: ClassVar[QTextOption.WrapMode] = ...
        NoWrap: ClassVar[QTextOption.WrapMode] = ...
        WordWrap: ClassVar[QTextOption.WrapMode] = ...
        WrapAnywhere: ClassVar[QTextOption.WrapMode] = ...
        WrapAtWordBoundaryOrAnywhere: ClassVar[QTextOption.WrapMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTextOption.WrapMode: ...
        def __and__(self, other: typing.SupportsInt) -> QTextOption.WrapMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTextOption.WrapMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTextOption.WrapMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTextOption.WrapMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QTextOption.WrapMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTextOption.WrapMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QTextOption.WrapMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTextOption.WrapMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTextOption.WrapMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QTextOption.WrapMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QTextOption.WrapMode: ...
    AddSpaceForLineAndParagraphSeparators: ClassVar[QTextOption.Flag] = ...
    CenterTab: ClassVar[QTextOption.TabType] = ...
    DelimiterTab: ClassVar[QTextOption.TabType] = ...
    IncludeTrailingSpaces: ClassVar[QTextOption.Flag] = ...
    LeftTab: ClassVar[QTextOption.TabType] = ...
    ManualWrap: ClassVar[QTextOption.WrapMode] = ...
    NoWrap: ClassVar[QTextOption.WrapMode] = ...
    RightTab: ClassVar[QTextOption.TabType] = ...
    ShowDocumentTerminator: ClassVar[QTextOption.Flag] = ...
    ShowLineAndParagraphSeparators: ClassVar[QTextOption.Flag] = ...
    ShowTabsAndSpaces: ClassVar[QTextOption.Flag] = ...
    SuppressColors: ClassVar[QTextOption.Flag] = ...
    WordWrap: ClassVar[QTextOption.WrapMode] = ...
    WrapAnywhere: ClassVar[QTextOption.WrapMode] = ...
    WrapAtWordBoundaryOrAnywhere: ClassVar[QTextOption.WrapMode] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    @overload
    def __init__(self, o: QTextOption) -> None: ...
    def alignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def flags(self) -> typing.Union[QTextOption.Flags,QTextOption.Flag]: ...
    def setAlignment(self, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setFlags(self, flags: typing.Union[QTextOption.Flags,QTextOption.Flag]) -> None: ...
    def setTabArray(self, tabStops: typing.Sequence[float]) -> None: ...
    def setTabStop(self, tabStop: float) -> None: ...
    def setTabStopDistance(self, tabStopDistance: float) -> None: ...
    def setTabs(self, tabStops: typing.Sequence[QTextOption.Tab]) -> None: ...
    def setTextDirection(self, aDirection: PySide2.QtCore.Qt.LayoutDirection) -> None: ...
    def setUseDesignMetrics(self, b: bool) -> None: ...
    def setWrapMode(self, wrap: QTextOption.WrapMode) -> None: ...
    def tabArray(self) -> typing.List[float]: ...
    def tabStop(self) -> float: ...
    def tabStopDistance(self) -> float: ...
    def tabs(self) -> typing.List[QTextOption.Tab]: ...
    def textDirection(self) -> PySide2.QtCore.Qt.LayoutDirection: ...
    def useDesignMetrics(self) -> bool: ...
    def wrapMode(self) -> QTextOption.WrapMode: ...
    def __copy__(self) -> None: ...

class QTextTable(QTextFrame):
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, doc: QTextDocument, destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def appendColumns(self, count: int) -> None: ...
    def appendRows(self, count: int) -> None: ...
    @overload
    def cellAt(self, c: QTextCursor) -> QTextTableCell: ...
    @overload
    def cellAt(self, position: int) -> QTextTableCell: ...
    @overload
    def cellAt(self, row: int, col: int) -> QTextTableCell: ...
    def columns(self) -> int: ...
    def format(self) -> QTextTableFormat: ...
    def insertColumns(self, pos: int, num: int) -> None: ...
    def insertRows(self, pos: int, num: int) -> None: ...
    @overload
    def mergeCells(self, cursor: QTextCursor) -> None: ...
    @overload
    def mergeCells(self, row: int, col: int, numRows: int, numCols: int) -> None: ...
    def removeColumns(self, pos: int, num: int) -> None: ...
    def removeRows(self, pos: int, num: int) -> None: ...
    def resize(self, rows: int, cols: int) -> None: ...
    def rowEnd(self, c: QTextCursor) -> QTextCursor: ...
    def rowStart(self, c: QTextCursor) -> QTextCursor: ...
    def rows(self) -> int: ...
    @overload
    def setFormat(self, format: QTextFormat) -> None: ...
    @overload
    def setFormat(self, format: QTextTableFormat) -> None: ...
    def splitCell(self, row: int, col: int, numRows: int, numCols: int) -> None: ...

class QTextTableCell(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, o: QTextTableCell) -> None: ...
    def begin(self) -> QTextFrame.iterator: ...
    def column(self) -> int: ...
    def columnSpan(self) -> int: ...
    def end(self) -> QTextFrame.iterator: ...
    def firstCursorPosition(self) -> QTextCursor: ...
    def firstPosition(self) -> int: ...
    def format(self) -> QTextCharFormat: ...
    def isValid(self) -> bool: ...
    def lastCursorPosition(self) -> QTextCursor: ...
    def lastPosition(self) -> int: ...
    def row(self) -> int: ...
    def rowSpan(self) -> int: ...
    def setFormat(self, format: QTextCharFormat) -> None: ...
    def tableCellFormatIndex(self) -> int: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class QTextTableCellFormat(QTextCharFormat):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QTextTableCellFormat: QTextTableCellFormat) -> None: ...
    @overload
    def __init__(self, fmt: QTextFormat) -> None: ...
    def bottomBorder(self) -> float: ...
    def bottomBorderBrush(self) -> QBrush: ...
    def bottomBorderStyle(self) -> QTextFrameFormat.BorderStyle: ...
    def bottomPadding(self) -> float: ...
    def isValid(self) -> bool: ...
    def leftBorder(self) -> float: ...
    def leftBorderBrush(self) -> QBrush: ...
    def leftBorderStyle(self) -> QTextFrameFormat.BorderStyle: ...
    def leftPadding(self) -> float: ...
    def rightBorder(self) -> float: ...
    def rightBorderBrush(self) -> QBrush: ...
    def rightBorderStyle(self) -> QTextFrameFormat.BorderStyle: ...
    def rightPadding(self) -> float: ...
    def setBorder(self, width: float) -> None: ...
    def setBorderBrush(self, brush: QBrush) -> None: ...
    def setBorderStyle(self, style: QTextFrameFormat.BorderStyle) -> None: ...
    def setBottomBorder(self, width: float) -> None: ...
    def setBottomBorderBrush(self, brush: QBrush) -> None: ...
    def setBottomBorderStyle(self, style: QTextFrameFormat.BorderStyle) -> None: ...
    def setBottomPadding(self, padding: float) -> None: ...
    def setLeftBorder(self, width: float) -> None: ...
    def setLeftBorderBrush(self, brush: QBrush) -> None: ...
    def setLeftBorderStyle(self, style: QTextFrameFormat.BorderStyle) -> None: ...
    def setLeftPadding(self, padding: float) -> None: ...
    def setPadding(self, padding: float) -> None: ...
    def setRightBorder(self, width: float) -> None: ...
    def setRightBorderBrush(self, brush: QBrush) -> None: ...
    def setRightBorderStyle(self, style: QTextFrameFormat.BorderStyle) -> None: ...
    def setRightPadding(self, padding: float) -> None: ...
    def setTopBorder(self, width: float) -> None: ...
    def setTopBorderBrush(self, brush: QBrush) -> None: ...
    def setTopBorderStyle(self, style: QTextFrameFormat.BorderStyle) -> None: ...
    def setTopPadding(self, padding: float) -> None: ...
    def topBorder(self) -> float: ...
    def topBorderBrush(self) -> QBrush: ...
    def topBorderStyle(self) -> QTextFrameFormat.BorderStyle: ...
    def topPadding(self) -> float: ...
    def __copy__(self) -> None: ...

class QTextTableFormat(QTextFrameFormat):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QTextTableFormat: QTextTableFormat) -> None: ...
    @overload
    def __init__(self, fmt: QTextFormat) -> None: ...
    def alignment(self) -> typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]: ...
    def borderCollapse(self) -> bool: ...
    def cellPadding(self) -> float: ...
    def cellSpacing(self) -> float: ...
    def clearColumnWidthConstraints(self) -> None: ...
    def columnWidthConstraints(self) -> typing.List[QTextLength]: ...
    def columns(self) -> int: ...
    def headerRowCount(self) -> int: ...
    def isValid(self) -> bool: ...
    def setAlignment(self, alignment: typing.Union[PySide2.QtCore.Qt.Alignment,PySide2.QtCore.Qt.AlignmentFlag]) -> None: ...
    def setBorderCollapse(self, borderCollapse: bool) -> None: ...
    def setCellPadding(self, padding: float) -> None: ...
    def setCellSpacing(self, spacing: float) -> None: ...
    def setColumnWidthConstraints(self, constraints: typing.List[QTextLength]) -> None: ...
    def setColumns(self, columns: int) -> None: ...
    def setHeaderRowCount(self, count: int) -> None: ...
    def __copy__(self) -> None: ...

class QToolBarChangeEvent(PySide2.QtCore.QEvent):
    def __init__(self, t: bool) -> None: ...
    def toggle(self) -> bool: ...

class QTouchDevice(shiboken2.Object):
    class Capabilities:
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTouchDevice.Capabilities: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTouchDevice.Capabilities: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTouchDevice.Capabilities: ...
        def __rand__(self, other: typing.SupportsInt) -> QTouchDevice.Capabilities: ...
        def __ror__(self, other: typing.SupportsInt) -> QTouchDevice.Capabilities: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTouchDevice.Capabilities: ...
        def __xor__(self, other: typing.SupportsInt) -> QTouchDevice.Capabilities: ...

    class CapabilityFlag:
        Area: ClassVar[QTouchDevice.CapabilityFlag] = ...
        MouseEmulation: ClassVar[QTouchDevice.CapabilityFlag] = ...
        NormalizedPosition: ClassVar[QTouchDevice.CapabilityFlag] = ...
        Position: ClassVar[QTouchDevice.CapabilityFlag] = ...
        Pressure: ClassVar[QTouchDevice.CapabilityFlag] = ...
        RawPositions: ClassVar[QTouchDevice.CapabilityFlag] = ...
        Velocity: ClassVar[QTouchDevice.CapabilityFlag] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __and__(self, other: typing.SupportsInt) -> QTouchDevice.Capabilities: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __invert__(self) -> QTouchDevice.CapabilityFlag: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTouchDevice.Capabilities: ...
        def __rand__(self, other: typing.SupportsInt) -> QTouchDevice.Capabilities: ...
        def __ror__(self, other: typing.SupportsInt) -> QTouchDevice.Capabilities: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTouchDevice.Capabilities: ...
        def __xor__(self, other: typing.SupportsInt) -> QTouchDevice.Capabilities: ...

    class DeviceType:
        TouchPad: ClassVar[QTouchDevice.DeviceType] = ...
        TouchScreen: ClassVar[QTouchDevice.DeviceType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTouchDevice.DeviceType: ...
        def __and__(self, other: typing.SupportsInt) -> QTouchDevice.DeviceType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTouchDevice.DeviceType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTouchDevice.DeviceType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTouchDevice.DeviceType: ...
        def __rand__(self, other: typing.SupportsInt) -> QTouchDevice.DeviceType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTouchDevice.DeviceType: ...
        def __ror__(self, other: typing.SupportsInt) -> QTouchDevice.DeviceType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTouchDevice.DeviceType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTouchDevice.DeviceType: ...
        def __sub__(self, other: typing.SupportsInt) -> QTouchDevice.DeviceType: ...
        def __xor__(self, other: typing.SupportsInt) -> QTouchDevice.DeviceType: ...
    Area: ClassVar[QTouchDevice.CapabilityFlag] = ...
    MouseEmulation: ClassVar[QTouchDevice.CapabilityFlag] = ...
    NormalizedPosition: ClassVar[QTouchDevice.CapabilityFlag] = ...
    Position: ClassVar[QTouchDevice.CapabilityFlag] = ...
    Pressure: ClassVar[QTouchDevice.CapabilityFlag] = ...
    RawPositions: ClassVar[QTouchDevice.CapabilityFlag] = ...
    TouchPad: ClassVar[QTouchDevice.DeviceType] = ...
    TouchScreen: ClassVar[QTouchDevice.DeviceType] = ...
    Velocity: ClassVar[QTouchDevice.CapabilityFlag] = ...
    def __init__(self) -> None: ...
    def capabilities(self) -> typing.Union[QTouchDevice.Capabilities,QTouchDevice.CapabilityFlag]: ...
    @classmethod
    def devices(cls) -> typing.List[QTouchDevice]: ...
    def maximumTouchPoints(self) -> int: ...
    def name(self) -> str: ...
    def setCapabilities(self, caps: typing.Union[QTouchDevice.Capabilities,QTouchDevice.CapabilityFlag]) -> None: ...
    def setMaximumTouchPoints(self, max: int) -> None: ...
    def setName(self, name: str) -> None: ...
    def setType(self, devType: QTouchDevice.DeviceType) -> None: ...
    def type(self) -> QTouchDevice.DeviceType: ...

class QTouchEvent(QInputEvent):
    class TouchPoint(shiboken2.Object):
        class InfoFlag:
            Pen: ClassVar[QTouchEvent.TouchPoint.InfoFlag] = ...
            Token: ClassVar[QTouchEvent.TouchPoint.InfoFlag] = ...
            values: ClassVar[dict] = ...
            name: Any
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            def __and__(self, other: typing.SupportsInt) -> QTouchEvent.TouchPoint.InfoFlags: ...
            def __bool__(self) -> bool: ...
            def __eq__(self, other: object) -> bool: ...
            def __ge__(self, other: object) -> bool: ...
            def __gt__(self, other: object) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> QTouchEvent.TouchPoint.InfoFlag: ...
            def __le__(self, other: object) -> bool: ...
            def __lt__(self, other: object) -> bool: ...
            def __ne__(self, other: object) -> bool: ...
            def __or__(self, other: typing.SupportsInt) -> QTouchEvent.TouchPoint.InfoFlags: ...
            def __rand__(self, other: typing.SupportsInt) -> QTouchEvent.TouchPoint.InfoFlags: ...
            def __ror__(self, other: typing.SupportsInt) -> QTouchEvent.TouchPoint.InfoFlags: ...
            def __rxor__(self, other: typing.SupportsInt) -> QTouchEvent.TouchPoint.InfoFlags: ...
            def __xor__(self, other: typing.SupportsInt) -> QTouchEvent.TouchPoint.InfoFlags: ...
    
        class InfoFlags:
            @classmethod
            def __init__(cls, *args, **kwargs) -> None: ...
            def __and__(self, other: typing.SupportsInt) -> QTouchEvent.TouchPoint.InfoFlags: ...
            def __bool__(self) -> bool: ...
            def __eq__(self, other: object) -> bool: ...
            def __ge__(self, other: object) -> bool: ...
            def __gt__(self, other: object) -> bool: ...
            def __index__(self) -> Any: ...
            def __int__(self) -> int: ...
            def __invert__(self) -> QTouchEvent.TouchPoint.InfoFlags: ...
            def __le__(self, other: object) -> bool: ...
            def __lt__(self, other: object) -> bool: ...
            def __ne__(self, other: object) -> bool: ...
            def __or__(self, other: typing.SupportsInt) -> QTouchEvent.TouchPoint.InfoFlags: ...
            def __rand__(self, other: typing.SupportsInt) -> QTouchEvent.TouchPoint.InfoFlags: ...
            def __ror__(self, other: typing.SupportsInt) -> QTouchEvent.TouchPoint.InfoFlags: ...
            def __rxor__(self, other: typing.SupportsInt) -> QTouchEvent.TouchPoint.InfoFlags: ...
            def __xor__(self, other: typing.SupportsInt) -> QTouchEvent.TouchPoint.InfoFlags: ...
        Pen: ClassVar[QTouchEvent.TouchPoint.InfoFlag] = ...
        Token: ClassVar[QTouchEvent.TouchPoint.InfoFlag] = ...
        @overload
        def __init__(self, id: int = ...) -> None: ...
        @overload
        def __init__(self, other: QTouchEvent.TouchPoint) -> None: ...
        def ellipseDiameters(self) -> PySide2.QtCore.QSizeF: ...
        def flags(self) -> typing.Union[QTouchEvent.TouchPoint.InfoFlags,QTouchEvent.TouchPoint.InfoFlag]: ...
        def id(self) -> int: ...
        def lastNormalizedPos(self) -> PySide2.QtCore.QPointF: ...
        def lastPos(self) -> PySide2.QtCore.QPointF: ...
        def lastScenePos(self) -> PySide2.QtCore.QPointF: ...
        def lastScreenPos(self) -> PySide2.QtCore.QPointF: ...
        def normalizedPos(self) -> PySide2.QtCore.QPointF: ...
        def pos(self) -> PySide2.QtCore.QPointF: ...
        def pressure(self) -> float: ...
        def rawScreenPositions(self) -> typing.List[PySide2.QtCore.QPointF]: ...
        def rect(self) -> PySide2.QtCore.QRectF: ...
        def rotation(self) -> float: ...
        def scenePos(self) -> PySide2.QtCore.QPointF: ...
        def sceneRect(self) -> PySide2.QtCore.QRectF: ...
        def screenPos(self) -> PySide2.QtCore.QPointF: ...
        def screenRect(self) -> PySide2.QtCore.QRectF: ...
        def setEllipseDiameters(self, dia: PySide2.QtCore.QSizeF) -> None: ...
        def setFlags(self, flags: typing.Union[QTouchEvent.TouchPoint.InfoFlags,QTouchEvent.TouchPoint.InfoFlag]) -> None: ...
        def setId(self, id: int) -> None: ...
        def setLastNormalizedPos(self, lastNormalizedPos: PySide2.QtCore.QPointF) -> None: ...
        def setLastPos(self, lastPos: PySide2.QtCore.QPointF) -> None: ...
        def setLastScenePos(self, lastScenePos: PySide2.QtCore.QPointF) -> None: ...
        def setLastScreenPos(self, lastScreenPos: PySide2.QtCore.QPointF) -> None: ...
        def setNormalizedPos(self, normalizedPos: PySide2.QtCore.QPointF) -> None: ...
        def setPos(self, pos: PySide2.QtCore.QPointF) -> None: ...
        def setPressure(self, pressure: float) -> None: ...
        def setRawScreenPositions(self, positions: typing.List[PySide2.QtCore.QPointF]) -> None: ...
        def setRect(self, rect: PySide2.QtCore.QRectF) -> None: ...
        def setRotation(self, angle: float) -> None: ...
        def setScenePos(self, scenePos: PySide2.QtCore.QPointF) -> None: ...
        def setSceneRect(self, sceneRect: PySide2.QtCore.QRectF) -> None: ...
        def setScreenPos(self, screenPos: PySide2.QtCore.QPointF) -> None: ...
        def setScreenRect(self, screenRect: PySide2.QtCore.QRectF) -> None: ...
        def setStartNormalizedPos(self, startNormalizedPos: PySide2.QtCore.QPointF) -> None: ...
        def setStartPos(self, startPos: PySide2.QtCore.QPointF) -> None: ...
        def setStartScenePos(self, startScenePos: PySide2.QtCore.QPointF) -> None: ...
        def setStartScreenPos(self, startScreenPos: PySide2.QtCore.QPointF) -> None: ...
        def setState(self, state: typing.Union[PySide2.QtCore.Qt.TouchPointStates,PySide2.QtCore.Qt.TouchPointState]) -> None: ...
        def setUniqueId(self, uid: int) -> None: ...
        def setVelocity(self, v: QVector2D) -> None: ...
        def startNormalizedPos(self) -> PySide2.QtCore.QPointF: ...
        def startPos(self) -> PySide2.QtCore.QPointF: ...
        def startScenePos(self) -> PySide2.QtCore.QPointF: ...
        def startScreenPos(self) -> PySide2.QtCore.QPointF: ...
        def state(self) -> PySide2.QtCore.Qt.TouchPointState: ...
        def swap(self, other: QTouchEvent.TouchPoint) -> None: ...
        def uniqueId(self) -> QPointingDeviceUniqueId: ...
        def velocity(self) -> QVector2D: ...
        def __copy__(self) -> None: ...
    _target: Any
    def __init__(self, eventType: PySide2.QtCore.QEvent.Type, device: typing.Union[QTouchDevice,None] = ..., modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier] = ..., touchPointStates: typing.Union[PySide2.QtCore.Qt.TouchPointStates,PySide2.QtCore.Qt.TouchPointState] = ..., touchPoints: typing.Sequence[QTouchEvent.TouchPoint] = ...) -> None: ...
    def device(self) -> QTouchDevice: ...
    def setDevice(self, adevice: QTouchDevice) -> None: ...
    def setTarget(self, atarget: PySide2.QtCore.QObject) -> None: ...
    def setTouchPointStates(self, aTouchPointStates: typing.Union[PySide2.QtCore.Qt.TouchPointStates,PySide2.QtCore.Qt.TouchPointState]) -> None: ...
    def setTouchPoints(self, atouchPoints: typing.Sequence[QTouchEvent.TouchPoint]) -> None: ...
    def setWindow(self, awindow: QWindow) -> None: ...
    def target(self) -> PySide2.QtCore.QObject: ...
    def touchPointStates(self) -> typing.Union[PySide2.QtCore.Qt.TouchPointStates,PySide2.QtCore.Qt.TouchPointState]: ...
    def touchPoints(self) -> typing.List[QTouchEvent.TouchPoint]: ...
    def window(self) -> QWindow: ...

class QTransform(shiboken2.Object):
    class TransformationType:
        TxNone: ClassVar[QTransform.TransformationType] = ...
        TxProject: ClassVar[QTransform.TransformationType] = ...
        TxRotate: ClassVar[QTransform.TransformationType] = ...
        TxScale: ClassVar[QTransform.TransformationType] = ...
        TxShear: ClassVar[QTransform.TransformationType] = ...
        TxTranslate: ClassVar[QTransform.TransformationType] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QTransform.TransformationType: ...
        def __and__(self, other: typing.SupportsInt) -> QTransform.TransformationType: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QTransform.TransformationType: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QTransform.TransformationType: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QTransform.TransformationType: ...
        def __rand__(self, other: typing.SupportsInt) -> QTransform.TransformationType: ...
        def __rmul__(self, other: typing.SupportsInt) -> QTransform.TransformationType: ...
        def __ror__(self, other: typing.SupportsInt) -> QTransform.TransformationType: ...
        def __rsub__(self, other: typing.SupportsInt) -> QTransform.TransformationType: ...
        def __rxor__(self, other: typing.SupportsInt) -> QTransform.TransformationType: ...
        def __sub__(self, other: typing.SupportsInt) -> QTransform.TransformationType: ...
        def __xor__(self, other: typing.SupportsInt) -> QTransform.TransformationType: ...
    TxNone: ClassVar[QTransform.TransformationType] = ...
    TxProject: ClassVar[QTransform.TransformationType] = ...
    TxRotate: ClassVar[QTransform.TransformationType] = ...
    TxScale: ClassVar[QTransform.TransformationType] = ...
    TxShear: ClassVar[QTransform.TransformationType] = ...
    TxTranslate: ClassVar[QTransform.TransformationType] = ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, h11: float, h12: float, h13: float, h21: float, h22: float, h23: float, h31: float, h32: float, h33: float = ...) -> None: ...
    @overload
    def __init__(self, h11: float, h12: float, h21: float, h22: float, dx: float, dy: float) -> None: ...
    @overload
    def __init__(self, mtx: QMatrix) -> None: ...
    @overload
    def __init__(self, other: QTransform) -> None: ...
    def adjoint(self) -> QTransform: ...
    def det(self) -> float: ...
    def determinant(self) -> float: ...
    def dx(self) -> float: ...
    def dy(self) -> float: ...
    @classmethod
    def fromScale(cls, dx: float, dy: float) -> QTransform: ...
    @classmethod
    def fromTranslate(cls, dx: float, dy: float) -> QTransform: ...
    def inverted(self) -> typing.Tuple[QTransform,bool]: ...
    def isAffine(self) -> bool: ...
    def isIdentity(self) -> bool: ...
    def isInvertible(self) -> bool: ...
    def isRotating(self) -> bool: ...
    def isScaling(self) -> bool: ...
    def isTranslating(self) -> bool: ...
    def m11(self) -> float: ...
    def m12(self) -> float: ...
    def m13(self) -> float: ...
    def m21(self) -> float: ...
    def m22(self) -> float: ...
    def m23(self) -> float: ...
    def m31(self) -> float: ...
    def m32(self) -> float: ...
    def m33(self) -> float: ...
    @overload
    def map(self, a: QPolygon) -> QPolygon: ...
    @overload
    def map(self, a: QPolygonF) -> QPolygonF: ...
    @overload
    def map(self, l: PySide2.QtCore.QLine) -> PySide2.QtCore.QLine: ...
    @overload
    def map(self, l: PySide2.QtCore.QLineF) -> PySide2.QtCore.QLineF: ...
    @overload
    def map(self, p: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    @overload
    def map(self, p: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    @overload
    def map(self, p: QPainterPath) -> QPainterPath: ...
    @overload
    def map(self, r: QRegion) -> QRegion: ...
    @overload
    def map(self, x: float, y: float) -> typing.Tuple[float,float]: ...
    @overload
    def mapRect(self, arg__1: PySide2.QtCore.QRect) -> PySide2.QtCore.QRect: ...
    @overload
    def mapRect(self, arg__1: PySide2.QtCore.QRectF) -> PySide2.QtCore.QRectF: ...
    def mapToPolygon(self, r: PySide2.QtCore.QRect) -> QPolygon: ...
    @classmethod
    @overload
    def quadToQuad(cls, arg__1: QPolygonF, arg__2: QPolygonF) -> object: ...
    @classmethod
    @overload
    def quadToQuad(cls, one: QPolygonF, two: QPolygonF, result: QTransform) -> bool: ...
    @classmethod
    @overload
    def quadToSquare(cls, arg__1: QPolygonF) -> object: ...
    @classmethod
    @overload
    def quadToSquare(cls, quad: QPolygonF, result: QTransform) -> bool: ...
    def reset(self) -> None: ...
    def rotate(self, a: float, axis: PySide2.QtCore.Qt.Axis = ...) -> QTransform: ...
    def rotateRadians(self, a: float, axis: PySide2.QtCore.Qt.Axis = ...) -> QTransform: ...
    def scale(self, sx: float, sy: float) -> QTransform: ...
    def setMatrix(self, m11: float, m12: float, m13: float, m21: float, m22: float, m23: float, m31: float, m32: float, m33: float) -> None: ...
    def shear(self, sh: float, sv: float) -> QTransform: ...
    @classmethod
    @overload
    def squareToQuad(cls, arg__1: QPolygonF) -> object: ...
    @classmethod
    @overload
    def squareToQuad(cls, square: QPolygonF, result: QTransform) -> bool: ...
    def toAffine(self) -> QMatrix: ...
    def translate(self, dx: float, dy: float) -> QTransform: ...
    def transposed(self) -> QTransform: ...
    def type(self) -> QTransform.TransformationType: ...
    def __add__(self, n: float) -> QTransform: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, div: float) -> QTransform: ...
    @overload
    def __imul__(self, arg__1: QTransform) -> QTransform: ...
    @overload
    def __imul__(self, div: float) -> QTransform: ...
    def __isub__(self, div: float) -> QTransform: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    @overload
    def __mul__(self, l: PySide2.QtCore.QLine) -> PySide2.QtCore.QLine: ...
    @overload
    def __mul__(self, l: PySide2.QtCore.QLineF) -> PySide2.QtCore.QLineF: ...
    @overload
    def __mul__(self, n: float) -> QTransform: ...
    @overload
    def __mul__(self, o: QTransform) -> QTransform: ...
    @overload
    def __mul__(self, p: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    @overload
    def __mul__(self, p: PySide2.QtCore.QPointF) -> PySide2.QtCore.QPointF: ...
    def __ne__(self, other: object) -> bool: ...
    def __radd__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sub__(self, n: float) -> QTransform: ...
    def __truediv__(self, other) -> Any: ...

class QValidator(PySide2.QtCore.QObject):
    class State:
        Acceptable: ClassVar[QValidator.State] = ...
        Intermediate: ClassVar[QValidator.State] = ...
        Invalid: ClassVar[QValidator.State] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QValidator.State: ...
        def __and__(self, other: typing.SupportsInt) -> QValidator.State: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QValidator.State: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QValidator.State: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QValidator.State: ...
        def __rand__(self, other: typing.SupportsInt) -> QValidator.State: ...
        def __rmul__(self, other: typing.SupportsInt) -> QValidator.State: ...
        def __ror__(self, other: typing.SupportsInt) -> QValidator.State: ...
        def __rsub__(self, other: typing.SupportsInt) -> QValidator.State: ...
        def __rxor__(self, other: typing.SupportsInt) -> QValidator.State: ...
        def __sub__(self, other: typing.SupportsInt) -> QValidator.State: ...
        def __xor__(self, other: typing.SupportsInt) -> QValidator.State: ...
    Acceptable: ClassVar[QValidator.State] = ...
    Intermediate: ClassVar[QValidator.State] = ...
    Invalid: ClassVar[QValidator.State] = ...
    changed: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    def __init__(self, parent: typing.Union[PySide2.QtCore.QObject,None] = ..., destroyed: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ...) -> None: ...
    def fixup(self, arg__1: str) -> None: ...
    def locale(self) -> PySide2.QtCore.QLocale: ...
    def setLocale(self, locale: PySide2.QtCore.QLocale) -> None: ...
    def validate(self, arg__1: str, arg__2: int) -> QValidator.State: ...

class QVector2D(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, point: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def __init__(self, point: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def __init__(self, vector: QVector3D) -> None: ...
    @overload
    def __init__(self, vector: QVector4D) -> None: ...
    @overload
    def __init__(self, xpos: float, ypos: float) -> None: ...
    def distanceToLine(self, point: QVector2D, direction: QVector2D) -> float: ...
    def distanceToPoint(self, point: QVector2D) -> float: ...
    @classmethod
    def dotProduct(cls, v1: QVector2D, v2: QVector2D) -> float: ...
    def isNull(self) -> bool: ...
    def length(self) -> float: ...
    def lengthSquared(self) -> float: ...
    def normalize(self) -> None: ...
    def normalized(self) -> QVector2D: ...
    def setX(self, x: float) -> None: ...
    def setY(self, y: float) -> None: ...
    def toPoint(self) -> PySide2.QtCore.QPoint: ...
    def toPointF(self) -> PySide2.QtCore.QPointF: ...
    def toTuple(self) -> object: ...
    def toVector3D(self) -> QVector3D: ...
    def toVector4D(self) -> QVector4D: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def __add__(self, v2: QVector2D) -> QVector2D: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, vector: QVector2D) -> QVector2D: ...
    @overload
    def __imul__(self, factor: float) -> QVector2D: ...
    @overload
    def __imul__(self, vector: QVector2D) -> QVector2D: ...
    def __isub__(self, vector: QVector2D) -> QVector2D: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    @overload
    def __mul__(self, factor: float) -> QVector2D: ...
    @overload
    def __mul__(self, v2: QVector2D) -> QVector2D: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> QVector2D: ...
    def __radd__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sub__(self, v2: QVector2D) -> QVector2D: ...
    def __truediv__(self, other) -> Any: ...

class QVector3D(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, point: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def __init__(self, point: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def __init__(self, vector: QVector2D) -> None: ...
    @overload
    def __init__(self, vector: QVector2D, zpos: float) -> None: ...
    @overload
    def __init__(self, vector: QVector4D) -> None: ...
    @overload
    def __init__(self, xpos: float, ypos: float, zpos: float) -> None: ...
    @classmethod
    def crossProduct(cls, v1: QVector3D, v2: QVector3D) -> QVector3D: ...
    def distanceToLine(self, point: QVector3D, direction: QVector3D) -> float: ...
    @overload
    def distanceToPlane(self, plane1: QVector3D, plane2: QVector3D, plane3: QVector3D) -> float: ...
    @overload
    def distanceToPlane(self, plane: QVector3D, normal: QVector3D) -> float: ...
    def distanceToPoint(self, point: QVector3D) -> float: ...
    @classmethod
    def dotProduct(cls, v1: QVector3D, v2: QVector3D) -> float: ...
    def isNull(self) -> bool: ...
    def length(self) -> float: ...
    def lengthSquared(self) -> float: ...
    @classmethod
    @overload
    def normal(cls, v1: QVector3D, v2: QVector3D) -> QVector3D: ...
    @classmethod
    @overload
    def normal(cls, v1: QVector3D, v2: QVector3D, v3: QVector3D) -> QVector3D: ...
    def normalize(self) -> None: ...
    def normalized(self) -> QVector3D: ...
    def project(self, modelView: QMatrix4x4, projection: QMatrix4x4, viewport: PySide2.QtCore.QRect) -> QVector3D: ...
    def setX(self, x: float) -> None: ...
    def setY(self, y: float) -> None: ...
    def setZ(self, z: float) -> None: ...
    def toPoint(self) -> PySide2.QtCore.QPoint: ...
    def toPointF(self) -> PySide2.QtCore.QPointF: ...
    def toTuple(self) -> object: ...
    def toVector2D(self) -> QVector2D: ...
    def toVector4D(self) -> QVector4D: ...
    def unproject(self, modelView: QMatrix4x4, projection: QMatrix4x4, viewport: PySide2.QtCore.QRect) -> QVector3D: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def z(self) -> float: ...
    def __add__(self, v2: QVector3D) -> QVector3D: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, vector: QVector3D) -> QVector3D: ...
    @overload
    def __imul__(self, factor: float) -> QVector3D: ...
    @overload
    def __imul__(self, vector: QVector3D) -> QVector3D: ...
    def __isub__(self, vector: QVector3D) -> QVector3D: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    @overload
    def __mul__(self, factor: float) -> QVector3D: ...
    @overload
    def __mul__(self, matrix: QMatrix4x4) -> QVector3D: ...
    @overload
    def __mul__(self, quaternion: QQuaternion) -> QVector3D: ...
    @overload
    def __mul__(self, v2: QVector3D) -> QVector3D: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> QVector3D: ...
    def __radd__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sub__(self, v2: QVector3D) -> QVector3D: ...
    def __truediv__(self, other) -> Any: ...

class QVector4D(shiboken2.Object):
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, point: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def __init__(self, point: PySide2.QtCore.QPointF) -> None: ...
    @overload
    def __init__(self, vector: QVector2D) -> None: ...
    @overload
    def __init__(self, vector: QVector2D, zpos: float, wpos: float) -> None: ...
    @overload
    def __init__(self, vector: QVector3D) -> None: ...
    @overload
    def __init__(self, vector: QVector3D, wpos: float) -> None: ...
    @overload
    def __init__(self, xpos: float, ypos: float, zpos: float, wpos: float) -> None: ...
    @classmethod
    def dotProduct(cls, v1: QVector4D, v2: QVector4D) -> float: ...
    def isNull(self) -> bool: ...
    def length(self) -> float: ...
    def lengthSquared(self) -> float: ...
    def normalize(self) -> None: ...
    def normalized(self) -> QVector4D: ...
    def setW(self, w: float) -> None: ...
    def setX(self, x: float) -> None: ...
    def setY(self, y: float) -> None: ...
    def setZ(self, z: float) -> None: ...
    def toPoint(self) -> PySide2.QtCore.QPoint: ...
    def toPointF(self) -> PySide2.QtCore.QPointF: ...
    def toTuple(self) -> object: ...
    def toVector2D(self) -> QVector2D: ...
    def toVector2DAffine(self) -> QVector2D: ...
    def toVector3D(self) -> QVector3D: ...
    def toVector3DAffine(self) -> QVector3D: ...
    def w(self) -> float: ...
    def x(self) -> float: ...
    def y(self) -> float: ...
    def z(self) -> float: ...
    def __add__(self, v2: QVector4D) -> QVector4D: ...
    def __bool__(self) -> bool: ...
    def __copy__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __iadd__(self, vector: QVector4D) -> QVector4D: ...
    @overload
    def __imul__(self, factor: float) -> QVector4D: ...
    @overload
    def __imul__(self, vector: QVector4D) -> QVector4D: ...
    def __isub__(self, vector: QVector4D) -> QVector4D: ...
    def __le__(self, other: object) -> bool: ...
    def __lshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __lt__(self, other: object) -> bool: ...
    @overload
    def __mul__(self, factor: float) -> QVector4D: ...
    @overload
    def __mul__(self, matrix: QMatrix4x4) -> QVector4D: ...
    @overload
    def __mul__(self, v2: QVector4D) -> QVector4D: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> QVector4D: ...
    def __radd__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, arg__1: PySide2.QtCore.QDataStream) -> PySide2.QtCore.QDataStream: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sub__(self, v2: QVector4D) -> QVector4D: ...
    def __truediv__(self, other) -> Any: ...

class QWhatsThisClickedEvent(PySide2.QtCore.QEvent):
    def __init__(self, href: str) -> None: ...
    def href(self) -> str: ...

class QWheelEvent(QInputEvent):
    _unused_: Any
    angleD: Any
    invertedScrolling: Any
    ph: Any
    pixelD: Any
    qt4D: Any
    qt4O: Any
    reserved: Any
    src: Any
    @overload
    def __init__(self, pos: PySide2.QtCore.QPointF, delta: int, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton], modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier], orient: PySide2.QtCore.Qt.Orientation = ...) -> None: ...
    @overload
    def __init__(self, pos: PySide2.QtCore.QPointF, globalPos: PySide2.QtCore.QPointF, delta: int, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton], modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier], orient: PySide2.QtCore.Qt.Orientation = ...) -> None: ...
    @overload
    def __init__(self, pos: PySide2.QtCore.QPointF, globalPos: PySide2.QtCore.QPointF, pixelDelta: PySide2.QtCore.QPoint, angleDelta: PySide2.QtCore.QPoint, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton], modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier], phase: PySide2.QtCore.Qt.ScrollPhase, inverted: bool, source: PySide2.QtCore.Qt.MouseEventSource = ...) -> None: ...
    @overload
    def __init__(self, pos: PySide2.QtCore.QPointF, globalPos: PySide2.QtCore.QPointF, pixelDelta: PySide2.QtCore.QPoint, angleDelta: PySide2.QtCore.QPoint, qt4Delta: int, qt4Orientation: PySide2.QtCore.Qt.Orientation, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton], modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier]) -> None: ...
    @overload
    def __init__(self, pos: PySide2.QtCore.QPointF, globalPos: PySide2.QtCore.QPointF, pixelDelta: PySide2.QtCore.QPoint, angleDelta: PySide2.QtCore.QPoint, qt4Delta: int, qt4Orientation: PySide2.QtCore.Qt.Orientation, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton], modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier], phase: PySide2.QtCore.Qt.ScrollPhase) -> None: ...
    @overload
    def __init__(self, pos: PySide2.QtCore.QPointF, globalPos: PySide2.QtCore.QPointF, pixelDelta: PySide2.QtCore.QPoint, angleDelta: PySide2.QtCore.QPoint, qt4Delta: int, qt4Orientation: PySide2.QtCore.Qt.Orientation, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton], modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier], phase: PySide2.QtCore.Qt.ScrollPhase, source: PySide2.QtCore.Qt.MouseEventSource) -> None: ...
    @overload
    def __init__(self, pos: PySide2.QtCore.QPointF, globalPos: PySide2.QtCore.QPointF, pixelDelta: PySide2.QtCore.QPoint, angleDelta: PySide2.QtCore.QPoint, qt4Delta: int, qt4Orientation: PySide2.QtCore.Qt.Orientation, buttons: typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton], modifiers: typing.Union[PySide2.QtCore.Qt.KeyboardModifiers,PySide2.QtCore.Qt.KeyboardModifier], phase: PySide2.QtCore.Qt.ScrollPhase, source: PySide2.QtCore.Qt.MouseEventSource, inverted: bool) -> None: ...
    def angleDelta(self) -> PySide2.QtCore.QPoint: ...
    def buttons(self) -> typing.Union[PySide2.QtCore.Qt.MouseButtons,PySide2.QtCore.Qt.MouseButton]: ...
    def delta(self) -> int: ...
    def globalPos(self) -> PySide2.QtCore.QPoint: ...
    def globalPosF(self) -> PySide2.QtCore.QPointF: ...
    def globalPosition(self) -> PySide2.QtCore.QPointF: ...
    def globalX(self) -> int: ...
    def globalY(self) -> int: ...
    def inverted(self) -> bool: ...
    def orientation(self) -> PySide2.QtCore.Qt.Orientation: ...
    def phase(self) -> PySide2.QtCore.Qt.ScrollPhase: ...
    def pixelDelta(self) -> PySide2.QtCore.QPoint: ...
    def pos(self) -> PySide2.QtCore.QPoint: ...
    def posF(self) -> PySide2.QtCore.QPointF: ...
    def position(self) -> PySide2.QtCore.QPointF: ...
    def source(self) -> PySide2.QtCore.Qt.MouseEventSource: ...
    def x(self) -> int: ...
    def y(self) -> int: ...

class QWindow(PySide2.QtCore.QObject, QSurface):
    class AncestorMode:
        ExcludeTransients: ClassVar[QWindow.AncestorMode] = ...
        IncludeTransients: ClassVar[QWindow.AncestorMode] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWindow.AncestorMode: ...
        def __and__(self, other: typing.SupportsInt) -> QWindow.AncestorMode: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWindow.AncestorMode: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWindow.AncestorMode: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWindow.AncestorMode: ...
        def __rand__(self, other: typing.SupportsInt) -> QWindow.AncestorMode: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWindow.AncestorMode: ...
        def __ror__(self, other: typing.SupportsInt) -> QWindow.AncestorMode: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWindow.AncestorMode: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWindow.AncestorMode: ...
        def __sub__(self, other: typing.SupportsInt) -> QWindow.AncestorMode: ...
        def __xor__(self, other: typing.SupportsInt) -> QWindow.AncestorMode: ...

    class Visibility:
        AutomaticVisibility: ClassVar[QWindow.Visibility] = ...
        FullScreen: ClassVar[QWindow.Visibility] = ...
        Hidden: ClassVar[QWindow.Visibility] = ...
        Maximized: ClassVar[QWindow.Visibility] = ...
        Minimized: ClassVar[QWindow.Visibility] = ...
        Windowed: ClassVar[QWindow.Visibility] = ...
        values: ClassVar[dict] = ...
        name: Any
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        def __add__(self, other: typing.SupportsInt) -> QWindow.Visibility: ...
        def __and__(self, other: typing.SupportsInt) -> QWindow.Visibility: ...
        def __bool__(self) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, other: object) -> bool: ...
        def __gt__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> int: ...
        def __le__(self, other: object) -> bool: ...
        def __lt__(self, other: object) -> bool: ...
        def __mul__(self, other: typing.SupportsInt) -> QWindow.Visibility: ...
        def __ne__(self, other: object) -> bool: ...
        def __or__(self, other: typing.SupportsInt) -> QWindow.Visibility: ...
        def __pos__(self) -> Any: ...
        def __radd__(self, other: typing.SupportsInt) -> QWindow.Visibility: ...
        def __rand__(self, other: typing.SupportsInt) -> QWindow.Visibility: ...
        def __rmul__(self, other: typing.SupportsInt) -> QWindow.Visibility: ...
        def __ror__(self, other: typing.SupportsInt) -> QWindow.Visibility: ...
        def __rsub__(self, other: typing.SupportsInt) -> QWindow.Visibility: ...
        def __rxor__(self, other: typing.SupportsInt) -> QWindow.Visibility: ...
        def __sub__(self, other: typing.SupportsInt) -> QWindow.Visibility: ...
        def __xor__(self, other: typing.SupportsInt) -> QWindow.Visibility: ...
    AutomaticVisibility: ClassVar[QWindow.Visibility] = ...
    ExcludeTransients: ClassVar[QWindow.AncestorMode] = ...
    FullScreen: ClassVar[QWindow.Visibility] = ...
    Hidden: ClassVar[QWindow.Visibility] = ...
    IncludeTransients: ClassVar[QWindow.AncestorMode] = ...
    Maximized: ClassVar[QWindow.Visibility] = ...
    Minimized: ClassVar[QWindow.Visibility] = ...
    Windowed: ClassVar[QWindow.Visibility] = ...
    activeChanged: ClassVar[PySide2.QtCore.Signal] = ...
    contentOrientationChanged: ClassVar[PySide2.QtCore.Signal] = ...
    focusObjectChanged: ClassVar[PySide2.QtCore.Signal] = ...
    heightChanged: ClassVar[PySide2.QtCore.Signal] = ...
    maximumHeightChanged: ClassVar[PySide2.QtCore.Signal] = ...
    maximumWidthChanged: ClassVar[PySide2.QtCore.Signal] = ...
    minimumHeightChanged: ClassVar[PySide2.QtCore.Signal] = ...
    minimumWidthChanged: ClassVar[PySide2.QtCore.Signal] = ...
    modalityChanged: ClassVar[PySide2.QtCore.Signal] = ...
    opacityChanged: ClassVar[PySide2.QtCore.Signal] = ...
    screenChanged: ClassVar[PySide2.QtCore.Signal] = ...
    staticMetaObject: ClassVar[PySide2.QtCore.QMetaObject] = ...
    transientParentChanged: ClassVar[PySide2.QtCore.Signal] = ...
    visibilityChanged: ClassVar[PySide2.QtCore.Signal] = ...
    visibleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    widthChanged: ClassVar[PySide2.QtCore.Signal] = ...
    windowStateChanged: ClassVar[PySide2.QtCore.Signal] = ...
    windowTitleChanged: ClassVar[PySide2.QtCore.Signal] = ...
    xChanged: ClassVar[PySide2.QtCore.Signal] = ...
    yChanged: ClassVar[PySide2.QtCore.Signal] = ...
    @overload
    def __init__(self, parent: QWindow, active: bool = ..., activeChanged: typing.Callable = ..., contentOrientation: PySide2.QtCore.Qt.ScreenOrientation = ..., contentOrientationChanged: typing.Callable = ..., destroyed: typing.Callable = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., focusObjectChanged: typing.Callable = ..., height: int = ..., heightChanged: typing.Callable = ..., maximumHeight: int = ..., maximumHeightChanged: typing.Callable = ..., maximumWidth: int = ..., maximumWidthChanged: typing.Callable = ..., minimumHeight: int = ..., minimumHeightChanged: typing.Callable = ..., minimumWidth: int = ..., minimumWidthChanged: typing.Callable = ..., modality: PySide2.QtCore.Qt.WindowModality = ..., modalityChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., screenChanged: typing.Callable = ..., title: str = ..., transientParent: QWindow = ..., transientParentChanged: typing.Callable = ..., visibility: QWindow.Visibility = ..., visibilityChanged: typing.Callable = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., width: int = ..., widthChanged: typing.Callable = ..., windowStateChanged: typing.Callable = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., xChanged: typing.Callable = ..., y: int = ..., yChanged: typing.Callable = ...) -> None: ...
    @overload
    def __init__(self, screen: typing.Union[QScreen,None] = ..., active: bool = ..., activeChanged: typing.Callable = ..., contentOrientation: PySide2.QtCore.Qt.ScreenOrientation = ..., contentOrientationChanged: typing.Callable = ..., destroyed: typing.Callable = ..., flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType] = ..., focusObjectChanged: typing.Callable = ..., height: int = ..., heightChanged: typing.Callable = ..., maximumHeight: int = ..., maximumHeightChanged: typing.Callable = ..., maximumWidth: int = ..., maximumWidthChanged: typing.Callable = ..., minimumHeight: int = ..., minimumHeightChanged: typing.Callable = ..., minimumWidth: int = ..., minimumWidthChanged: typing.Callable = ..., modality: PySide2.QtCore.Qt.WindowModality = ..., modalityChanged: typing.Callable = ..., objectName: str = ..., objectNameChanged: typing.Callable = ..., opacity: float = ..., opacityChanged: typing.Callable = ..., screenChanged: typing.Callable = ..., title: str = ..., transientParent: QWindow = ..., transientParentChanged: typing.Callable = ..., visibility: QWindow.Visibility = ..., visibilityChanged: typing.Callable = ..., visible: bool = ..., visibleChanged: typing.Callable = ..., width: int = ..., widthChanged: typing.Callable = ..., windowStateChanged: typing.Callable = ..., windowTitleChanged: typing.Callable = ..., x: int = ..., xChanged: typing.Callable = ..., y: int = ..., yChanged: typing.Callable = ...) -> None: ...
    def accessibleRoot(self) -> QAccessibleInterface: ...
    def alert(self, msec: int) -> None: ...
    def baseSize(self) -> PySide2.QtCore.QSize: ...
    def close(self) -> bool: ...
    def contentOrientation(self) -> PySide2.QtCore.Qt.ScreenOrientation: ...
    def create(self) -> None: ...
    def cursor(self) -> QCursor: ...
    def destroy(self) -> None: ...
    def devicePixelRatio(self) -> float: ...
    def event(self, arg__1: PySide2.QtCore.QEvent) -> bool: ...
    def exposeEvent(self, arg__1: QExposeEvent) -> None: ...
    def filePath(self) -> str: ...
    def flags(self) -> typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType]: ...
    def focusInEvent(self, arg__1: QFocusEvent) -> None: ...
    def focusObject(self) -> PySide2.QtCore.QObject: ...
    def focusOutEvent(self, arg__1: QFocusEvent) -> None: ...
    def format(self) -> QSurfaceFormat: ...
    def frameGeometry(self) -> PySide2.QtCore.QRect: ...
    def frameMargins(self) -> PySide2.QtCore.QMargins: ...
    def framePosition(self) -> PySide2.QtCore.QPoint: ...
    @classmethod
    def fromWinId(cls, id: int) -> QWindow: ...
    def geometry(self) -> PySide2.QtCore.QRect: ...
    def height(self) -> int: ...
    def hide(self) -> None: ...
    def hideEvent(self, arg__1: QHideEvent) -> None: ...
    def icon(self) -> QIcon: ...
    def isActive(self) -> bool: ...
    def isAncestorOf(self, child: QWindow, mode: QWindow.AncestorMode = ...) -> bool: ...
    def isExposed(self) -> bool: ...
    def isModal(self) -> bool: ...
    def isTopLevel(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def keyPressEvent(self, arg__1: QKeyEvent) -> None: ...
    def keyReleaseEvent(self, arg__1: QKeyEvent) -> None: ...
    def lower(self) -> None: ...
    def mapFromGlobal(self, pos: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    def mapToGlobal(self, pos: PySide2.QtCore.QPoint) -> PySide2.QtCore.QPoint: ...
    def mask(self) -> QRegion: ...
    def maximumHeight(self) -> int: ...
    def maximumSize(self) -> PySide2.QtCore.QSize: ...
    def maximumWidth(self) -> int: ...
    def minimumHeight(self) -> int: ...
    def minimumSize(self) -> PySide2.QtCore.QSize: ...
    def minimumWidth(self) -> int: ...
    def modality(self) -> PySide2.QtCore.Qt.WindowModality: ...
    def mouseDoubleClickEvent(self, arg__1: QMouseEvent) -> None: ...
    def mouseMoveEvent(self, arg__1: QMouseEvent) -> None: ...
    def mousePressEvent(self, arg__1: QMouseEvent) -> None: ...
    def mouseReleaseEvent(self, arg__1: QMouseEvent) -> None: ...
    def moveEvent(self, arg__1: QMoveEvent) -> None: ...
    def nativeEvent(self, eventType: typing.Union[PySide2.QtCore.QByteArray,bytes], message: int) -> typing.Tuple[bool,int]: ...
    def opacity(self) -> float: ...
    @overload
    def parent(self) -> QWindow: ...
    @overload
    def parent(self, mode: QWindow.AncestorMode) -> QWindow: ...
    def position(self) -> PySide2.QtCore.QPoint: ...
    def raise_(self) -> None: ...
    def reportContentOrientationChange(self, orientation: PySide2.QtCore.Qt.ScreenOrientation) -> None: ...
    def requestActivate(self) -> None: ...
    def requestUpdate(self) -> None: ...
    def requestedFormat(self) -> QSurfaceFormat: ...
    @overload
    def resize(self, newSize: PySide2.QtCore.QSize) -> None: ...
    @overload
    def resize(self, w: int, h: int) -> None: ...
    def resizeEvent(self, arg__1: QResizeEvent) -> None: ...
    def screen(self) -> QScreen: ...
    def setBaseSize(self, size: PySide2.QtCore.QSize) -> None: ...
    def setCursor(self, arg__1: QCursor) -> None: ...
    def setFilePath(self, filePath: str) -> None: ...
    def setFlag(self, arg__1: PySide2.QtCore.Qt.WindowType, on: bool = ...) -> None: ...
    def setFlags(self, flags: typing.Union[PySide2.QtCore.Qt.WindowFlags,PySide2.QtCore.Qt.WindowType]) -> None: ...
    def setFormat(self, format: QSurfaceFormat) -> None: ...
    def setFramePosition(self, point: PySide2.QtCore.QPoint) -> None: ...
    @overload
    def setGeometry(self, posx: int, posy: int, w: int, h: int) -> None: ...
    @overload
    def setGeometry(self, rect: PySide2.QtCore.QRect) -> None: ...
    def setHeight(self, arg: int) -> None: ...
    def setIcon(self, icon: QIcon) -> None: ...
    def setKeyboardGrabEnabled(self, grab: bool) -> bool: ...
    def setMask(self, region: QRegion) -> None: ...
    def setMaximumHeight(self, h: int) -> None: ...
    def setMaximumSize(self, size: PySide2.QtCore.QSize) -> None: ...
    def setMaximumWidth(self, w: int) -> None: ...
    def setMinimumHeight(self, h: int) -> None: ...
    def setMinimumSize(self, size: PySide2.QtCore.QSize) -> None: ...
    def setMinimumWidth(self, w: int) -> None: ...
    def setModality(self, modality: PySide2.QtCore.Qt.WindowModality) -> None: ...
    def setMouseGrabEnabled(self, grab: bool) -> bool: ...
    def setOpacity(self, level: float) -> None: ...
    @overload
    def setParent(self, parent: typing.Optional[PySide2.QtCore.QObject]) -> None: ...
    @overload
    def setParent(self, parent: QWindow) -> None: ...
    @overload
    def setPosition(self, posx: int, posy: int) -> None: ...
    @overload
    def setPosition(self, pt: PySide2.QtCore.QPoint) -> None: ...
    def setScreen(self, screen: QScreen) -> None: ...
    def setSizeIncrement(self, size: PySide2.QtCore.QSize) -> None: ...
    def setSurfaceType(self, surfaceType: QSurface.SurfaceType) -> None: ...
    def setTitle(self, arg__1: str) -> None: ...
    def setTransientParent(self, parent: QWindow) -> None: ...
    def setVisibility(self, v: QWindow.Visibility) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def setWidth(self, arg: int) -> None: ...
    def setWindowState(self, state: PySide2.QtCore.Qt.WindowState) -> None: ...
    def setWindowStates(self, states: typing.Union[PySide2.QtCore.Qt.WindowStates,PySide2.QtCore.Qt.WindowState]) -> None: ...
    def setX(self, arg: int) -> None: ...
    def setY(self, arg: int) -> None: ...
    def show(self) -> None: ...
    def showEvent(self, arg__1: QShowEvent) -> None: ...
    def showFullScreen(self) -> None: ...
    def showMaximized(self) -> None: ...
    def showMinimized(self) -> None: ...
    def showNormal(self) -> None: ...
    def size(self) -> PySide2.QtCore.QSize: ...
    def sizeIncrement(self) -> PySide2.QtCore.QSize: ...
    def startSystemMove(self) -> bool: ...
    def startSystemResize(self, edges: typing.Union[PySide2.QtCore.Qt.Edges,PySide2.QtCore.Qt.Edge]) -> bool: ...
    def surfaceHandle(self) -> int: ...
    def surfaceType(self) -> QSurface.SurfaceType: ...
    def tabletEvent(self, arg__1: QTabletEvent) -> None: ...
    def title(self) -> str: ...
    def touchEvent(self, arg__1: QTouchEvent) -> None: ...
    def transientParent(self) -> QWindow: ...
    def type(self) -> PySide2.QtCore.Qt.WindowType: ...
    def unsetCursor(self) -> None: ...
    def visibility(self) -> QWindow.Visibility: ...
    def wheelEvent(self, arg__1: QWheelEvent) -> None: ...
    def width(self) -> int: ...
    def winId(self) -> int: ...
    def windowState(self) -> PySide2.QtCore.Qt.WindowState: ...
    def windowStates(self) -> typing.Union[PySide2.QtCore.Qt.WindowStates,PySide2.QtCore.Qt.WindowState]: ...
    def x(self) -> int: ...
    def y(self) -> int: ...

class QWindowStateChangeEvent(PySide2.QtCore.QEvent):
    def __init__(self, aOldState: typing.Union[PySide2.QtCore.Qt.WindowStates,PySide2.QtCore.Qt.WindowState], isOverride: bool = ...) -> None: ...
    def isOverride(self) -> bool: ...
    def oldState(self) -> typing.Union[PySide2.QtCore.Qt.WindowStates,PySide2.QtCore.Qt.WindowState]: ...

class Qt(PySide2.QtCore.Qt):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def codecForHtml(cls, ba: typing.Union[PySide2.QtCore.QByteArray,bytes]) -> PySide2.QtCore.QTextCodec: ...
    @classmethod
    def convertFromPlainText(cls, plain: str, mode: PySide2.QtCore.Qt.WhiteSpaceMode = ...) -> str: ...
    @classmethod
    def mightBeRichText(cls, arg__1: str) -> bool: ...

def qAlpha(rgb: int) -> int: ...
def qBlue(rgb: int) -> int: ...
@overload
def qGray(r: int, g: int, b: int) -> int: ...
@overload
def qGray(rgb: int) -> int: ...
def qGreen(rgb: int) -> int: ...
def qIsGray(rgb: int) -> bool: ...
def qRed(rgb: int) -> int: ...
def qRgb(r: int, g: int, b: int) -> int: ...
def qRgba(r: int, g: int, b: int, a: int) -> int: ...
